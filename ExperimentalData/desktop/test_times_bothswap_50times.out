git/rebase detect conflicts returns a value indicating conflicts were encountered,0.318,git/rebase,21,7.622
git/rebase detect conflicts status detects REBASE_HEAD,0.262,git/rebase,21,7.622
git/rebase detect conflicts has conflicted files in working directory,0.26,git/rebase,21,7.622
git/rebase detect conflicts is a detached HEAD state,0.275,git/rebase,21,7.622
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.26,git/rebase,21,7.622
git/rebase abort after conflicts found no longer has working directory changes,0.261,git/rebase,21,7.622
git/rebase abort after conflicts found returns to the feature branch,0.253,git/rebase,21,7.622
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.335,git/rebase,21,7.622
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.32,git/rebase,21,7.622
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.318,git/rebase,21,7.622
git/rebase continue after resolving conflicts returns success,0.377,git/rebase,21,7.622
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.377,git/rebase,21,7.622
git/rebase continue after resolving conflicts no longer has working directory changes,0.377,git/rebase,21,7.622
git/rebase continue after resolving conflicts returns to the feature branch,0.39,git/rebase,21,7.622
git/rebase continue after resolving conflicts branch is now a different ref,0.386,git/rebase,21,7.622
git/rebase continue with additional changes unrelated to conflicted files returns success,0.389,git/rebase,21,7.622
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.389,git/rebase,21,7.622
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.388,git/rebase,21,7.622
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.399,git/rebase,21,7.622
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.403,git/rebase,21,7.622
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.375,git/rebase,21,7.622
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.631
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.631
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.631
git/commit createCommit normal can commit renames,0.156,git/commit,21,4.631
git/commit createCommit partials can commit some lines from new file,0.187,git/commit,21,4.631
git/commit createCommit partials can commit second hunk from modified file,0.2,git/commit,21,4.631
git/commit createCommit partials can commit single delete from modified file,0.179,git/commit,21,4.631
git/commit createCommit partials can commit multiple hunks from modified file,0.206,git/commit,21,4.631
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.631
git/commit createCommit partials can commit renames with modifications,0.2,git/commit,21,4.631
git/commit createCommit partials can commit renames with partially selected modifications,0.241,git/commit,21,4.631
git/commit createCommit with a merge conflict creates a merge commit,0.267,git/commit,21,4.631
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.241,git/commit,21,4.631
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.341,git/commit,21,4.631
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.337,git/commit,21,4.631
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.412,git/commit,21,4.631
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.41,git/commit,21,4.631
git/commit createMergeCommit with no changes throws an error,0.117,git/commit,21,4.631
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.631
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.177,git/commit,21,4.631
git/commit index corner cases file is deleted in index,0.182,git/commit,21,4.631
git/rebase can parse progress returns a value indicating conflicts were encountered,0.407,git/rebase,7,3.857
git/rebase can parse progress status detects REBASE_HEAD,0.406,git/rebase,7,3.857
git/rebase can parse progress is a detached HEAD state,0.404,git/rebase,7,3.857
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.862,git/rebase,7,3.857
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.868,git/rebase,7,3.857
git/rebase can parse progress for long rebase is a detached HEAD state,0.849,git/rebase,7,3.857
GitStore loadCommitBatch includes HEAD when loading commits,0.398,GitStore,11,2.6
GitStore can discard changes from a repository,0.169,GitStore,11,2.6
GitStore can discard a renamed file,0.156,GitStore,11,2.6
GitStore undo first commit reports the repository is unborn,0.193,GitStore,11,2.6
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.6
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.6
GitStore undo first commit has no staged files,0.21,GitStore,11,2.6
GitStore repository with HEAD file can discard modified change cleanly,0.114,GitStore,11,2.6
BranchPruner does nothing on non GitHub repositories,0.262,BranchPruner,6,1.981
BranchPruner prunes for GitHub repository,0.332,BranchPruner,6,1.981
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.274,BranchPruner,6,1.981
BranchPruner does not prune if there is no default branch,0.247,BranchPruner,6,1.981
BranchPruner does not prune reserved branches,0.318,BranchPruner,6,1.981
git/status getStatus with conflicted repo parses conflicted files with markers,0.316,git/status,12,2.018
git/status getStatus with conflicted repo parses conflicted files without markers,0.328,git/status,12,2.018
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.461,git/status,12,2.018
git/status getStatus with conflicted repo parses resolved files,0.238,git/status,12,2.018
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.108,git/status,12,2.018
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.132,git/status,12,2.018
git/status getStatus with unconflicted repo parses changed files,0.064,git/status,12,2.018
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.018
git/status getStatus with unconflicted repo reflects renames,0.099,git/status,12,2.018
git/status getStatus with unconflicted repo reflects copies,0.109,git/status,12,2.018
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.018
git/branch tip returns unborn for new repository,0.024,git/branch,13,1.405
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,13,1.405
git/branch tip returns detached for arbitrary checkout,0.055,git/branch,13,1.405
git/branch tip returns current branch when on a valid HEAD,0.075,git/branch,13,1.405
git/branch tip returns non-origin remote,0.08,git/branch,13,1.405
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,13,1.405
git/branch getBranchesPointedAt in a local repo finds one branch name,0.055,git/branch,13,1.405
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.405
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.048,git/branch,13,1.405
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.082,git/branch,13,1.405
git/branch deleteBranch deletes local branches,0.122,git/branch,13,1.405
git/branch deleteBranch deletes remote branches,0.291,git/branch,13,1.405
git/branch deleteBranch handles attempted delete of removed remote branch,0.339,git/branch,13,1.405
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.05,git/diff,19,1.889
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,1.889
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,1.889
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,1.889
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.889
git/diff imageDiff changes for text are not set,0.141,git/diff,19,1.889
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,1.889
git/diff getWorkingDirectoryDiff counts lines for modified file,0.091,git/diff,19,1.889
git/diff getWorkingDirectoryDiff counts lines for staged file,0.095,git/diff,19,1.889
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,1.889
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.154,git/diff,19,1.889
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.162,git/diff,19,1.889
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.128,git/diff,19,1.889
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.126,git/diff,19,1.889
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.083,git/diff,19,1.889
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.061,git/diff,19,1.889
git/diff getBinaryPaths in repo with text only files returns an empty array,0.084,git/diff,19,1.889
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.093,git/diff,19,1.889
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.108,git/diff,19,1.889
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.104,git/stash,14,1.275
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.129,git/stash,14,1.275
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.093,git/stash,14,1.275
git/checkout can checkout a valid branch name in an existing repository,0.113,git/checkout,6,1.016
git/checkout can checkout a branch when it exists on multiple remotes,0.125,git/checkout,6,1.016
git/checkout will fail when an existing branch matches the remote branch,0.12,git/checkout,6,1.016
git/checkout with submodules cleans up an submodule that no longer exists,0.324,git/checkout,6,1.016
git/checkout with submodules updates a changed submodule reference,0.264,git/checkout,6,1.016
git/reflog getRecentBranches returns the recently checked out branches,0.146,git/reflog,6,1.076
git/reflog getRecentBranches works after renaming a branch,0.193,git/reflog,6,1.076
git/reflog getRecentBranches returns a limited number of branches,0.254,git/reflog,6,1.076
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.157,git/reflog,6,1.076
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.212,git/reflog,6,1.076
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.076
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.433,formatPatch,5,1.091
git/submodule listSubmodules returns the submodule entry,0.14,git/submodule,3,0.782
git/submodule listSubmodules returns the expected tag,0.19,git/submodule,3,0.782
git/submodule resetSubmodulePaths update submodule to original commit,0.412,git/submodule,3,0.782
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.685
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.685
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.685
gitignore appendIgnoreRule appends multiple rules,0.133,gitignore,9,0.685
git/config config looks up config values,0.055,git/config,12,0.884
git/config config returns null for undefined values,0.055,git/config,12,0.884
git/config global config getGlobalConfigPath gets the config path,0.071,git/config,12,0.884
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.073,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.071,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.07,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.076,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.884
Update remote url updates the repository's remote url when the github url changes,0.109,Update remote url,4,0.411
Update remote url doesn't update the repository's remote url when the github url is the same,0.088,Update remote url,4,0.411
Update remote url doesn't update repository's remote url if protocols don't match,0.083,Update remote url,4,0.411
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.079,Update remote url,4,0.411
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.578
git-lfs isUsingLFS returns true if LFS is tracking a path,0.086,git-lfs,9,0.578
git/merge merge and is successful returns true,0.048,git/merge,7,0.645
git/merge merge and is a noop returns false,0.063,git/merge,7,0.645
git/merge getMergeBase returns the common ancestor of two branches,0.081,git/merge,7,0.645
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.825
git/rev-parse isGitRepository should return false for a directory,0.061,git/rev-parse,10,0.825
git/rev-parse isBareRepository returns false for default initialized repository,0.071,git/rev-parse,10,0.825
git/rev-parse isBareRepository returns true for initialized bare repository,0.074,git/rev-parse,10,0.825
git/rev-parse isBareRepository returns false for empty directory,0.059,git/rev-parse,10,0.825
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.825
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.072,git/rev-parse,10,0.825
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.059,git/rev-parse,10,0.825
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.057,git/rev-parse,10,0.825
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.221,git/rev-parse,10,0.825
git/log getCommits loads history,0.07,git/log,7,0.7
git/log getCommits handles repository with HEAD file on disk,0.106,git/log,7,0.7
git/log getCommits handles repository with signed commit and log.showSignature set,0.126,git/log,7,0.7
git/log getChangedFiles loads the files changed in the commit,0.062,git/log,7,0.7
git/log getChangedFiles detects renames,0.108,git/log,7,0.7
git/log getChangedFiles detect copies,0.118,git/log,7,0.7
git/log getChangedFiles handles commit when HEAD exists on disk,0.068,git/log,7,0.7
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.651
git/remote findDefaultRemote returns origin when multiple remotes found,0.068,git/remote,11,0.651
git/remote findDefaultRemote returns something when origin removed,0.077,git/remote,11,0.651
git/for-each-ref getBranches fetches branches using for-each-ref,0.079,git/for-each-ref,3,0.262
git/for-each-ref getBranches should return empty list for empty repo,0.076,git/for-each-ref,3,0.262
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.065,git/for-each-ref,3,0.262
AppStore can select a repository,0.238,AppStore,5,0.295
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.29,patch formatting,8,0.638
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.054,patch formatting,8,0.638
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.638
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.055,patch formatting,8,0.638
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.04,patch formatting,8,0.638
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.638
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.638
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.033,patch formatting,8,0.638
git/core error handling does not throw for errors that were expected,0.064,git/core,6,0.396
git/core error handling throws for errors that were not expected,0.063,git/core,6,0.396
git/core exit code handling does not throw for exit codes that were expected,0.061,git/core,6,0.396
git/core exit code handling throws for exit codes that were not expected,0.06,git/core,6,0.396
git/core config lock file error handling can parse lock file path from stderr,0.064,git/core,6,0.396
git/core config lock file error handling normalizes paths,0.047,git/core,6,0.396
git/reset reset can hard reset a repository,0.082,git/reset,2,0.121
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.02,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.307,git/rebase,21,7.7
git/rebase detect conflicts status detects REBASE_HEAD,0.276,git/rebase,21,7.7
git/rebase detect conflicts has conflicted files in working directory,0.266,git/rebase,21,7.7
git/rebase detect conflicts is a detached HEAD state,0.27,git/rebase,21,7.7
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.259,git/rebase,21,7.7
git/rebase abort after conflicts found no longer has working directory changes,0.257,git/rebase,21,7.7
git/rebase abort after conflicts found returns to the feature branch,0.262,git/rebase,21,7.7
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.335,git/rebase,21,7.7
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.324,git/rebase,21,7.7
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.327,git/rebase,21,7.7
git/rebase continue after resolving conflicts returns success,0.381,git/rebase,21,7.7
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.382,git/rebase,21,7.7
git/rebase continue after resolving conflicts no longer has working directory changes,0.379,git/rebase,21,7.7
git/rebase continue after resolving conflicts returns to the feature branch,0.396,git/rebase,21,7.7
git/rebase continue after resolving conflicts branch is now a different ref,0.392,git/rebase,21,7.7
git/rebase continue with additional changes unrelated to conflicted files returns success,0.393,git/rebase,21,7.7
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.394,git/rebase,21,7.7
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.396,git/rebase,21,7.7
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.401,git/rebase,21,7.7
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.411,git/rebase,21,7.7
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.383,git/rebase,21,7.7
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.637
git/commit createCommit normal commit does not strip commentary by default,0.106,git/commit,21,4.637
git/commit createCommit normal can commit for empty repository,0.134,git/commit,21,4.637
git/commit createCommit normal can commit renames,0.154,git/commit,21,4.637
git/commit createCommit partials can commit some lines from new file,0.198,git/commit,21,4.637
git/commit createCommit partials can commit second hunk from modified file,0.201,git/commit,21,4.637
git/commit createCommit partials can commit single delete from modified file,0.179,git/commit,21,4.637
git/commit createCommit partials can commit multiple hunks from modified file,0.198,git/commit,21,4.637
git/commit createCommit partials can commit some lines from deleted file,0.184,git/commit,21,4.637
git/commit createCommit partials can commit renames with modifications,0.191,git/commit,21,4.637
git/commit createCommit partials can commit renames with partially selected modifications,0.24,git/commit,21,4.637
git/commit createCommit with a merge conflict creates a merge commit,0.264,git/commit,21,4.637
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.244,git/commit,21,4.637
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.348,git/commit,21,4.637
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.338,git/commit,21,4.637
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.415,git/commit,21,4.637
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.42,git/commit,21,4.637
git/commit createMergeCommit with no changes throws an error,0.111,git/commit,21,4.637
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.637
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.184,git/commit,21,4.637
git/commit index corner cases file is deleted in index,0.185,git/commit,21,4.637
git/rebase can parse progress returns a value indicating conflicts were encountered,0.415,git/rebase,7,3.847
git/rebase can parse progress status detects REBASE_HEAD,0.406,git/rebase,7,3.847
git/rebase can parse progress is a detached HEAD state,0.415,git/rebase,7,3.847
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.841,git/rebase,7,3.847
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.846,git/rebase,7,3.847
git/rebase can parse progress for long rebase is a detached HEAD state,0.863,git/rebase,7,3.847
GitStore loadCommitBatch includes HEAD when loading commits,0.376,GitStore,11,2.598
GitStore can discard changes from a repository,0.166,GitStore,11,2.598
GitStore can discard a renamed file,0.152,GitStore,11,2.598
GitStore undo first commit reports the repository is unborn,0.197,GitStore,11,2.598
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.598
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.598
GitStore undo first commit has no staged files,0.211,GitStore,11,2.598
GitStore repository with HEAD file can discard modified change cleanly,0.118,GitStore,11,2.598
git/status getStatus with conflicted repo parses conflicted files with markers,0.347,git/status,12,2.059
git/status getStatus with conflicted repo parses conflicted files without markers,0.305,git/status,12,2.059
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.399,git/status,12,2.059
git/status getStatus with conflicted repo parses resolved files,0.304,git/status,12,2.059
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.12,git/status,12,2.059
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.143,git/status,12,2.059
git/status getStatus with unconflicted repo parses changed files,0.06,git/status,12,2.059
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.059
git/status getStatus with unconflicted repo reflects renames,0.111,git/status,12,2.059
git/status getStatus with unconflicted repo reflects copies,0.104,git/status,12,2.059
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.056,git/status,12,2.059
BranchPruner does nothing on non GitHub repositories,0.273,BranchPruner,6,1.917
BranchPruner prunes for GitHub repository,0.346,BranchPruner,6,1.917
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.278,BranchPruner,6,1.917
BranchPruner does not prune if there is no default branch,0.277,BranchPruner,6,1.917
BranchPruner does not prune reserved branches,0.325,BranchPruner,6,1.917
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,1.843
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.039,git/diff,19,1.843
git/diff getBlobImage retrieves valid image for modified file,0.088,git/diff,19,1.843
git/diff getBlobImage retrieves valid images for deleted file,0.063,git/diff,19,1.843
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.843
git/diff imageDiff changes for text are not set,0.085,git/diff,19,1.843
git/diff getWorkingDirectoryDiff counts lines for new file,0.081,git/diff,19,1.843
git/diff getWorkingDirectoryDiff counts lines for modified file,0.081,git/diff,19,1.843
git/diff getWorkingDirectoryDiff counts lines for staged file,0.084,git/diff,19,1.843
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.121,git/diff,19,1.843
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.15,git/diff,19,1.843
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.843
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.138,git/diff,19,1.843
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.12,git/diff,19,1.843
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.086,git/diff,19,1.843
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.843
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.843
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.105,git/diff,19,1.843
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.117,git/diff,19,1.843
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.528
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.528
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.528
git/branch tip returns current branch when on a valid HEAD,0.086,git/branch,13,1.528
git/branch tip returns non-origin remote,0.084,git/branch,13,1.528
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.528
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.528
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.528
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.528
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.086,git/branch,13,1.528
git/branch deleteBranch deletes local branches,0.132,git/branch,13,1.528
git/branch deleteBranch deletes remote branches,0.329,git/branch,13,1.528
git/branch deleteBranch handles attempted delete of removed remote branch,0.376,git/branch,13,1.528
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.107,git/stash,14,1.348
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.138,git/stash,14,1.348
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.103,git/stash,14,1.348
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.437,formatPatch,5,1.085
git/reflog getRecentBranches returns the recently checked out branches,0.155,git/reflog,6,1.105
git/reflog getRecentBranches works after renaming a branch,0.2,git/reflog,6,1.105
git/reflog getRecentBranches returns a limited number of branches,0.266,git/reflog,6,1.105
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.105
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.204,git/reflog,6,1.105
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.105
git/checkout can checkout a valid branch name in an existing repository,0.127,git/checkout,6,1.035
git/checkout can checkout a branch when it exists on multiple remotes,0.136,git/checkout,6,1.035
git/checkout will fail when an existing branch matches the remote branch,0.124,git/checkout,6,1.035
git/checkout with submodules cleans up an submodule that no longer exists,0.325,git/checkout,6,1.035
git/checkout with submodules updates a changed submodule reference,0.25,git/checkout,6,1.035
git/config config looks up config values,0.05,git/config,12,0.882
git/config config returns null for undefined values,0.05,git/config,12,0.882
git/config global config getGlobalConfigPath gets the config path,0.073,git/config,12,0.882
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.079,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.075,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.882
git/rev-parse isGitRepository should return true for a repository,0.119,git/rev-parse,10,0.899
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.899
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.899
git/rev-parse isBareRepository returns true for initialized bare repository,0.073,git/rev-parse,10,0.899
git/rev-parse isBareRepository returns false for empty directory,0.059,git/rev-parse,10,0.899
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.899
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.899
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.06,git/rev-parse,10,0.899
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.063,git/rev-parse,10,0.899
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.241,git/rev-parse,10,0.899
git/submodule listSubmodules returns the submodule entry,0.133,git/submodule,3,0.781
git/submodule listSubmodules returns the expected tag,0.198,git/submodule,3,0.781
git/submodule resetSubmodulePaths update submodule to original commit,0.406,git/submodule,3,0.781
git/log getCommits loads history,0.068,git/log,7,0.642
git/log getCommits handles repository with HEAD file on disk,0.095,git/log,7,0.642
git/log getCommits handles repository with signed commit and log.showSignature set,0.104,git/log,7,0.642
git/log getChangedFiles loads the files changed in the commit,0.055,git/log,7,0.642
git/log getChangedFiles detects renames,0.105,git/log,7,0.642
git/log getChangedFiles detect copies,0.113,git/log,7,0.642
git/log getChangedFiles handles commit when HEAD exists on disk,0.062,git/log,7,0.642
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.724
gitignore saveGitIgnore applies rule correctly to repository,0.113,gitignore,9,0.724
gitignore appendIgnoreRule appends one rule,0.131,gitignore,9,0.724
gitignore appendIgnoreRule appends multiple rules,0.123,gitignore,9,0.724
git/remote getRemotes should return both remotes,0.052,git/remote,11,0.564
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,11,0.564
git/remote findDefaultRemote returns something when origin removed,0.069,git/remote,11,0.564
git/merge merge and is successful returns true,0.042,git/merge,7,0.595
git/merge merge and is a noop returns false,0.06,git/merge,7,0.595
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.595
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.047,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.365
git-lfs isUsingLFS returns false for repository not using LFS,0.057,git-lfs,9,0.554
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.554
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.416
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.416
Update remote url doesn't update repository's remote url if protocols don't match,0.082,Update remote url,4,0.416
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.416
git/core error handling does not throw for errors that were expected,0.053,git/core,6,0.355
git/core error handling throws for errors that were not expected,0.052,git/core,6,0.355
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.355
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.355
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.355
git/core config lock file error handling normalizes paths,0.041,git/core,6,0.355
AppStore can select a repository,0.231,AppStore,5,0.284
git/for-each-ref getBranches fetches branches using for-each-ref,0.225,git/for-each-ref,3,0.398
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.398
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.398
git/reset reset can hard reset a repository,0.084,git/reset,2,0.121
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.111
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.057
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.316,git/rebase,21,7.715
git/rebase detect conflicts status detects REBASE_HEAD,0.266,git/rebase,21,7.715
git/rebase detect conflicts has conflicted files in working directory,0.268,git/rebase,21,7.715
git/rebase detect conflicts is a detached HEAD state,0.283,git/rebase,21,7.715
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.262,git/rebase,21,7.715
git/rebase abort after conflicts found no longer has working directory changes,0.259,git/rebase,21,7.715
git/rebase abort after conflicts found returns to the feature branch,0.263,git/rebase,21,7.715
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.337,git/rebase,21,7.715
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.33,git/rebase,21,7.715
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.332,git/rebase,21,7.715
git/rebase continue after resolving conflicts returns success,0.383,git/rebase,21,7.715
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.389,git/rebase,21,7.715
git/rebase continue after resolving conflicts no longer has working directory changes,0.39,git/rebase,21,7.715
git/rebase continue after resolving conflicts returns to the feature branch,0.394,git/rebase,21,7.715
git/rebase continue after resolving conflicts branch is now a different ref,0.39,git/rebase,21,7.715
git/rebase continue with additional changes unrelated to conflicted files returns success,0.389,git/rebase,21,7.715
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.715
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.392,git/rebase,21,7.715
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.399,git/rebase,21,7.715
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.404,git/rebase,21,7.715
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.379,git/rebase,21,7.715
git/commit createCommit normal commits the given files,0.134,git/commit,21,4.713
git/commit createCommit normal commit does not strip commentary by default,0.116,git/commit,21,4.713
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.713
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.713
git/commit createCommit partials can commit some lines from new file,0.189,git/commit,21,4.713
git/commit createCommit partials can commit second hunk from modified file,0.211,git/commit,21,4.713
git/commit createCommit partials can commit single delete from modified file,0.184,git/commit,21,4.713
git/commit createCommit partials can commit multiple hunks from modified file,0.203,git/commit,21,4.713
git/commit createCommit partials can commit some lines from deleted file,0.19,git/commit,21,4.713
git/commit createCommit partials can commit renames with modifications,0.199,git/commit,21,4.713
git/commit createCommit partials can commit renames with partially selected modifications,0.246,git/commit,21,4.713
git/commit createCommit with a merge conflict creates a merge commit,0.278,git/commit,21,4.713
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.25,git/commit,21,4.713
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.356,git/commit,21,4.713
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.345,git/commit,21,4.713
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.417,git/commit,21,4.713
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.419,git/commit,21,4.713
git/commit createMergeCommit with no changes throws an error,0.107,git/commit,21,4.713
git/commit index corner cases can commit when staged new file is then deleted,0.155,git/commit,21,4.713
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.175,git/commit,21,4.713
git/commit index corner cases file is deleted in index,0.177,git/commit,21,4.713
git/rebase can parse progress returns a value indicating conflicts were encountered,0.406,git/rebase,7,3.842
git/rebase can parse progress status detects REBASE_HEAD,0.406,git/rebase,7,3.842
git/rebase can parse progress is a detached HEAD state,0.42,git/rebase,7,3.842
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.835,git/rebase,7,3.842
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.851,git/rebase,7,3.842
git/rebase can parse progress for long rebase is a detached HEAD state,0.861,git/rebase,7,3.842
GitStore loadCommitBatch includes HEAD when loading commits,0.406,GitStore,11,2.684
GitStore can discard changes from a repository,0.171,GitStore,11,2.684
GitStore can discard a renamed file,0.154,GitStore,11,2.684
GitStore undo first commit reports the repository is unborn,0.198,GitStore,11,2.684
GitStore undo first commit pre-fills the commit message,0.134,GitStore,11,2.684
GitStore undo first commit clears the undo commit dialog,0.229,GitStore,11,2.684
GitStore undo first commit has no staged files,0.211,GitStore,11,2.684
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.684
git/status getStatus with conflicted repo parses conflicted files with markers,0.344,git/status,12,2.094
git/status getStatus with conflicted repo parses conflicted files without markers,0.312,git/status,12,2.094
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.405,git/status,12,2.094
git/status getStatus with conflicted repo parses resolved files,0.3,git/status,12,2.094
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.119,git/status,12,2.094
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.094
git/status getStatus with unconflicted repo parses changed files,0.063,git/status,12,2.094
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.06,git/status,12,2.094
git/status getStatus with unconflicted repo reflects renames,0.109,git/status,12,2.094
git/status getStatus with unconflicted repo reflects copies,0.112,git/status,12,2.094
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.055,git/status,12,2.094
BranchPruner does nothing on non GitHub repositories,0.252,BranchPruner,6,1.78
BranchPruner prunes for GitHub repository,0.329,BranchPruner,6,1.78
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.294,BranchPruner,6,1.78
BranchPruner does not prune if there is no default branch,0.233,BranchPruner,6,1.78
BranchPruner does not prune reserved branches,0.284,BranchPruner,6,1.78
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.046,git/diff,19,1.807
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.807
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,1.807
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.807
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.807
git/diff imageDiff changes for text are not set,0.096,git/diff,19,1.807
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,1.807
git/diff getWorkingDirectoryDiff counts lines for modified file,0.09,git/diff,19,1.807
git/diff getWorkingDirectoryDiff counts lines for staged file,0.094,git/diff,19,1.807
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.116,git/diff,19,1.807
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.137,git/diff,19,1.807
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.151,git/diff,19,1.807
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.13,git/diff,19,1.807
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.121,git/diff,19,1.807
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.082,git/diff,19,1.807
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.064,git/diff,19,1.807
git/diff getBinaryPaths in repo with text only files returns an empty array,0.087,git/diff,19,1.807
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.099,git/diff,19,1.807
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.116,git/diff,19,1.807
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.521
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.521
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.521
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.521
git/branch tip returns non-origin remote,0.092,git/branch,13,1.521
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.521
git/branch getBranchesPointedAt in a local repo finds one branch name,0.061,git/branch,13,1.521
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.521
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.521
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.086,git/branch,13,1.521
git/branch deleteBranch deletes local branches,0.126,git/branch,13,1.521
git/branch deleteBranch deletes remote branches,0.323,git/branch,13,1.521
git/branch deleteBranch handles attempted delete of removed remote branch,0.386,git/branch,13,1.521
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,1.408
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.139,git/stash,14,1.408
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.095,git/stash,14,1.408
git/reflog getRecentBranches returns the recently checked out branches,0.144,git/reflog,6,1.008
git/reflog getRecentBranches works after renaming a branch,0.187,git/reflog,6,1.008
git/reflog getRecentBranches returns a limited number of branches,0.238,git/reflog,6,1.008
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.146,git/reflog,6,1.008
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.181,git/reflog,6,1.008
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.068,git/reflog,6,1.008
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.462,formatPatch,5,1.068
git/checkout can checkout a valid branch name in an existing repository,0.121,git/checkout,6,0.995
git/checkout can checkout a branch when it exists on multiple remotes,0.126,git/checkout,6,0.995
git/checkout will fail when an existing branch matches the remote branch,0.119,git/checkout,6,0.995
git/checkout with submodules cleans up an submodule that no longer exists,0.3,git/checkout,6,0.995
git/checkout with submodules updates a changed submodule reference,0.257,git/checkout,6,0.995
git/rev-parse isGitRepository should return true for a repository,0.051,git/rev-parse,10,0.739
git/rev-parse isGitRepository should return false for a directory,0.052,git/rev-parse,10,0.739
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.739
git/rev-parse isBareRepository returns true for initialized bare repository,0.064,git/rev-parse,10,0.739
git/rev-parse isBareRepository returns false for empty directory,0.054,git/rev-parse,10,0.739
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.739
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.739
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.054,git/rev-parse,10,0.739
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.052,git/rev-parse,10,0.739
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.183,git/rev-parse,10,0.739
git/config config looks up config values,0.111,git/config,12,0.939
git/config config returns null for undefined values,0.065,git/config,12,0.939
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.939
git/config global config setGlobalConfigValue will replace all entries for a global value,0.088,git/config,12,0.939
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.069,git/config,12,0.939
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.072,git/config,12,0.939
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.939
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.939
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.939
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.069,git/config,12,0.939
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.074,git/config,12,0.939
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.074,git/config,12,0.939
git/submodule listSubmodules returns the submodule entry,0.141,git/submodule,3,0.741
git/submodule listSubmodules returns the expected tag,0.192,git/submodule,3,0.741
git/submodule resetSubmodulePaths update submodule to original commit,0.364,git/submodule,3,0.741
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.659
gitignore saveGitIgnore applies rule correctly to repository,0.097,gitignore,9,0.659
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.659
gitignore appendIgnoreRule appends multiple rules,0.116,gitignore,9,0.659
git/log getCommits loads history,0.067,git/log,7,0.651
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.651
git/log getCommits handles repository with signed commit and log.showSignature set,0.112,git/log,7,0.651
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.651
git/log getChangedFiles detects renames,0.107,git/log,7,0.651
git/log getChangedFiles detect copies,0.105,git/log,7,0.651
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.651
git/merge merge and is successful returns true,0.045,git/merge,7,0.593
git/merge merge and is a noop returns false,0.063,git/merge,7,0.593
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.593
git/remote getRemotes should return both remotes,0.059,git/remote,11,0.571
git/remote findDefaultRemote returns origin when multiple remotes found,0.068,git/remote,11,0.571
git/remote findDefaultRemote returns something when origin removed,0.069,git/remote,11,0.571
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.546
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.546
Update remote url updates the repository's remote url when the github url changes,0.11,Update remote url,4,0.416
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.416
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.416
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.416
git/for-each-ref getBranches fetches branches using for-each-ref,0.076,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for empty repo,0.068,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.056,git/for-each-ref,3,0.242
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.381
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.384
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.384
git/core exit code handling does not throw for exit codes that were expected,0.06,git/core,6,0.384
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.384
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.384
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.384
AppStore can select a repository,0.234,AppStore,5,0.288
git/reset reset can hard reset a repository,0.315,git/reset,2,0.356
validatedRepositoryPath returns the path to the repository,0.055,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.31,git/rebase,21,7.694
git/rebase detect conflicts status detects REBASE_HEAD,0.263,git/rebase,21,7.694
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,7.694
git/rebase detect conflicts is a detached HEAD state,0.267,git/rebase,21,7.694
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.264,git/rebase,21,7.694
git/rebase abort after conflicts found no longer has working directory changes,0.261,git/rebase,21,7.694
git/rebase abort after conflicts found returns to the feature branch,0.265,git/rebase,21,7.694
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.342,git/rebase,21,7.694
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.323,git/rebase,21,7.694
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.333,git/rebase,21,7.694
git/rebase continue after resolving conflicts returns success,0.381,git/rebase,21,7.694
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.376,git/rebase,21,7.694
git/rebase continue after resolving conflicts no longer has working directory changes,0.378,git/rebase,21,7.694
git/rebase continue after resolving conflicts returns to the feature branch,0.392,git/rebase,21,7.694
git/rebase continue after resolving conflicts branch is now a different ref,0.402,git/rebase,21,7.694
git/rebase continue with additional changes unrelated to conflicted files returns success,0.391,git/rebase,21,7.694
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.389,git/rebase,21,7.694
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.391,git/rebase,21,7.694
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.4,git/rebase,21,7.694
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.694
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.378,git/rebase,21,7.694
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.615
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.615
git/commit createCommit normal can commit for empty repository,0.143,git/commit,21,4.615
git/commit createCommit normal can commit renames,0.159,git/commit,21,4.615
git/commit createCommit partials can commit some lines from new file,0.183,git/commit,21,4.615
git/commit createCommit partials can commit second hunk from modified file,0.203,git/commit,21,4.615
git/commit createCommit partials can commit single delete from modified file,0.178,git/commit,21,4.615
git/commit createCommit partials can commit multiple hunks from modified file,0.193,git/commit,21,4.615
git/commit createCommit partials can commit some lines from deleted file,0.181,git/commit,21,4.615
git/commit createCommit partials can commit renames with modifications,0.195,git/commit,21,4.615
git/commit createCommit partials can commit renames with partially selected modifications,0.236,git/commit,21,4.615
git/commit createCommit with a merge conflict creates a merge commit,0.26,git/commit,21,4.615
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.237,git/commit,21,4.615
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.342,git/commit,21,4.615
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.333,git/commit,21,4.615
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.409,git/commit,21,4.615
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.425,git/commit,21,4.615
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.615
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.615
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.182,git/commit,21,4.615
git/commit index corner cases file is deleted in index,0.183,git/commit,21,4.615
git/rebase can parse progress returns a value indicating conflicts were encountered,0.413,git/rebase,7,3.889
git/rebase can parse progress status detects REBASE_HEAD,0.411,git/rebase,7,3.889
git/rebase can parse progress is a detached HEAD state,0.418,git/rebase,7,3.889
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.859,git/rebase,7,3.889
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.878,git/rebase,7,3.889
git/rebase can parse progress for long rebase is a detached HEAD state,0.857,git/rebase,7,3.889
GitStore loadCommitBatch includes HEAD when loading commits,0.416,GitStore,11,2.686
GitStore can discard changes from a repository,0.17,GitStore,11,2.686
GitStore can discard a renamed file,0.152,GitStore,11,2.686
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.686
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.686
GitStore undo first commit clears the undo commit dialog,0.227,GitStore,11,2.686
GitStore undo first commit has no staged files,0.211,GitStore,11,2.686
GitStore repository with HEAD file can discard modified change cleanly,0.118,GitStore,11,2.686
git/status getStatus with conflicted repo parses conflicted files with markers,0.349,git/status,12,2.121
git/status getStatus with conflicted repo parses conflicted files without markers,0.311,git/status,12,2.121
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.407,git/status,12,2.121
git/status getStatus with conflicted repo parses resolved files,0.305,git/status,12,2.121
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.121
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.153,git/status,12,2.121
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.121
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.121
git/status getStatus with unconflicted repo reflects renames,0.113,git/status,12,2.121
git/status getStatus with unconflicted repo reflects copies,0.119,git/status,12,2.121
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.121
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.049,git/diff,19,1.91
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.91
git/diff getBlobImage retrieves valid image for modified file,0.101,git/diff,19,1.91
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.91
git/diff imageDiff changes for images are set,0.082,git/diff,19,1.91
git/diff imageDiff changes for text are not set,0.091,git/diff,19,1.91
git/diff getWorkingDirectoryDiff counts lines for new file,0.097,git/diff,19,1.91
git/diff getWorkingDirectoryDiff counts lines for modified file,0.095,git/diff,19,1.91
git/diff getWorkingDirectoryDiff counts lines for staged file,0.089,git/diff,19,1.91
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.124,git/diff,19,1.91
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.148,git/diff,19,1.91
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.151,git/diff,19,1.91
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.132,git/diff,19,1.91
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.119,git/diff,19,1.91
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.089,git/diff,19,1.91
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.063,git/diff,19,1.91
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.91
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.105,git/diff,19,1.91
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.12,git/diff,19,1.91
BranchPruner does nothing on non GitHub repositories,0.26,BranchPruner,6,1.87
BranchPruner prunes for GitHub repository,0.331,BranchPruner,6,1.87
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.266,BranchPruner,6,1.87
BranchPruner does not prune if there is no default branch,0.242,BranchPruner,6,1.87
BranchPruner does not prune reserved branches,0.318,BranchPruner,6,1.87
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.543
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,13,1.543
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.543
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.543
git/branch tip returns non-origin remote,0.084,git/branch,13,1.543
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.055,git/branch,13,1.543
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.093,git/branch,13,1.543
git/branch deleteBranch deletes local branches,0.127,git/branch,13,1.543
git/branch deleteBranch deletes remote branches,0.33,git/branch,13,1.543
git/branch deleteBranch handles attempted delete of removed remote branch,0.391,git/branch,13,1.543
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.111,git/stash,14,1.397
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.144,git/stash,14,1.397
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.397
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.451,formatPatch,5,1.11
git/reflog getRecentBranches returns the recently checked out branches,0.158,git/reflog,6,1.113
git/reflog getRecentBranches works after renaming a branch,0.207,git/reflog,6,1.113
git/reflog getRecentBranches returns a limited number of branches,0.27,git/reflog,6,1.113
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.161,git/reflog,6,1.113
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.203,git/reflog,6,1.113
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.07,git/reflog,6,1.113
git/checkout can checkout a valid branch name in an existing repository,0.122,git/checkout,6,1.117
git/checkout can checkout a branch when it exists on multiple remotes,0.135,git/checkout,6,1.117
git/checkout will fail when an existing branch matches the remote branch,0.128,git/checkout,6,1.117
git/checkout with submodules cleans up an submodule that no longer exists,0.326,git/checkout,6,1.117
git/checkout with submodules updates a changed submodule reference,0.269,git/checkout,6,1.117
git/config config looks up config values,0.053,git/config,12,0.879
git/config config returns null for undefined values,0.056,git/config,12,0.879
git/config global config getGlobalConfigPath gets the config path,0.068,git/config,12,0.879
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.072,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.074,git/config,12,0.879
git/submodule listSubmodules returns the submodule entry,0.143,git/submodule,3,0.759
git/submodule listSubmodules returns the expected tag,0.196,git/submodule,3,0.759
git/submodule resetSubmodulePaths update submodule to original commit,0.372,git/submodule,3,0.759
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.775
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.775
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.775
git/rev-parse isBareRepository returns true for initialized bare repository,0.073,git/rev-parse,10,0.775
git/rev-parse isBareRepository returns false for empty directory,0.056,git/rev-parse,10,0.775
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.775
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.775
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.775
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.055,git/rev-parse,10,0.775
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.192,git/rev-parse,10,0.775
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.745
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.745
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.745
gitignore appendIgnoreRule appends multiple rules,0.121,gitignore,9,0.745
git/log getCommits loads history,0.069,git/log,7,0.617
git/log getCommits handles repository with HEAD file on disk,0.095,git/log,7,0.617
git/log getCommits handles repository with signed commit and log.showSignature set,0.118,git/log,7,0.617
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.617
git/log getChangedFiles detects renames,0.088,git/log,7,0.617
git/log getChangedFiles detect copies,0.094,git/log,7,0.617
git/log getChangedFiles handles commit when HEAD exists on disk,0.053,git/log,7,0.617
git/merge merge and is successful returns true,0.042,git/merge,7,0.575
git/merge merge and is a noop returns false,0.058,git/merge,7,0.575
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.575
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.565
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.565
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.565
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.545
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.545
Update remote url updates the repository's remote url when the github url changes,0.186,Update remote url,4,0.486
Update remote url doesn't update the repository's remote url when the github url is the same,0.079,Update remote url,4,0.486
Update remote url doesn't update repository's remote url if protocols don't match,0.091,Update remote url,4,0.486
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.079,Update remote url,4,0.486
git/core error handling does not throw for errors that were expected,0.055,git/core,6,0.373
git/core error handling throws for errors that were not expected,0.056,git/core,6,0.373
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.373
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.373
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.373
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.373
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.046,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.374
git/reset reset can hard reset a repository,0.078,git/reset,2,0.117
AppStore can select a repository,0.225,AppStore,5,0.282
git/for-each-ref getBranches fetches branches using for-each-ref,0.297,git/for-each-ref,3,0.472
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.472
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.472
validatedRepositoryPath returns the path to the repository,0.061,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.058
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.319,git/rebase,21,7.559
git/rebase detect conflicts status detects REBASE_HEAD,0.258,git/rebase,21,7.559
git/rebase detect conflicts has conflicted files in working directory,0.261,git/rebase,21,7.559
git/rebase detect conflicts is a detached HEAD state,0.262,git/rebase,21,7.559
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.259,git/rebase,21,7.559
git/rebase abort after conflicts found no longer has working directory changes,0.25,git/rebase,21,7.559
git/rebase abort after conflicts found returns to the feature branch,0.263,git/rebase,21,7.559
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.324,git/rebase,21,7.559
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.319,git/rebase,21,7.559
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.323,git/rebase,21,7.559
git/rebase continue after resolving conflicts returns success,0.37,git/rebase,21,7.559
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.375,git/rebase,21,7.559
git/rebase continue after resolving conflicts no longer has working directory changes,0.376,git/rebase,21,7.559
git/rebase continue after resolving conflicts returns to the feature branch,0.389,git/rebase,21,7.559
git/rebase continue after resolving conflicts branch is now a different ref,0.383,git/rebase,21,7.559
git/rebase continue with additional changes unrelated to conflicted files returns success,0.376,git/rebase,21,7.559
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.381,git/rebase,21,7.559
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.393,git/rebase,21,7.559
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.398,git/rebase,21,7.559
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.403,git/rebase,21,7.559
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.37,git/rebase,21,7.559
git/commit createCommit normal commits the given files,0.116,git/commit,21,4.44
git/commit createCommit normal commit does not strip commentary by default,0.102,git/commit,21,4.44
git/commit createCommit normal can commit for empty repository,0.131,git/commit,21,4.44
git/commit createCommit normal can commit renames,0.148,git/commit,21,4.44
git/commit createCommit partials can commit some lines from new file,0.173,git/commit,21,4.44
git/commit createCommit partials can commit second hunk from modified file,0.183,git/commit,21,4.44
git/commit createCommit partials can commit single delete from modified file,0.17,git/commit,21,4.44
git/commit createCommit partials can commit multiple hunks from modified file,0.187,git/commit,21,4.44
git/commit createCommit partials can commit some lines from deleted file,0.18,git/commit,21,4.44
git/commit createCommit partials can commit renames with modifications,0.178,git/commit,21,4.44
git/commit createCommit partials can commit renames with partially selected modifications,0.226,git/commit,21,4.44
git/commit createCommit with a merge conflict creates a merge commit,0.257,git/commit,21,4.44
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.232,git/commit,21,4.44
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.332,git/commit,21,4.44
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.322,git/commit,21,4.44
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.408,git/commit,21,4.44
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.406,git/commit,21,4.44
git/commit createMergeCommit with no changes throws an error,0.114,git/commit,21,4.44
git/commit index corner cases can commit when staged new file is then deleted,0.157,git/commit,21,4.44
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.175,git/commit,21,4.44
git/commit index corner cases file is deleted in index,0.181,git/commit,21,4.44
git/rebase can parse progress returns a value indicating conflicts were encountered,0.394,git/rebase,7,3.783
git/rebase can parse progress status detects REBASE_HEAD,0.409,git/rebase,7,3.783
git/rebase can parse progress is a detached HEAD state,0.4,git/rebase,7,3.783
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.828,git/rebase,7,3.783
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.831,git/rebase,7,3.783
git/rebase can parse progress for long rebase is a detached HEAD state,0.87,git/rebase,7,3.783
GitStore loadCommitBatch includes HEAD when loading commits,0.44,GitStore,11,2.649
GitStore can discard changes from a repository,0.167,GitStore,11,2.649
GitStore can discard a renamed file,0.149,GitStore,11,2.649
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.649
GitStore undo first commit pre-fills the commit message,0.13,GitStore,11,2.649
GitStore undo first commit clears the undo commit dialog,0.22,GitStore,11,2.649
GitStore undo first commit has no staged files,0.212,GitStore,11,2.649
GitStore repository with HEAD file can discard modified change cleanly,0.12,GitStore,11,2.649
git/status getStatus with conflicted repo parses conflicted files with markers,0.306,git/status,12,2.079
git/status getStatus with conflicted repo parses conflicted files without markers,0.307,git/status,12,2.079
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.403,git/status,12,2.079
git/status getStatus with conflicted repo parses resolved files,0.303,git/status,12,2.079
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.079
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.15,git/status,12,2.079
git/status getStatus with unconflicted repo parses changed files,0.075,git/status,12,2.079
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.079
git/status getStatus with unconflicted repo reflects renames,0.117,git/status,12,2.079
git/status getStatus with unconflicted repo reflects copies,0.118,git/status,12,2.079
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.066,git/status,12,2.079
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.081,git/diff,19,1.865
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.865
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,1.865
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.865
git/diff imageDiff changes for images are set,0.085,git/diff,19,1.865
git/diff imageDiff changes for text are not set,0.09,git/diff,19,1.865
git/diff getWorkingDirectoryDiff counts lines for new file,0.133,git/diff,19,1.865
git/diff getWorkingDirectoryDiff counts lines for modified file,0.092,git/diff,19,1.865
git/diff getWorkingDirectoryDiff counts lines for staged file,0.084,git/diff,19,1.865
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.115,git/diff,19,1.865
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.142,git/diff,19,1.865
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.149,git/diff,19,1.865
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.128,git/diff,19,1.865
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.113,git/diff,19,1.865
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.08,git/diff,19,1.865
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.059,git/diff,19,1.865
git/diff getBinaryPaths in repo with text only files returns an empty array,0.089,git/diff,19,1.865
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.101,git/diff,19,1.865
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.116,git/diff,19,1.865
BranchPruner does nothing on non GitHub repositories,0.232,BranchPruner,6,1.722
BranchPruner prunes for GitHub repository,0.308,BranchPruner,6,1.722
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.253,BranchPruner,6,1.722
BranchPruner does not prune if there is no default branch,0.238,BranchPruner,6,1.722
BranchPruner does not prune reserved branches,0.289,BranchPruner,6,1.722
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.388
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,13,1.388
git/branch tip returns detached for arbitrary checkout,0.052,git/branch,13,1.388
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,13,1.388
git/branch tip returns non-origin remote,0.075,git/branch,13,1.388
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,13,1.388
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,13,1.388
git/branch getBranchesPointedAt in a local repo finds no branch names,0.047,git/branch,13,1.388
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.045,git/branch,13,1.388
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,13,1.388
git/branch deleteBranch deletes local branches,0.115,git/branch,13,1.388
git/branch deleteBranch deletes remote branches,0.298,git/branch,13,1.388
git/branch deleteBranch handles attempted delete of removed remote branch,0.359,git/branch,13,1.388
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.103,git/stash,14,1.307
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.136,git/stash,14,1.307
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.098,git/stash,14,1.307
git/checkout can checkout a valid branch name in an existing repository,0.121,git/checkout,6,1.05
git/checkout can checkout a branch when it exists on multiple remotes,0.118,git/checkout,6,1.05
git/checkout will fail when an existing branch matches the remote branch,0.113,git/checkout,6,1.05
git/checkout with submodules cleans up an submodule that no longer exists,0.348,git/checkout,6,1.05
git/checkout with submodules updates a changed submodule reference,0.275,git/checkout,6,1.05
git/reflog getRecentBranches returns the recently checked out branches,0.152,git/reflog,6,1.085
git/reflog getRecentBranches works after renaming a branch,0.202,git/reflog,6,1.085
git/reflog getRecentBranches returns a limited number of branches,0.265,git/reflog,6,1.085
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.157,git/reflog,6,1.085
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.195,git/reflog,6,1.085
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.085
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.399,formatPatch,5,1.074
git/config config looks up config values,0.056,git/config,12,0.867
git/config config returns null for undefined values,0.056,git/config,12,0.867
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.867
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,12,0.867
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.07,git/config,12,0.867
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.867
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.07,git/config,12,0.867
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.074,git/config,12,0.867
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.867
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.867
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.867
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.867
git/rev-parse isGitRepository should return true for a repository,0.062,git/rev-parse,10,0.812
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns true for initialized bare repository,0.07,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.812
git/rev-parse isBareRepository throws error for missing directory,0.051,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.227,git/rev-parse,10,0.812
git/submodule listSubmodules returns the submodule entry,0.137,git/submodule,3,0.763
git/submodule listSubmodules returns the expected tag,0.197,git/submodule,3,0.763
git/submodule resetSubmodulePaths update submodule to original commit,0.387,git/submodule,3,0.763
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.733
gitignore saveGitIgnore applies rule correctly to repository,0.107,gitignore,9,0.733
gitignore appendIgnoreRule appends one rule,0.126,gitignore,9,0.733
gitignore appendIgnoreRule appends multiple rules,0.133,gitignore,9,0.733
git/log getCommits loads history,0.071,git/log,7,0.659
git/log getCommits handles repository with HEAD file on disk,0.101,git/log,7,0.659
git/log getCommits handles repository with signed commit and log.showSignature set,0.122,git/log,7,0.659
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.659
git/log getChangedFiles detects renames,0.102,git/log,7,0.659
git/log getChangedFiles detect copies,0.106,git/log,7,0.659
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.659
git/merge merge and is successful returns true,0.045,git/merge,7,0.641
git/merge merge and is a noop returns false,0.059,git/merge,7,0.641
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.641
git/remote getRemotes should return both remotes,0.053,git/remote,11,0.617
git/remote findDefaultRemote returns origin when multiple remotes found,0.059,git/remote,11,0.617
git/remote findDefaultRemote returns something when origin removed,0.076,git/remote,11,0.617
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.598
git-lfs isUsingLFS returns true if LFS is tracking a path,0.084,git-lfs,9,0.598
Update remote url updates the repository's remote url when the github url changes,0.117,Update remote url,4,0.426
Update remote url doesn't update the repository's remote url when the github url is the same,0.089,Update remote url,4,0.426
Update remote url doesn't update repository's remote url if protocols don't match,0.086,Update remote url,4,0.426
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.426
git/for-each-ref getBranches fetches branches using for-each-ref,0.076,git/for-each-ref,3,0.258
git/for-each-ref getBranches should return empty list for empty repo,0.079,git/for-each-ref,3,0.258
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.258
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.391
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.391
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.391
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.391
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.391
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.391
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.391
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.391
git/core error handling does not throw for errors that were expected,0.06,git/core,6,0.389
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.389
git/core exit code handling does not throw for exit codes that were expected,0.061,git/core,6,0.389
git/core exit code handling throws for exit codes that were not expected,0.061,git/core,6,0.389
git/core config lock file error handling can parse lock file path from stderr,0.064,git/core,6,0.389
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.389
AppStore can select a repository,0.251,AppStore,5,0.304
git/reset reset can hard reset a repository,0.341,git/reset,2,0.38
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.02,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.313,git/rebase,21,7.648
git/rebase detect conflicts status detects REBASE_HEAD,0.265,git/rebase,21,7.648
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.648
git/rebase detect conflicts is a detached HEAD state,0.276,git/rebase,21,7.648
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.267,git/rebase,21,7.648
git/rebase abort after conflicts found no longer has working directory changes,0.26,git/rebase,21,7.648
git/rebase abort after conflicts found returns to the feature branch,0.259,git/rebase,21,7.648
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.338,git/rebase,21,7.648
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.322,git/rebase,21,7.648
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.329,git/rebase,21,7.648
git/rebase continue after resolving conflicts returns success,0.376,git/rebase,21,7.648
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.648
git/rebase continue after resolving conflicts no longer has working directory changes,0.381,git/rebase,21,7.648
git/rebase continue after resolving conflicts returns to the feature branch,0.39,git/rebase,21,7.648
git/rebase continue after resolving conflicts branch is now a different ref,0.388,git/rebase,21,7.648
git/rebase continue with additional changes unrelated to conflicted files returns success,0.385,git/rebase,21,7.648
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.648
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.39,git/rebase,21,7.648
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.397,git/rebase,21,7.648
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.648
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.375,git/rebase,21,7.648
git/commit createCommit normal commits the given files,0.117,git/commit,21,4.548
git/commit createCommit normal commit does not strip commentary by default,0.104,git/commit,21,4.548
git/commit createCommit normal can commit for empty repository,0.131,git/commit,21,4.548
git/commit createCommit normal can commit renames,0.157,git/commit,21,4.548
git/commit createCommit partials can commit some lines from new file,0.185,git/commit,21,4.548
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.548
git/commit createCommit partials can commit single delete from modified file,0.181,git/commit,21,4.548
git/commit createCommit partials can commit multiple hunks from modified file,0.2,git/commit,21,4.548
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.548
git/commit createCommit partials can commit renames with modifications,0.192,git/commit,21,4.548
git/commit createCommit partials can commit renames with partially selected modifications,0.239,git/commit,21,4.548
git/commit createCommit with a merge conflict creates a merge commit,0.261,git/commit,21,4.548
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.247,git/commit,21,4.548
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.336,git/commit,21,4.548
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.33,git/commit,21,4.548
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.404,git/commit,21,4.548
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.399,git/commit,21,4.548
git/commit createMergeCommit with no changes throws an error,0.108,git/commit,21,4.548
git/commit index corner cases can commit when staged new file is then deleted,0.153,git/commit,21,4.548
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.179,git/commit,21,4.548
git/commit index corner cases file is deleted in index,0.179,git/commit,21,4.548
git/rebase can parse progress returns a value indicating conflicts were encountered,0.395,git/rebase,7,3.783
git/rebase can parse progress status detects REBASE_HEAD,0.401,git/rebase,7,3.783
git/rebase can parse progress is a detached HEAD state,0.404,git/rebase,7,3.783
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.84,git/rebase,7,3.783
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.845,git/rebase,7,3.783
git/rebase can parse progress for long rebase is a detached HEAD state,0.845,git/rebase,7,3.783
GitStore loadCommitBatch includes HEAD when loading commits,0.388,GitStore,11,2.581
GitStore can discard changes from a repository,0.167,GitStore,11,2.581
GitStore can discard a renamed file,0.148,GitStore,11,2.581
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.581
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.581
GitStore undo first commit clears the undo commit dialog,0.216,GitStore,11,2.581
GitStore undo first commit has no staged files,0.207,GitStore,11,2.581
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.581
git/status getStatus with conflicted repo parses conflicted files with markers,0.351,git/status,12,2.099
git/status getStatus with conflicted repo parses conflicted files without markers,0.296,git/status,12,2.099
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.398,git/status,12,2.099
git/status getStatus with conflicted repo parses resolved files,0.298,git/status,12,2.099
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.121,git/status,12,2.099
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.152,git/status,12,2.099
git/status getStatus with unconflicted repo parses changed files,0.07,git/status,12,2.099
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.06,git/status,12,2.099
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.099
git/status getStatus with unconflicted repo reflects copies,0.117,git/status,12,2.099
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.065,git/status,12,2.099
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.091,git/diff,19,1.785
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.785
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,1.785
git/diff getBlobImage retrieves valid images for deleted file,0.065,git/diff,19,1.785
git/diff imageDiff changes for images are set,0.078,git/diff,19,1.785
git/diff imageDiff changes for text are not set,0.086,git/diff,19,1.785
git/diff getWorkingDirectoryDiff counts lines for new file,0.085,git/diff,19,1.785
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.785
git/diff getWorkingDirectoryDiff counts lines for staged file,0.086,git/diff,19,1.785
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.12,git/diff,19,1.785
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.133,git/diff,19,1.785
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.141,git/diff,19,1.785
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.118,git/diff,19,1.785
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.113,git/diff,19,1.785
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.08,git/diff,19,1.785
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.059,git/diff,19,1.785
git/diff getBinaryPaths in repo with text only files returns an empty array,0.087,git/diff,19,1.785
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.096,git/diff,19,1.785
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.109,git/diff,19,1.785
BranchPruner does nothing on non GitHub repositories,0.266,BranchPruner,6,1.736
BranchPruner prunes for GitHub repository,0.291,BranchPruner,6,1.736
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.242,BranchPruner,6,1.736
BranchPruner does not prune if there is no default branch,0.245,BranchPruner,6,1.736
BranchPruner does not prune reserved branches,0.297,BranchPruner,6,1.736
git/branch tip returns unborn for new repository,0.028,git/branch,13,1.442
git/branch tip returns correct ref if checkout occurs,0.038,git/branch,13,1.442
git/branch tip returns detached for arbitrary checkout,0.061,git/branch,13,1.442
git/branch tip returns current branch when on a valid HEAD,0.073,git/branch,13,1.442
git/branch tip returns non-origin remote,0.075,git/branch,13,1.442
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.077,git/branch,13,1.442
git/branch getBranchesPointedAt in a local repo finds one branch name,0.101,git/branch,13,1.442
git/branch getBranchesPointedAt in a local repo finds no branch names,0.049,git/branch,13,1.442
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.047,git/branch,13,1.442
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.442
git/branch deleteBranch deletes local branches,0.11,git/branch,13,1.442
git/branch deleteBranch deletes remote branches,0.293,git/branch,13,1.442
git/branch deleteBranch handles attempted delete of removed remote branch,0.35,git/branch,13,1.442
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.1,git/stash,14,1.249
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.127,git/stash,14,1.249
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.091,git/stash,14,1.249
git/reflog getRecentBranches returns the recently checked out branches,0.147,git/reflog,6,0.982
git/reflog getRecentBranches works after renaming a branch,0.179,git/reflog,6,0.982
git/reflog getRecentBranches returns a limited number of branches,0.239,git/reflog,6,0.982
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.139,git/reflog,6,0.982
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.172,git/reflog,6,0.982
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.063,git/reflog,6,0.982
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.411,formatPatch,5,1.02
git/checkout can checkout a valid branch name in an existing repository,0.12,git/checkout,6,1.018
git/checkout can checkout a branch when it exists on multiple remotes,0.126,git/checkout,6,1.018
git/checkout will fail when an existing branch matches the remote branch,0.117,git/checkout,6,1.018
git/checkout with submodules cleans up an submodule that no longer exists,0.319,git/checkout,6,1.018
git/checkout with submodules updates a changed submodule reference,0.263,git/checkout,6,1.018
git/config config looks up config values,0.055,git/config,12,0.832
git/config config returns null for undefined values,0.047,git/config,12,0.832
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,12,0.832
git/config global config setGlobalConfigValue will replace all entries for a global value,0.088,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.064,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.063,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.066,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.073,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.832
git/rev-parse isGitRepository should return true for a repository,0.12,git/rev-parse,10,0.863
git/rev-parse isGitRepository should return false for a directory,0.059,git/rev-parse,10,0.863
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.863
git/rev-parse isBareRepository returns true for initialized bare repository,0.073,git/rev-parse,10,0.863
git/rev-parse isBareRepository returns false for empty directory,0.064,git/rev-parse,10,0.863
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.863
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.863
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.863
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.06,git/rev-parse,10,0.863
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.202,git/rev-parse,10,0.863
git/submodule listSubmodules returns the submodule entry,0.137,git/submodule,3,0.849
git/submodule listSubmodules returns the expected tag,0.187,git/submodule,3,0.849
git/submodule resetSubmodulePaths update submodule to original commit,0.482,git/submodule,3,0.849
gitignore readGitIgnoreAtRoot reads contents from disk,0.014,gitignore,9,0.659
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.659
gitignore appendIgnoreRule appends one rule,0.112,gitignore,9,0.659
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.659
git/log getCommits loads history,0.067,git/log,7,0.642
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.642
git/log getCommits handles repository with signed commit and log.showSignature set,0.115,git/log,7,0.642
git/log getChangedFiles loads the files changed in the commit,0.057,git/log,7,0.642
git/log getChangedFiles detects renames,0.097,git/log,7,0.642
git/log getChangedFiles detect copies,0.107,git/log,7,0.642
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.642
git/merge merge and is successful returns true,0.048,git/merge,7,0.572
git/merge merge and is a noop returns false,0.058,git/merge,7,0.572
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.572
git/remote getRemotes should return both remotes,0.062,git/remote,11,0.564
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.564
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.564
git-lfs isUsingLFS returns false for repository not using LFS,0.069,git-lfs,9,0.554
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.554
Update remote url updates the repository's remote url when the github url changes,0.109,Update remote url,4,0.409
Update remote url doesn't update the repository's remote url when the github url is the same,0.082,Update remote url,4,0.409
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.409
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.082,Update remote url,4,0.409
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.379
git/core error handling does not throw for errors that were expected,0.055,git/core,6,0.372
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.372
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.372
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.372
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.372
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.372
git/reset reset can hard reset a repository,0.075,git/reset,2,0.114
AppStore can select a repository,0.321,AppStore,5,0.377
git/for-each-ref getBranches fetches branches using for-each-ref,0.299,git/for-each-ref,3,0.48
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.48
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.48
validatedRepositoryPath returns the path to the repository,0.061,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.31,git/rebase,21,7.669
git/rebase detect conflicts status detects REBASE_HEAD,0.269,git/rebase,21,7.669
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.669
git/rebase detect conflicts is a detached HEAD state,0.269,git/rebase,21,7.669
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.263,git/rebase,21,7.669
git/rebase abort after conflicts found no longer has working directory changes,0.259,git/rebase,21,7.669
git/rebase abort after conflicts found returns to the feature branch,0.259,git/rebase,21,7.669
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.345,git/rebase,21,7.669
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.327,git/rebase,21,7.669
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.329,git/rebase,21,7.669
git/rebase continue after resolving conflicts returns success,0.379,git/rebase,21,7.669
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.669
git/rebase continue after resolving conflicts no longer has working directory changes,0.383,git/rebase,21,7.669
git/rebase continue after resolving conflicts returns to the feature branch,0.39,git/rebase,21,7.669
git/rebase continue after resolving conflicts branch is now a different ref,0.393,git/rebase,21,7.669
git/rebase continue with additional changes unrelated to conflicted files returns success,0.386,git/rebase,21,7.669
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.385,git/rebase,21,7.669
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.396,git/rebase,21,7.669
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.399,git/rebase,21,7.669
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.408,git/rebase,21,7.669
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.375,git/rebase,21,7.669
git/commit createCommit normal commits the given files,0.121,git/commit,21,4.659
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.659
git/commit createCommit normal can commit for empty repository,0.139,git/commit,21,4.659
git/commit createCommit normal can commit renames,0.157,git/commit,21,4.659
git/commit createCommit partials can commit some lines from new file,0.189,git/commit,21,4.659
git/commit createCommit partials can commit second hunk from modified file,0.207,git/commit,21,4.659
git/commit createCommit partials can commit single delete from modified file,0.184,git/commit,21,4.659
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.659
git/commit createCommit partials can commit some lines from deleted file,0.189,git/commit,21,4.659
git/commit createCommit partials can commit renames with modifications,0.197,git/commit,21,4.659
git/commit createCommit partials can commit renames with partially selected modifications,0.248,git/commit,21,4.659
git/commit createCommit with a merge conflict creates a merge commit,0.266,git/commit,21,4.659
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.246,git/commit,21,4.659
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.34,git/commit,21,4.659
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.335,git/commit,21,4.659
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.407,git/commit,21,4.659
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.421,git/commit,21,4.659
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.659
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.659
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.659
git/commit index corner cases file is deleted in index,0.184,git/commit,21,4.659
git/rebase can parse progress returns a value indicating conflicts were encountered,0.405,git/rebase,7,3.866
git/rebase can parse progress status detects REBASE_HEAD,0.407,git/rebase,7,3.866
git/rebase can parse progress is a detached HEAD state,0.413,git/rebase,7,3.866
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.835,git/rebase,7,3.866
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.85,git/rebase,7,3.866
git/rebase can parse progress for long rebase is a detached HEAD state,0.902,git/rebase,7,3.866
GitStore loadCommitBatch includes HEAD when loading commits,0.408,GitStore,11,2.614
GitStore can discard changes from a repository,0.167,GitStore,11,2.614
GitStore can discard a renamed file,0.153,GitStore,11,2.614
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.614
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.614
GitStore undo first commit clears the undo commit dialog,0.221,GitStore,11,2.614
GitStore undo first commit has no staged files,0.209,GitStore,11,2.614
GitStore repository with HEAD file can discard modified change cleanly,0.114,GitStore,11,2.614
git/status getStatus with conflicted repo parses conflicted files with markers,0.344,git/status,12,2.063
git/status getStatus with conflicted repo parses conflicted files without markers,0.301,git/status,12,2.063
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.391,git/status,12,2.063
git/status getStatus with conflicted repo parses resolved files,0.295,git/status,12,2.063
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.122,git/status,12,2.063
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.149,git/status,12,2.063
git/status getStatus with unconflicted repo parses changed files,0.069,git/status,12,2.063
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.063
git/status getStatus with unconflicted repo reflects renames,0.111,git/status,12,2.063
git/status getStatus with unconflicted repo reflects copies,0.107,git/status,12,2.063
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.063
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.09,git/diff,19,1.913
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.913
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,1.913
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.913
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.913
git/diff imageDiff changes for text are not set,0.093,git/diff,19,1.913
git/diff getWorkingDirectoryDiff counts lines for new file,0.097,git/diff,19,1.913
git/diff getWorkingDirectoryDiff counts lines for modified file,0.097,git/diff,19,1.913
git/diff getWorkingDirectoryDiff counts lines for staged file,0.085,git/diff,19,1.913
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.119,git/diff,19,1.913
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.144,git/diff,19,1.913
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.156,git/diff,19,1.913
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.132,git/diff,19,1.913
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.12,git/diff,19,1.913
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.088,git/diff,19,1.913
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.066,git/diff,19,1.913
git/diff getBinaryPaths in repo with text only files returns an empty array,0.097,git/diff,19,1.913
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.107,git/diff,19,1.913
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.913
BranchPruner does nothing on non GitHub repositories,0.294,BranchPruner,6,1.844
BranchPruner prunes for GitHub repository,0.315,BranchPruner,6,1.844
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.252,BranchPruner,6,1.844
BranchPruner does not prune if there is no default branch,0.252,BranchPruner,6,1.844
BranchPruner does not prune reserved branches,0.312,BranchPruner,6,1.844
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.491
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.491
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.491
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,13,1.491
git/branch tip returns non-origin remote,0.079,git/branch,13,1.491
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.082,git/branch,13,1.491
git/branch getBranchesPointedAt in a local repo finds one branch name,0.054,git/branch,13,1.491
git/branch getBranchesPointedAt in a local repo finds no branch names,0.05,git/branch,13,1.491
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.047,git/branch,13,1.491
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,13,1.491
git/branch deleteBranch deletes local branches,0.116,git/branch,13,1.491
git/branch deleteBranch deletes remote branches,0.36,git/branch,13,1.491
git/branch deleteBranch handles attempted delete of removed remote branch,0.362,git/branch,13,1.491
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.157,git/stash,14,1.319
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.127,git/stash,14,1.319
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.094,git/stash,14,1.319
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.477,formatPatch,5,1.071
git/checkout can checkout a valid branch name in an existing repository,0.12,git/checkout,6,0.982
git/checkout can checkout a branch when it exists on multiple remotes,0.122,git/checkout,6,0.982
git/checkout will fail when an existing branch matches the remote branch,0.114,git/checkout,6,0.982
git/checkout with submodules cleans up an submodule that no longer exists,0.3,git/checkout,6,0.982
git/checkout with submodules updates a changed submodule reference,0.254,git/checkout,6,0.982
git/reflog getRecentBranches returns the recently checked out branches,0.148,git/reflog,6,1.057
git/reflog getRecentBranches works after renaming a branch,0.192,git/reflog,6,1.057
git/reflog getRecentBranches returns a limited number of branches,0.253,git/reflog,6,1.057
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.156,git/reflog,6,1.057
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.189,git/reflog,6,1.057
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.076,git/reflog,6,1.057
git/rev-parse isGitRepository should return true for a repository,0.048,git/rev-parse,10,0.747
git/rev-parse isGitRepository should return false for a directory,0.05,git/rev-parse,10,0.747
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.747
git/rev-parse isBareRepository returns true for initialized bare repository,0.067,git/rev-parse,10,0.747
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.747
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.747
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.747
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.053,git/rev-parse,10,0.747
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.051,git/rev-parse,10,0.747
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.191,git/rev-parse,10,0.747
git/submodule listSubmodules returns the submodule entry,0.199,git/submodule,3,0.829
git/submodule listSubmodules returns the expected tag,0.191,git/submodule,3,0.829
git/submodule resetSubmodulePaths update submodule to original commit,0.397,git/submodule,3,0.829
git/config config looks up config values,0.06,git/config,12,0.84
git/config config returns null for undefined values,0.054,git/config,12,0.84
git/config global config getGlobalConfigPath gets the config path,0.064,git/config,12,0.84
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.84
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.07,git/config,12,0.84
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.84
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.062,git/config,12,0.84
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.063,git/config,12,0.84
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.064,git/config,12,0.84
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.064,git/config,12,0.84
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.84
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.84
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.634
gitignore saveGitIgnore applies rule correctly to repository,0.09,gitignore,9,0.634
gitignore appendIgnoreRule appends one rule,0.109,gitignore,9,0.634
gitignore appendIgnoreRule appends multiple rules,0.109,gitignore,9,0.634
git/log getCommits loads history,0.135,git/log,7,0.72
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.72
git/log getCommits handles repository with signed commit and log.showSignature set,0.122,git/log,7,0.72
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.72
git/log getChangedFiles detects renames,0.1,git/log,7,0.72
git/log getChangedFiles detect copies,0.107,git/log,7,0.72
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.72
git/merge merge and is successful returns true,0.048,git/merge,7,0.583
git/merge merge and is a noop returns false,0.058,git/merge,7,0.583
git/merge getMergeBase returns the common ancestor of two branches,0.07,git/merge,7,0.583
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.555
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.555
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.555
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.53
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.53
git/for-each-ref getBranches fetches branches using for-each-ref,0.076,git/for-each-ref,3,0.232
git/for-each-ref getBranches should return empty list for empty repo,0.065,git/for-each-ref,3,0.232
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.052,git/for-each-ref,3,0.232
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.408
Update remote url doesn't update the repository's remote url when the github url is the same,0.079,Update remote url,4,0.408
Update remote url doesn't update repository's remote url if protocols don't match,0.081,Update remote url,4,0.408
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.408
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.048,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.047,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.367
AppStore can select a repository,0.217,AppStore,5,0.273
git/core error handling does not throw for errors that were expected,0.277,git/core,6,0.592
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.592
git/core exit code handling does not throw for exit codes that were expected,0.054,git/core,6,0.592
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.592
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.592
git/core config lock file error handling normalizes paths,0.042,git/core,6,0.592
git/reset reset can hard reset a repository,0.079,git/reset,2,0.118
validatedRepositoryPath returns the path to the repository,0.051,validatedRepositoryPath,2,0.11
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.308,git/rebase,21,7.677
git/rebase detect conflicts status detects REBASE_HEAD,0.273,git/rebase,21,7.677
git/rebase detect conflicts has conflicted files in working directory,0.262,git/rebase,21,7.677
git/rebase detect conflicts is a detached HEAD state,0.272,git/rebase,21,7.677
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.262,git/rebase,21,7.677
git/rebase abort after conflicts found no longer has working directory changes,0.264,git/rebase,21,7.677
git/rebase abort after conflicts found returns to the feature branch,0.257,git/rebase,21,7.677
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.338,git/rebase,21,7.677
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.332,git/rebase,21,7.677
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.331,git/rebase,21,7.677
git/rebase continue after resolving conflicts returns success,0.38,git/rebase,21,7.677
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.677
git/rebase continue after resolving conflicts no longer has working directory changes,0.382,git/rebase,21,7.677
git/rebase continue after resolving conflicts returns to the feature branch,0.392,git/rebase,21,7.677
git/rebase continue after resolving conflicts branch is now a different ref,0.387,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files returns success,0.382,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.385,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.394,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.402,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.412,git/rebase,21,7.677
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.38,git/rebase,21,7.677
git/commit createCommit normal commits the given files,0.125,git/commit,21,4.623
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.623
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.623
git/commit createCommit normal can commit renames,0.159,git/commit,21,4.623
git/commit createCommit partials can commit some lines from new file,0.191,git/commit,21,4.623
git/commit createCommit partials can commit second hunk from modified file,0.204,git/commit,21,4.623
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.623
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.623
git/commit createCommit partials can commit some lines from deleted file,0.192,git/commit,21,4.623
git/commit createCommit partials can commit renames with modifications,0.196,git/commit,21,4.623
git/commit createCommit partials can commit renames with partially selected modifications,0.239,git/commit,21,4.623
git/commit createCommit with a merge conflict creates a merge commit,0.265,git/commit,21,4.623
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.24,git/commit,21,4.623
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.339,git/commit,21,4.623
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.33,git/commit,21,4.623
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.401,git/commit,21,4.623
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.413,git/commit,21,4.623
git/commit createMergeCommit with no changes throws an error,0.112,git/commit,21,4.623
git/commit index corner cases can commit when staged new file is then deleted,0.155,git/commit,21,4.623
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.182,git/commit,21,4.623
git/commit index corner cases file is deleted in index,0.182,git/commit,21,4.623
git/rebase can parse progress returns a value indicating conflicts were encountered,0.403,git/rebase,7,3.825
git/rebase can parse progress status detects REBASE_HEAD,0.409,git/rebase,7,3.825
git/rebase can parse progress is a detached HEAD state,0.407,git/rebase,7,3.825
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.839,git/rebase,7,3.825
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.859,git/rebase,7,3.825
git/rebase can parse progress for long rebase is a detached HEAD state,0.853,git/rebase,7,3.825
GitStore loadCommitBatch includes HEAD when loading commits,0.407,GitStore,11,2.667
GitStore can discard changes from a repository,0.174,GitStore,11,2.667
GitStore can discard a renamed file,0.153,GitStore,11,2.667
GitStore undo first commit reports the repository is unborn,0.195,GitStore,11,2.667
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.667
GitStore undo first commit clears the undo commit dialog,0.223,GitStore,11,2.667
GitStore undo first commit has no staged files,0.21,GitStore,11,2.667
GitStore repository with HEAD file can discard modified change cleanly,0.149,GitStore,11,2.667
git/status getStatus with conflicted repo parses conflicted files with markers,0.346,git/status,12,2.104
git/status getStatus with conflicted repo parses conflicted files without markers,0.307,git/status,12,2.104
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.404,git/status,12,2.104
git/status getStatus with conflicted repo parses resolved files,0.305,git/status,12,2.104
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.104
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.15,git/status,12,2.104
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.104
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.104
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.104
git/status getStatus with unconflicted repo reflects copies,0.116,git/status,12,2.104
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.104
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.047,git/diff,19,1.9
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.9
git/diff getBlobImage retrieves valid image for modified file,0.096,git/diff,19,1.9
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.9
git/diff imageDiff changes for images are set,0.08,git/diff,19,1.9
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for new file,0.089,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for modified file,0.089,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,1.9
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.128,git/diff,19,1.9
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.148,git/diff,19,1.9
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.157,git/diff,19,1.9
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.138,git/diff,19,1.9
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.9
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.9
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.068,git/diff,19,1.9
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.9
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.102,git/diff,19,1.9
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.117,git/diff,19,1.9
BranchPruner does nothing on non GitHub repositories,0.262,BranchPruner,6,1.878
BranchPruner prunes for GitHub repository,0.317,BranchPruner,6,1.878
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.266,BranchPruner,6,1.878
BranchPruner does not prune if there is no default branch,0.259,BranchPruner,6,1.878
BranchPruner does not prune reserved branches,0.32,BranchPruner,6,1.878
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.543
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,13,1.543
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.543
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.543
git/branch tip returns non-origin remote,0.084,git/branch,13,1.543
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo finds one branch name,0.062,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.055,git/branch,13,1.543
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.095,git/branch,13,1.543
git/branch deleteBranch deletes local branches,0.128,git/branch,13,1.543
git/branch deleteBranch deletes remote branches,0.333,git/branch,13,1.543
git/branch deleteBranch handles attempted delete of removed remote branch,0.384,git/branch,13,1.543
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.369
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.14,git/stash,14,1.369
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.369
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.477,formatPatch,5,1.139
git/reflog getRecentBranches returns the recently checked out branches,0.161,git/reflog,6,1.13
git/reflog getRecentBranches works after renaming a branch,0.206,git/reflog,6,1.13
git/reflog getRecentBranches returns a limited number of branches,0.275,git/reflog,6,1.13
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.165,git/reflog,6,1.13
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.207,git/reflog,6,1.13
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.13
git/checkout can checkout a valid branch name in an existing repository,0.191,git/checkout,6,1.126
git/checkout can checkout a branch when it exists on multiple remotes,0.137,git/checkout,6,1.126
git/checkout will fail when an existing branch matches the remote branch,0.125,git/checkout,6,1.126
git/checkout with submodules cleans up an submodule that no longer exists,0.324,git/checkout,6,1.126
git/checkout with submodules updates a changed submodule reference,0.273,git/checkout,6,1.126
git/config config looks up config values,0.055,git/config,12,0.86
git/config config returns null for undefined values,0.055,git/config,12,0.86
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.86
git/config global config setGlobalConfigValue will replace all entries for a global value,0.096,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.063,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.066,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.86
git/submodule listSubmodules returns the submodule entry,0.144,git/submodule,3,0.729
git/submodule listSubmodules returns the expected tag,0.195,git/submodule,3,0.729
git/submodule resetSubmodulePaths update submodule to original commit,0.349,git/submodule,3,0.729
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.774
git/rev-parse isGitRepository should return false for a directory,0.057,git/rev-parse,10,0.774
git/rev-parse isBareRepository returns false for default initialized repository,0.062,git/rev-parse,10,0.774
git/rev-parse isBareRepository returns true for initialized bare repository,0.066,git/rev-parse,10,0.774
git/rev-parse isBareRepository returns false for empty directory,0.054,git/rev-parse,10,0.774
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.774
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.774
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.054,git/rev-parse,10,0.774
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.049,git/rev-parse,10,0.774
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.217,git/rev-parse,10,0.774
git/log getCommits loads history,0.068,git/log,7,0.602
git/log getCommits handles repository with HEAD file on disk,0.095,git/log,7,0.602
git/log getCommits handles repository with signed commit and log.showSignature set,0.108,git/log,7,0.602
git/log getChangedFiles loads the files changed in the commit,0.054,git/log,7,0.602
git/log getChangedFiles detects renames,0.09,git/log,7,0.602
git/log getChangedFiles detect copies,0.096,git/log,7,0.602
git/log getChangedFiles handles commit when HEAD exists on disk,0.05,git/log,7,0.602
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.658
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.658
gitignore appendIgnoreRule appends one rule,0.114,gitignore,9,0.658
gitignore appendIgnoreRule appends multiple rules,0.112,gitignore,9,0.658
git/core error handling does not throw for errors that were expected,0.05,git/core,6,0.35
git/core error handling throws for errors that were not expected,0.054,git/core,6,0.35
git/core exit code handling does not throw for exit codes that were expected,0.053,git/core,6,0.35
git/core exit code handling throws for exit codes that were not expected,0.053,git/core,6,0.35
git/core config lock file error handling can parse lock file path from stderr,0.054,git/core,6,0.35
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.35
git/merge merge and is successful returns true,0.047,git/merge,7,0.584
git/merge merge and is a noop returns false,0.059,git/merge,7,0.584
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.584
git/remote getRemotes should return both remotes,0.056,git/remote,11,0.595
git/remote findDefaultRemote returns origin when multiple remotes found,0.068,git/remote,11,0.595
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.595
git-lfs isUsingLFS returns false for repository not using LFS,0.057,git-lfs,9,0.657
git-lfs isUsingLFS returns true if LFS is tracking a path,0.174,git-lfs,9,0.657
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.42
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.42
Update remote url doesn't update repository's remote url if protocols don't match,0.086,Update remote url,4,0.42
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.42
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.033,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile includes empty context lines,0.027,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.371
AppStore can select a repository,0.221,AppStore,5,0.277
git/for-each-ref getBranches fetches branches using for-each-ref,0.286,git/for-each-ref,3,0.461
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.461
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.461
git/reset reset can hard reset a repository,0.088,git/reset,2,0.126
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.057
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.309,git/rebase,21,7.463
git/rebase detect conflicts status detects REBASE_HEAD,0.256,git/rebase,21,7.463
git/rebase detect conflicts has conflicted files in working directory,0.256,git/rebase,21,7.463
git/rebase detect conflicts is a detached HEAD state,0.26,git/rebase,21,7.463
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.258,git/rebase,21,7.463
git/rebase abort after conflicts found no longer has working directory changes,0.251,git/rebase,21,7.463
git/rebase abort after conflicts found returns to the feature branch,0.264,git/rebase,21,7.463
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.329,git/rebase,21,7.463
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.322,git/rebase,21,7.463
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.32,git/rebase,21,7.463
git/rebase continue after resolving conflicts returns success,0.371,git/rebase,21,7.463
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.368,git/rebase,21,7.463
git/rebase continue after resolving conflicts no longer has working directory changes,0.372,git/rebase,21,7.463
git/rebase continue after resolving conflicts returns to the feature branch,0.383,git/rebase,21,7.463
git/rebase continue after resolving conflicts branch is now a different ref,0.377,git/rebase,21,7.463
git/rebase continue with additional changes unrelated to conflicted files returns success,0.371,git/rebase,21,7.463
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.387,git/rebase,21,7.463
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.377,git/rebase,21,7.463
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.387,git/rebase,21,7.463
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.385,git/rebase,21,7.463
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.359,git/rebase,21,7.463
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.348
git/commit createCommit normal commit does not strip commentary by default,0.103,git/commit,21,4.348
git/commit createCommit normal can commit for empty repository,0.129,git/commit,21,4.348
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.348
git/commit createCommit partials can commit some lines from new file,0.175,git/commit,21,4.348
git/commit createCommit partials can commit second hunk from modified file,0.185,git/commit,21,4.348
git/commit createCommit partials can commit single delete from modified file,0.169,git/commit,21,4.348
git/commit createCommit partials can commit multiple hunks from modified file,0.194,git/commit,21,4.348
git/commit createCommit partials can commit some lines from deleted file,0.168,git/commit,21,4.348
git/commit createCommit partials can commit renames with modifications,0.175,git/commit,21,4.348
git/commit createCommit partials can commit renames with partially selected modifications,0.216,git/commit,21,4.348
git/commit createCommit with a merge conflict creates a merge commit,0.244,git/commit,21,4.348
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.231,git/commit,21,4.348
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.322,git/commit,21,4.348
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.312,git/commit,21,4.348
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.391,git/commit,21,4.348
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.39,git/commit,21,4.348
git/commit createMergeCommit with no changes throws an error,0.108,git/commit,21,4.348
git/commit index corner cases can commit when staged new file is then deleted,0.151,git/commit,21,4.348
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.177,git/commit,21,4.348
git/commit index corner cases file is deleted in index,0.173,git/commit,21,4.348
git/rebase can parse progress returns a value indicating conflicts were encountered,0.387,git/rebase,7,3.65
git/rebase can parse progress status detects REBASE_HEAD,0.39,git/rebase,7,3.65
git/rebase can parse progress is a detached HEAD state,0.39,git/rebase,7,3.65
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.801,git/rebase,7,3.65
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.805,git/rebase,7,3.65
git/rebase can parse progress for long rebase is a detached HEAD state,0.826,git/rebase,7,3.65
GitStore loadCommitBatch includes HEAD when loading commits,0.397,GitStore,11,2.523
GitStore can discard changes from a repository,0.164,GitStore,11,2.523
GitStore can discard a renamed file,0.145,GitStore,11,2.523
GitStore undo first commit reports the repository is unborn,0.187,GitStore,11,2.523
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.523
GitStore undo first commit clears the undo commit dialog,0.217,GitStore,11,2.523
GitStore undo first commit has no staged files,0.199,GitStore,11,2.523
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.523
git/status getStatus with conflicted repo parses conflicted files with markers,0.286,git/status,12,1.997
git/status getStatus with conflicted repo parses conflicted files without markers,0.293,git/status,12,1.997
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.389,git/status,12,1.997
git/status getStatus with conflicted repo parses resolved files,0.294,git/status,12,1.997
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.127,git/status,12,1.997
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.148,git/status,12,1.997
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,1.997
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.06,git/status,12,1.997
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,1.997
git/status getStatus with unconflicted repo reflects copies,0.113,git/status,12,1.997
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,1.997
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.05,git/diff,19,2.002
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,2.002
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,2.002
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,2.002
git/diff imageDiff changes for images are set,0.121,git/diff,19,2.002
git/diff imageDiff changes for text are not set,0.088,git/diff,19,2.002
git/diff getWorkingDirectoryDiff counts lines for new file,0.085,git/diff,19,2.002
git/diff getWorkingDirectoryDiff counts lines for modified file,0.094,git/diff,19,2.002
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,2.002
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.131,git/diff,19,2.002
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.171,git/diff,19,2.002
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.181,git/diff,19,2.002
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.142,git/diff,19,2.002
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.141,git/diff,19,2.002
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.094,git/diff,19,2.002
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.07,git/diff,19,2.002
git/diff getBinaryPaths in repo with text only files returns an empty array,0.101,git/diff,19,2.002
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,2.002
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,2.002
BranchPruner does nothing on non GitHub repositories,0.262,BranchPruner,6,2.05
BranchPruner prunes for GitHub repository,0.344,BranchPruner,6,2.05
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.289,BranchPruner,6,2.05
BranchPruner does not prune if there is no default branch,0.28,BranchPruner,6,2.05
BranchPruner does not prune reserved branches,0.359,BranchPruner,6,2.05
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.692
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,13,1.692
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.692
git/branch tip returns current branch when on a valid HEAD,0.084,git/branch,13,1.692
git/branch tip returns non-origin remote,0.091,git/branch,13,1.692
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.09,git/branch,13,1.692
git/branch getBranchesPointedAt in a local repo finds one branch name,0.067,git/branch,13,1.692
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.692
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.055,git/branch,13,1.692
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.099,git/branch,13,1.692
git/branch deleteBranch deletes local branches,0.14,git/branch,13,1.692
git/branch deleteBranch deletes remote branches,0.376,git/branch,13,1.692
git/branch deleteBranch handles attempted delete of removed remote branch,0.445,git/branch,13,1.692
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.12,git/stash,14,1.49
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.153,git/stash,14,1.49
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.11,git/stash,14,1.49
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.453,formatPatch,5,1.159
git/reflog getRecentBranches returns the recently checked out branches,0.158,git/reflog,6,1.119
git/reflog getRecentBranches works after renaming a branch,0.208,git/reflog,6,1.119
git/reflog getRecentBranches returns a limited number of branches,0.283,git/reflog,6,1.119
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.162,git/reflog,6,1.119
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.202,git/reflog,6,1.119
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.068,git/reflog,6,1.119
git/checkout can checkout a valid branch name in an existing repository,0.128,git/checkout,6,1.048
git/checkout can checkout a branch when it exists on multiple remotes,0.134,git/checkout,6,1.048
git/checkout will fail when an existing branch matches the remote branch,0.128,git/checkout,6,1.048
git/checkout with submodules cleans up an submodule that no longer exists,0.322,git/checkout,6,1.048
git/checkout with submodules updates a changed submodule reference,0.263,git/checkout,6,1.048
git/config config looks up config values,0.052,git/config,12,0.832
git/config config returns null for undefined values,0.052,git/config,12,0.832
git/config global config getGlobalConfigPath gets the config path,0.063,git/config,12,0.832
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.075,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.065,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.065,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.066,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.064,git/config,12,0.832
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.066,git/config,12,0.832
git/rev-parse isGitRepository should return true for a repository,0.119,git/rev-parse,10,0.84
git/rev-parse isGitRepository should return false for a directory,0.059,git/rev-parse,10,0.84
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.84
git/rev-parse isBareRepository returns true for initialized bare repository,0.067,git/rev-parse,10,0.84
git/rev-parse isBareRepository returns false for empty directory,0.06,git/rev-parse,10,0.84
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.84
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.84
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.055,git/rev-parse,10,0.84
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.84
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.191,git/rev-parse,10,0.84
git/submodule listSubmodules returns the submodule entry,0.141,git/submodule,3,0.772
git/submodule listSubmodules returns the expected tag,0.193,git/submodule,3,0.772
git/submodule resetSubmodulePaths update submodule to original commit,0.395,git/submodule,3,0.772
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.694
gitignore saveGitIgnore applies rule correctly to repository,0.105,gitignore,9,0.694
gitignore appendIgnoreRule appends one rule,0.121,gitignore,9,0.694
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.694
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.53
git-lfs isUsingLFS returns true if LFS is tracking a path,0.083,git-lfs,9,0.53
git/log getCommits loads history,0.07,git/log,7,0.663
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.663
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.663
git/log getChangedFiles loads the files changed in the commit,0.067,git/log,7,0.663
git/log getChangedFiles detects renames,0.103,git/log,7,0.663
git/log getChangedFiles detect copies,0.106,git/log,7,0.663
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.663
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.57
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.57
git/remote findDefaultRemote returns something when origin removed,0.069,git/remote,11,0.57
git/merge merge and is successful returns true,0.044,git/merge,7,0.606
git/merge merge and is a noop returns false,0.06,git/merge,7,0.606
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.606
git/for-each-ref getBranches fetches branches using for-each-ref,0.071,git/for-each-ref,3,0.241
git/for-each-ref getBranches should return empty list for empty repo,0.07,git/for-each-ref,3,0.241
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.241
Update remote url updates the repository's remote url when the github url changes,0.111,Update remote url,4,0.396
Update remote url doesn't update the repository's remote url when the github url is the same,0.077,Update remote url,4,0.396
Update remote url doesn't update repository's remote url if protocols don't match,0.082,Update remote url,4,0.396
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.075,Update remote url,4,0.396
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.046,patch formatting,8,0.334
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.044,patch formatting,8,0.334
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.044,patch formatting,8,0.334
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.046,patch formatting,8,0.334
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.032,patch formatting,8,0.334
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.03,patch formatting,8,0.334
patch formatting formatPatchesForModifiedFile includes empty context lines,0.026,patch formatting,8,0.334
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.334
git/core error handling does not throw for errors that were expected,0.049,git/core,6,0.367
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.367
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.367
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.367
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.367
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.367
AppStore can select a repository,0.332,AppStore,5,0.386
git/reset reset can hard reset a repository,0.307,git/reset,2,0.353
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.308,git/rebase,21,7.585
git/rebase detect conflicts status detects REBASE_HEAD,0.259,git/rebase,21,7.585
git/rebase detect conflicts has conflicted files in working directory,0.265,git/rebase,21,7.585
git/rebase detect conflicts is a detached HEAD state,0.271,git/rebase,21,7.585
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.261,git/rebase,21,7.585
git/rebase abort after conflicts found no longer has working directory changes,0.257,git/rebase,21,7.585
git/rebase abort after conflicts found returns to the feature branch,0.253,git/rebase,21,7.585
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.33,git/rebase,21,7.585
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.325,git/rebase,21,7.585
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.32,git/rebase,21,7.585
git/rebase continue after resolving conflicts returns success,0.37,git/rebase,21,7.585
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.376,git/rebase,21,7.585
git/rebase continue after resolving conflicts no longer has working directory changes,0.373,git/rebase,21,7.585
git/rebase continue after resolving conflicts returns to the feature branch,0.388,git/rebase,21,7.585
git/rebase continue after resolving conflicts branch is now a different ref,0.391,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files returns success,0.381,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.383,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.393,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.405,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.405,git/rebase,21,7.585
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.37,git/rebase,21,7.585
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.578
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.578
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.578
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.578
git/commit createCommit partials can commit some lines from new file,0.185,git/commit,21,4.578
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.578
git/commit createCommit partials can commit single delete from modified file,0.184,git/commit,21,4.578
git/commit createCommit partials can commit multiple hunks from modified file,0.201,git/commit,21,4.578
git/commit createCommit partials can commit some lines from deleted file,0.185,git/commit,21,4.578
git/commit createCommit partials can commit renames with modifications,0.19,git/commit,21,4.578
git/commit createCommit partials can commit renames with partially selected modifications,0.237,git/commit,21,4.578
git/commit createCommit with a merge conflict creates a merge commit,0.27,git/commit,21,4.578
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.243,git/commit,21,4.578
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.332,git/commit,21,4.578
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.33,git/commit,21,4.578
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.414,git/commit,21,4.578
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.412,git/commit,21,4.578
git/commit createMergeCommit with no changes throws an error,0.109,git/commit,21,4.578
git/commit index corner cases can commit when staged new file is then deleted,0.151,git/commit,21,4.578
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.173,git/commit,21,4.578
git/commit index corner cases file is deleted in index,0.174,git/commit,21,4.578
git/rebase can parse progress returns a value indicating conflicts were encountered,0.401,git/rebase,7,3.79
git/rebase can parse progress status detects REBASE_HEAD,0.401,git/rebase,7,3.79
git/rebase can parse progress is a detached HEAD state,0.411,git/rebase,7,3.79
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.829,git/rebase,7,3.79
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.848,git/rebase,7,3.79
git/rebase can parse progress for long rebase is a detached HEAD state,0.844,git/rebase,7,3.79
GitStore loadCommitBatch includes HEAD when loading commits,0.405,GitStore,11,2.63
GitStore can discard changes from a repository,0.169,GitStore,11,2.63
GitStore can discard a renamed file,0.15,GitStore,11,2.63
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.63
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.63
GitStore undo first commit clears the undo commit dialog,0.221,GitStore,11,2.63
GitStore undo first commit has no staged files,0.214,GitStore,11,2.63
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.63
BranchPruner does nothing on non GitHub repositories,0.25,BranchPruner,6,2.015
BranchPruner prunes for GitHub repository,0.34,BranchPruner,6,2.015
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.261,BranchPruner,6,2.015
BranchPruner does not prune if there is no default branch,0.265,BranchPruner,6,2.015
BranchPruner does not prune reserved branches,0.339,BranchPruner,6,2.015
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.047,git/diff,19,1.848
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.051,git/diff,19,1.848
git/diff getBlobImage retrieves valid image for modified file,0.095,git/diff,19,1.848
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.848
git/diff imageDiff changes for images are set,0.083,git/diff,19,1.848
git/diff imageDiff changes for text are not set,0.093,git/diff,19,1.848
git/diff getWorkingDirectoryDiff counts lines for new file,0.096,git/diff,19,1.848
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,1.848
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.848
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.128,git/diff,19,1.848
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.133,git/diff,19,1.848
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.141,git/diff,19,1.848
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.119,git/diff,19,1.848
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.11,git/diff,19,1.848
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.084,git/diff,19,1.848
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.064,git/diff,19,1.848
git/diff getBinaryPaths in repo with text only files returns an empty array,0.085,git/diff,19,1.848
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.097,git/diff,19,1.848
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.123,git/diff,19,1.848
git/status getStatus with conflicted repo parses conflicted files with markers,0.264,git/status,12,1.839
git/status getStatus with conflicted repo parses conflicted files without markers,0.265,git/status,12,1.839
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.35,git/status,12,1.839
git/status getStatus with conflicted repo parses resolved files,0.267,git/status,12,1.839
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.112,git/status,12,1.839
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.144,git/status,12,1.839
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,1.839
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,1.839
git/status getStatus with unconflicted repo reflects renames,0.098,git/status,12,1.839
git/status getStatus with unconflicted repo reflects copies,0.11,git/status,12,1.839
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.054,git/status,12,1.839
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.531
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.531
git/branch tip returns detached for arbitrary checkout,0.062,git/branch,13,1.531
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.531
git/branch tip returns non-origin remote,0.086,git/branch,13,1.531
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.531
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.531
git/branch deleteBranch deletes local branches,0.126,git/branch,13,1.531
git/branch deleteBranch deletes remote branches,0.33,git/branch,13,1.531
git/branch deleteBranch handles attempted delete of removed remote branch,0.395,git/branch,13,1.531
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.113,git/stash,14,1.391
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.147,git/stash,14,1.391
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.391
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.455,formatPatch,5,1.142
git/reflog getRecentBranches returns the recently checked out branches,0.151,git/reflog,6,1.06
git/reflog getRecentBranches works after renaming a branch,0.191,git/reflog,6,1.06
git/reflog getRecentBranches returns a limited number of branches,0.265,git/reflog,6,1.06
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.154,git/reflog,6,1.06
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.189,git/reflog,6,1.06
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.06
git/checkout can checkout a valid branch name in an existing repository,0.117,git/checkout,6,1.016
git/checkout can checkout a branch when it exists on multiple remotes,0.128,git/checkout,6,1.016
git/checkout will fail when an existing branch matches the remote branch,0.12,git/checkout,6,1.016
git/checkout with submodules cleans up an submodule that no longer exists,0.315,git/checkout,6,1.016
git/checkout with submodules updates a changed submodule reference,0.263,git/checkout,6,1.016
git/rev-parse isGitRepository should return true for a repository,0.053,git/rev-parse,10,0.759
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns false for default initialized repository,0.064,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns true for initialized bare repository,0.066,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns false for empty directory,0.056,git/rev-parse,10,0.759
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.06,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.054,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.188,git/rev-parse,10,0.759
git/config config looks up config values,0.059,git/config,12,0.891
git/config config returns null for undefined values,0.059,git/config,12,0.891
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.891
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.891
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.891
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.891
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.07,git/config,12,0.891
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.891
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.073,git/config,12,0.891
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.891
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.077,git/config,12,0.891
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.891
git/submodule listSubmodules returns the submodule entry,0.138,git/submodule,3,0.786
git/submodule listSubmodules returns the expected tag,0.197,git/submodule,3,0.786
git/submodule resetSubmodulePaths update submodule to original commit,0.41,git/submodule,3,0.786
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.688
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.688
gitignore appendIgnoreRule appends one rule,0.121,gitignore,9,0.688
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.688
git/log getCommits loads history,0.069,git/log,7,0.682
git/log getCommits handles repository with HEAD file on disk,0.11,git/log,7,0.682
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.682
git/log getChangedFiles loads the files changed in the commit,0.061,git/log,7,0.682
git/log getChangedFiles detects renames,0.109,git/log,7,0.682
git/log getChangedFiles detect copies,0.111,git/log,7,0.682
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.682
git/merge merge and is successful returns true,0.128,git/merge,7,0.705
git/merge merge and is a noop returns false,0.061,git/merge,7,0.705
git/merge getMergeBase returns the common ancestor of two branches,0.075,git/merge,7,0.705
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.589
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.589
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.589
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.538
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.538
Update remote url updates the repository's remote url when the github url changes,0.117,Update remote url,4,0.405
Update remote url doesn't update the repository's remote url when the github url is the same,0.083,Update remote url,4,0.405
Update remote url doesn't update repository's remote url if protocols don't match,0.073,Update remote url,4,0.405
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.077,Update remote url,4,0.405
AppStore can select a repository,0.217,AppStore,5,0.273
git/core error handling does not throw for errors that were expected,0.195,git/core,6,0.5
git/core error handling throws for errors that were not expected,0.054,git/core,6,0.5
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.5
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.5
git/core config lock file error handling can parse lock file path from stderr,0.056,git/core,6,0.5
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.5
git/reset reset can hard reset a repository,0.076,git/reset,2,0.116
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.056,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.384
git/for-each-ref getBranches fetches branches using for-each-ref,0.076,git/for-each-ref,3,0.248
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.248
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.248
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.321,git/rebase,21,7.564
git/rebase detect conflicts status detects REBASE_HEAD,0.262,git/rebase,21,7.564
git/rebase detect conflicts has conflicted files in working directory,0.26,git/rebase,21,7.564
git/rebase detect conflicts is a detached HEAD state,0.26,git/rebase,21,7.564
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.257,git/rebase,21,7.564
git/rebase abort after conflicts found no longer has working directory changes,0.251,git/rebase,21,7.564
git/rebase abort after conflicts found returns to the feature branch,0.254,git/rebase,21,7.564
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.338,git/rebase,21,7.564
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.316,git/rebase,21,7.564
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.322,git/rebase,21,7.564
git/rebase continue after resolving conflicts returns success,0.373,git/rebase,21,7.564
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.375,git/rebase,21,7.564
git/rebase continue after resolving conflicts no longer has working directory changes,0.378,git/rebase,21,7.564
git/rebase continue after resolving conflicts returns to the feature branch,0.391,git/rebase,21,7.564
git/rebase continue after resolving conflicts branch is now a different ref,0.383,git/rebase,21,7.564
git/rebase continue with additional changes unrelated to conflicted files returns success,0.383,git/rebase,21,7.564
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.564
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.384,git/rebase,21,7.564
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.393,git/rebase,21,7.564
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.397,git/rebase,21,7.564
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.371,git/rebase,21,7.564
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.585
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.585
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.585
git/commit createCommit normal can commit renames,0.154,git/commit,21,4.585
git/commit createCommit partials can commit some lines from new file,0.191,git/commit,21,4.585
git/commit createCommit partials can commit second hunk from modified file,0.199,git/commit,21,4.585
git/commit createCommit partials can commit single delete from modified file,0.178,git/commit,21,4.585
git/commit createCommit partials can commit multiple hunks from modified file,0.2,git/commit,21,4.585
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.585
git/commit createCommit partials can commit renames with modifications,0.197,git/commit,21,4.585
git/commit createCommit partials can commit renames with partially selected modifications,0.238,git/commit,21,4.585
git/commit createCommit with a merge conflict creates a merge commit,0.268,git/commit,21,4.585
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.235,git/commit,21,4.585
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.34,git/commit,21,4.585
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.33,git/commit,21,4.585
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.406,git/commit,21,4.585
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.407,git/commit,21,4.585
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.585
git/commit index corner cases can commit when staged new file is then deleted,0.152,git/commit,21,4.585
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.175,git/commit,21,4.585
git/commit index corner cases file is deleted in index,0.184,git/commit,21,4.585
git/rebase can parse progress returns a value indicating conflicts were encountered,0.396,git/rebase,7,3.799
git/rebase can parse progress status detects REBASE_HEAD,0.398,git/rebase,7,3.799
git/rebase can parse progress is a detached HEAD state,0.396,git/rebase,7,3.799
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.824,git/rebase,7,3.799
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.872,git/rebase,7,3.799
git/rebase can parse progress for long rebase is a detached HEAD state,0.85,git/rebase,7,3.799
GitStore loadCommitBatch includes HEAD when loading commits,0.44,GitStore,11,2.65
GitStore can discard changes from a repository,0.168,GitStore,11,2.65
GitStore can discard a renamed file,0.171,GitStore,11,2.65
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.65
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.65
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.65
GitStore undo first commit has no staged files,0.213,GitStore,11,2.65
GitStore repository with HEAD file can discard modified change cleanly,0.114,GitStore,11,2.65
BranchPruner does nothing on non GitHub repositories,0.261,BranchPruner,6,1.99
BranchPruner prunes for GitHub repository,0.346,BranchPruner,6,1.99
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.272,BranchPruner,6,1.99
BranchPruner does not prune if there is no default branch,0.247,BranchPruner,6,1.99
BranchPruner does not prune reserved branches,0.322,BranchPruner,6,1.99
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.054,git/diff,19,1.926
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,1.926
git/diff getBlobImage retrieves valid image for modified file,0.103,git/diff,19,1.926
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.926
git/diff imageDiff changes for images are set,0.082,git/diff,19,1.926
git/diff imageDiff changes for text are not set,0.097,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for new file,0.093,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for modified file,0.089,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for staged file,0.085,git/diff,19,1.926
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.129,git/diff,19,1.926
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.146,git/diff,19,1.926
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.153,git/diff,19,1.926
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.131,git/diff,19,1.926
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.12,git/diff,19,1.926
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.086,git/diff,19,1.926
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.072,git/diff,19,1.926
git/diff getBinaryPaths in repo with text only files returns an empty array,0.093,git/diff,19,1.926
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.109,git/diff,19,1.926
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.926
git/status getStatus with conflicted repo parses conflicted files with markers,0.265,git/status,12,1.843
git/status getStatus with conflicted repo parses conflicted files without markers,0.263,git/status,12,1.843
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.348,git/status,12,1.843
git/status getStatus with conflicted repo parses resolved files,0.264,git/status,12,1.843
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.113,git/status,12,1.843
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.15,git/status,12,1.843
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,1.843
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,1.843
git/status getStatus with unconflicted repo reflects renames,0.098,git/status,12,1.843
git/status getStatus with unconflicted repo reflects copies,0.115,git/status,12,1.843
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,1.843
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.484
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.484
git/branch tip returns detached for arbitrary checkout,0.064,git/branch,13,1.484
git/branch tip returns current branch when on a valid HEAD,0.073,git/branch,13,1.484
git/branch tip returns non-origin remote,0.08,git/branch,13,1.484
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,13,1.484
git/branch getBranchesPointedAt in a local repo finds one branch name,0.055,git/branch,13,1.484
git/branch getBranchesPointedAt in a local repo finds no branch names,0.051,git/branch,13,1.484
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.055,git/branch,13,1.484
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.484
git/branch deleteBranch deletes local branches,0.124,git/branch,13,1.484
git/branch deleteBranch deletes remote branches,0.325,git/branch,13,1.484
git/branch deleteBranch handles attempted delete of removed remote branch,0.373,git/branch,13,1.484
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.112,git/stash,14,1.392
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.149,git/stash,14,1.392
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.098,git/stash,14,1.392
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.486,formatPatch,5,1.136
git/reflog getRecentBranches returns the recently checked out branches,0.207,git/reflog,6,1.138
git/reflog getRecentBranches works after renaming a branch,0.201,git/reflog,6,1.138
git/reflog getRecentBranches returns a limited number of branches,0.265,git/reflog,6,1.138
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.157,git/reflog,6,1.138
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.196,git/reflog,6,1.138
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.138
git/checkout can checkout a valid branch name in an existing repository,0.121,git/checkout,6,1.046
git/checkout can checkout a branch when it exists on multiple remotes,0.129,git/checkout,6,1.046
git/checkout will fail when an existing branch matches the remote branch,0.12,git/checkout,6,1.046
git/checkout with submodules cleans up an submodule that no longer exists,0.325,git/checkout,6,1.046
git/checkout with submodules updates a changed submodule reference,0.273,git/checkout,6,1.046
git/config config looks up config values,0.055,git/config,12,0.837
git/config config returns null for undefined values,0.056,git/config,12,0.837
git/config global config getGlobalConfigPath gets the config path,0.064,git/config,12,0.837
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,12,0.837
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.837
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.063,git/config,12,0.837
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.064,git/config,12,0.837
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.064,git/config,12,0.837
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.063,git/config,12,0.837
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.837
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.066,git/config,12,0.837
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.837
git/submodule listSubmodules returns the submodule entry,0.136,git/submodule,3,0.688
git/submodule listSubmodules returns the expected tag,0.178,git/submodule,3,0.688
git/submodule resetSubmodulePaths update submodule to original commit,0.331,git/submodule,3,0.688
git/rev-parse isGitRepository should return true for a repository,0.052,git/rev-parse,10,0.779
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.779
git/rev-parse isBareRepository returns false for default initialized repository,0.06,git/rev-parse,10,0.779
git/rev-parse isBareRepository returns true for initialized bare repository,0.063,git/rev-parse,10,0.779
git/rev-parse isBareRepository returns false for empty directory,0.056,git/rev-parse,10,0.779
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.779
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.779
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.061,git/rev-parse,10,0.779
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.055,git/rev-parse,10,0.779
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.219,git/rev-parse,10,0.779
git/merge merge and is successful returns true,0.044,git/merge,7,0.572
git/merge merge and is a noop returns false,0.061,git/merge,7,0.572
git/merge getMergeBase returns the common ancestor of two branches,0.069,git/merge,7,0.572
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.686
gitignore saveGitIgnore applies rule correctly to repository,0.098,gitignore,9,0.686
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.686
gitignore appendIgnoreRule appends multiple rules,0.122,gitignore,9,0.686
git/log getCommits loads history,0.073,git/log,7,0.635
git/log getCommits handles repository with HEAD file on disk,0.094,git/log,7,0.635
git/log getCommits handles repository with signed commit and log.showSignature set,0.112,git/log,7,0.635
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.635
git/log getChangedFiles detects renames,0.097,git/log,7,0.635
git/log getChangedFiles detect copies,0.103,git/log,7,0.635
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.635
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.581
git/remote findDefaultRemote returns origin when multiple remotes found,0.067,git/remote,11,0.581
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.581
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.546
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.546
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.361
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.361
git/core exit code handling does not throw for exit codes that were expected,0.054,git/core,6,0.361
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.361
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.361
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.361
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.406
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.406
Update remote url doesn't update repository's remote url if protocols don't match,0.079,Update remote url,4,0.406
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.079,Update remote url,4,0.406
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.053,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.047,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.034,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.031,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile includes empty context lines,0.027,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.025,patch formatting,8,0.36
AppStore can select a repository,0.226,AppStore,5,0.282
git/for-each-ref getBranches fetches branches using for-each-ref,0.292,git/for-each-ref,3,0.466
git/for-each-ref getBranches should return empty list for empty repo,0.071,git/for-each-ref,3,0.466
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.466
git/reset reset can hard reset a repository,0.087,git/reset,2,0.128
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.307,git/rebase,21,7.59
git/rebase detect conflicts status detects REBASE_HEAD,0.266,git/rebase,21,7.59
git/rebase detect conflicts has conflicted files in working directory,0.261,git/rebase,21,7.59
git/rebase detect conflicts is a detached HEAD state,0.261,git/rebase,21,7.59
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.265,git/rebase,21,7.59
git/rebase abort after conflicts found no longer has working directory changes,0.255,git/rebase,21,7.59
git/rebase abort after conflicts found returns to the feature branch,0.256,git/rebase,21,7.59
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.338,git/rebase,21,7.59
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.322,git/rebase,21,7.59
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.322,git/rebase,21,7.59
git/rebase continue after resolving conflicts returns success,0.374,git/rebase,21,7.59
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.59
git/rebase continue after resolving conflicts no longer has working directory changes,0.379,git/rebase,21,7.59
git/rebase continue after resolving conflicts returns to the feature branch,0.389,git/rebase,21,7.59
git/rebase continue after resolving conflicts branch is now a different ref,0.384,git/rebase,21,7.59
git/rebase continue with additional changes unrelated to conflicted files returns success,0.379,git/rebase,21,7.59
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.59
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.388,git/rebase,21,7.59
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.393,git/rebase,21,7.59
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.401,git/rebase,21,7.59
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.369,git/rebase,21,7.59
git/commit createCommit normal commits the given files,0.122,git/commit,21,4.534
git/commit createCommit normal commit does not strip commentary by default,0.116,git/commit,21,4.534
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.534
git/commit createCommit normal can commit renames,0.156,git/commit,21,4.534
git/commit createCommit partials can commit some lines from new file,0.196,git/commit,21,4.534
git/commit createCommit partials can commit second hunk from modified file,0.195,git/commit,21,4.534
git/commit createCommit partials can commit single delete from modified file,0.178,git/commit,21,4.534
git/commit createCommit partials can commit multiple hunks from modified file,0.186,git/commit,21,4.534
git/commit createCommit partials can commit some lines from deleted file,0.175,git/commit,21,4.534
git/commit createCommit partials can commit renames with modifications,0.181,git/commit,21,4.534
git/commit createCommit partials can commit renames with partially selected modifications,0.223,git/commit,21,4.534
git/commit createCommit with a merge conflict creates a merge commit,0.271,git/commit,21,4.534
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.239,git/commit,21,4.534
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.338,git/commit,21,4.534
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.322,git/commit,21,4.534
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.409,git/commit,21,4.534
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.406,git/commit,21,4.534
git/commit createMergeCommit with no changes throws an error,0.114,git/commit,21,4.534
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.534
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.174,git/commit,21,4.534
git/commit index corner cases file is deleted in index,0.176,git/commit,21,4.534
git/rebase can parse progress returns a value indicating conflicts were encountered,0.395,git/rebase,7,3.778
git/rebase can parse progress status detects REBASE_HEAD,0.407,git/rebase,7,3.778
git/rebase can parse progress is a detached HEAD state,0.396,git/rebase,7,3.778
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.847,git/rebase,7,3.778
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.833,git/rebase,7,3.778
git/rebase can parse progress for long rebase is a detached HEAD state,0.846,git/rebase,7,3.778
GitStore loadCommitBatch includes HEAD when loading commits,0.378,GitStore,11,2.588
GitStore can discard changes from a repository,0.167,GitStore,11,2.588
GitStore can discard a renamed file,0.151,GitStore,11,2.588
GitStore undo first commit reports the repository is unborn,0.19,GitStore,11,2.588
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.588
GitStore undo first commit clears the undo commit dialog,0.22,GitStore,11,2.588
GitStore undo first commit has no staged files,0.212,GitStore,11,2.588
GitStore repository with HEAD file can discard modified change cleanly,0.12,GitStore,11,2.588
BranchPruner does nothing on non GitHub repositories,0.255,BranchPruner,6,1.949
BranchPruner prunes for GitHub repository,0.322,BranchPruner,6,1.949
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.248,BranchPruner,6,1.949
BranchPruner does not prune if there is no default branch,0.251,BranchPruner,6,1.949
BranchPruner does not prune reserved branches,0.336,BranchPruner,6,1.949
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.051,git/diff,19,1.845
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,1.845
git/diff getBlobImage retrieves valid image for modified file,0.099,git/diff,19,1.845
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.845
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.845
git/diff imageDiff changes for text are not set,0.091,git/diff,19,1.845
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,1.845
git/diff getWorkingDirectoryDiff counts lines for modified file,0.087,git/diff,19,1.845
git/diff getWorkingDirectoryDiff counts lines for staged file,0.08,git/diff,19,1.845
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.114,git/diff,19,1.845
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.134,git/diff,19,1.845
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.146,git/diff,19,1.845
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.126,git/diff,19,1.845
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.119,git/diff,19,1.845
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.09,git/diff,19,1.845
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.062,git/diff,19,1.845
git/diff getBinaryPaths in repo with text only files returns an empty array,0.085,git/diff,19,1.845
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.105,git/diff,19,1.845
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.845
git/status getStatus with conflicted repo parses conflicted files with markers,0.257,git/status,12,1.828
git/status getStatus with conflicted repo parses conflicted files without markers,0.262,git/status,12,1.828
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.341,git/status,12,1.828
git/status getStatus with conflicted repo parses resolved files,0.272,git/status,12,1.828
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.108,git/status,12,1.828
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.144,git/status,12,1.828
git/status getStatus with unconflicted repo parses changed files,0.063,git/status,12,1.828
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,1.828
git/status getStatus with unconflicted repo reflects renames,0.104,git/status,12,1.828
git/status getStatus with unconflicted repo reflects copies,0.113,git/status,12,1.828
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.055,git/status,12,1.828
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.501
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.501
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.501
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,13,1.501
git/branch tip returns non-origin remote,0.085,git/branch,13,1.501
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.091,git/branch,13,1.501
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.501
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.501
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.501
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.085,git/branch,13,1.501
git/branch deleteBranch deletes local branches,0.122,git/branch,13,1.501
git/branch deleteBranch deletes remote branches,0.319,git/branch,13,1.501
git/branch deleteBranch handles attempted delete of removed remote branch,0.383,git/branch,13,1.501
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.382
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.14,git/stash,14,1.382
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.382
git/reflog getRecentBranches returns the recently checked out branches,0.206,git/reflog,6,1.092
git/reflog getRecentBranches works after renaming a branch,0.199,git/reflog,6,1.092
git/reflog getRecentBranches returns a limited number of branches,0.252,git/reflog,6,1.092
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.148,git/reflog,6,1.092
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.181,git/reflog,6,1.092
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.064,git/reflog,6,1.092
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.462,formatPatch,5,1.097
git/checkout can checkout a valid branch name in an existing repository,0.119,git/checkout,6,1.027
git/checkout can checkout a branch when it exists on multiple remotes,0.132,git/checkout,6,1.027
git/checkout will fail when an existing branch matches the remote branch,0.121,git/checkout,6,1.027
git/checkout with submodules cleans up an submodule that no longer exists,0.314,git/checkout,6,1.027
git/checkout with submodules updates a changed submodule reference,0.269,git/checkout,6,1.027
git/config config looks up config values,0.051,git/config,12,0.789
git/config config returns null for undefined values,0.049,git/config,12,0.789
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,12,0.789
git/config global config setGlobalConfigValue will replace all entries for a global value,0.084,git/config,12,0.789
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.064,git/config,12,0.789
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.061,git/config,12,0.789
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.061,git/config,12,0.789
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.06,git/config,12,0.789
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.061,git/config,12,0.789
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.067,git/config,12,0.789
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.064,git/config,12,0.789
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.066,git/config,12,0.789
git/rev-parse isGitRepository should return true for a repository,0.053,git/rev-parse,10,0.747
git/rev-parse isGitRepository should return false for a directory,0.051,git/rev-parse,10,0.747
git/rev-parse isBareRepository returns false for default initialized repository,0.064,git/rev-parse,10,0.747
git/rev-parse isBareRepository returns true for initialized bare repository,0.064,git/rev-parse,10,0.747
git/rev-parse isBareRepository returns false for empty directory,0.054,git/rev-parse,10,0.747
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.747
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.747
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.747
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.063,git/rev-parse,10,0.747
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.182,git/rev-parse,10,0.747
git/submodule listSubmodules returns the submodule entry,0.121,git/submodule,3,0.697
git/submodule listSubmodules returns the expected tag,0.175,git/submodule,3,0.697
git/submodule resetSubmodulePaths update submodule to original commit,0.358,git/submodule,3,0.697
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.679
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.679
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.679
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.679
git/log getCommits loads history,0.06,git/log,7,0.66
git/log getCommits handles repository with HEAD file on disk,0.101,git/log,7,0.66
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.66
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.66
git/log getChangedFiles detects renames,0.105,git/log,7,0.66
git/log getChangedFiles detect copies,0.11,git/log,7,0.66
git/log getChangedFiles handles commit when HEAD exists on disk,0.061,git/log,7,0.66
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.607
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,11,0.607
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.607
git/merge merge and is successful returns true,0.043,git/merge,7,0.698
git/merge merge and is a noop returns false,0.14,git/merge,7,0.698
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.698
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.559
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.559
git/for-each-ref getBranches fetches branches using for-each-ref,0.072,git/for-each-ref,3,0.236
git/for-each-ref getBranches should return empty list for empty repo,0.067,git/for-each-ref,3,0.236
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.055,git/for-each-ref,3,0.236
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.404
Update remote url doesn't update the repository's remote url when the github url is the same,0.081,Update remote url,4,0.404
Update remote url doesn't update repository's remote url if protocols don't match,0.08,Update remote url,4,0.404
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.077,Update remote url,4,0.404
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.375
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.375
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.375
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.375
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.375
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.375
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.367
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.367
AppStore can select a repository,0.229,AppStore,5,0.283
git/reset reset can hard reset a repository,0.3,git/reset,2,0.343
validatedRepositoryPath returns the path to the repository,0.049,validatedRepositoryPath,2,0.105
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.321,git/rebase,21,7.633
git/rebase detect conflicts status detects REBASE_HEAD,0.259,git/rebase,21,7.633
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.633
git/rebase detect conflicts is a detached HEAD state,0.276,git/rebase,21,7.633
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.258,git/rebase,21,7.633
git/rebase abort after conflicts found no longer has working directory changes,0.255,git/rebase,21,7.633
git/rebase abort after conflicts found returns to the feature branch,0.259,git/rebase,21,7.633
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.338,git/rebase,21,7.633
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.324,git/rebase,21,7.633
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.324,git/rebase,21,7.633
git/rebase continue after resolving conflicts returns success,0.381,git/rebase,21,7.633
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.633
git/rebase continue after resolving conflicts no longer has working directory changes,0.379,git/rebase,21,7.633
git/rebase continue after resolving conflicts returns to the feature branch,0.387,git/rebase,21,7.633
git/rebase continue after resolving conflicts branch is now a different ref,0.393,git/rebase,21,7.633
git/rebase continue with additional changes unrelated to conflicted files returns success,0.385,git/rebase,21,7.633
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.384,git/rebase,21,7.633
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.391,git/rebase,21,7.633
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.392,git/rebase,21,7.633
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.4,git/rebase,21,7.633
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.38,git/rebase,21,7.633
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.591
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.591
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.591
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.591
git/commit createCommit partials can commit some lines from new file,0.189,git/commit,21,4.591
git/commit createCommit partials can commit second hunk from modified file,0.203,git/commit,21,4.591
git/commit createCommit partials can commit single delete from modified file,0.18,git/commit,21,4.591
git/commit createCommit partials can commit multiple hunks from modified file,0.199,git/commit,21,4.591
git/commit createCommit partials can commit some lines from deleted file,0.185,git/commit,21,4.591
git/commit createCommit partials can commit renames with modifications,0.194,git/commit,21,4.591
git/commit createCommit partials can commit renames with partially selected modifications,0.24,git/commit,21,4.591
git/commit createCommit with a merge conflict creates a merge commit,0.26,git/commit,21,4.591
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.242,git/commit,21,4.591
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.341,git/commit,21,4.591
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.34,git/commit,21,4.591
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.412,git/commit,21,4.591
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.4,git/commit,21,4.591
git/commit createMergeCommit with no changes throws an error,0.109,git/commit,21,4.591
git/commit index corner cases can commit when staged new file is then deleted,0.154,git/commit,21,4.591
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.591
git/commit index corner cases file is deleted in index,0.178,git/commit,21,4.591
git/rebase can parse progress returns a value indicating conflicts were encountered,0.402,git/rebase,7,3.91
git/rebase can parse progress status detects REBASE_HEAD,0.401,git/rebase,7,3.91
git/rebase can parse progress is a detached HEAD state,0.398,git/rebase,7,3.91
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.858,git/rebase,7,3.91
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.884,git/rebase,7,3.91
git/rebase can parse progress for long rebase is a detached HEAD state,0.913,git/rebase,7,3.91
GitStore loadCommitBatch includes HEAD when loading commits,0.432,GitStore,11,2.667
GitStore can discard changes from a repository,0.167,GitStore,11,2.667
GitStore can discard a renamed file,0.153,GitStore,11,2.667
GitStore undo first commit reports the repository is unborn,0.191,GitStore,11,2.667
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.667
GitStore undo first commit clears the undo commit dialog,0.221,GitStore,11,2.667
GitStore undo first commit has no staged files,0.206,GitStore,11,2.667
GitStore repository with HEAD file can discard modified change cleanly,0.119,GitStore,11,2.667
BranchPruner does nothing on non GitHub repositories,0.26,BranchPruner,6,2.073
BranchPruner prunes for GitHub repository,0.337,BranchPruner,6,2.073
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.273,BranchPruner,6,2.073
BranchPruner does not prune if there is no default branch,0.277,BranchPruner,6,2.073
BranchPruner does not prune reserved branches,0.35,BranchPruner,6,2.073
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.049,git/diff,19,1.835
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.835
git/diff getBlobImage retrieves valid image for modified file,0.095,git/diff,19,1.835
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.835
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.835
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.835
git/diff getWorkingDirectoryDiff counts lines for new file,0.093,git/diff,19,1.835
git/diff getWorkingDirectoryDiff counts lines for modified file,0.09,git/diff,19,1.835
git/diff getWorkingDirectoryDiff counts lines for staged file,0.085,git/diff,19,1.835
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.122,git/diff,19,1.835
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.142,git/diff,19,1.835
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.148,git/diff,19,1.835
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.128,git/diff,19,1.835
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.116,git/diff,19,1.835
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.081,git/diff,19,1.835
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.061,git/diff,19,1.835
git/diff getBinaryPaths in repo with text only files returns an empty array,0.086,git/diff,19,1.835
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.098,git/diff,19,1.835
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.114,git/diff,19,1.835
git/status getStatus with conflicted repo parses conflicted files with markers,0.264,git/status,12,1.838
git/status getStatus with conflicted repo parses conflicted files without markers,0.262,git/status,12,1.838
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.349,git/status,12,1.838
git/status getStatus with conflicted repo parses resolved files,0.261,git/status,12,1.838
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.11,git/status,12,1.838
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.152,git/status,12,1.838
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,1.838
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.057,git/status,12,1.838
git/status getStatus with unconflicted repo reflects renames,0.104,git/status,12,1.838
git/status getStatus with unconflicted repo reflects copies,0.108,git/status,12,1.838
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,1.838
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.524
git/branch tip returns correct ref if checkout occurs,0.039,git/branch,13,1.524
git/branch tip returns detached for arbitrary checkout,0.059,git/branch,13,1.524
git/branch tip returns current branch when on a valid HEAD,0.08,git/branch,13,1.524
git/branch tip returns non-origin remote,0.083,git/branch,13,1.524
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.524
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.524
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.524
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.524
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.086,git/branch,13,1.524
git/branch deleteBranch deletes local branches,0.124,git/branch,13,1.524
git/branch deleteBranch deletes remote branches,0.337,git/branch,13,1.524
git/branch deleteBranch handles attempted delete of removed remote branch,0.392,git/branch,13,1.524
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.109,git/stash,14,1.4
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.135,git/stash,14,1.4
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.098,git/stash,14,1.4
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.462,formatPatch,5,1.078
git/reflog getRecentBranches returns the recently checked out branches,0.142,git/reflog,6,1.031
git/reflog getRecentBranches works after renaming a branch,0.187,git/reflog,6,1.031
git/reflog getRecentBranches returns a limited number of branches,0.25,git/reflog,6,1.031
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.155,git/reflog,6,1.031
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.186,git/reflog,6,1.031
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.031
git/checkout can checkout a valid branch name in an existing repository,0.116,git/checkout,6,1.007
git/checkout can checkout a branch when it exists on multiple remotes,0.13,git/checkout,6,1.007
git/checkout will fail when an existing branch matches the remote branch,0.117,git/checkout,6,1.007
git/checkout with submodules cleans up an submodule that no longer exists,0.305,git/checkout,6,1.007
git/checkout with submodules updates a changed submodule reference,0.264,git/checkout,6,1.007
git/config config looks up config values,0.057,git/config,12,0.866
git/config config returns null for undefined values,0.057,git/config,12,0.866
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.866
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.866
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.866
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.866
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.866
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.866
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.866
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.072,git/config,12,0.866
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.866
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.866
git/rev-parse isGitRepository should return true for a repository,0.115,git/rev-parse,10,0.82
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.82
git/rev-parse isBareRepository returns false for default initialized repository,0.066,git/rev-parse,10,0.82
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.82
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.82
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.82
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.061,git/rev-parse,10,0.82
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.052,git/rev-parse,10,0.82
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.06,git/rev-parse,10,0.82
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.188,git/rev-parse,10,0.82
git/merge merge and is successful returns true,0.043,git/merge,7,0.559
git/merge merge and is a noop returns false,0.055,git/merge,7,0.559
git/merge getMergeBase returns the common ancestor of two branches,0.068,git/merge,7,0.559
git/submodule listSubmodules returns the submodule entry,0.134,git/submodule,3,0.814
git/submodule listSubmodules returns the expected tag,0.195,git/submodule,3,0.814
git/submodule resetSubmodulePaths update submodule to original commit,0.447,git/submodule,3,0.814
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.665
gitignore saveGitIgnore applies rule correctly to repository,0.097,gitignore,9,0.665
gitignore appendIgnoreRule appends one rule,0.117,gitignore,9,0.665
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.665
git/log getCommits loads history,0.07,git/log,7,0.649
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.649
git/log getCommits handles repository with signed commit and log.showSignature set,0.114,git/log,7,0.649
git/log getChangedFiles loads the files changed in the commit,0.063,git/log,7,0.649
git/log getChangedFiles detects renames,0.102,git/log,7,0.649
git/log getChangedFiles detect copies,0.106,git/log,7,0.649
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.649
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.56
git/remote findDefaultRemote returns origin when multiple remotes found,0.058,git/remote,11,0.56
git/remote findDefaultRemote returns something when origin removed,0.067,git/remote,11,0.56
git-lfs isUsingLFS returns false for repository not using LFS,0.055,git-lfs,9,0.538
git-lfs isUsingLFS returns true if LFS is tracking a path,0.077,git-lfs,9,0.538
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.402
Update remote url doesn't update the repository's remote url when the github url is the same,0.083,Update remote url,4,0.402
Update remote url doesn't update repository's remote url if protocols don't match,0.077,Update remote url,4,0.402
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.08,Update remote url,4,0.402
git/core error handling does not throw for errors that were expected,0.055,git/core,6,0.357
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.357
git/core exit code handling does not throw for exit codes that were expected,0.053,git/core,6,0.357
git/core exit code handling throws for exit codes that were not expected,0.053,git/core,6,0.357
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.357
git/core config lock file error handling normalizes paths,0.04,git/core,6,0.357
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.353
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.353
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.353
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.353
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.353
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.032,patch formatting,8,0.353
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.353
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.027,patch formatting,8,0.353
git/reset reset can hard reset a repository,0.075,git/reset,2,0.111
AppStore can select a repository,0.23,AppStore,5,0.288
git/for-each-ref getBranches fetches branches using for-each-ref,0.31,git/for-each-ref,3,0.485
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.485
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.485
validatedRepositoryPath returns the path to the repository,0.157,validatedRepositoryPath,2,0.212
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.31,git/rebase,21,7.573
git/rebase detect conflicts status detects REBASE_HEAD,0.261,git/rebase,21,7.573
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.573
git/rebase detect conflicts is a detached HEAD state,0.261,git/rebase,21,7.573
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.258,git/rebase,21,7.573
git/rebase abort after conflicts found no longer has working directory changes,0.254,git/rebase,21,7.573
git/rebase abort after conflicts found returns to the feature branch,0.254,git/rebase,21,7.573
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.337,git/rebase,21,7.573
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.32,git/rebase,21,7.573
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.321,git/rebase,21,7.573
git/rebase continue after resolving conflicts returns success,0.374,git/rebase,21,7.573
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.378,git/rebase,21,7.573
git/rebase continue after resolving conflicts no longer has working directory changes,0.379,git/rebase,21,7.573
git/rebase continue after resolving conflicts returns to the feature branch,0.389,git/rebase,21,7.573
git/rebase continue after resolving conflicts branch is now a different ref,0.389,git/rebase,21,7.573
git/rebase continue with additional changes unrelated to conflicted files returns success,0.388,git/rebase,21,7.573
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.383,git/rebase,21,7.573
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.388,git/rebase,21,7.573
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.393,git/rebase,21,7.573
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.398,git/rebase,21,7.573
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.37,git/rebase,21,7.573
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.557
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.557
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.557
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.557
git/commit createCommit partials can commit some lines from new file,0.198,git/commit,21,4.557
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.557
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.557
git/commit createCommit partials can commit multiple hunks from modified file,0.194,git/commit,21,4.557
git/commit createCommit partials can commit some lines from deleted file,0.184,git/commit,21,4.557
git/commit createCommit partials can commit renames with modifications,0.188,git/commit,21,4.557
git/commit createCommit partials can commit renames with partially selected modifications,0.229,git/commit,21,4.557
git/commit createCommit with a merge conflict creates a merge commit,0.259,git/commit,21,4.557
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.233,git/commit,21,4.557
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.334,git/commit,21,4.557
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.333,git/commit,21,4.557
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.414,git/commit,21,4.557
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.403,git/commit,21,4.557
git/commit createMergeCommit with no changes throws an error,0.11,git/commit,21,4.557
git/commit index corner cases can commit when staged new file is then deleted,0.153,git/commit,21,4.557
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.175,git/commit,21,4.557
git/commit index corner cases file is deleted in index,0.181,git/commit,21,4.557
git/rebase can parse progress returns a value indicating conflicts were encountered,0.394,git/rebase,7,3.788
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.788
git/rebase can parse progress is a detached HEAD state,0.4,git/rebase,7,3.788
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.832,git/rebase,7,3.788
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.859,git/rebase,7,3.788
git/rebase can parse progress for long rebase is a detached HEAD state,0.848,git/rebase,7,3.788
GitStore loadCommitBatch includes HEAD when loading commits,0.448,GitStore,11,2.613
GitStore can discard changes from a repository,0.174,GitStore,11,2.613
GitStore can discard a renamed file,0.152,GitStore,11,2.613
GitStore undo first commit reports the repository is unborn,0.19,GitStore,11,2.613
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.613
GitStore undo first commit clears the undo commit dialog,0.213,GitStore,11,2.613
GitStore undo first commit has no staged files,0.204,GitStore,11,2.613
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.613
BranchPruner does nothing on non GitHub repositories,0.269,BranchPruner,6,1.938
BranchPruner prunes for GitHub repository,0.324,BranchPruner,6,1.938
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.243,BranchPruner,6,1.938
BranchPruner does not prune if there is no default branch,0.244,BranchPruner,6,1.938
BranchPruner does not prune reserved branches,0.319,BranchPruner,6,1.938
git/status getStatus with conflicted repo parses conflicted files with markers,0.312,git/status,12,1.904
git/status getStatus with conflicted repo parses conflicted files without markers,0.307,git/status,12,1.904
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.429,git/status,12,1.904
git/status getStatus with conflicted repo parses resolved files,0.234,git/status,12,1.904
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.103,git/status,12,1.904
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.118,git/status,12,1.904
git/status getStatus with unconflicted repo parses changed files,0.057,git/status,12,1.904
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.051,git/status,12,1.904
git/status getStatus with unconflicted repo reflects renames,0.092,git/status,12,1.904
git/status getStatus with unconflicted repo reflects copies,0.098,git/status,12,1.904
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.056,git/status,12,1.904
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.049,git/diff,19,1.786
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.786
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,1.786
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.786
git/diff imageDiff changes for images are set,0.083,git/diff,19,1.786
git/diff imageDiff changes for text are not set,0.096,git/diff,19,1.786
git/diff getWorkingDirectoryDiff counts lines for new file,0.087,git/diff,19,1.786
git/diff getWorkingDirectoryDiff counts lines for modified file,0.088,git/diff,19,1.786
git/diff getWorkingDirectoryDiff counts lines for staged file,0.085,git/diff,19,1.786
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.119,git/diff,19,1.786
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.137,git/diff,19,1.786
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.144,git/diff,19,1.786
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.128,git/diff,19,1.786
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.113,git/diff,19,1.786
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.081,git/diff,19,1.786
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.786
git/diff getBinaryPaths in repo with text only files returns an empty array,0.082,git/diff,19,1.786
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.096,git/diff,19,1.786
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.113,git/diff,19,1.786
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.498
git/branch tip returns correct ref if checkout occurs,0.093,git/branch,13,1.498
git/branch tip returns detached for arbitrary checkout,0.051,git/branch,13,1.498
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,13,1.498
git/branch tip returns non-origin remote,0.081,git/branch,13,1.498
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,13,1.498
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.498
git/branch getBranchesPointedAt in a local repo finds no branch names,0.052,git/branch,13,1.498
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.051,git/branch,13,1.498
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.081,git/branch,13,1.498
git/branch deleteBranch deletes local branches,0.118,git/branch,13,1.498
git/branch deleteBranch deletes remote branches,0.304,git/branch,13,1.498
git/branch deleteBranch handles attempted delete of removed remote branch,0.378,git/branch,13,1.498
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.1,git/stash,14,1.266
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.134,git/stash,14,1.266
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.093,git/stash,14,1.266
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.454,formatPatch,5,1.06
git/reflog getRecentBranches returns the recently checked out branches,0.144,git/reflog,6,1.02
git/reflog getRecentBranches works after renaming a branch,0.189,git/reflog,6,1.02
git/reflog getRecentBranches returns a limited number of branches,0.247,git/reflog,6,1.02
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.149,git/reflog,6,1.02
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.183,git/reflog,6,1.02
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.063,git/reflog,6,1.02
git/checkout can checkout a valid branch name in an existing repository,0.122,git/checkout,6,1.071
git/checkout can checkout a branch when it exists on multiple remotes,0.134,git/checkout,6,1.071
git/checkout will fail when an existing branch matches the remote branch,0.129,git/checkout,6,1.071
git/checkout with submodules cleans up an submodule that no longer exists,0.335,git/checkout,6,1.071
git/checkout with submodules updates a changed submodule reference,0.278,git/checkout,6,1.071
git/config config looks up config values,0.056,git/config,12,0.89
git/config config returns null for undefined values,0.053,git/config,12,0.89
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.89
git/config global config setGlobalConfigValue will replace all entries for a global value,0.098,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.074,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.07,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.076,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.072,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.075,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.89
git/rev-parse isGitRepository should return true for a repository,0.06,git/rev-parse,10,0.821
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.821
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.821
git/rev-parse isBareRepository returns true for initialized bare repository,0.076,git/rev-parse,10,0.821
git/rev-parse isBareRepository returns false for empty directory,0.062,git/rev-parse,10,0.821
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.821
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.071,git/rev-parse,10,0.821
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.059,git/rev-parse,10,0.821
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.066,git/rev-parse,10,0.821
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.204,git/rev-parse,10,0.821
git/submodule listSubmodules returns the submodule entry,0.137,git/submodule,3,0.759
git/submodule listSubmodules returns the expected tag,0.2,git/submodule,3,0.759
git/submodule resetSubmodulePaths update submodule to original commit,0.383,git/submodule,3,0.759
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.731
gitignore saveGitIgnore applies rule correctly to repository,0.104,gitignore,9,0.731
gitignore appendIgnoreRule appends one rule,0.13,gitignore,9,0.731
gitignore appendIgnoreRule appends multiple rules,0.129,gitignore,9,0.731
git/log getCommits loads history,0.072,git/log,7,0.681
git/log getCommits handles repository with HEAD file on disk,0.112,git/log,7,0.681
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.681
git/log getChangedFiles loads the files changed in the commit,0.062,git/log,7,0.681
git/log getChangedFiles detects renames,0.105,git/log,7,0.681
git/log getChangedFiles detect copies,0.111,git/log,7,0.681
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.681
git/remote getRemotes should return both remotes,0.056,git/remote,11,0.61
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.61
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.61
git/merge merge and is successful returns true,0.046,git/merge,7,0.655
git/merge merge and is a noop returns false,0.062,git/merge,7,0.655
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.655
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.594
git-lfs isUsingLFS returns true if LFS is tracking a path,0.085,git-lfs,9,0.594
git/for-each-ref getBranches fetches branches using for-each-ref,0.077,git/for-each-ref,3,0.251
git/for-each-ref getBranches should return empty list for empty repo,0.077,git/for-each-ref,3,0.251
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.251
Update remote url updates the repository's remote url when the github url changes,0.116,Update remote url,4,0.418
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.418
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.418
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.082,Update remote url,4,0.418
git/core error handling does not throw for errors that were expected,0.053,git/core,6,0.36
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.36
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.36
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.36
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.36
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.36
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.379
AppStore can select a repository,0.249,AppStore,5,0.303
validatedRepositoryPath returns the path to the repository,0.421,validatedRepositoryPath,2,0.479
git/reset reset can hard reset a repository,0.086,git/reset,2,0.13
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.311,git/rebase,21,7.677
git/rebase detect conflicts status detects REBASE_HEAD,0.268,git/rebase,21,7.677
git/rebase detect conflicts has conflicted files in working directory,0.265,git/rebase,21,7.677
git/rebase detect conflicts is a detached HEAD state,0.268,git/rebase,21,7.677
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.26,git/rebase,21,7.677
git/rebase abort after conflicts found no longer has working directory changes,0.259,git/rebase,21,7.677
git/rebase abort after conflicts found returns to the feature branch,0.262,git/rebase,21,7.677
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.341,git/rebase,21,7.677
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.335,git/rebase,21,7.677
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.324,git/rebase,21,7.677
git/rebase continue after resolving conflicts returns success,0.377,git/rebase,21,7.677
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.382,git/rebase,21,7.677
git/rebase continue after resolving conflicts no longer has working directory changes,0.383,git/rebase,21,7.677
git/rebase continue after resolving conflicts returns to the feature branch,0.398,git/rebase,21,7.677
git/rebase continue after resolving conflicts branch is now a different ref,0.387,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files returns success,0.383,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.386,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.39,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.404,git/rebase,21,7.677
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.402,git/rebase,21,7.677
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.378,git/rebase,21,7.677
git/commit createCommit normal commits the given files,0.122,git/commit,21,4.641
git/commit createCommit normal commit does not strip commentary by default,0.108,git/commit,21,4.641
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.641
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.641
git/commit createCommit partials can commit some lines from new file,0.19,git/commit,21,4.641
git/commit createCommit partials can commit second hunk from modified file,0.205,git/commit,21,4.641
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.641
git/commit createCommit partials can commit multiple hunks from modified file,0.205,git/commit,21,4.641
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.641
git/commit createCommit partials can commit renames with modifications,0.195,git/commit,21,4.641
git/commit createCommit partials can commit renames with partially selected modifications,0.246,git/commit,21,4.641
git/commit createCommit with a merge conflict creates a merge commit,0.27,git/commit,21,4.641
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.245,git/commit,21,4.641
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.345,git/commit,21,4.641
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.336,git/commit,21,4.641
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.413,git/commit,21,4.641
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.423,git/commit,21,4.641
git/commit createMergeCommit with no changes throws an error,0.107,git/commit,21,4.641
git/commit index corner cases can commit when staged new file is then deleted,0.153,git/commit,21,4.641
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.174,git/commit,21,4.641
git/commit index corner cases file is deleted in index,0.177,git/commit,21,4.641
git/rebase can parse progress returns a value indicating conflicts were encountered,0.404,git/rebase,7,3.858
git/rebase can parse progress status detects REBASE_HEAD,0.405,git/rebase,7,3.858
git/rebase can parse progress is a detached HEAD state,0.405,git/rebase,7,3.858
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.876,git/rebase,7,3.858
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.848,git/rebase,7,3.858
git/rebase can parse progress for long rebase is a detached HEAD state,0.866,git/rebase,7,3.858
GitStore loadCommitBatch includes HEAD when loading commits,0.422,GitStore,11,2.626
GitStore can discard changes from a repository,0.165,GitStore,11,2.626
GitStore can discard a renamed file,0.15,GitStore,11,2.626
GitStore undo first commit reports the repository is unborn,0.19,GitStore,11,2.626
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.626
GitStore undo first commit clears the undo commit dialog,0.217,GitStore,11,2.626
GitStore undo first commit has no staged files,0.207,GitStore,11,2.626
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.626
BranchPruner does nothing on non GitHub repositories,0.289,BranchPruner,6,2.015
BranchPruner prunes for GitHub repository,0.324,BranchPruner,6,2.015
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.267,BranchPruner,6,2.015
BranchPruner does not prune if there is no default branch,0.271,BranchPruner,6,2.015
BranchPruner does not prune reserved branches,0.348,BranchPruner,6,2.015
git/status getStatus with conflicted repo parses conflicted files with markers,0.315,git/status,12,2.07
git/status getStatus with conflicted repo parses conflicted files without markers,0.321,git/status,12,2.07
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.404,git/status,12,2.07
git/status getStatus with conflicted repo parses resolved files,0.307,git/status,12,2.07
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.124,git/status,12,2.07
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.148,git/status,12,2.07
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.07
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,2.07
git/status getStatus with unconflicted repo reflects renames,0.109,git/status,12,2.07
git/status getStatus with unconflicted repo reflects copies,0.116,git/status,12,2.07
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.07
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.097,git/diff,19,1.94
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.94
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,1.94
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.94
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.94
git/diff imageDiff changes for text are not set,0.099,git/diff,19,1.94
git/diff getWorkingDirectoryDiff counts lines for new file,0.089,git/diff,19,1.94
git/diff getWorkingDirectoryDiff counts lines for modified file,0.088,git/diff,19,1.94
git/diff getWorkingDirectoryDiff counts lines for staged file,0.086,git/diff,19,1.94
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,1.94
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.15,git/diff,19,1.94
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.158,git/diff,19,1.94
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.14,git/diff,19,1.94
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.128,git/diff,19,1.94
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.094,git/diff,19,1.94
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.075,git/diff,19,1.94
git/diff getBinaryPaths in repo with text only files returns an empty array,0.097,git/diff,19,1.94
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.107,git/diff,19,1.94
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.94
git/branch tip returns unborn for new repository,0.027,git/branch,13,1.518
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,13,1.518
git/branch tip returns detached for arbitrary checkout,0.059,git/branch,13,1.518
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.518
git/branch tip returns non-origin remote,0.085,git/branch,13,1.518
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.518
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.518
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.518
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.518
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.093,git/branch,13,1.518
git/branch deleteBranch deletes local branches,0.121,git/branch,13,1.518
git/branch deleteBranch deletes remote branches,0.323,git/branch,13,1.518
git/branch deleteBranch handles attempted delete of removed remote branch,0.385,git/branch,13,1.518
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.12,git/stash,14,1.358
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.141,git/stash,14,1.358
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.358
git/checkout can checkout a valid branch name in an existing repository,0.12,git/checkout,6,1.027
git/checkout can checkout a branch when it exists on multiple remotes,0.127,git/checkout,6,1.027
git/checkout will fail when an existing branch matches the remote branch,0.132,git/checkout,6,1.027
git/checkout with submodules cleans up an submodule that no longer exists,0.324,git/checkout,6,1.027
git/checkout with submodules updates a changed submodule reference,0.251,git/checkout,6,1.027
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.384,formatPatch,5,1.104
git/reflog getRecentBranches returns the recently checked out branches,0.149,git/reflog,6,1.039
git/reflog getRecentBranches works after renaming a branch,0.185,git/reflog,6,1.039
git/reflog getRecentBranches returns a limited number of branches,0.25,git/reflog,6,1.039
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.154,git/reflog,6,1.039
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.189,git/reflog,6,1.039
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.07,git/reflog,6,1.039
git/config config looks up config values,0.055,git/config,12,0.787
git/config config returns null for undefined values,0.052,git/config,12,0.787
git/config global config getGlobalConfigPath gets the config path,0.062,git/config,12,0.787
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,12,0.787
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.067,git/config,12,0.787
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.058,git/config,12,0.787
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.059,git/config,12,0.787
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.06,git/config,12,0.787
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.06,git/config,12,0.787
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.065,git/config,12,0.787
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.06,git/config,12,0.787
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.061,git/config,12,0.787
git/rev-parse isGitRepository should return true for a repository,0.051,git/rev-parse,10,0.721
git/rev-parse isGitRepository should return false for a directory,0.048,git/rev-parse,10,0.721
git/rev-parse isBareRepository returns false for default initialized repository,0.06,git/rev-parse,10,0.721
git/rev-parse isBareRepository returns true for initialized bare repository,0.063,git/rev-parse,10,0.721
git/rev-parse isBareRepository returns false for empty directory,0.054,git/rev-parse,10,0.721
git/rev-parse isBareRepository throws error for missing directory,0.05,git/rev-parse,10,0.721
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.061,git/rev-parse,10,0.721
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.053,git/rev-parse,10,0.721
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.721
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.179,git/rev-parse,10,0.721
git/submodule listSubmodules returns the submodule entry,0.132,git/submodule,3,0.683
git/submodule listSubmodules returns the expected tag,0.175,git/submodule,3,0.683
git/submodule resetSubmodulePaths update submodule to original commit,0.338,git/submodule,3,0.683
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.724
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.724
gitignore appendIgnoreRule appends one rule,0.113,gitignore,9,0.724
gitignore appendIgnoreRule appends multiple rules,0.109,gitignore,9,0.724
git/log getCommits loads history,0.068,git/log,7,0.672
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.672
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.672
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.672
git/log getChangedFiles detects renames,0.107,git/log,7,0.672
git/log getChangedFiles detect copies,0.109,git/log,7,0.672
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.672
git/merge merge and is successful returns true,0.047,git/merge,7,0.589
git/merge merge and is a noop returns false,0.06,git/merge,7,0.589
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.589
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.58
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.58
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.58
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.545
git-lfs isUsingLFS returns true if LFS is tracking a path,0.074,git-lfs,9,0.545
validatedRepositoryPath returns the path to the repository,0.051,validatedRepositoryPath,2,0.1
Update remote url updates the repository's remote url when the github url changes,0.105,Update remote url,4,0.407
Update remote url doesn't update the repository's remote url when the github url is the same,0.088,Update remote url,4,0.407
Update remote url doesn't update repository's remote url if protocols don't match,0.082,Update remote url,4,0.407
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.407
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.049,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.376
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.384
git/core error handling throws for errors that were not expected,0.065,git/core,6,0.384
git/core exit code handling does not throw for exit codes that were expected,0.06,git/core,6,0.384
git/core exit code handling throws for exit codes that were not expected,0.06,git/core,6,0.384
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.384
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.384
AppStore can select a repository,0.236,AppStore,5,0.289
git/for-each-ref getBranches fetches branches using for-each-ref,0.307,git/for-each-ref,3,0.488
git/for-each-ref getBranches should return empty list for empty repo,0.076,git/for-each-ref,3,0.488
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.064,git/for-each-ref,3,0.488
git/reset reset can hard reset a repository,0.086,git/reset,2,0.127
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.311,git/rebase,21,7.695
git/rebase detect conflicts status detects REBASE_HEAD,0.277,git/rebase,21,7.695
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.695
git/rebase detect conflicts is a detached HEAD state,0.266,git/rebase,21,7.695
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.262,git/rebase,21,7.695
git/rebase abort after conflicts found no longer has working directory changes,0.257,git/rebase,21,7.695
git/rebase abort after conflicts found returns to the feature branch,0.265,git/rebase,21,7.695
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.34,git/rebase,21,7.695
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.329,git/rebase,21,7.695
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.328,git/rebase,21,7.695
git/rebase continue after resolving conflicts returns success,0.382,git/rebase,21,7.695
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.381,git/rebase,21,7.695
git/rebase continue after resolving conflicts no longer has working directory changes,0.385,git/rebase,21,7.695
git/rebase continue after resolving conflicts returns to the feature branch,0.396,git/rebase,21,7.695
git/rebase continue after resolving conflicts branch is now a different ref,0.386,git/rebase,21,7.695
git/rebase continue with additional changes unrelated to conflicted files returns success,0.385,git/rebase,21,7.695
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.39,git/rebase,21,7.695
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.393,git/rebase,21,7.695
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.407,git/rebase,21,7.695
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.404,git/rebase,21,7.695
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.379,git/rebase,21,7.695
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.674
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.674
git/commit createCommit normal can commit for empty repository,0.142,git/commit,21,4.674
git/commit createCommit normal can commit renames,0.159,git/commit,21,4.674
git/commit createCommit partials can commit some lines from new file,0.195,git/commit,21,4.674
git/commit createCommit partials can commit second hunk from modified file,0.196,git/commit,21,4.674
git/commit createCommit partials can commit single delete from modified file,0.178,git/commit,21,4.674
git/commit createCommit partials can commit multiple hunks from modified file,0.203,git/commit,21,4.674
git/commit createCommit partials can commit some lines from deleted file,0.19,git/commit,21,4.674
git/commit createCommit partials can commit renames with modifications,0.198,git/commit,21,4.674
git/commit createCommit partials can commit renames with partially selected modifications,0.246,git/commit,21,4.674
git/commit createCommit with a merge conflict creates a merge commit,0.271,git/commit,21,4.674
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.244,git/commit,21,4.674
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.346,git/commit,21,4.674
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.332,git/commit,21,4.674
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.414,git/commit,21,4.674
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.422,git/commit,21,4.674
git/commit createMergeCommit with no changes throws an error,0.117,git/commit,21,4.674
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.674
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.183,git/commit,21,4.674
git/commit index corner cases file is deleted in index,0.183,git/commit,21,4.674
git/rebase can parse progress returns a value indicating conflicts were encountered,0.414,git/rebase,7,3.899
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.899
git/rebase can parse progress is a detached HEAD state,0.433,git/rebase,7,3.899
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.879,git/rebase,7,3.899
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.858,git/rebase,7,3.899
git/rebase can parse progress for long rebase is a detached HEAD state,0.858,git/rebase,7,3.899
GitStore loadCommitBatch includes HEAD when loading commits,0.411,GitStore,11,2.619
GitStore can discard changes from a repository,0.171,GitStore,11,2.619
GitStore can discard a renamed file,0.149,GitStore,11,2.619
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.619
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.619
GitStore undo first commit clears the undo commit dialog,0.222,GitStore,11,2.619
GitStore undo first commit has no staged files,0.21,GitStore,11,2.619
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.619
git/status getStatus with conflicted repo parses conflicted files with markers,0.341,git/status,12,2.06
git/status getStatus with conflicted repo parses conflicted files without markers,0.3,git/status,12,2.06
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.398,git/status,12,2.06
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,2.06
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.119,git/status,12,2.06
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.152,git/status,12,2.06
git/status getStatus with unconflicted repo parses changed files,0.064,git/status,12,2.06
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.06
git/status getStatus with unconflicted repo reflects renames,0.107,git/status,12,2.06
git/status getStatus with unconflicted repo reflects copies,0.107,git/status,12,2.06
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.06
BranchPruner does nothing on non GitHub repositories,0.249,BranchPruner,6,1.756
BranchPruner prunes for GitHub repository,0.318,BranchPruner,6,1.756
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.298,BranchPruner,6,1.756
BranchPruner does not prune if there is no default branch,0.227,BranchPruner,6,1.756
BranchPruner does not prune reserved branches,0.273,BranchPruner,6,1.756
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.042,git/diff,19,1.888
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.888
git/diff getBlobImage retrieves valid image for modified file,0.049,git/diff,19,1.888
git/diff getBlobImage retrieves valid images for deleted file,0.064,git/diff,19,1.888
git/diff imageDiff changes for images are set,0.116,git/diff,19,1.888
git/diff imageDiff changes for text are not set,0.096,git/diff,19,1.888
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,1.888
git/diff getWorkingDirectoryDiff counts lines for modified file,0.091,git/diff,19,1.888
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.888
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.127,git/diff,19,1.888
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.144,git/diff,19,1.888
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.15,git/diff,19,1.888
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.134,git/diff,19,1.888
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.12,git/diff,19,1.888
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.083,git/diff,19,1.888
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.069,git/diff,19,1.888
git/diff getBinaryPaths in repo with text only files returns an empty array,0.096,git/diff,19,1.888
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.112,git/diff,19,1.888
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.127,git/diff,19,1.888
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.492
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.492
git/branch tip returns detached for arbitrary checkout,0.061,git/branch,13,1.492
git/branch tip returns current branch when on a valid HEAD,0.084,git/branch,13,1.492
git/branch tip returns non-origin remote,0.083,git/branch,13,1.492
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.492
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.492
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.492
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.492
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.492
git/branch deleteBranch deletes local branches,0.125,git/branch,13,1.492
git/branch deleteBranch deletes remote branches,0.311,git/branch,13,1.492
git/branch deleteBranch handles attempted delete of removed remote branch,0.367,git/branch,13,1.492
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.104,git/stash,14,1.303
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.134,git/stash,14,1.303
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.098,git/stash,14,1.303
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.44,formatPatch,5,1.063
git/reflog getRecentBranches returns the recently checked out branches,0.149,git/reflog,6,1.069
git/reflog getRecentBranches works after renaming a branch,0.196,git/reflog,6,1.069
git/reflog getRecentBranches returns a limited number of branches,0.259,git/reflog,6,1.069
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.158,git/reflog,6,1.069
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.194,git/reflog,6,1.069
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.069
git/checkout can checkout a valid branch name in an existing repository,0.125,git/checkout,6,0.996
git/checkout can checkout a branch when it exists on multiple remotes,0.126,git/checkout,6,0.996
git/checkout will fail when an existing branch matches the remote branch,0.12,git/checkout,6,0.996
git/checkout with submodules cleans up an submodule that no longer exists,0.294,git/checkout,6,0.996
git/checkout with submodules updates a changed submodule reference,0.257,git/checkout,6,0.996
git/config config looks up config values,0.051,git/config,12,0.85
git/config config returns null for undefined values,0.049,git/config,12,0.85
git/config global config getGlobalConfigPath gets the config path,0.069,git/config,12,0.85
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.07,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.066,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.066,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.066,git/config,12,0.85
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.688
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.688
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.688
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.688
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.816
git/rev-parse isGitRepository should return false for a directory,0.052,git/rev-parse,10,0.816
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.816
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.816
git/rev-parse isBareRepository returns false for empty directory,0.06,git/rev-parse,10,0.816
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.816
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.071,git/rev-parse,10,0.816
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.062,git/rev-parse,10,0.816
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.065,git/rev-parse,10,0.816
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.215,git/rev-parse,10,0.816
git/submodule listSubmodules returns the submodule entry,0.138,git/submodule,3,0.732
git/submodule listSubmodules returns the expected tag,0.191,git/submodule,3,0.732
git/submodule resetSubmodulePaths update submodule to original commit,0.362,git/submodule,3,0.732
git/log getCommits loads history,0.071,git/log,7,0.689
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.689
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.689
git/log getChangedFiles loads the files changed in the commit,0.063,git/log,7,0.689
git/log getChangedFiles detects renames,0.115,git/log,7,0.689
git/log getChangedFiles detect copies,0.114,git/log,7,0.689
git/log getChangedFiles handles commit when HEAD exists on disk,0.061,git/log,7,0.689
git/merge merge and is successful returns true,0.05,git/merge,7,0.645
git/merge merge and is a noop returns false,0.064,git/merge,7,0.645
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.645
git/remote getRemotes should return both remotes,0.063,git/remote,11,0.638
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,11,0.638
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.638
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.599
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.599
git/for-each-ref getBranches fetches branches using for-each-ref,0.073,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for empty repo,0.077,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.054,git/for-each-ref,3,0.245
Update remote url updates the repository's remote url when the github url changes,0.115,Update remote url,4,0.419
Update remote url doesn't update the repository's remote url when the github url is the same,0.088,Update remote url,4,0.419
Update remote url doesn't update repository's remote url if protocols don't match,0.083,Update remote url,4,0.419
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.419
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.388
git/core error handling throws for errors that were not expected,0.061,git/core,6,0.388
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.388
git/core exit code handling throws for exit codes that were not expected,0.06,git/core,6,0.388
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.388
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.388
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.054,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.383
AppStore can select a repository,0.274,AppStore,5,0.328
git/reset reset can hard reset a repository,0.253,git/reset,2,0.295
validatedRepositoryPath returns the path to the repository,0.057,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.315,git/rebase,21,7.68
git/rebase detect conflicts status detects REBASE_HEAD,0.266,git/rebase,21,7.68
git/rebase detect conflicts has conflicted files in working directory,0.269,git/rebase,21,7.68
git/rebase detect conflicts is a detached HEAD state,0.279,git/rebase,21,7.68
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.264,git/rebase,21,7.68
git/rebase abort after conflicts found no longer has working directory changes,0.261,git/rebase,21,7.68
git/rebase abort after conflicts found returns to the feature branch,0.257,git/rebase,21,7.68
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.337,git/rebase,21,7.68
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.324,git/rebase,21,7.68
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.329,git/rebase,21,7.68
git/rebase continue after resolving conflicts returns success,0.376,git/rebase,21,7.68
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.381,git/rebase,21,7.68
git/rebase continue after resolving conflicts no longer has working directory changes,0.382,git/rebase,21,7.68
git/rebase continue after resolving conflicts returns to the feature branch,0.395,git/rebase,21,7.68
git/rebase continue after resolving conflicts branch is now a different ref,0.391,git/rebase,21,7.68
git/rebase continue with additional changes unrelated to conflicted files returns success,0.381,git/rebase,21,7.68
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.68
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.394,git/rebase,21,7.68
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.4,git/rebase,21,7.68
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.68
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.374,git/rebase,21,7.68
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.531
git/commit createCommit normal commit does not strip commentary by default,0.107,git/commit,21,4.531
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.531
git/commit createCommit normal can commit renames,0.159,git/commit,21,4.531
git/commit createCommit partials can commit some lines from new file,0.18,git/commit,21,4.531
git/commit createCommit partials can commit second hunk from modified file,0.195,git/commit,21,4.531
git/commit createCommit partials can commit single delete from modified file,0.172,git/commit,21,4.531
git/commit createCommit partials can commit multiple hunks from modified file,0.192,git/commit,21,4.531
git/commit createCommit partials can commit some lines from deleted file,0.18,git/commit,21,4.531
git/commit createCommit partials can commit renames with modifications,0.183,git/commit,21,4.531
git/commit createCommit partials can commit renames with partially selected modifications,0.226,git/commit,21,4.531
git/commit createCommit with a merge conflict creates a merge commit,0.261,git/commit,21,4.531
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.238,git/commit,21,4.531
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.342,git/commit,21,4.531
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.342,git/commit,21,4.531
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.4,git/commit,21,4.531
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.42,git/commit,21,4.531
git/commit createMergeCommit with no changes throws an error,0.114,git/commit,21,4.531
git/commit index corner cases can commit when staged new file is then deleted,0.151,git/commit,21,4.531
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.174,git/commit,21,4.531
git/commit index corner cases file is deleted in index,0.174,git/commit,21,4.531
git/rebase can parse progress returns a value indicating conflicts were encountered,0.397,git/rebase,7,3.843
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.843
git/rebase can parse progress is a detached HEAD state,0.43,git/rebase,7,3.843
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.837,git/rebase,7,3.843
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.866,git/rebase,7,3.843
git/rebase can parse progress for long rebase is a detached HEAD state,0.856,git/rebase,7,3.843
GitStore loadCommitBatch includes HEAD when loading commits,0.444,GitStore,11,2.67
GitStore can discard changes from a repository,0.17,GitStore,11,2.67
GitStore can discard a renamed file,0.154,GitStore,11,2.67
GitStore undo first commit reports the repository is unborn,0.19,GitStore,11,2.67
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.67
GitStore undo first commit clears the undo commit dialog,0.224,GitStore,11,2.67
GitStore undo first commit has no staged files,0.212,GitStore,11,2.67
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.67
git/status getStatus with conflicted repo parses conflicted files with markers,0.338,git/status,12,2.111
git/status getStatus with conflicted repo parses conflicted files without markers,0.305,git/status,12,2.111
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.407,git/status,12,2.111
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,2.111
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.111
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.157,git/status,12,2.111
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.111
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.111
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.111
git/status getStatus with unconflicted repo reflects copies,0.115,git/status,12,2.111
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.067,git/status,12,2.111
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.044,git/diff,19,1.875
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.875
git/diff getBlobImage retrieves valid image for modified file,0.097,git/diff,19,1.875
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.875
git/diff imageDiff changes for images are set,0.082,git/diff,19,1.875
git/diff imageDiff changes for text are not set,0.093,git/diff,19,1.875
git/diff getWorkingDirectoryDiff counts lines for new file,0.095,git/diff,19,1.875
git/diff getWorkingDirectoryDiff counts lines for modified file,0.097,git/diff,19,1.875
git/diff getWorkingDirectoryDiff counts lines for staged file,0.088,git/diff,19,1.875
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.124,git/diff,19,1.875
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.146,git/diff,19,1.875
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.148,git/diff,19,1.875
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.123,git/diff,19,1.875
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.117,git/diff,19,1.875
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.082,git/diff,19,1.875
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.063,git/diff,19,1.875
git/diff getBinaryPaths in repo with text only files returns an empty array,0.09,git/diff,19,1.875
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,1.875
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.114,git/diff,19,1.875
BranchPruner does nothing on non GitHub repositories,0.244,BranchPruner,6,1.751
BranchPruner prunes for GitHub repository,0.306,BranchPruner,6,1.751
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.238,BranchPruner,6,1.751
BranchPruner does not prune if there is no default branch,0.253,BranchPruner,6,1.751
BranchPruner does not prune reserved branches,0.29,BranchPruner,6,1.751
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.51
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.51
git/branch tip returns detached for arbitrary checkout,0.055,git/branch,13,1.51
git/branch tip returns current branch when on a valid HEAD,0.073,git/branch,13,1.51
git/branch tip returns non-origin remote,0.083,git/branch,13,1.51
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.51
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.51
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.51
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.05,git/branch,13,1.51
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.51
git/branch deleteBranch deletes local branches,0.123,git/branch,13,1.51
git/branch deleteBranch deletes remote branches,0.336,git/branch,13,1.51
git/branch deleteBranch handles attempted delete of removed remote branch,0.378,git/branch,13,1.51
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.111,git/stash,14,1.367
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.142,git/stash,14,1.367
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.367
git/reflog getRecentBranches returns the recently checked out branches,0.156,git/reflog,6,1.081
git/reflog getRecentBranches works after renaming a branch,0.196,git/reflog,6,1.081
git/reflog getRecentBranches returns a limited number of branches,0.262,git/reflog,6,1.081
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.157,git/reflog,6,1.081
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.196,git/reflog,6,1.081
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.081
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.422,formatPatch,5,1.103
git/checkout can checkout a valid branch name in an existing repository,0.182,git/checkout,6,1.063
git/checkout can checkout a branch when it exists on multiple remotes,0.128,git/checkout,6,1.063
git/checkout will fail when an existing branch matches the remote branch,0.118,git/checkout,6,1.063
git/checkout with submodules cleans up an submodule that no longer exists,0.295,git/checkout,6,1.063
git/checkout with submodules updates a changed submodule reference,0.264,git/checkout,6,1.063
git/config config looks up config values,0.055,git/config,12,0.856
git/config config returns null for undefined values,0.054,git/config,12,0.856
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.856
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,12,0.856
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.069,git/config,12,0.856
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.856
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.856
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.856
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.076,git/config,12,0.856
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.066,git/config,12,0.856
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.065,git/config,12,0.856
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.066,git/config,12,0.856
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.774
git/rev-parse isGitRepository should return false for a directory,0.051,git/rev-parse,10,0.774
git/rev-parse isBareRepository returns false for default initialized repository,0.063,git/rev-parse,10,0.774
git/rev-parse isBareRepository returns true for initialized bare repository,0.066,git/rev-parse,10,0.774
git/rev-parse isBareRepository returns false for empty directory,0.059,git/rev-parse,10,0.774
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.774
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.774
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.059,git/rev-parse,10,0.774
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.774
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.202,git/rev-parse,10,0.774
git/submodule listSubmodules returns the submodule entry,0.133,git/submodule,3,0.753
git/submodule listSubmodules returns the expected tag,0.195,git/submodule,3,0.753
git/submodule resetSubmodulePaths update submodule to original commit,0.384,git/submodule,3,0.753
git/log getCommits loads history,0.07,git/log,7,0.653
git/log getCommits handles repository with HEAD file on disk,0.102,git/log,7,0.653
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.653
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.653
git/log getChangedFiles detects renames,0.104,git/log,7,0.653
git/log getChangedFiles detect copies,0.106,git/log,7,0.653
git/log getChangedFiles handles commit when HEAD exists on disk,0.054,git/log,7,0.653
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.694
gitignore saveGitIgnore applies rule correctly to repository,0.109,gitignore,9,0.694
gitignore appendIgnoreRule appends one rule,0.121,gitignore,9,0.694
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.694
git/merge merge and is successful returns true,0.048,git/merge,7,0.594
git/merge merge and is a noop returns false,0.058,git/merge,7,0.594
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.594
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.583
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.583
git/remote findDefaultRemote returns something when origin removed,0.069,git/remote,11,0.583
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.549
git-lfs isUsingLFS returns true if LFS is tracking a path,0.078,git-lfs,9,0.549
Update remote url updates the repository's remote url when the github url changes,0.111,Update remote url,4,0.414
Update remote url doesn't update the repository's remote url when the github url is the same,0.084,Update remote url,4,0.414
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.414
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.414
git/core error handling does not throw for errors that were expected,0.059,git/core,6,0.385
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.385
git/core exit code handling does not throw for exit codes that were expected,0.06,git/core,6,0.385
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.385
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.385
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.385
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.047,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.38
AppStore can select a repository,0.242,AppStore,5,0.299
git/reset reset can hard reset a repository,0.313,git/reset,2,0.354
git/for-each-ref getBranches fetches branches using for-each-ref,0.085,git/for-each-ref,3,0.266
git/for-each-ref getBranches should return empty list for empty repo,0.077,git/for-each-ref,3,0.266
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.266
validatedRepositoryPath returns the path to the repository,0.063,validatedRepositoryPath,2,0.116
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.313,git/rebase,21,7.702
git/rebase detect conflicts status detects REBASE_HEAD,0.262,git/rebase,21,7.702
git/rebase detect conflicts has conflicted files in working directory,0.263,git/rebase,21,7.702
git/rebase detect conflicts is a detached HEAD state,0.274,git/rebase,21,7.702
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.267,git/rebase,21,7.702
git/rebase abort after conflicts found no longer has working directory changes,0.26,git/rebase,21,7.702
git/rebase abort after conflicts found returns to the feature branch,0.259,git/rebase,21,7.702
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.34,git/rebase,21,7.702
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.329,git/rebase,21,7.702
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.337,git/rebase,21,7.702
git/rebase continue after resolving conflicts returns success,0.382,git/rebase,21,7.702
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.38,git/rebase,21,7.702
git/rebase continue after resolving conflicts no longer has working directory changes,0.381,git/rebase,21,7.702
git/rebase continue after resolving conflicts returns to the feature branch,0.398,git/rebase,21,7.702
git/rebase continue after resolving conflicts branch is now a different ref,0.391,git/rebase,21,7.702
git/rebase continue with additional changes unrelated to conflicted files returns success,0.386,git/rebase,21,7.702
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.387,git/rebase,21,7.702
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.39,git/rebase,21,7.702
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.4,git/rebase,21,7.702
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.702
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.393,git/rebase,21,7.702
git/commit createCommit normal commits the given files,0.121,git/commit,21,4.682
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.682
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.682
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.682
git/commit createCommit partials can commit some lines from new file,0.201,git/commit,21,4.682
git/commit createCommit partials can commit second hunk from modified file,0.202,git/commit,21,4.682
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.682
git/commit createCommit partials can commit multiple hunks from modified file,0.214,git/commit,21,4.682
git/commit createCommit partials can commit some lines from deleted file,0.184,git/commit,21,4.682
git/commit createCommit partials can commit renames with modifications,0.193,git/commit,21,4.682
git/commit createCommit partials can commit renames with partially selected modifications,0.241,git/commit,21,4.682
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.682
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.239,git/commit,21,4.682
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.344,git/commit,21,4.682
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.335,git/commit,21,4.682
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.422,git/commit,21,4.682
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.422,git/commit,21,4.682
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.682
git/commit index corner cases can commit when staged new file is then deleted,0.157,git/commit,21,4.682
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.177,git/commit,21,4.682
git/commit index corner cases file is deleted in index,0.193,git/commit,21,4.682
git/rebase can parse progress returns a value indicating conflicts were encountered,0.403,git/rebase,7,3.821
git/rebase can parse progress status detects REBASE_HEAD,0.411,git/rebase,7,3.821
git/rebase can parse progress is a detached HEAD state,0.411,git/rebase,7,3.821
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.834,git/rebase,7,3.821
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.853,git/rebase,7,3.821
git/rebase can parse progress for long rebase is a detached HEAD state,0.857,git/rebase,7,3.821
GitStore loadCommitBatch includes HEAD when loading commits,0.444,GitStore,11,2.686
GitStore can discard changes from a repository,0.169,GitStore,11,2.686
GitStore can discard a renamed file,0.152,GitStore,11,2.686
GitStore undo first commit reports the repository is unborn,0.193,GitStore,11,2.686
GitStore undo first commit pre-fills the commit message,0.13,GitStore,11,2.686
GitStore undo first commit clears the undo commit dialog,0.226,GitStore,11,2.686
GitStore undo first commit has no staged files,0.212,GitStore,11,2.686
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.686
git/status getStatus with conflicted repo parses conflicted files with markers,0.359,git/status,12,2.119
git/status getStatus with conflicted repo parses conflicted files without markers,0.31,git/status,12,2.119
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.401,git/status,12,2.119
git/status getStatus with conflicted repo parses resolved files,0.303,git/status,12,2.119
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.12,git/status,12,2.119
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.156,git/status,12,2.119
git/status getStatus with unconflicted repo parses changed files,0.072,git/status,12,2.119
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.119
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.119
git/status getStatus with unconflicted repo reflects copies,0.113,git/status,12,2.119
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,2.119
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.046,git/diff,19,1.866
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.866
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,1.866
git/diff getBlobImage retrieves valid images for deleted file,0.108,git/diff,19,1.866
git/diff imageDiff changes for images are set,0.08,git/diff,19,1.866
git/diff imageDiff changes for text are not set,0.088,git/diff,19,1.866
git/diff getWorkingDirectoryDiff counts lines for new file,0.093,git/diff,19,1.866
git/diff getWorkingDirectoryDiff counts lines for modified file,0.092,git/diff,19,1.866
git/diff getWorkingDirectoryDiff counts lines for staged file,0.088,git/diff,19,1.866
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.124,git/diff,19,1.866
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.147,git/diff,19,1.866
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.148,git/diff,19,1.866
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.139,git/diff,19,1.866
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.119,git/diff,19,1.866
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.083,git/diff,19,1.866
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.064,git/diff,19,1.866
git/diff getBinaryPaths in repo with text only files returns an empty array,0.089,git/diff,19,1.866
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.098,git/diff,19,1.866
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.112,git/diff,19,1.866
BranchPruner does nothing on non GitHub repositories,0.234,BranchPruner,6,1.702
BranchPruner prunes for GitHub repository,0.297,BranchPruner,6,1.702
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.239,BranchPruner,6,1.702
BranchPruner does not prune if there is no default branch,0.234,BranchPruner,6,1.702
BranchPruner does not prune reserved branches,0.287,BranchPruner,6,1.702
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.482
git/branch tip returns correct ref if checkout occurs,0.039,git/branch,13,1.482
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.482
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.482
git/branch tip returns non-origin remote,0.081,git/branch,13,1.482
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.482
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.482
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.482
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.482
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.086,git/branch,13,1.482
git/branch deleteBranch deletes local branches,0.125,git/branch,13,1.482
git/branch deleteBranch deletes remote branches,0.317,git/branch,13,1.482
git/branch deleteBranch handles attempted delete of removed remote branch,0.371,git/branch,13,1.482
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.106,git/stash,14,1.353
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.149,git/stash,14,1.353
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.101,git/stash,14,1.353
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.441,formatPatch,5,1.09
git/reflog getRecentBranches returns the recently checked out branches,0.153,git/reflog,6,1.111
git/reflog getRecentBranches works after renaming a branch,0.211,git/reflog,6,1.111
git/reflog getRecentBranches returns a limited number of branches,0.27,git/reflog,6,1.111
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.162,git/reflog,6,1.111
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.201,git/reflog,6,1.111
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.073,git/reflog,6,1.111
git/checkout can checkout a valid branch name in an existing repository,0.13,git/checkout,6,1.067
git/checkout can checkout a branch when it exists on multiple remotes,0.136,git/checkout,6,1.067
git/checkout will fail when an existing branch matches the remote branch,0.134,git/checkout,6,1.067
git/checkout with submodules cleans up an submodule that no longer exists,0.315,git/checkout,6,1.067
git/checkout with submodules updates a changed submodule reference,0.279,git/checkout,6,1.067
git/config config looks up config values,0.056,git/config,12,0.892
git/config config returns null for undefined values,0.057,git/config,12,0.892
git/config global config getGlobalConfigPath gets the config path,0.069,git/config,12,0.892
git/config global config setGlobalConfigValue will replace all entries for a global value,0.098,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.074,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.072,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.076,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.892
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.845
git/rev-parse isGitRepository should return false for a directory,0.058,git/rev-parse,10,0.845
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.845
git/rev-parse isBareRepository returns true for initialized bare repository,0.082,git/rev-parse,10,0.845
git/rev-parse isBareRepository returns false for empty directory,0.069,git/rev-parse,10,0.845
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.845
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.073,git/rev-parse,10,0.845
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.062,git/rev-parse,10,0.845
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.068,git/rev-parse,10,0.845
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.208,git/rev-parse,10,0.845
git/submodule listSubmodules returns the submodule entry,0.133,git/submodule,3,0.773
git/submodule listSubmodules returns the expected tag,0.197,git/submodule,3,0.773
git/submodule resetSubmodulePaths update submodule to original commit,0.403,git/submodule,3,0.773
gitignore readGitIgnoreAtRoot reads contents from disk,0.019,gitignore,9,0.781
gitignore saveGitIgnore applies rule correctly to repository,0.116,gitignore,9,0.781
gitignore appendIgnoreRule appends one rule,0.136,gitignore,9,0.781
gitignore appendIgnoreRule appends multiple rules,0.141,gitignore,9,0.781
git/log getCommits loads history,0.075,git/log,7,0.695
git/log getCommits handles repository with HEAD file on disk,0.108,git/log,7,0.695
git/log getCommits handles repository with signed commit and log.showSignature set,0.13,git/log,7,0.695
git/log getChangedFiles loads the files changed in the commit,0.065,git/log,7,0.695
git/log getChangedFiles detects renames,0.108,git/log,7,0.695
git/log getChangedFiles detect copies,0.111,git/log,7,0.695
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.695
git/merge merge and is successful returns true,0.047,git/merge,7,0.752
git/merge merge and is a noop returns false,0.146,git/merge,7,0.752
git/merge getMergeBase returns the common ancestor of two branches,0.086,git/merge,7,0.752
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.65
git/remote findDefaultRemote returns origin when multiple remotes found,0.073,git/remote,11,0.65
git/remote findDefaultRemote returns something when origin removed,0.075,git/remote,11,0.65
git-lfs isUsingLFS returns false for repository not using LFS,0.064,git-lfs,9,0.592
git-lfs isUsingLFS returns true if LFS is tracking a path,0.084,git-lfs,9,0.592
Update remote url updates the repository's remote url when the github url changes,0.113,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.421
Update remote url doesn't update repository's remote url if protocols don't match,0.087,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.421
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.388
git/core error handling throws for errors that were not expected,0.064,git/core,6,0.388
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.388
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.388
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.388
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.388
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.045,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.376
git/reset reset can hard reset a repository,0.084,git/reset,2,0.122
AppStore can select a repository,0.228,AppStore,5,0.285
git/for-each-ref getBranches fetches branches using for-each-ref,0.297,git/for-each-ref,3,0.477
git/for-each-ref getBranches should return empty list for empty repo,0.08,git/for-each-ref,3,0.477
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.477
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.308,git/rebase,21,7.549
git/rebase detect conflicts status detects REBASE_HEAD,0.26,git/rebase,21,7.549
git/rebase detect conflicts has conflicted files in working directory,0.263,git/rebase,21,7.549
git/rebase detect conflicts is a detached HEAD state,0.272,git/rebase,21,7.549
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.256,git/rebase,21,7.549
git/rebase abort after conflicts found no longer has working directory changes,0.25,git/rebase,21,7.549
git/rebase abort after conflicts found returns to the feature branch,0.252,git/rebase,21,7.549
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.329,git/rebase,21,7.549
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.326,git/rebase,21,7.549
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.328,git/rebase,21,7.549
git/rebase continue after resolving conflicts returns success,0.374,git/rebase,21,7.549
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.368,git/rebase,21,7.549
git/rebase continue after resolving conflicts no longer has working directory changes,0.374,git/rebase,21,7.549
git/rebase continue after resolving conflicts returns to the feature branch,0.389,git/rebase,21,7.549
git/rebase continue after resolving conflicts branch is now a different ref,0.386,git/rebase,21,7.549
git/rebase continue with additional changes unrelated to conflicted files returns success,0.375,git/rebase,21,7.549
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.384,git/rebase,21,7.549
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.388,git/rebase,21,7.549
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.39,git/rebase,21,7.549
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.397,git/rebase,21,7.549
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.368,git/rebase,21,7.549
git/commit createCommit normal commits the given files,0.121,git/commit,21,4.515
git/commit createCommit normal commit does not strip commentary by default,0.106,git/commit,21,4.515
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.515
git/commit createCommit normal can commit renames,0.154,git/commit,21,4.515
git/commit createCommit partials can commit some lines from new file,0.188,git/commit,21,4.515
git/commit createCommit partials can commit second hunk from modified file,0.196,git/commit,21,4.515
git/commit createCommit partials can commit single delete from modified file,0.18,git/commit,21,4.515
git/commit createCommit partials can commit multiple hunks from modified file,0.198,git/commit,21,4.515
git/commit createCommit partials can commit some lines from deleted file,0.176,git/commit,21,4.515
git/commit createCommit partials can commit renames with modifications,0.186,git/commit,21,4.515
git/commit createCommit partials can commit renames with partially selected modifications,0.218,git/commit,21,4.515
git/commit createCommit with a merge conflict creates a merge commit,0.253,git/commit,21,4.515
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.23,git/commit,21,4.515
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.332,git/commit,21,4.515
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.325,git/commit,21,4.515
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.413,git/commit,21,4.515
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.407,git/commit,21,4.515
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.515
git/commit index corner cases can commit when staged new file is then deleted,0.16,git/commit,21,4.515
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.177,git/commit,21,4.515
git/commit index corner cases file is deleted in index,0.18,git/commit,21,4.515
git/rebase can parse progress returns a value indicating conflicts were encountered,0.407,git/rebase,7,3.786
git/rebase can parse progress status detects REBASE_HEAD,0.401,git/rebase,7,3.786
git/rebase can parse progress is a detached HEAD state,0.399,git/rebase,7,3.786
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.841,git/rebase,7,3.786
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.839,git/rebase,7,3.786
git/rebase can parse progress for long rebase is a detached HEAD state,0.843,git/rebase,7,3.786
GitStore loadCommitBatch includes HEAD when loading commits,0.366,GitStore,11,2.554
GitStore can discard changes from a repository,0.171,GitStore,11,2.554
GitStore can discard a renamed file,0.151,GitStore,11,2.554
GitStore undo first commit reports the repository is unborn,0.188,GitStore,11,2.554
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.554
GitStore undo first commit clears the undo commit dialog,0.213,GitStore,11,2.554
GitStore undo first commit has no staged files,0.204,GitStore,11,2.554
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.554
git/status getStatus with conflicted repo parses conflicted files with markers,0.299,git/status,12,2.084
git/status getStatus with conflicted repo parses conflicted files without markers,0.301,git/status,12,2.084
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.4,git/status,12,2.084
git/status getStatus with conflicted repo parses resolved files,0.307,git/status,12,2.084
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.084
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.084
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.084
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.06,git/status,12,2.084
git/status getStatus with unconflicted repo reflects renames,0.119,git/status,12,2.084
git/status getStatus with unconflicted repo reflects copies,0.142,git/status,12,2.084
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.084
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.084,git/diff,19,2.007
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,2.007
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,2.007
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,2.007
git/diff imageDiff changes for images are set,0.082,git/diff,19,2.007
git/diff imageDiff changes for text are not set,0.094,git/diff,19,2.007
git/diff getWorkingDirectoryDiff counts lines for new file,0.095,git/diff,19,2.007
git/diff getWorkingDirectoryDiff counts lines for modified file,0.102,git/diff,19,2.007
git/diff getWorkingDirectoryDiff counts lines for staged file,0.094,git/diff,19,2.007
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,2.007
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.17,git/diff,19,2.007
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.173,git/diff,19,2.007
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.132,git/diff,19,2.007
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.151,git/diff,19,2.007
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.094,git/diff,19,2.007
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.072,git/diff,19,2.007
git/diff getBinaryPaths in repo with text only files returns an empty array,0.097,git/diff,19,2.007
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,2.007
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.126,git/diff,19,2.007
BranchPruner does nothing on non GitHub repositories,0.306,BranchPruner,6,1.859
BranchPruner prunes for GitHub repository,0.309,BranchPruner,6,1.859
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.252,BranchPruner,6,1.859
BranchPruner does not prune if there is no default branch,0.246,BranchPruner,6,1.859
BranchPruner does not prune reserved branches,0.319,BranchPruner,6,1.859
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.518
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.518
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.518
git/branch tip returns current branch when on a valid HEAD,0.08,git/branch,13,1.518
git/branch tip returns non-origin remote,0.082,git/branch,13,1.518
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.518
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.518
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.518
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.518
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.518
git/branch deleteBranch deletes local branches,0.123,git/branch,13,1.518
git/branch deleteBranch deletes remote branches,0.312,git/branch,13,1.518
git/branch deleteBranch handles attempted delete of removed remote branch,0.395,git/branch,13,1.518
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.105,git/stash,14,1.323
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.136,git/stash,14,1.323
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.097,git/stash,14,1.323
git/reflog getRecentBranches returns the recently checked out branches,0.154,git/reflog,6,1.048
git/reflog getRecentBranches works after renaming a branch,0.194,git/reflog,6,1.048
git/reflog getRecentBranches returns a limited number of branches,0.25,git/reflog,6,1.048
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.151,git/reflog,6,1.048
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.186,git/reflog,6,1.048
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.073,git/reflog,6,1.048
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.421,formatPatch,5,1.122
git/checkout can checkout a valid branch name in an existing repository,0.121,git/checkout,6,0.995
git/checkout can checkout a branch when it exists on multiple remotes,0.122,git/checkout,6,0.995
git/checkout will fail when an existing branch matches the remote branch,0.117,git/checkout,6,0.995
git/checkout with submodules cleans up an submodule that no longer exists,0.297,git/checkout,6,0.995
git/checkout with submodules updates a changed submodule reference,0.262,git/checkout,6,0.995
git/config config looks up config values,0.057,git/config,12,0.834
git/config config returns null for undefined values,0.054,git/config,12,0.834
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.834
git/config global config setGlobalConfigValue will replace all entries for a global value,0.089,git/config,12,0.834
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.067,git/config,12,0.834
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.834
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.065,git/config,12,0.834
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.065,git/config,12,0.834
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.834
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.066,git/config,12,0.834
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.065,git/config,12,0.834
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.067,git/config,12,0.834
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.767
git/rev-parse isGitRepository should return false for a directory,0.053,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns false for default initialized repository,0.064,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.767
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.062,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.062,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.192,git/rev-parse,10,0.767
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.676
gitignore saveGitIgnore applies rule correctly to repository,0.101,gitignore,9,0.676
gitignore appendIgnoreRule appends one rule,0.113,gitignore,9,0.676
gitignore appendIgnoreRule appends multiple rules,0.125,gitignore,9,0.676
git/submodule listSubmodules returns the submodule entry,0.127,git/submodule,3,0.69
git/submodule listSubmodules returns the expected tag,0.186,git/submodule,3,0.69
git/submodule resetSubmodulePaths update submodule to original commit,0.336,git/submodule,3,0.69
git/merge merge and is successful returns true,0.042,git/merge,7,0.662
git/merge merge and is a noop returns false,0.134,git/merge,7,0.662
git/merge getMergeBase returns the common ancestor of two branches,0.069,git/merge,7,0.662
git/log getCommits loads history,0.063,git/log,7,0.606
git/log getCommits handles repository with HEAD file on disk,0.092,git/log,7,0.606
git/log getCommits handles repository with signed commit and log.showSignature set,0.11,git/log,7,0.606
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.606
git/log getChangedFiles detects renames,0.088,git/log,7,0.606
git/log getChangedFiles detect copies,0.096,git/log,7,0.606
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.606
git/remote getRemotes should return both remotes,0.062,git/remote,11,0.57
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.57
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.57
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.533
git-lfs isUsingLFS returns true if LFS is tracking a path,0.078,git-lfs,9,0.533
git/for-each-ref getBranches fetches branches using for-each-ref,0.07,git/for-each-ref,3,0.237
git/for-each-ref getBranches should return empty list for empty repo,0.069,git/for-each-ref,3,0.237
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.057,git/for-each-ref,3,0.237
Update remote url updates the repository's remote url when the github url changes,0.109,Update remote url,4,0.394
Update remote url doesn't update the repository's remote url when the github url is the same,0.08,Update remote url,4,0.394
Update remote url doesn't update repository's remote url if protocols don't match,0.077,Update remote url,4,0.394
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.078,Update remote url,4,0.394
git/core error handling does not throw for errors that were expected,0.054,git/core,6,0.354
git/core error handling throws for errors that were not expected,0.054,git/core,6,0.354
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.354
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.354
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.354
git/core config lock file error handling normalizes paths,0.04,git/core,6,0.354
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.376
AppStore can select a repository,0.233,AppStore,5,0.288
git/reset reset can hard reset a repository,0.308,git/reset,2,0.35
validatedRepositoryPath returns the path to the repository,0.056,validatedRepositoryPath,2,0.11
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.058
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.324,git/rebase,21,7.691
git/rebase detect conflicts status detects REBASE_HEAD,0.272,git/rebase,21,7.691
git/rebase detect conflicts has conflicted files in working directory,0.267,git/rebase,21,7.691
git/rebase detect conflicts is a detached HEAD state,0.272,git/rebase,21,7.691
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.262,git/rebase,21,7.691
git/rebase abort after conflicts found no longer has working directory changes,0.257,git/rebase,21,7.691
git/rebase abort after conflicts found returns to the feature branch,0.257,git/rebase,21,7.691
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.328,git/rebase,21,7.691
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.327,git/rebase,21,7.691
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.336,git/rebase,21,7.691
git/rebase continue after resolving conflicts returns success,0.381,git/rebase,21,7.691
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.691
git/rebase continue after resolving conflicts no longer has working directory changes,0.385,git/rebase,21,7.691
git/rebase continue after resolving conflicts returns to the feature branch,0.394,git/rebase,21,7.691
git/rebase continue after resolving conflicts branch is now a different ref,0.388,git/rebase,21,7.691
git/rebase continue with additional changes unrelated to conflicted files returns success,0.39,git/rebase,21,7.691
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.389,git/rebase,21,7.691
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.39,git/rebase,21,7.691
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.399,git/rebase,21,7.691
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.691
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.38,git/rebase,21,7.691
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.472
git/commit createCommit normal commit does not strip commentary by default,0.107,git/commit,21,4.472
git/commit createCommit normal can commit for empty repository,0.132,git/commit,21,4.472
git/commit createCommit normal can commit renames,0.15,git/commit,21,4.472
git/commit createCommit partials can commit some lines from new file,0.176,git/commit,21,4.472
git/commit createCommit partials can commit second hunk from modified file,0.191,git/commit,21,4.472
git/commit createCommit partials can commit single delete from modified file,0.169,git/commit,21,4.472
git/commit createCommit partials can commit multiple hunks from modified file,0.189,git/commit,21,4.472
git/commit createCommit partials can commit some lines from deleted file,0.175,git/commit,21,4.472
git/commit createCommit partials can commit renames with modifications,0.18,git/commit,21,4.472
git/commit createCommit partials can commit renames with partially selected modifications,0.226,git/commit,21,4.472
git/commit createCommit with a merge conflict creates a merge commit,0.262,git/commit,21,4.472
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.231,git/commit,21,4.472
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.335,git/commit,21,4.472
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.325,git/commit,21,4.472
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.414,git/commit,21,4.472
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.421,git/commit,21,4.472
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.472
git/commit index corner cases can commit when staged new file is then deleted,0.151,git/commit,21,4.472
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.17,git/commit,21,4.472
git/commit index corner cases file is deleted in index,0.173,git/commit,21,4.472
git/rebase can parse progress returns a value indicating conflicts were encountered,0.401,git/rebase,7,3.8
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.8
git/rebase can parse progress is a detached HEAD state,0.4,git/rebase,7,3.8
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.838,git/rebase,7,3.8
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.847,git/rebase,7,3.8
git/rebase can parse progress for long rebase is a detached HEAD state,0.856,git/rebase,7,3.8
GitStore loadCommitBatch includes HEAD when loading commits,0.425,GitStore,11,2.639
GitStore can discard changes from a repository,0.17,GitStore,11,2.639
GitStore can discard a renamed file,0.15,GitStore,11,2.639
GitStore undo first commit reports the repository is unborn,0.195,GitStore,11,2.639
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.639
GitStore undo first commit clears the undo commit dialog,0.225,GitStore,11,2.639
GitStore undo first commit has no staged files,0.212,GitStore,11,2.639
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.639
git/status getStatus with conflicted repo parses conflicted files with markers,0.343,git/status,12,2.109
git/status getStatus with conflicted repo parses conflicted files without markers,0.307,git/status,12,2.109
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.404,git/status,12,2.109
git/status getStatus with conflicted repo parses resolved files,0.306,git/status,12,2.109
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.12,git/status,12,2.109
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.109
git/status getStatus with unconflicted repo parses changed files,0.069,git/status,12,2.109
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.109
git/status getStatus with unconflicted repo reflects renames,0.12,git/status,12,2.109
git/status getStatus with unconflicted repo reflects copies,0.117,git/status,12,2.109
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.109
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,1.91
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,1.91
git/diff getBlobImage retrieves valid image for modified file,0.057,git/diff,19,1.91
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,1.91
git/diff imageDiff changes for images are set,0.13,git/diff,19,1.91
git/diff imageDiff changes for text are not set,0.097,git/diff,19,1.91
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,1.91
git/diff getWorkingDirectoryDiff counts lines for modified file,0.092,git/diff,19,1.91
git/diff getWorkingDirectoryDiff counts lines for staged file,0.092,git/diff,19,1.91
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.127,git/diff,19,1.91
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.142,git/diff,19,1.91
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.148,git/diff,19,1.91
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.12,git/diff,19,1.91
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.117,git/diff,19,1.91
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.086,git/diff,19,1.91
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.91
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,1.91
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.111,git/diff,19,1.91
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.91
BranchPruner does nothing on non GitHub repositories,0.257,BranchPruner,6,1.81
BranchPruner prunes for GitHub repository,0.321,BranchPruner,6,1.81
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.258,BranchPruner,6,1.81
BranchPruner does not prune if there is no default branch,0.248,BranchPruner,6,1.81
BranchPruner does not prune reserved branches,0.306,BranchPruner,6,1.81
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.488
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.488
git/branch tip returns detached for arbitrary checkout,0.054,git/branch,13,1.488
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.488
git/branch tip returns non-origin remote,0.087,git/branch,13,1.488
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.488
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.488
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.488
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.488
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.082,git/branch,13,1.488
git/branch deleteBranch deletes local branches,0.117,git/branch,13,1.488
git/branch deleteBranch deletes remote branches,0.326,git/branch,13,1.488
git/branch deleteBranch handles attempted delete of removed remote branch,0.371,git/branch,13,1.488
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.351
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.14,git/stash,14,1.351
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.351
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.455,formatPatch,5,1.096
git/reflog getRecentBranches returns the recently checked out branches,0.151,git/reflog,6,1.108
git/reflog getRecentBranches works after renaming a branch,0.198,git/reflog,6,1.108
git/reflog getRecentBranches returns a limited number of branches,0.266,git/reflog,6,1.108
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.162,git/reflog,6,1.108
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.202,git/reflog,6,1.108
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.084,git/reflog,6,1.108
git/checkout can checkout a valid branch name in an existing repository,0.13,git/checkout,6,1.055
git/checkout can checkout a branch when it exists on multiple remotes,0.134,git/checkout,6,1.055
git/checkout will fail when an existing branch matches the remote branch,0.127,git/checkout,6,1.055
git/checkout with submodules cleans up an submodule that no longer exists,0.318,git/checkout,6,1.055
git/checkout with submodules updates a changed submodule reference,0.273,git/checkout,6,1.055
git/config config looks up config values,0.057,git/config,12,0.888
git/config config returns null for undefined values,0.055,git/config,12,0.888
git/config global config getGlobalConfigPath gets the config path,0.068,git/config,12,0.888
git/config global config setGlobalConfigValue will replace all entries for a global value,0.096,git/config,12,0.888
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.888
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.888
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.07,git/config,12,0.888
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.072,git/config,12,0.888
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.07,git/config,12,0.888
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.075,git/config,12,0.888
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.071,git/config,12,0.888
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.888
git/rev-parse isGitRepository should return true for a repository,0.059,git/rev-parse,10,0.834
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.834
git/rev-parse isBareRepository returns false for default initialized repository,0.069,git/rev-parse,10,0.834
git/rev-parse isBareRepository returns true for initialized bare repository,0.073,git/rev-parse,10,0.834
git/rev-parse isBareRepository returns false for empty directory,0.066,git/rev-parse,10,0.834
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.834
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.834
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.834
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.834
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.219,git/rev-parse,10,0.834
git/submodule listSubmodules returns the submodule entry,0.124,git/submodule,3,0.78
git/submodule listSubmodules returns the expected tag,0.185,git/submodule,3,0.78
git/submodule resetSubmodulePaths update submodule to original commit,0.429,git/submodule,3,0.78
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.763
gitignore saveGitIgnore applies rule correctly to repository,0.108,gitignore,9,0.763
gitignore appendIgnoreRule appends one rule,0.133,gitignore,9,0.763
gitignore appendIgnoreRule appends multiple rules,0.139,gitignore,9,0.763
git/merge merge and is successful returns true,0.048,git/merge,7,0.638
git/merge merge and is a noop returns false,0.061,git/merge,7,0.638
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.638
git/log getCommits loads history,0.071,git/log,7,0.692
git/log getCommits handles repository with HEAD file on disk,0.107,git/log,7,0.692
git/log getCommits handles repository with signed commit and log.showSignature set,0.126,git/log,7,0.692
git/log getChangedFiles loads the files changed in the commit,0.066,git/log,7,0.692
git/log getChangedFiles detects renames,0.109,git/log,7,0.692
git/log getChangedFiles detect copies,0.112,git/log,7,0.692
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.692
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.637
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.637
git/remote findDefaultRemote returns something when origin removed,0.073,git/remote,11,0.637
git-lfs isUsingLFS returns false for repository not using LFS,0.058,git-lfs,9,0.607
git-lfs isUsingLFS returns true if LFS is tracking a path,0.09,git-lfs,9,0.607
Update remote url updates the repository's remote url when the github url changes,0.117,Update remote url,4,0.417
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.417
Update remote url doesn't update repository's remote url if protocols don't match,0.082,Update remote url,4,0.417
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.417
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.053,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.375
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.386
git/core error handling throws for errors that were not expected,0.061,git/core,6,0.386
git/core exit code handling does not throw for exit codes that were expected,0.061,git/core,6,0.386
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.386
git/core config lock file error handling can parse lock file path from stderr,0.064,git/core,6,0.386
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.386
git/reset reset can hard reset a repository,0.076,git/reset,2,0.115
AppStore can select a repository,0.252,AppStore,5,0.309
git/for-each-ref getBranches fetches branches using for-each-ref,0.337,git/for-each-ref,3,0.531
git/for-each-ref getBranches should return empty list for empty repo,0.082,git/for-each-ref,3,0.531
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.069,git/for-each-ref,3,0.531
validatedRepositoryPath returns the path to the repository,0.062,validatedRepositoryPath,2,0.118
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.308,git/rebase,21,7.631
git/rebase detect conflicts status detects REBASE_HEAD,0.272,git/rebase,21,7.631
git/rebase detect conflicts has conflicted files in working directory,0.266,git/rebase,21,7.631
git/rebase detect conflicts is a detached HEAD state,0.263,git/rebase,21,7.631
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.258,git/rebase,21,7.631
git/rebase abort after conflicts found no longer has working directory changes,0.258,git/rebase,21,7.631
git/rebase abort after conflicts found returns to the feature branch,0.257,git/rebase,21,7.631
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.331,git/rebase,21,7.631
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.323,git/rebase,21,7.631
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.322,git/rebase,21,7.631
git/rebase continue after resolving conflicts returns success,0.375,git/rebase,21,7.631
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.386,git/rebase,21,7.631
git/rebase continue after resolving conflicts no longer has working directory changes,0.379,git/rebase,21,7.631
git/rebase continue after resolving conflicts returns to the feature branch,0.393,git/rebase,21,7.631
git/rebase continue after resolving conflicts branch is now a different ref,0.388,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files returns success,0.381,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.392,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.392,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.4,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.403,git/rebase,21,7.631
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.378,git/rebase,21,7.631
git/commit createCommit normal commits the given files,0.122,git/commit,21,4.504
git/commit createCommit normal commit does not strip commentary by default,0.107,git/commit,21,4.504
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.504
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.504
git/commit createCommit partials can commit some lines from new file,0.18,git/commit,21,4.504
git/commit createCommit partials can commit second hunk from modified file,0.189,git/commit,21,4.504
git/commit createCommit partials can commit single delete from modified file,0.172,git/commit,21,4.504
git/commit createCommit partials can commit multiple hunks from modified file,0.189,git/commit,21,4.504
git/commit createCommit partials can commit some lines from deleted file,0.184,git/commit,21,4.504
git/commit createCommit partials can commit renames with modifications,0.18,git/commit,21,4.504
git/commit createCommit partials can commit renames with partially selected modifications,0.227,git/commit,21,4.504
git/commit createCommit with a merge conflict creates a merge commit,0.26,git/commit,21,4.504
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.238,git/commit,21,4.504
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.34,git/commit,21,4.504
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.326,git/commit,21,4.504
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.404,git/commit,21,4.504
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.409,git/commit,21,4.504
git/commit createMergeCommit with no changes throws an error,0.109,git/commit,21,4.504
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.504
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.179,git/commit,21,4.504
git/commit index corner cases file is deleted in index,0.178,git/commit,21,4.504
git/rebase can parse progress returns a value indicating conflicts were encountered,0.403,git/rebase,7,3.855
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.855
git/rebase can parse progress is a detached HEAD state,0.402,git/rebase,7,3.855
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.848,git/rebase,7,3.855
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.884,git/rebase,7,3.855
git/rebase can parse progress for long rebase is a detached HEAD state,0.862,git/rebase,7,3.855
GitStore loadCommitBatch includes HEAD when loading commits,0.431,GitStore,11,2.638
GitStore can discard changes from a repository,0.17,GitStore,11,2.638
GitStore can discard a renamed file,0.153,GitStore,11,2.638
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.638
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.638
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.638
GitStore undo first commit has no staged files,0.21,GitStore,11,2.638
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.638
git/status getStatus with conflicted repo parses conflicted files with markers,0.338,git/status,12,2.134
git/status getStatus with conflicted repo parses conflicted files without markers,0.318,git/status,12,2.134
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.405,git/status,12,2.134
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,2.134
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.12,git/status,12,2.134
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.155,git/status,12,2.134
git/status getStatus with unconflicted repo parses changed files,0.074,git/status,12,2.134
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.064,git/status,12,2.134
git/status getStatus with unconflicted repo reflects renames,0.12,git/status,12,2.134
git/status getStatus with unconflicted repo reflects copies,0.125,git/status,12,2.134
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.134
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.048,git/diff,19,1.9
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.9
git/diff getBlobImage retrieves valid image for modified file,0.106,git/diff,19,1.9
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.9
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.9
git/diff imageDiff changes for text are not set,0.09,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for new file,0.09,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for modified file,0.092,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for staged file,0.093,git/diff,19,1.9
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.125,git/diff,19,1.9
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.149,git/diff,19,1.9
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.153,git/diff,19,1.9
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.129,git/diff,19,1.9
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.9
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.082,git/diff,19,1.9
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.06,git/diff,19,1.9
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,1.9
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.107,git/diff,19,1.9
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.12,git/diff,19,1.9
BranchPruner does nothing on non GitHub repositories,0.254,BranchPruner,6,1.846
BranchPruner prunes for GitHub repository,0.319,BranchPruner,6,1.846
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.264,BranchPruner,6,1.846
BranchPruner does not prune if there is no default branch,0.263,BranchPruner,6,1.846
BranchPruner does not prune reserved branches,0.301,BranchPruner,6,1.846
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.549
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,13,1.549
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.549
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.549
git/branch tip returns non-origin remote,0.083,git/branch,13,1.549
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.549
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.549
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.549
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.549
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.549
git/branch deleteBranch deletes local branches,0.126,git/branch,13,1.549
git/branch deleteBranch deletes remote branches,0.346,git/branch,13,1.549
git/branch deleteBranch handles attempted delete of removed remote branch,0.396,git/branch,13,1.549
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.109,git/stash,14,1.386
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.141,git/stash,14,1.386
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.103,git/stash,14,1.386
git/reflog getRecentBranches returns the recently checked out branches,0.154,git/reflog,6,1.107
git/reflog getRecentBranches works after renaming a branch,0.199,git/reflog,6,1.107
git/reflog getRecentBranches returns a limited number of branches,0.265,git/reflog,6,1.107
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.158,git/reflog,6,1.107
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.22,git/reflog,6,1.107
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.107
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.446,formatPatch,5,1.155
git/checkout can checkout a valid branch name in an existing repository,0.126,git/checkout,6,1.094
git/checkout can checkout a branch when it exists on multiple remotes,0.137,git/checkout,6,1.094
git/checkout will fail when an existing branch matches the remote branch,0.122,git/checkout,6,1.094
git/checkout with submodules cleans up an submodule that no longer exists,0.309,git/checkout,6,1.094
git/checkout with submodules updates a changed submodule reference,0.26,git/checkout,6,1.094
git/config config looks up config values,0.049,git/config,12,0.858
git/config config returns null for undefined values,0.049,git/config,12,0.858
git/config global config getGlobalConfigPath gets the config path,0.07,git/config,12,0.858
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.072,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.067,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.066,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.073,git/config,12,0.858
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.796
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.796
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.796
git/rev-parse isBareRepository returns true for initialized bare repository,0.067,git/rev-parse,10,0.796
git/rev-parse isBareRepository returns false for empty directory,0.061,git/rev-parse,10,0.796
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.796
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.796
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.055,git/rev-parse,10,0.796
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.796
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.205,git/rev-parse,10,0.796
git/submodule listSubmodules returns the submodule entry,0.141,git/submodule,3,0.727
git/submodule listSubmodules returns the expected tag,0.196,git/submodule,3,0.727
git/submodule resetSubmodulePaths update submodule to original commit,0.349,git/submodule,3,0.727
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.757
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.757
gitignore appendIgnoreRule appends one rule,0.193,gitignore,9,0.757
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.757
git/log getCommits loads history,0.066,git/log,7,0.673
git/log getCommits handles repository with HEAD file on disk,0.101,git/log,7,0.673
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.673
git/log getChangedFiles loads the files changed in the commit,0.067,git/log,7,0.673
git/log getChangedFiles detects renames,0.104,git/log,7,0.673
git/log getChangedFiles detect copies,0.111,git/log,7,0.673
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.673
git/merge merge and is successful returns true,0.049,git/merge,7,0.609
git/merge merge and is a noop returns false,0.061,git/merge,7,0.609
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.609
git/remote getRemotes should return both remotes,0.066,git/remote,11,0.585
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,11,0.585
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.585
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.531
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.531
git/for-each-ref getBranches fetches branches using for-each-ref,0.074,git/for-each-ref,3,0.241
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.241
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.056,git/for-each-ref,3,0.241
Update remote url updates the repository's remote url when the github url changes,0.194,Update remote url,4,0.498
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.498
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.498
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.498
git/core error handling does not throw for errors that were expected,0.06,git/core,6,0.378
git/core error handling throws for errors that were not expected,0.057,git/core,6,0.378
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.378
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.378
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.378
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.378
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.039,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.374
AppStore can select a repository,0.221,AppStore,5,0.275
validatedRepositoryPath returns the path to the repository,0.272,validatedRepositoryPath,2,0.327
git/reset reset can hard reset a repository,0.079,git/reset,2,0.12
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.059
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.313,git/rebase,21,7.701
git/rebase detect conflicts status detects REBASE_HEAD,0.269,git/rebase,21,7.701
git/rebase detect conflicts has conflicted files in working directory,0.265,git/rebase,21,7.701
git/rebase detect conflicts is a detached HEAD state,0.266,git/rebase,21,7.701
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.258,git/rebase,21,7.701
git/rebase abort after conflicts found no longer has working directory changes,0.258,git/rebase,21,7.701
git/rebase abort after conflicts found returns to the feature branch,0.262,git/rebase,21,7.701
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.343,git/rebase,21,7.701
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.331,git/rebase,21,7.701
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.328,git/rebase,21,7.701
git/rebase continue after resolving conflicts returns success,0.384,git/rebase,21,7.701
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.383,git/rebase,21,7.701
git/rebase continue after resolving conflicts no longer has working directory changes,0.38,git/rebase,21,7.701
git/rebase continue after resolving conflicts returns to the feature branch,0.395,git/rebase,21,7.701
git/rebase continue after resolving conflicts branch is now a different ref,0.393,git/rebase,21,7.701
git/rebase continue with additional changes unrelated to conflicted files returns success,0.394,git/rebase,21,7.701
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.701
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.393,git/rebase,21,7.701
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.401,git/rebase,21,7.701
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.405,git/rebase,21,7.701
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.38,git/rebase,21,7.701
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.57
git/commit createCommit normal commit does not strip commentary by default,0.113,git/commit,21,4.57
git/commit createCommit normal can commit for empty repository,0.139,git/commit,21,4.57
git/commit createCommit normal can commit renames,0.158,git/commit,21,4.57
git/commit createCommit partials can commit some lines from new file,0.189,git/commit,21,4.57
git/commit createCommit partials can commit second hunk from modified file,0.19,git/commit,21,4.57
git/commit createCommit partials can commit single delete from modified file,0.175,git/commit,21,4.57
git/commit createCommit partials can commit multiple hunks from modified file,0.189,git/commit,21,4.57
git/commit createCommit partials can commit some lines from deleted file,0.187,git/commit,21,4.57
git/commit createCommit partials can commit renames with modifications,0.192,git/commit,21,4.57
git/commit createCommit partials can commit renames with partially selected modifications,0.236,git/commit,21,4.57
git/commit createCommit with a merge conflict creates a merge commit,0.264,git/commit,21,4.57
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.237,git/commit,21,4.57
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.337,git/commit,21,4.57
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.325,git/commit,21,4.57
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.407,git/commit,21,4.57
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.411,git/commit,21,4.57
git/commit createMergeCommit with no changes throws an error,0.12,git/commit,21,4.57
git/commit index corner cases can commit when staged new file is then deleted,0.156,git/commit,21,4.57
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.57
git/commit index corner cases file is deleted in index,0.182,git/commit,21,4.57
git/rebase can parse progress returns a value indicating conflicts were encountered,0.405,git/rebase,7,3.951
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.951
git/rebase can parse progress is a detached HEAD state,0.407,git/rebase,7,3.951
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.871,git/rebase,7,3.951
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.937,git/rebase,7,3.951
git/rebase can parse progress for long rebase is a detached HEAD state,0.876,git/rebase,7,3.951
GitStore loadCommitBatch includes HEAD when loading commits,0.432,GitStore,11,2.719
GitStore can discard changes from a repository,0.201,GitStore,11,2.719
GitStore can discard a renamed file,0.154,GitStore,11,2.719
GitStore undo first commit reports the repository is unborn,0.197,GitStore,11,2.719
GitStore undo first commit pre-fills the commit message,0.129,GitStore,11,2.719
GitStore undo first commit clears the undo commit dialog,0.229,GitStore,11,2.719
GitStore undo first commit has no staged files,0.212,GitStore,11,2.719
GitStore repository with HEAD file can discard modified change cleanly,0.118,GitStore,11,2.719
git/status getStatus with conflicted repo parses conflicted files with markers,0.353,git/status,12,2.123
git/status getStatus with conflicted repo parses conflicted files without markers,0.311,git/status,12,2.123
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.402,git/status,12,2.123
git/status getStatus with conflicted repo parses resolved files,0.305,git/status,12,2.123
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.128,git/status,12,2.123
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.153,git/status,12,2.123
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.123
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.064,git/status,12,2.123
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.123
git/status getStatus with unconflicted repo reflects copies,0.112,git/status,12,2.123
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.123
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.046,git/diff,19,1.9
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.9
git/diff getBlobImage retrieves valid image for modified file,0.096,git/diff,19,1.9
git/diff getBlobImage retrieves valid images for deleted file,0.066,git/diff,19,1.9
git/diff imageDiff changes for images are set,0.08,git/diff,19,1.9
git/diff imageDiff changes for text are not set,0.088,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for new file,0.095,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for modified file,0.098,git/diff,19,1.9
git/diff getWorkingDirectoryDiff counts lines for staged file,0.087,git/diff,19,1.9
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.121,git/diff,19,1.9
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.145,git/diff,19,1.9
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.9
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.133,git/diff,19,1.9
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.123,git/diff,19,1.9
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.9
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.9
git/diff getBinaryPaths in repo with text only files returns an empty array,0.096,git/diff,19,1.9
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.105,git/diff,19,1.9
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.9
BranchPruner does nothing on non GitHub repositories,0.263,BranchPruner,6,1.82
BranchPruner prunes for GitHub repository,0.324,BranchPruner,6,1.82
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.253,BranchPruner,6,1.82
BranchPruner does not prune if there is no default branch,0.249,BranchPruner,6,1.82
BranchPruner does not prune reserved branches,0.307,BranchPruner,6,1.82
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.521
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.521
git/branch tip returns detached for arbitrary checkout,0.062,git/branch,13,1.521
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.521
git/branch tip returns non-origin remote,0.084,git/branch,13,1.521
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.521
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.521
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.521
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.058,git/branch,13,1.521
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.088,git/branch,13,1.521
git/branch deleteBranch deletes local branches,0.125,git/branch,13,1.521
git/branch deleteBranch deletes remote branches,0.327,git/branch,13,1.521
git/branch deleteBranch handles attempted delete of removed remote branch,0.378,git/branch,13,1.521
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.107,git/stash,14,1.39
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.143,git/stash,14,1.39
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.39
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.438,formatPatch,5,1.09
git/reflog getRecentBranches returns the recently checked out branches,0.156,git/reflog,6,1.112
git/reflog getRecentBranches works after renaming a branch,0.207,git/reflog,6,1.112
git/reflog getRecentBranches returns a limited number of branches,0.274,git/reflog,6,1.112
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.161,git/reflog,6,1.112
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.201,git/reflog,6,1.112
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.112
git/checkout can checkout a valid branch name in an existing repository,0.193,git/checkout,6,1.054
git/checkout can checkout a branch when it exists on multiple remotes,0.137,git/checkout,6,1.054
git/checkout will fail when an existing branch matches the remote branch,0.119,git/checkout,6,1.054
git/checkout with submodules cleans up an submodule that no longer exists,0.288,git/checkout,6,1.054
git/checkout with submodules updates a changed submodule reference,0.243,git/checkout,6,1.054
git/config config looks up config values,0.052,git/config,12,0.805
git/config config returns null for undefined values,0.052,git/config,12,0.805
git/config global config getGlobalConfigPath gets the config path,0.063,git/config,12,0.805
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,12,0.805
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.064,git/config,12,0.805
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.061,git/config,12,0.805
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.063,git/config,12,0.805
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.805
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.061,git/config,12,0.805
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.063,git/config,12,0.805
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.062,git/config,12,0.805
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.063,git/config,12,0.805
git/rev-parse isGitRepository should return true for a repository,0.053,git/rev-parse,10,0.756
git/rev-parse isGitRepository should return false for a directory,0.058,git/rev-parse,10,0.756
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.756
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.756
git/rev-parse isBareRepository returns false for empty directory,0.061,git/rev-parse,10,0.756
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.756
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.063,git/rev-parse,10,0.756
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.055,git/rev-parse,10,0.756
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.055,git/rev-parse,10,0.756
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.183,git/rev-parse,10,0.756
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.65
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.65
gitignore appendIgnoreRule appends one rule,0.112,gitignore,9,0.65
gitignore appendIgnoreRule appends multiple rules,0.115,gitignore,9,0.65
git/submodule listSubmodules returns the submodule entry,0.126,git/submodule,3,0.714
git/submodule listSubmodules returns the expected tag,0.184,git/submodule,3,0.714
git/submodule resetSubmodulePaths update submodule to original commit,0.363,git/submodule,3,0.714
git/log getCommits loads history,0.068,git/log,7,0.652
git/log getCommits handles repository with HEAD file on disk,0.102,git/log,7,0.652
git/log getCommits handles repository with signed commit and log.showSignature set,0.113,git/log,7,0.652
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.652
git/log getChangedFiles detects renames,0.101,git/log,7,0.652
git/log getChangedFiles detect copies,0.113,git/log,7,0.652
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.652
git/merge merge and is successful returns true,0.049,git/merge,7,0.605
git/merge merge and is a noop returns false,0.059,git/merge,7,0.605
git/merge getMergeBase returns the common ancestor of two branches,0.074,git/merge,7,0.605
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.663
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.663
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.663
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.534
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.534
Update remote url updates the repository's remote url when the github url changes,0.106,Update remote url,4,0.397
Update remote url doesn't update the repository's remote url when the github url is the same,0.08,Update remote url,4,0.397
Update remote url doesn't update repository's remote url if protocols don't match,0.08,Update remote url,4,0.397
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.08,Update remote url,4,0.397
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.374
git/core error handling throws for errors that were not expected,0.061,git/core,6,0.374
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.374
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.374
git/core config lock file error handling can parse lock file path from stderr,0.058,git/core,6,0.374
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.374
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.046,patch formatting,8,0.356
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.045,patch formatting,8,0.356
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.356
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.047,patch formatting,8,0.356
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.356
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.356
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.356
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.356
validatedRepositoryPath returns the path to the repository,0.055,validatedRepositoryPath,2,0.108
AppStore can select a repository,0.223,AppStore,5,0.28
git/for-each-ref getBranches fetches branches using for-each-ref,0.295,git/for-each-ref,3,0.473
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.473
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.473
git/reset reset can hard reset a repository,0.084,git/reset,2,0.124
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.059
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.313,git/rebase,21,7.731
git/rebase detect conflicts status detects REBASE_HEAD,0.27,git/rebase,21,7.731
git/rebase detect conflicts has conflicted files in working directory,0.265,git/rebase,21,7.731
git/rebase detect conflicts is a detached HEAD state,0.266,git/rebase,21,7.731
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.275,git/rebase,21,7.731
git/rebase abort after conflicts found no longer has working directory changes,0.26,git/rebase,21,7.731
git/rebase abort after conflicts found returns to the feature branch,0.258,git/rebase,21,7.731
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.339,git/rebase,21,7.731
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.326,git/rebase,21,7.731
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.325,git/rebase,21,7.731
git/rebase continue after resolving conflicts returns success,0.388,git/rebase,21,7.731
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.385,git/rebase,21,7.731
git/rebase continue after resolving conflicts no longer has working directory changes,0.384,git/rebase,21,7.731
git/rebase continue after resolving conflicts returns to the feature branch,0.401,git/rebase,21,7.731
git/rebase continue after resolving conflicts branch is now a different ref,0.393,git/rebase,21,7.731
git/rebase continue with additional changes unrelated to conflicted files returns success,0.389,git/rebase,21,7.731
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.39,git/rebase,21,7.731
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.392,git/rebase,21,7.731
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.411,git/rebase,21,7.731
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.408,git/rebase,21,7.731
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.388,git/rebase,21,7.731
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.507
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.507
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.507
git/commit createCommit normal can commit renames,0.157,git/commit,21,4.507
git/commit createCommit partials can commit some lines from new file,0.195,git/commit,21,4.507
git/commit createCommit partials can commit second hunk from modified file,0.19,git/commit,21,4.507
git/commit createCommit partials can commit single delete from modified file,0.167,git/commit,21,4.507
git/commit createCommit partials can commit multiple hunks from modified file,0.189,git/commit,21,4.507
git/commit createCommit partials can commit some lines from deleted file,0.174,git/commit,21,4.507
git/commit createCommit partials can commit renames with modifications,0.179,git/commit,21,4.507
git/commit createCommit partials can commit renames with partially selected modifications,0.226,git/commit,21,4.507
git/commit createCommit with a merge conflict creates a merge commit,0.253,git/commit,21,4.507
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.237,git/commit,21,4.507
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.341,git/commit,21,4.507
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.331,git/commit,21,4.507
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.397,git/commit,21,4.507
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.405,git/commit,21,4.507
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.507
git/commit index corner cases can commit when staged new file is then deleted,0.155,git/commit,21,4.507
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.507
git/commit index corner cases file is deleted in index,0.183,git/commit,21,4.507
git/rebase can parse progress returns a value indicating conflicts were encountered,0.401,git/rebase,7,3.851
git/rebase can parse progress status detects REBASE_HEAD,0.401,git/rebase,7,3.851
git/rebase can parse progress is a detached HEAD state,0.416,git/rebase,7,3.851
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.842,git/rebase,7,3.851
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.845,git/rebase,7,3.851
git/rebase can parse progress for long rebase is a detached HEAD state,0.882,git/rebase,7,3.851
GitStore loadCommitBatch includes HEAD when loading commits,0.377,GitStore,11,2.564
GitStore can discard changes from a repository,0.165,GitStore,11,2.564
GitStore can discard a renamed file,0.146,GitStore,11,2.564
GitStore undo first commit reports the repository is unborn,0.19,GitStore,11,2.564
GitStore undo first commit pre-fills the commit message,0.122,GitStore,11,2.564
GitStore undo first commit clears the undo commit dialog,0.218,GitStore,11,2.564
GitStore undo first commit has no staged files,0.21,GitStore,11,2.564
GitStore repository with HEAD file can discard modified change cleanly,0.118,GitStore,11,2.564
git/status getStatus with conflicted repo parses conflicted files with markers,0.347,git/status,12,2.076
git/status getStatus with conflicted repo parses conflicted files without markers,0.299,git/status,12,2.076
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.394,git/status,12,2.076
git/status getStatus with conflicted repo parses resolved files,0.297,git/status,12,2.076
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.076
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.076
git/status getStatus with unconflicted repo parses changed files,0.064,git/status,12,2.076
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,2.076
git/status getStatus with unconflicted repo reflects renames,0.118,git/status,12,2.076
git/status getStatus with unconflicted repo reflects copies,0.115,git/status,12,2.076
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.076
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.047,git/diff,19,1.876
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.876
git/diff getBlobImage retrieves valid image for modified file,0.097,git/diff,19,1.876
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.876
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.876
git/diff imageDiff changes for text are not set,0.091,git/diff,19,1.876
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,1.876
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.876
git/diff getWorkingDirectoryDiff counts lines for staged file,0.087,git/diff,19,1.876
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.119,git/diff,19,1.876
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.141,git/diff,19,1.876
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.145,git/diff,19,1.876
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.124,git/diff,19,1.876
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.876
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.083,git/diff,19,1.876
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.069,git/diff,19,1.876
git/diff getBinaryPaths in repo with text only files returns an empty array,0.091,git/diff,19,1.876
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.111,git/diff,19,1.876
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.876
BranchPruner does nothing on non GitHub repositories,0.261,BranchPruner,6,1.827
BranchPruner prunes for GitHub repository,0.313,BranchPruner,6,1.827
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.248,BranchPruner,6,1.827
BranchPruner does not prune if there is no default branch,0.253,BranchPruner,6,1.827
BranchPruner does not prune reserved branches,0.311,BranchPruner,6,1.827
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.566
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,13,1.566
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.566
git/branch tip returns current branch when on a valid HEAD,0.08,git/branch,13,1.566
git/branch tip returns non-origin remote,0.084,git/branch,13,1.566
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,13,1.566
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.566
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.566
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.057,git/branch,13,1.566
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.566
git/branch deleteBranch deletes local branches,0.128,git/branch,13,1.566
git/branch deleteBranch deletes remote branches,0.358,git/branch,13,1.566
git/branch deleteBranch handles attempted delete of removed remote branch,0.386,git/branch,13,1.566
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.109,git/stash,14,1.4
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.142,git/stash,14,1.4
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.103,git/stash,14,1.4
git/reflog getRecentBranches returns the recently checked out branches,0.16,git/reflog,6,1.087
git/reflog getRecentBranches works after renaming a branch,0.198,git/reflog,6,1.087
git/reflog getRecentBranches returns a limited number of branches,0.262,git/reflog,6,1.087
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.156,git/reflog,6,1.087
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.197,git/reflog,6,1.087
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.087
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.393,formatPatch,5,1.07
git/checkout can checkout a valid branch name in an existing repository,0.192,git/checkout,6,1.12
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.12
git/checkout will fail when an existing branch matches the remote branch,0.126,git/checkout,6,1.12
git/checkout with submodules cleans up an submodule that no longer exists,0.319,git/checkout,6,1.12
git/checkout with submodules updates a changed submodule reference,0.271,git/checkout,6,1.12
git/config config looks up config values,0.052,git/config,12,0.864
git/config config returns null for undefined values,0.052,git/config,12,0.864
git/config global config getGlobalConfigPath gets the config path,0.064,git/config,12,0.864
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.864
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.067,git/config,12,0.864
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.072,git/config,12,0.864
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.864
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.864
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.072,git/config,12,0.864
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.864
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.864
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.864
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.767
git/rev-parse isGitRepository should return false for a directory,0.051,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns false for default initialized repository,0.064,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns false for empty directory,0.06,git/rev-parse,10,0.767
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.057,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.191,git/rev-parse,10,0.767
git/submodule listSubmodules returns the submodule entry,0.135,git/submodule,3,0.721
git/submodule listSubmodules returns the expected tag,0.191,git/submodule,3,0.721
git/submodule resetSubmodulePaths update submodule to original commit,0.353,git/submodule,3,0.721
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.566
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.566
git/remote findDefaultRemote returns something when origin removed,0.067,git/remote,11,0.566
git/log getCommits loads history,0.068,git/log,7,0.648
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.648
git/log getCommits handles repository with signed commit and log.showSignature set,0.118,git/log,7,0.648
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.648
git/log getChangedFiles detects renames,0.094,git/log,7,0.648
git/log getChangedFiles detect copies,0.11,git/log,7,0.648
git/log getChangedFiles handles commit when HEAD exists on disk,0.061,git/log,7,0.648
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.715
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.715
gitignore appendIgnoreRule appends one rule,0.124,gitignore,9,0.715
gitignore appendIgnoreRule appends multiple rules,0.125,gitignore,9,0.715
git/merge merge and is successful returns true,0.046,git/merge,7,0.602
git/merge merge and is a noop returns false,0.059,git/merge,7,0.602
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.602
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.557
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.557
git/for-each-ref getBranches fetches branches using for-each-ref,0.072,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.242
Update remote url updates the repository's remote url when the github url changes,0.113,Update remote url,4,0.418
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.418
Update remote url doesn't update repository's remote url if protocols don't match,0.083,Update remote url,4,0.418
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.418
git/core error handling does not throw for errors that were expected,0.059,git/core,6,0.376
git/core error handling throws for errors that were not expected,0.057,git/core,6,0.376
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.376
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.376
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.376
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.047,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.049,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.375
AppStore can select a repository,0.239,AppStore,5,0.293
git/reset reset can hard reset a repository,0.319,git/reset,2,0.359
validatedRepositoryPath returns the path to the repository,0.061,validatedRepositoryPath,2,0.116
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.326,git/rebase,21,7.734
git/rebase detect conflicts status detects REBASE_HEAD,0.265,git/rebase,21,7.734
git/rebase detect conflicts has conflicted files in working directory,0.266,git/rebase,21,7.734
git/rebase detect conflicts is a detached HEAD state,0.28,git/rebase,21,7.734
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.261,git/rebase,21,7.734
git/rebase abort after conflicts found no longer has working directory changes,0.259,git/rebase,21,7.734
git/rebase abort after conflicts found returns to the feature branch,0.266,git/rebase,21,7.734
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.347,git/rebase,21,7.734
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.333,git/rebase,21,7.734
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.327,git/rebase,21,7.734
git/rebase continue after resolving conflicts returns success,0.381,git/rebase,21,7.734
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.387,git/rebase,21,7.734
git/rebase continue after resolving conflicts no longer has working directory changes,0.381,git/rebase,21,7.734
git/rebase continue after resolving conflicts returns to the feature branch,0.401,git/rebase,21,7.734
git/rebase continue after resolving conflicts branch is now a different ref,0.391,git/rebase,21,7.734
git/rebase continue with additional changes unrelated to conflicted files returns success,0.388,git/rebase,21,7.734
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.389,git/rebase,21,7.734
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.392,git/rebase,21,7.734
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.404,git/rebase,21,7.734
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.734
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.382,git/rebase,21,7.734
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.629
git/commit createCommit normal commit does not strip commentary by default,0.104,git/commit,21,4.629
git/commit createCommit normal can commit for empty repository,0.135,git/commit,21,4.629
git/commit createCommit normal can commit renames,0.154,git/commit,21,4.629
git/commit createCommit partials can commit some lines from new file,0.182,git/commit,21,4.629
git/commit createCommit partials can commit second hunk from modified file,0.209,git/commit,21,4.629
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.629
git/commit createCommit partials can commit multiple hunks from modified file,0.201,git/commit,21,4.629
git/commit createCommit partials can commit some lines from deleted file,0.189,git/commit,21,4.629
git/commit createCommit partials can commit renames with modifications,0.194,git/commit,21,4.629
git/commit createCommit partials can commit renames with partially selected modifications,0.244,git/commit,21,4.629
git/commit createCommit with a merge conflict creates a merge commit,0.266,git/commit,21,4.629
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.242,git/commit,21,4.629
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.34,git/commit,21,4.629
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.335,git/commit,21,4.629
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.417,git/commit,21,4.629
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.419,git/commit,21,4.629
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.629
git/commit index corner cases can commit when staged new file is then deleted,0.157,git/commit,21,4.629
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.183,git/commit,21,4.629
git/commit index corner cases file is deleted in index,0.177,git/commit,21,4.629
git/rebase can parse progress returns a value indicating conflicts were encountered,0.409,git/rebase,7,3.935
git/rebase can parse progress status detects REBASE_HEAD,0.414,git/rebase,7,3.935
git/rebase can parse progress is a detached HEAD state,0.414,git/rebase,7,3.935
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.848,git/rebase,7,3.935
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.92,git/rebase,7,3.935
git/rebase can parse progress for long rebase is a detached HEAD state,0.876,git/rebase,7,3.935
GitStore loadCommitBatch includes HEAD when loading commits,0.44,GitStore,11,2.683
GitStore can discard changes from a repository,0.168,GitStore,11,2.683
GitStore can discard a renamed file,0.152,GitStore,11,2.683
GitStore undo first commit reports the repository is unborn,0.196,GitStore,11,2.683
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.683
GitStore undo first commit clears the undo commit dialog,0.223,GitStore,11,2.683
GitStore undo first commit has no staged files,0.207,GitStore,11,2.683
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.683
git/status getStatus with conflicted repo parses conflicted files with markers,0.345,git/status,12,2.091
git/status getStatus with conflicted repo parses conflicted files without markers,0.308,git/status,12,2.091
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.393,git/status,12,2.091
git/status getStatus with conflicted repo parses resolved files,0.3,git/status,12,2.091
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.121,git/status,12,2.091
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.091
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.091
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.091
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.091
git/status getStatus with unconflicted repo reflects copies,0.118,git/status,12,2.091
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.091
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.048,git/diff,19,1.864
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,1.864
git/diff getBlobImage retrieves valid image for modified file,0.059,git/diff,19,1.864
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.864
git/diff imageDiff changes for images are set,0.123,git/diff,19,1.864
git/diff imageDiff changes for text are not set,0.093,git/diff,19,1.864
git/diff getWorkingDirectoryDiff counts lines for new file,0.081,git/diff,19,1.864
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.864
git/diff getWorkingDirectoryDiff counts lines for staged file,0.087,git/diff,19,1.864
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.127,git/diff,19,1.864
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.146,git/diff,19,1.864
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.145,git/diff,19,1.864
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.126,git/diff,19,1.864
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.116,git/diff,19,1.864
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.864
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.064,git/diff,19,1.864
git/diff getBinaryPaths in repo with text only files returns an empty array,0.09,git/diff,19,1.864
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.101,git/diff,19,1.864
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.114,git/diff,19,1.864
BranchPruner does nothing on non GitHub repositories,0.237,BranchPruner,6,1.743
BranchPruner prunes for GitHub repository,0.299,BranchPruner,6,1.743
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.239,BranchPruner,6,1.743
BranchPruner does not prune if there is no default branch,0.247,BranchPruner,6,1.743
BranchPruner does not prune reserved branches,0.306,BranchPruner,6,1.743
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.401
git/branch tip returns correct ref if checkout occurs,0.038,git/branch,13,1.401
git/branch tip returns detached for arbitrary checkout,0.053,git/branch,13,1.401
git/branch tip returns current branch when on a valid HEAD,0.071,git/branch,13,1.401
git/branch tip returns non-origin remote,0.075,git/branch,13,1.401
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,13,1.401
git/branch getBranchesPointedAt in a local repo finds one branch name,0.052,git/branch,13,1.401
git/branch getBranchesPointedAt in a local repo finds no branch names,0.047,git/branch,13,1.401
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.045,git/branch,13,1.401
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.083,git/branch,13,1.401
git/branch deleteBranch deletes local branches,0.116,git/branch,13,1.401
git/branch deleteBranch deletes remote branches,0.302,git/branch,13,1.401
git/branch deleteBranch handles attempted delete of removed remote branch,0.358,git/branch,13,1.401
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.108,git/stash,14,1.343
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.141,git/stash,14,1.343
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.343
git/checkout can checkout a valid branch name in an existing repository,0.126,git/checkout,6,1.059
git/checkout can checkout a branch when it exists on multiple remotes,0.127,git/checkout,6,1.059
git/checkout will fail when an existing branch matches the remote branch,0.121,git/checkout,6,1.059
git/checkout with submodules cleans up an submodule that no longer exists,0.345,git/checkout,6,1.059
git/checkout with submodules updates a changed submodule reference,0.268,git/checkout,6,1.059
git/reflog getRecentBranches returns the recently checked out branches,0.153,git/reflog,6,1.118
git/reflog getRecentBranches works after renaming a branch,0.203,git/reflog,6,1.118
git/reflog getRecentBranches returns a limited number of branches,0.276,git/reflog,6,1.118
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.168,git/reflog,6,1.118
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.205,git/reflog,6,1.118
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.118
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.426,formatPatch,5,1.13
git/config config looks up config values,0.055,git/config,12,0.882
git/config config returns null for undefined values,0.055,git/config,12,0.882
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.882
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.072,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.077,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.074,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.882
git/rev-parse isGitRepository should return true for a repository,0.064,git/rev-parse,10,0.841
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.841
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.841
git/rev-parse isBareRepository returns true for initialized bare repository,0.078,git/rev-parse,10,0.841
git/rev-parse isBareRepository returns false for empty directory,0.064,git/rev-parse,10,0.841
git/rev-parse isBareRepository throws error for missing directory,0.059,git/rev-parse,10,0.841
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.071,git/rev-parse,10,0.841
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.06,git/rev-parse,10,0.841
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.841
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.219,git/rev-parse,10,0.841
git/submodule listSubmodules returns the submodule entry,0.138,git/submodule,3,0.823
git/submodule listSubmodules returns the expected tag,0.211,git/submodule,3,0.823
git/submodule resetSubmodulePaths update submodule to original commit,0.433,git/submodule,3,0.823
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.766
gitignore saveGitIgnore applies rule correctly to repository,0.112,gitignore,9,0.766
gitignore appendIgnoreRule appends one rule,0.132,gitignore,9,0.766
gitignore appendIgnoreRule appends multiple rules,0.138,gitignore,9,0.766
git/log getCommits loads history,0.067,git/log,7,0.629
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.629
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.629
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.629
git/log getChangedFiles detects renames,0.092,git/log,7,0.629
git/log getChangedFiles detect copies,0.097,git/log,7,0.629
git/log getChangedFiles handles commit when HEAD exists on disk,0.053,git/log,7,0.629
git/merge merge and is successful returns true,0.042,git/merge,7,0.65
git/merge merge and is a noop returns false,0.06,git/merge,7,0.65
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.65
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.711
git/remote findDefaultRemote returns origin when multiple remotes found,0.074,git/remote,11,0.711
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.711
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.586
git-lfs isUsingLFS returns true if LFS is tracking a path,0.084,git-lfs,9,0.586
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.416
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.416
Update remote url doesn't update repository's remote url if protocols don't match,0.081,Update remote url,4,0.416
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.416
git/core error handling does not throw for errors that were expected,0.054,git/core,6,0.364
git/core error handling throws for errors that were not expected,0.061,git/core,6,0.364
git/core exit code handling does not throw for exit codes that were expected,0.056,git/core,6,0.364
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.364
git/core config lock file error handling can parse lock file path from stderr,0.056,git/core,6,0.364
git/core config lock file error handling normalizes paths,0.042,git/core,6,0.364
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.047,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.048,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.034,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.36
git/reset reset can hard reset a repository,0.081,git/reset,2,0.12
AppStore can select a repository,0.23,AppStore,5,0.288
git/for-each-ref getBranches fetches branches using for-each-ref,0.299,git/for-each-ref,3,0.476
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.476
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.476
validatedRepositoryPath returns the path to the repository,0.057,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.317,git/rebase,21,7.502
git/rebase detect conflicts status detects REBASE_HEAD,0.26,git/rebase,21,7.502
git/rebase detect conflicts has conflicted files in working directory,0.255,git/rebase,21,7.502
git/rebase detect conflicts is a detached HEAD state,0.26,git/rebase,21,7.502
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.259,git/rebase,21,7.502
git/rebase abort after conflicts found no longer has working directory changes,0.251,git/rebase,21,7.502
git/rebase abort after conflicts found returns to the feature branch,0.252,git/rebase,21,7.502
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.318,git/rebase,21,7.502
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.318,git/rebase,21,7.502
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.313,git/rebase,21,7.502
git/rebase continue after resolving conflicts returns success,0.371,git/rebase,21,7.502
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.502
git/rebase continue after resolving conflicts no longer has working directory changes,0.372,git/rebase,21,7.502
git/rebase continue after resolving conflicts returns to the feature branch,0.391,git/rebase,21,7.502
git/rebase continue after resolving conflicts branch is now a different ref,0.386,git/rebase,21,7.502
git/rebase continue with additional changes unrelated to conflicted files returns success,0.381,git/rebase,21,7.502
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.384,git/rebase,21,7.502
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.383,git/rebase,21,7.502
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.386,git/rebase,21,7.502
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.396,git/rebase,21,7.502
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.366,git/rebase,21,7.502
git/commit createCommit normal commits the given files,0.119,git/commit,21,4.478
git/commit createCommit normal commit does not strip commentary by default,0.106,git/commit,21,4.478
git/commit createCommit normal can commit for empty repository,0.13,git/commit,21,4.478
git/commit createCommit normal can commit renames,0.149,git/commit,21,4.478
git/commit createCommit partials can commit some lines from new file,0.176,git/commit,21,4.478
git/commit createCommit partials can commit second hunk from modified file,0.191,git/commit,21,4.478
git/commit createCommit partials can commit single delete from modified file,0.172,git/commit,21,4.478
git/commit createCommit partials can commit multiple hunks from modified file,0.199,git/commit,21,4.478
git/commit createCommit partials can commit some lines from deleted file,0.182,git/commit,21,4.478
git/commit createCommit partials can commit renames with modifications,0.185,git/commit,21,4.478
git/commit createCommit partials can commit renames with partially selected modifications,0.224,git/commit,21,4.478
git/commit createCommit with a merge conflict creates a merge commit,0.252,git/commit,21,4.478
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.237,git/commit,21,4.478
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.323,git/commit,21,4.478
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.321,git/commit,21,4.478
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.424,git/commit,21,4.478
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.408,git/commit,21,4.478
git/commit createMergeCommit with no changes throws an error,0.117,git/commit,21,4.478
git/commit index corner cases can commit when staged new file is then deleted,0.151,git/commit,21,4.478
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.478
git/commit index corner cases file is deleted in index,0.172,git/commit,21,4.478
git/rebase can parse progress returns a value indicating conflicts were encountered,0.394,git/rebase,7,3.763
git/rebase can parse progress status detects REBASE_HEAD,0.402,git/rebase,7,3.763
git/rebase can parse progress is a detached HEAD state,0.398,git/rebase,7,3.763
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.823,git/rebase,7,3.763
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.828,git/rebase,7,3.763
git/rebase can parse progress for long rebase is a detached HEAD state,0.867,git/rebase,7,3.763
GitStore loadCommitBatch includes HEAD when loading commits,0.411,GitStore,11,2.608
GitStore can discard changes from a repository,0.168,GitStore,11,2.608
GitStore can discard a renamed file,0.151,GitStore,11,2.608
GitStore undo first commit reports the repository is unborn,0.191,GitStore,11,2.608
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.608
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.608
GitStore undo first commit has no staged files,0.209,GitStore,11,2.608
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.608
git/status getStatus with conflicted repo parses conflicted files with markers,0.308,git/status,12,2.106
git/status getStatus with conflicted repo parses conflicted files without markers,0.315,git/status,12,2.106
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.41,git/status,12,2.106
git/status getStatus with conflicted repo parses resolved files,0.314,git/status,12,2.106
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.106
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.15,git/status,12,2.106
git/status getStatus with unconflicted repo parses changed files,0.076,git/status,12,2.106
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.106
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.106
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.106
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.106
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.084,git/diff,19,1.932
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.932
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,1.932
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.932
git/diff imageDiff changes for images are set,0.087,git/diff,19,1.932
git/diff imageDiff changes for text are not set,0.086,git/diff,19,1.932
git/diff getWorkingDirectoryDiff counts lines for new file,0.086,git/diff,19,1.932
git/diff getWorkingDirectoryDiff counts lines for modified file,0.087,git/diff,19,1.932
git/diff getWorkingDirectoryDiff counts lines for staged file,0.08,git/diff,19,1.932
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.115,git/diff,19,1.932
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.158,git/diff,19,1.932
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.164,git/diff,19,1.932
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.145,git/diff,19,1.932
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.141,git/diff,19,1.932
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.095,git/diff,19,1.932
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.075,git/diff,19,1.932
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.932
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.101,git/diff,19,1.932
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.932
BranchPruner does nothing on non GitHub repositories,0.315,BranchPruner,6,1.884
BranchPruner prunes for GitHub repository,0.312,BranchPruner,6,1.884
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.258,BranchPruner,6,1.884
BranchPruner does not prune if there is no default branch,0.261,BranchPruner,6,1.884
BranchPruner does not prune reserved branches,0.317,BranchPruner,6,1.884
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.462
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.462
git/branch tip returns detached for arbitrary checkout,0.055,git/branch,13,1.462
git/branch tip returns current branch when on a valid HEAD,0.075,git/branch,13,1.462
git/branch tip returns non-origin remote,0.084,git/branch,13,1.462
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.082,git/branch,13,1.462
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.462
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.462
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.462
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.462
git/branch deleteBranch deletes local branches,0.118,git/branch,13,1.462
git/branch deleteBranch deletes remote branches,0.308,git/branch,13,1.462
git/branch deleteBranch handles attempted delete of removed remote branch,0.368,git/branch,13,1.462
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.103,git/stash,14,1.296
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.134,git/stash,14,1.296
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.096,git/stash,14,1.296
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.432,formatPatch,5,1.055
git/reflog getRecentBranches returns the recently checked out branches,0.145,git/reflog,6,1.044
git/reflog getRecentBranches works after renaming a branch,0.191,git/reflog,6,1.044
git/reflog getRecentBranches returns a limited number of branches,0.252,git/reflog,6,1.044
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.153,git/reflog,6,1.044
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.19,git/reflog,6,1.044
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.044
git/checkout can checkout a valid branch name in an existing repository,0.12,git/checkout,6,1.045
git/checkout can checkout a branch when it exists on multiple remotes,0.133,git/checkout,6,1.045
git/checkout will fail when an existing branch matches the remote branch,0.123,git/checkout,6,1.045
git/checkout with submodules cleans up an submodule that no longer exists,0.324,git/checkout,6,1.045
git/checkout with submodules updates a changed submodule reference,0.268,git/checkout,6,1.045
git/config config looks up config values,0.055,git/config,12,0.844
git/config config returns null for undefined values,0.052,git/config,12,0.844
git/config global config getGlobalConfigPath gets the config path,0.064,git/config,12,0.844
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.844
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.844
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.844
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.066,git/config,12,0.844
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.844
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.065,git/config,12,0.844
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.068,git/config,12,0.844
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.066,git/config,12,0.844
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.844
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.781
git/rev-parse isGitRepository should return false for a directory,0.057,git/rev-parse,10,0.781
git/rev-parse isBareRepository returns false for default initialized repository,0.064,git/rev-parse,10,0.781
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.781
git/rev-parse isBareRepository returns false for empty directory,0.061,git/rev-parse,10,0.781
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.781
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.781
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.781
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.781
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.198,git/rev-parse,10,0.781
git/submodule listSubmodules returns the submodule entry,0.134,git/submodule,3,0.748
git/submodule listSubmodules returns the expected tag,0.193,git/submodule,3,0.748
git/submodule resetSubmodulePaths update submodule to original commit,0.381,git/submodule,3,0.748
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.724
gitignore saveGitIgnore applies rule correctly to repository,0.104,gitignore,9,0.724
gitignore appendIgnoreRule appends one rule,0.126,gitignore,9,0.724
gitignore appendIgnoreRule appends multiple rules,0.135,gitignore,9,0.724
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.593
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,11,0.593
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.593
git/merge merge and is successful returns true,0.049,git/merge,7,0.662
git/merge merge and is a noop returns false,0.064,git/merge,7,0.662
git/merge getMergeBase returns the common ancestor of two branches,0.081,git/merge,7,0.662
git/log getCommits loads history,0.072,git/log,7,0.689
git/log getCommits handles repository with HEAD file on disk,0.108,git/log,7,0.689
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.689
git/log getChangedFiles loads the files changed in the commit,0.071,git/log,7,0.689
git/log getChangedFiles detects renames,0.108,git/log,7,0.689
git/log getChangedFiles detect copies,0.113,git/log,7,0.689
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.689
git-lfs isUsingLFS returns false for repository not using LFS,0.137,git-lfs,9,0.678
git-lfs isUsingLFS returns true if LFS is tracking a path,0.085,git-lfs,9,0.678
git/for-each-ref getBranches fetches branches using for-each-ref,0.076,git/for-each-ref,3,0.249
git/for-each-ref getBranches should return empty list for empty repo,0.07,git/for-each-ref,3,0.249
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.249
Update remote url updates the repository's remote url when the github url changes,0.113,Update remote url,4,0.431
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.431
Update remote url doesn't update repository's remote url if protocols don't match,0.092,Update remote url,4,0.431
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.431
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.375
git/core error handling throws for errors that were not expected,0.056,git/core,6,0.375
git/core exit code handling does not throw for exit codes that were expected,0.056,git/core,6,0.375
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.375
git/core config lock file error handling can parse lock file path from stderr,0.063,git/core,6,0.375
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.375
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.055,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.376
AppStore can select a repository,0.238,AppStore,5,0.292
git/reset reset can hard reset a repository,0.417,git/reset,2,0.46
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.114
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.308,git/rebase,21,7.57
git/rebase detect conflicts status detects REBASE_HEAD,0.263,git/rebase,21,7.57
git/rebase detect conflicts has conflicted files in working directory,0.263,git/rebase,21,7.57
git/rebase detect conflicts is a detached HEAD state,0.262,git/rebase,21,7.57
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.255,git/rebase,21,7.57
git/rebase abort after conflicts found no longer has working directory changes,0.251,git/rebase,21,7.57
git/rebase abort after conflicts found returns to the feature branch,0.253,git/rebase,21,7.57
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.339,git/rebase,21,7.57
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.327,git/rebase,21,7.57
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.317,git/rebase,21,7.57
git/rebase continue after resolving conflicts returns success,0.372,git/rebase,21,7.57
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.378,git/rebase,21,7.57
git/rebase continue after resolving conflicts no longer has working directory changes,0.376,git/rebase,21,7.57
git/rebase continue after resolving conflicts returns to the feature branch,0.387,git/rebase,21,7.57
git/rebase continue after resolving conflicts branch is now a different ref,0.385,git/rebase,21,7.57
git/rebase continue with additional changes unrelated to conflicted files returns success,0.378,git/rebase,21,7.57
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.391,git/rebase,21,7.57
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.391,git/rebase,21,7.57
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.396,git/rebase,21,7.57
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.4,git/rebase,21,7.57
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.373,git/rebase,21,7.57
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.531
git/commit createCommit normal commit does not strip commentary by default,0.107,git/commit,21,4.531
git/commit createCommit normal can commit for empty repository,0.135,git/commit,21,4.531
git/commit createCommit normal can commit renames,0.153,git/commit,21,4.531
git/commit createCommit partials can commit some lines from new file,0.195,git/commit,21,4.531
git/commit createCommit partials can commit second hunk from modified file,0.196,git/commit,21,4.531
git/commit createCommit partials can commit single delete from modified file,0.177,git/commit,21,4.531
git/commit createCommit partials can commit multiple hunks from modified file,0.197,git/commit,21,4.531
git/commit createCommit partials can commit some lines from deleted file,0.184,git/commit,21,4.531
git/commit createCommit partials can commit renames with modifications,0.194,git/commit,21,4.531
git/commit createCommit partials can commit renames with partially selected modifications,0.229,git/commit,21,4.531
git/commit createCommit with a merge conflict creates a merge commit,0.257,git/commit,21,4.531
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.232,git/commit,21,4.531
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.332,git/commit,21,4.531
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.329,git/commit,21,4.531
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.407,git/commit,21,4.531
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.411,git/commit,21,4.531
git/commit createMergeCommit with no changes throws an error,0.11,git/commit,21,4.531
git/commit index corner cases can commit when staged new file is then deleted,0.157,git/commit,21,4.531
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.174,git/commit,21,4.531
git/commit index corner cases file is deleted in index,0.176,git/commit,21,4.531
git/rebase can parse progress returns a value indicating conflicts were encountered,0.402,git/rebase,7,3.802
git/rebase can parse progress status detects REBASE_HEAD,0.402,git/rebase,7,3.802
git/rebase can parse progress is a detached HEAD state,0.401,git/rebase,7,3.802
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.832,git/rebase,7,3.802
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.843,git/rebase,7,3.802
git/rebase can parse progress for long rebase is a detached HEAD state,0.869,git/rebase,7,3.802
GitStore loadCommitBatch includes HEAD when loading commits,0.419,GitStore,11,2.609
GitStore can discard changes from a repository,0.169,GitStore,11,2.609
GitStore can discard a renamed file,0.149,GitStore,11,2.609
GitStore undo first commit reports the repository is unborn,0.191,GitStore,11,2.609
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.609
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.609
GitStore undo first commit has no staged files,0.211,GitStore,11,2.609
GitStore repository with HEAD file can discard modified change cleanly,0.114,GitStore,11,2.609
git/status getStatus with conflicted repo parses conflicted files with markers,0.299,git/status,12,2.044
git/status getStatus with conflicted repo parses conflicted files without markers,0.309,git/status,12,2.044
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.401,git/status,12,2.044
git/status getStatus with conflicted repo parses resolved files,0.305,git/status,12,2.044
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.044
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.149,git/status,12,2.044
git/status getStatus with unconflicted repo parses changed files,0.07,git/status,12,2.044
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,2.044
git/status getStatus with unconflicted repo reflects renames,0.111,git/status,12,2.044
git/status getStatus with unconflicted repo reflects copies,0.11,git/status,12,2.044
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.044
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.088,git/diff,19,1.999
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,1.999
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,1.999
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,1.999
git/diff imageDiff changes for images are set,0.089,git/diff,19,1.999
git/diff imageDiff changes for text are not set,0.099,git/diff,19,1.999
git/diff getWorkingDirectoryDiff counts lines for new file,0.099,git/diff,19,1.999
git/diff getWorkingDirectoryDiff counts lines for modified file,0.097,git/diff,19,1.999
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,1.999
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.13,git/diff,19,1.999
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.162,git/diff,19,1.999
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.166,git/diff,19,1.999
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.132,git/diff,19,1.999
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.133,git/diff,19,1.999
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.09,git/diff,19,1.999
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.068,git/diff,19,1.999
git/diff getBinaryPaths in repo with text only files returns an empty array,0.094,git/diff,19,1.999
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,1.999
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.134,git/diff,19,1.999
BranchPruner does nothing on non GitHub repositories,0.31,BranchPruner,6,1.855
BranchPruner prunes for GitHub repository,0.299,BranchPruner,6,1.855
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.257,BranchPruner,6,1.855
BranchPruner does not prune if there is no default branch,0.253,BranchPruner,6,1.855
BranchPruner does not prune reserved branches,0.307,BranchPruner,6,1.855
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.458
git/branch tip returns correct ref if checkout occurs,0.039,git/branch,13,1.458
git/branch tip returns detached for arbitrary checkout,0.061,git/branch,13,1.458
git/branch tip returns current branch when on a valid HEAD,0.075,git/branch,13,1.458
git/branch tip returns non-origin remote,0.087,git/branch,13,1.458
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.082,git/branch,13,1.458
git/branch getBranchesPointedAt in a local repo finds one branch name,0.054,git/branch,13,1.458
git/branch getBranchesPointedAt in a local repo finds no branch names,0.052,git/branch,13,1.458
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.049,git/branch,13,1.458
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.085,git/branch,13,1.458
git/branch deleteBranch deletes local branches,0.117,git/branch,13,1.458
git/branch deleteBranch deletes remote branches,0.314,git/branch,13,1.458
git/branch deleteBranch handles attempted delete of removed remote branch,0.365,git/branch,13,1.458
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.105,git/stash,14,1.296
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.134,git/stash,14,1.296
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.093,git/stash,14,1.296
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.423,formatPatch,5,1.04
git/checkout can checkout a valid branch name in an existing repository,0.122,git/checkout,6,1.02
git/checkout can checkout a branch when it exists on multiple remotes,0.127,git/checkout,6,1.02
git/checkout will fail when an existing branch matches the remote branch,0.123,git/checkout,6,1.02
git/checkout with submodules cleans up an submodule that no longer exists,0.317,git/checkout,6,1.02
git/checkout with submodules updates a changed submodule reference,0.259,git/checkout,6,1.02
git/reflog getRecentBranches returns the recently checked out branches,0.158,git/reflog,6,1.13
git/reflog getRecentBranches works after renaming a branch,0.205,git/reflog,6,1.13
git/reflog getRecentBranches returns a limited number of branches,0.278,git/reflog,6,1.13
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.162,git/reflog,6,1.13
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.202,git/reflog,6,1.13
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.083,git/reflog,6,1.13
git/config config looks up config values,0.055,git/config,12,0.853
git/config config returns null for undefined values,0.055,git/config,12,0.853
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.853
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.07,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.065,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.068,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.066,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.853
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.83
git/rev-parse isGitRepository should return false for a directory,0.062,git/rev-parse,10,0.83
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.83
git/rev-parse isBareRepository returns true for initialized bare repository,0.07,git/rev-parse,10,0.83
git/rev-parse isBareRepository returns false for empty directory,0.071,git/rev-parse,10,0.83
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.83
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.83
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.058,git/rev-parse,10,0.83
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.83
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.214,git/rev-parse,10,0.83
git/submodule listSubmodules returns the submodule entry,0.139,git/submodule,3,0.782
git/submodule listSubmodules returns the expected tag,0.206,git/submodule,3,0.782
git/submodule resetSubmodulePaths update submodule to original commit,0.397,git/submodule,3,0.782
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.734
gitignore saveGitIgnore applies rule correctly to repository,0.107,gitignore,9,0.734
gitignore appendIgnoreRule appends one rule,0.132,gitignore,9,0.734
gitignore appendIgnoreRule appends multiple rules,0.129,gitignore,9,0.734
git/log getCommits loads history,0.069,git/log,7,0.664
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.664
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.664
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.664
git/log getChangedFiles detects renames,0.099,git/log,7,0.664
git/log getChangedFiles detect copies,0.117,git/log,7,0.664
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.664
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.593
git-lfs isUsingLFS returns true if LFS is tracking a path,0.087,git-lfs,9,0.593
git/merge merge and is successful returns true,0.048,git/merge,7,0.666
git/merge merge and is a noop returns false,0.061,git/merge,7,0.666
git/merge getMergeBase returns the common ancestor of two branches,0.084,git/merge,7,0.666
git/remote getRemotes should return both remotes,0.059,git/remote,11,0.639
git/remote findDefaultRemote returns origin when multiple remotes found,0.061,git/remote,11,0.639
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.639
git/reset reset can hard reset a repository,0.076,git/reset,2,0.116
Update remote url updates the repository's remote url when the github url changes,0.203,Update remote url,4,0.517
Update remote url doesn't update the repository's remote url when the github url is the same,0.09,Update remote url,4,0.517
Update remote url doesn't update repository's remote url if protocols don't match,0.086,Update remote url,4,0.517
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.089,Update remote url,4,0.517
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.057,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.052,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.395
git/core error handling does not throw for errors that were expected,0.06,git/core,6,0.368
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.368
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.368
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.368
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.368
git/core config lock file error handling normalizes paths,0.041,git/core,6,0.368
AppStore can select a repository,0.246,AppStore,5,0.301
git/for-each-ref getBranches fetches branches using for-each-ref,0.31,git/for-each-ref,3,0.494
git/for-each-ref getBranches should return empty list for empty repo,0.076,git/for-each-ref,3,0.494
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.065,git/for-each-ref,3,0.494
validatedRepositoryPath returns the path to the repository,0.056,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.31,git/rebase,21,7.585
git/rebase detect conflicts status detects REBASE_HEAD,0.259,git/rebase,21,7.585
git/rebase detect conflicts has conflicted files in working directory,0.261,git/rebase,21,7.585
git/rebase detect conflicts is a detached HEAD state,0.269,git/rebase,21,7.585
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.257,git/rebase,21,7.585
git/rebase abort after conflicts found no longer has working directory changes,0.255,git/rebase,21,7.585
git/rebase abort after conflicts found returns to the feature branch,0.26,git/rebase,21,7.585
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.336,git/rebase,21,7.585
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.326,git/rebase,21,7.585
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.322,git/rebase,21,7.585
git/rebase continue after resolving conflicts returns success,0.379,git/rebase,21,7.585
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.585
git/rebase continue after resolving conflicts no longer has working directory changes,0.373,git/rebase,21,7.585
git/rebase continue after resolving conflicts returns to the feature branch,0.386,git/rebase,21,7.585
git/rebase continue after resolving conflicts branch is now a different ref,0.389,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files returns success,0.379,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.381,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.389,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.393,git/rebase,21,7.585
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.402,git/rebase,21,7.585
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.372,git/rebase,21,7.585
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.539
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.539
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.539
git/commit createCommit normal can commit renames,0.156,git/commit,21,4.539
git/commit createCommit partials can commit some lines from new file,0.182,git/commit,21,4.539
git/commit createCommit partials can commit second hunk from modified file,0.194,git/commit,21,4.539
git/commit createCommit partials can commit single delete from modified file,0.178,git/commit,21,4.539
git/commit createCommit partials can commit multiple hunks from modified file,0.196,git/commit,21,4.539
git/commit createCommit partials can commit some lines from deleted file,0.183,git/commit,21,4.539
git/commit createCommit partials can commit renames with modifications,0.19,git/commit,21,4.539
git/commit createCommit partials can commit renames with partially selected modifications,0.235,git/commit,21,4.539
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.539
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.242,git/commit,21,4.539
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.329,git/commit,21,4.539
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.33,git/commit,21,4.539
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.404,git/commit,21,4.539
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.406,git/commit,21,4.539
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.539
git/commit index corner cases can commit when staged new file is then deleted,0.155,git/commit,21,4.539
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.176,git/commit,21,4.539
git/commit index corner cases file is deleted in index,0.178,git/commit,21,4.539
git/rebase can parse progress returns a value indicating conflicts were encountered,0.397,git/rebase,7,3.77
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.77
git/rebase can parse progress is a detached HEAD state,0.395,git/rebase,7,3.77
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.826,git/rebase,7,3.77
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.851,git/rebase,7,3.77
git/rebase can parse progress for long rebase is a detached HEAD state,0.845,git/rebase,7,3.77
GitStore loadCommitBatch includes HEAD when loading commits,0.389,GitStore,11,2.572
GitStore can discard changes from a repository,0.168,GitStore,11,2.572
GitStore can discard a renamed file,0.148,GitStore,11,2.572
GitStore undo first commit reports the repository is unborn,0.187,GitStore,11,2.572
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.572
GitStore undo first commit clears the undo commit dialog,0.216,GitStore,11,2.572
GitStore undo first commit has no staged files,0.206,GitStore,11,2.572
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.572
git/status getStatus with conflicted repo parses conflicted files with markers,0.304,git/status,12,2.084
git/status getStatus with conflicted repo parses conflicted files without markers,0.307,git/status,12,2.084
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.404,git/status,12,2.084
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,2.084
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.124,git/status,12,2.084
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.159,git/status,12,2.084
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.084
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.084
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.084
git/status getStatus with unconflicted repo reflects copies,0.129,git/status,12,2.084
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.064,git/status,12,2.084
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.087,git/diff,19,1.861
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.861
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,1.861
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.861
git/diff imageDiff changes for images are set,0.123,git/diff,19,1.861
git/diff imageDiff changes for text are not set,0.088,git/diff,19,1.861
git/diff getWorkingDirectoryDiff counts lines for new file,0.083,git/diff,19,1.861
git/diff getWorkingDirectoryDiff counts lines for modified file,0.088,git/diff,19,1.861
git/diff getWorkingDirectoryDiff counts lines for staged file,0.076,git/diff,19,1.861
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.111,git/diff,19,1.861
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.137,git/diff,19,1.861
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.149,git/diff,19,1.861
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.124,git/diff,19,1.861
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.861
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.084,git/diff,19,1.861
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.063,git/diff,19,1.861
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.861
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,1.861
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.119,git/diff,19,1.861
BranchPruner does nothing on non GitHub repositories,0.253,BranchPruner,6,1.785
BranchPruner prunes for GitHub repository,0.309,BranchPruner,6,1.785
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.252,BranchPruner,6,1.785
BranchPruner does not prune if there is no default branch,0.252,BranchPruner,6,1.785
BranchPruner does not prune reserved branches,0.304,BranchPruner,6,1.785
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.476
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,13,1.476
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,13,1.476
git/branch tip returns current branch when on a valid HEAD,0.076,git/branch,13,1.476
git/branch tip returns non-origin remote,0.082,git/branch,13,1.476
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.082,git/branch,13,1.476
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.476
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.476
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.476
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,13,1.476
git/branch deleteBranch deletes local branches,0.117,git/branch,13,1.476
git/branch deleteBranch deletes remote branches,0.31,git/branch,13,1.476
git/branch deleteBranch handles attempted delete of removed remote branch,0.376,git/branch,13,1.476
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.108,git/stash,14,1.332
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.137,git/stash,14,1.332
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.098,git/stash,14,1.332
git/reflog getRecentBranches returns the recently checked out branches,0.153,git/reflog,6,1.049
git/reflog getRecentBranches works after renaming a branch,0.193,git/reflog,6,1.049
git/reflog getRecentBranches returns a limited number of branches,0.247,git/reflog,6,1.049
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.153,git/reflog,6,1.049
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.19,git/reflog,6,1.049
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.07,git/reflog,6,1.049
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.48,formatPatch,5,1.152
git/checkout can checkout a valid branch name in an existing repository,0.13,git/checkout,6,1.093
git/checkout can checkout a branch when it exists on multiple remotes,0.136,git/checkout,6,1.093
git/checkout will fail when an existing branch matches the remote branch,0.129,git/checkout,6,1.093
git/checkout with submodules cleans up an submodule that no longer exists,0.329,git/checkout,6,1.093
git/checkout with submodules updates a changed submodule reference,0.296,git/checkout,6,1.093
git/config config looks up config values,0.058,git/config,12,0.865
git/config config returns null for undefined values,0.05,git/config,12,0.865
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.865
git/config global config setGlobalConfigValue will replace all entries for a global value,0.096,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.069,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.865
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.858
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.858
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.858
git/rev-parse isBareRepository returns true for initialized bare repository,0.073,git/rev-parse,10,0.858
git/rev-parse isBareRepository returns false for empty directory,0.065,git/rev-parse,10,0.858
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.858
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.858
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.061,git/rev-parse,10,0.858
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.063,git/rev-parse,10,0.858
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.241,git/rev-parse,10,0.858
git/submodule listSubmodules returns the submodule entry,0.139,git/submodule,3,0.854
git/submodule listSubmodules returns the expected tag,0.194,git/submodule,3,0.854
git/submodule resetSubmodulePaths update submodule to original commit,0.48,git/submodule,3,0.854
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.708
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.708
gitignore appendIgnoreRule appends one rule,0.122,gitignore,9,0.708
gitignore appendIgnoreRule appends multiple rules,0.123,gitignore,9,0.708
git/merge merge and is successful returns true,0.047,git/merge,7,0.597
git/merge merge and is a noop returns false,0.059,git/merge,7,0.597
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.597
git/log getCommits loads history,0.068,git/log,7,0.632
git/log getCommits handles repository with HEAD file on disk,0.098,git/log,7,0.632
git/log getCommits handles repository with signed commit and log.showSignature set,0.111,git/log,7,0.632
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.632
git/log getChangedFiles detects renames,0.098,git/log,7,0.632
git/log getChangedFiles detect copies,0.102,git/log,7,0.632
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.632
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.566
git/remote findDefaultRemote returns origin when multiple remotes found,0.061,git/remote,11,0.566
git/remote findDefaultRemote returns something when origin removed,0.067,git/remote,11,0.566
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.574
git-lfs isUsingLFS returns true if LFS is tracking a path,0.077,git-lfs,9,0.574
Update remote url updates the repository's remote url when the github url changes,0.11,Update remote url,4,0.386
Update remote url doesn't update the repository's remote url when the github url is the same,0.079,Update remote url,4,0.386
Update remote url doesn't update repository's remote url if protocols don't match,0.075,Update remote url,4,0.386
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.072,Update remote url,4,0.386
git/for-each-ref getBranches fetches branches using for-each-ref,0.068,git/for-each-ref,3,0.221
git/for-each-ref getBranches should return empty list for empty repo,0.064,git/for-each-ref,3,0.221
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.051,git/for-each-ref,3,0.221
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.363
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.363
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.363
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.363
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.363
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.363
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.363
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.027,patch formatting,8,0.363
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.379
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.379
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.379
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.379
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.379
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.379
AppStore can select a repository,0.331,AppStore,5,0.385
git/reset reset can hard reset a repository,0.305,git/reset,2,0.351
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.114
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.309,git/rebase,21,7.555
git/rebase detect conflicts status detects REBASE_HEAD,0.265,git/rebase,21,7.555
git/rebase detect conflicts has conflicted files in working directory,0.262,git/rebase,21,7.555
git/rebase detect conflicts is a detached HEAD state,0.266,git/rebase,21,7.555
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.25,git/rebase,21,7.555
git/rebase abort after conflicts found no longer has working directory changes,0.253,git/rebase,21,7.555
git/rebase abort after conflicts found returns to the feature branch,0.258,git/rebase,21,7.555
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.332,git/rebase,21,7.555
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.32,git/rebase,21,7.555
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.319,git/rebase,21,7.555
git/rebase continue after resolving conflicts returns success,0.374,git/rebase,21,7.555
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.378,git/rebase,21,7.555
git/rebase continue after resolving conflicts no longer has working directory changes,0.371,git/rebase,21,7.555
git/rebase continue after resolving conflicts returns to the feature branch,0.388,git/rebase,21,7.555
git/rebase continue after resolving conflicts branch is now a different ref,0.386,git/rebase,21,7.555
git/rebase continue with additional changes unrelated to conflicted files returns success,0.383,git/rebase,21,7.555
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.387,git/rebase,21,7.555
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.387,git/rebase,21,7.555
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.399,git/rebase,21,7.555
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.392,git/rebase,21,7.555
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.368,git/rebase,21,7.555
git/commit createCommit normal commits the given files,0.122,git/commit,21,4.496
git/commit createCommit normal commit does not strip commentary by default,0.107,git/commit,21,4.496
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.496
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.496
git/commit createCommit partials can commit some lines from new file,0.178,git/commit,21,4.496
git/commit createCommit partials can commit second hunk from modified file,0.189,git/commit,21,4.496
git/commit createCommit partials can commit single delete from modified file,0.178,git/commit,21,4.496
git/commit createCommit partials can commit multiple hunks from modified file,0.197,git/commit,21,4.496
git/commit createCommit partials can commit some lines from deleted file,0.181,git/commit,21,4.496
git/commit createCommit partials can commit renames with modifications,0.192,git/commit,21,4.496
git/commit createCommit partials can commit renames with partially selected modifications,0.225,git/commit,21,4.496
git/commit createCommit with a merge conflict creates a merge commit,0.255,git/commit,21,4.496
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.232,git/commit,21,4.496
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.331,git/commit,21,4.496
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.323,git/commit,21,4.496
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.403,git/commit,21,4.496
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.41,git/commit,21,4.496
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.496
git/commit index corner cases can commit when staged new file is then deleted,0.153,git/commit,21,4.496
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.174,git/commit,21,4.496
git/commit index corner cases file is deleted in index,0.174,git/commit,21,4.496
git/rebase can parse progress returns a value indicating conflicts were encountered,0.394,git/rebase,7,3.813
git/rebase can parse progress status detects REBASE_HEAD,0.409,git/rebase,7,3.813
git/rebase can parse progress is a detached HEAD state,0.399,git/rebase,7,3.813
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.839,git/rebase,7,3.813
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.831,git/rebase,7,3.813
git/rebase can parse progress for long rebase is a detached HEAD state,0.888,git/rebase,7,3.813
GitStore loadCommitBatch includes HEAD when loading commits,0.393,GitStore,11,2.637
GitStore can discard changes from a repository,0.167,GitStore,11,2.637
GitStore can discard a renamed file,0.15,GitStore,11,2.637
GitStore undo first commit reports the repository is unborn,0.188,GitStore,11,2.637
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.637
GitStore undo first commit clears the undo commit dialog,0.224,GitStore,11,2.637
GitStore undo first commit has no staged files,0.212,GitStore,11,2.637
GitStore repository with HEAD file can discard modified change cleanly,0.119,GitStore,11,2.637
git/status getStatus with conflicted repo parses conflicted files with markers,0.311,git/status,12,2.09
git/status getStatus with conflicted repo parses conflicted files without markers,0.308,git/status,12,2.09
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.413,git/status,12,2.09
git/status getStatus with conflicted repo parses resolved files,0.308,git/status,12,2.09
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.122,git/status,12,2.09
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.148,git/status,12,2.09
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.09
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.09
git/status getStatus with unconflicted repo reflects renames,0.119,git/status,12,2.09
git/status getStatus with unconflicted repo reflects copies,0.125,git/status,12,2.09
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.09
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.089,git/diff,19,2.061
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,2.061
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,2.061
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,2.061
git/diff imageDiff changes for images are set,0.084,git/diff,19,2.061
git/diff imageDiff changes for text are not set,0.091,git/diff,19,2.061
git/diff getWorkingDirectoryDiff counts lines for new file,0.095,git/diff,19,2.061
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,2.061
git/diff getWorkingDirectoryDiff counts lines for staged file,0.093,git/diff,19,2.061
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.132,git/diff,19,2.061
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.172,git/diff,19,2.061
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.18,git/diff,19,2.061
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.142,git/diff,19,2.061
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.143,git/diff,19,2.061
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.092,git/diff,19,2.061
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.071,git/diff,19,2.061
git/diff getBinaryPaths in repo with text only files returns an empty array,0.096,git/diff,19,2.061
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,2.061
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.165,git/diff,19,2.061
BranchPruner does nothing on non GitHub repositories,0.26,BranchPruner,6,1.731
BranchPruner prunes for GitHub repository,0.341,BranchPruner,6,1.731
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.242,BranchPruner,6,1.731
BranchPruner does not prune if there is no default branch,0.222,BranchPruner,6,1.731
BranchPruner does not prune reserved branches,0.271,BranchPruner,6,1.731
git/branch tip returns unborn for new repository,0.028,git/branch,13,1.421
git/branch tip returns correct ref if checkout occurs,0.037,git/branch,13,1.421
git/branch tip returns detached for arbitrary checkout,0.053,git/branch,13,1.421
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,13,1.421
git/branch tip returns non-origin remote,0.077,git/branch,13,1.421
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,13,1.421
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.421
git/branch getBranchesPointedAt in a local repo finds no branch names,0.057,git/branch,13,1.421
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.421
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.421
git/branch deleteBranch deletes local branches,0.12,git/branch,13,1.421
git/branch deleteBranch deletes remote branches,0.299,git/branch,13,1.421
git/branch deleteBranch handles attempted delete of removed remote branch,0.351,git/branch,13,1.421
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.102,git/stash,14,1.301
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.147,git/stash,14,1.301
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.094,git/stash,14,1.301
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.477,formatPatch,5,1.104
git/checkout can checkout a valid branch name in an existing repository,0.118,git/checkout,6,0.989
git/checkout can checkout a branch when it exists on multiple remotes,0.123,git/checkout,6,0.989
git/checkout will fail when an existing branch matches the remote branch,0.118,git/checkout,6,0.989
git/checkout with submodules cleans up an submodule that no longer exists,0.297,git/checkout,6,0.989
git/checkout with submodules updates a changed submodule reference,0.263,git/checkout,6,0.989
git/reflog getRecentBranches returns the recently checked out branches,0.15,git/reflog,6,1.093
git/reflog getRecentBranches works after renaming a branch,0.199,git/reflog,6,1.093
git/reflog getRecentBranches returns a limited number of branches,0.274,git/reflog,6,1.093
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.157,git/reflog,6,1.093
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.196,git/reflog,6,1.093
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.093
git/config config looks up config values,0.051,git/config,12,0.848
git/config config returns null for undefined values,0.053,git/config,12,0.848
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.848
git/config global config setGlobalConfigValue will replace all entries for a global value,0.089,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.069,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.067,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.066,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.069,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.848
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.759
git/rev-parse isGitRepository should return false for a directory,0.059,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns false for empty directory,0.056,git/rev-parse,10,0.759
git/rev-parse isBareRepository throws error for missing directory,0.049,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.062,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.052,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.056,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.189,git/rev-parse,10,0.759
git/submodule listSubmodules returns the submodule entry,0.127,git/submodule,3,0.768
git/submodule listSubmodules returns the expected tag,0.191,git/submodule,3,0.768
git/submodule resetSubmodulePaths update submodule to original commit,0.407,git/submodule,3,0.768
gitignore readGitIgnoreAtRoot reads contents from disk,0.019,gitignore,9,0.7
gitignore saveGitIgnore applies rule correctly to repository,0.103,gitignore,9,0.7
gitignore appendIgnoreRule appends one rule,0.118,gitignore,9,0.7
gitignore appendIgnoreRule appends multiple rules,0.124,gitignore,9,0.7
git/log getCommits loads history,0.067,git/log,7,0.61
git/log getCommits handles repository with HEAD file on disk,0.09,git/log,7,0.61
git/log getCommits handles repository with signed commit and log.showSignature set,0.111,git/log,7,0.61
git/log getChangedFiles loads the files changed in the commit,0.055,git/log,7,0.61
git/log getChangedFiles detects renames,0.09,git/log,7,0.61
git/log getChangedFiles detect copies,0.102,git/log,7,0.61
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.61
git/merge merge and is successful returns true,0.045,git/merge,7,0.617
git/merge merge and is a noop returns false,0.062,git/merge,7,0.617
git/merge getMergeBase returns the common ancestor of two branches,0.075,git/merge,7,0.617
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.563
git-lfs isUsingLFS returns true if LFS is tracking a path,0.083,git-lfs,9,0.563
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.605
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.605
git/remote findDefaultRemote returns something when origin removed,0.069,git/remote,11,0.605
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.414
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.414
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.414
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.414
AppStore can select a repository,0.225,AppStore,5,0.281
git/core error handling does not throw for errors that were expected,0.285,git/core,6,0.613
git/core error handling throws for errors that were not expected,0.064,git/core,6,0.613
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.613
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.613
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.613
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.613
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.053,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.38
git/reset reset can hard reset a repository,0.084,git/reset,2,0.121
git/for-each-ref getBranches fetches branches using for-each-ref,0.083,git/for-each-ref,3,0.269
git/for-each-ref getBranches should return empty list for empty repo,0.078,git/for-each-ref,3,0.269
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.067,git/for-each-ref,3,0.269
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.063
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.323,git/rebase,21,7.67
git/rebase detect conflicts status detects REBASE_HEAD,0.268,git/rebase,21,7.67
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.67
git/rebase detect conflicts is a detached HEAD state,0.268,git/rebase,21,7.67
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.27,git/rebase,21,7.67
git/rebase abort after conflicts found no longer has working directory changes,0.256,git/rebase,21,7.67
git/rebase abort after conflicts found returns to the feature branch,0.258,git/rebase,21,7.67
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.33,git/rebase,21,7.67
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.324,git/rebase,21,7.67
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.328,git/rebase,21,7.67
git/rebase continue after resolving conflicts returns success,0.38,git/rebase,21,7.67
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.377,git/rebase,21,7.67
git/rebase continue after resolving conflicts no longer has working directory changes,0.385,git/rebase,21,7.67
git/rebase continue after resolving conflicts returns to the feature branch,0.394,git/rebase,21,7.67
git/rebase continue after resolving conflicts branch is now a different ref,0.39,git/rebase,21,7.67
git/rebase continue with additional changes unrelated to conflicted files returns success,0.385,git/rebase,21,7.67
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.389,git/rebase,21,7.67
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.389,git/rebase,21,7.67
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.403,git/rebase,21,7.67
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.403,git/rebase,21,7.67
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.38,git/rebase,21,7.67
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.583
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.583
git/commit createCommit normal can commit for empty repository,0.143,git/commit,21,4.583
git/commit createCommit normal can commit renames,0.158,git/commit,21,4.583
git/commit createCommit partials can commit some lines from new file,0.185,git/commit,21,4.583
git/commit createCommit partials can commit second hunk from modified file,0.202,git/commit,21,4.583
git/commit createCommit partials can commit single delete from modified file,0.179,git/commit,21,4.583
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.583
git/commit createCommit partials can commit some lines from deleted file,0.18,git/commit,21,4.583
git/commit createCommit partials can commit renames with modifications,0.187,git/commit,21,4.583
git/commit createCommit partials can commit renames with partially selected modifications,0.241,git/commit,21,4.583
git/commit createCommit with a merge conflict creates a merge commit,0.267,git/commit,21,4.583
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.239,git/commit,21,4.583
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.341,git/commit,21,4.583
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.332,git/commit,21,4.583
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.4,git/commit,21,4.583
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.411,git/commit,21,4.583
git/commit createMergeCommit with no changes throws an error,0.108,git/commit,21,4.583
git/commit index corner cases can commit when staged new file is then deleted,0.156,git/commit,21,4.583
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.583
git/commit index corner cases file is deleted in index,0.177,git/commit,21,4.583
git/rebase can parse progress returns a value indicating conflicts were encountered,0.402,git/rebase,7,3.812
git/rebase can parse progress status detects REBASE_HEAD,0.412,git/rebase,7,3.812
git/rebase can parse progress is a detached HEAD state,0.405,git/rebase,7,3.812
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.837,git/rebase,7,3.812
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.843,git/rebase,7,3.812
git/rebase can parse progress for long rebase is a detached HEAD state,0.86,git/rebase,7,3.812
GitStore loadCommitBatch includes HEAD when loading commits,0.434,GitStore,11,2.693
GitStore can discard changes from a repository,0.17,GitStore,11,2.693
GitStore can discard a renamed file,0.153,GitStore,11,2.693
GitStore undo first commit reports the repository is unborn,0.195,GitStore,11,2.693
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.693
GitStore undo first commit clears the undo commit dialog,0.224,GitStore,11,2.693
GitStore undo first commit has no staged files,0.211,GitStore,11,2.693
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.693
git/status getStatus with conflicted repo parses conflicted files with markers,0.354,git/status,12,2.098
git/status getStatus with conflicted repo parses conflicted files without markers,0.302,git/status,12,2.098
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.397,git/status,12,2.098
git/status getStatus with conflicted repo parses resolved files,0.304,git/status,12,2.098
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.117,git/status,12,2.098
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.098
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.098
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.098
git/status getStatus with unconflicted repo reflects renames,0.115,git/status,12,2.098
git/status getStatus with unconflicted repo reflects copies,0.117,git/status,12,2.098
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.098
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.046,git/diff,19,1.825
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.825
git/diff getBlobImage retrieves valid image for modified file,0.099,git/diff,19,1.825
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.825
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.825
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.825
git/diff getWorkingDirectoryDiff counts lines for new file,0.09,git/diff,19,1.825
git/diff getWorkingDirectoryDiff counts lines for modified file,0.098,git/diff,19,1.825
git/diff getWorkingDirectoryDiff counts lines for staged file,0.079,git/diff,19,1.825
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.114,git/diff,19,1.825
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.138,git/diff,19,1.825
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.143,git/diff,19,1.825
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.117,git/diff,19,1.825
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.112,git/diff,19,1.825
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.081,git/diff,19,1.825
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.061,git/diff,19,1.825
git/diff getBinaryPaths in repo with text only files returns an empty array,0.092,git/diff,19,1.825
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.103,git/diff,19,1.825
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.123,git/diff,19,1.825
BranchPruner does nothing on non GitHub repositories,0.235,BranchPruner,6,1.733
BranchPruner prunes for GitHub repository,0.285,BranchPruner,6,1.733
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.233,BranchPruner,6,1.733
BranchPruner does not prune if there is no default branch,0.244,BranchPruner,6,1.733
BranchPruner does not prune reserved branches,0.307,BranchPruner,6,1.733
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.512
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.512
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.512
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.512
git/branch tip returns non-origin remote,0.082,git/branch,13,1.512
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.09,git/branch,13,1.512
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.512
git/branch getBranchesPointedAt in a local repo finds no branch names,0.057,git/branch,13,1.512
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.512
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,13,1.512
git/branch deleteBranch deletes local branches,0.13,git/branch,13,1.512
git/branch deleteBranch deletes remote branches,0.322,git/branch,13,1.512
git/branch deleteBranch handles attempted delete of removed remote branch,0.374,git/branch,13,1.512
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.113,git/stash,14,1.367
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.142,git/stash,14,1.367
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.367
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.456,formatPatch,5,1.105
git/reflog getRecentBranches returns the recently checked out branches,0.155,git/reflog,6,1.098
git/reflog getRecentBranches works after renaming a branch,0.198,git/reflog,6,1.098
git/reflog getRecentBranches returns a limited number of branches,0.266,git/reflog,6,1.098
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.098
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.202,git/reflog,6,1.098
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.098
git/checkout can checkout a valid branch name in an existing repository,0.118,git/checkout,6,1.119
git/checkout can checkout a branch when it exists on multiple remotes,0.13,git/checkout,6,1.119
git/checkout will fail when an existing branch matches the remote branch,0.126,git/checkout,6,1.119
git/checkout with submodules cleans up an submodule that no longer exists,0.33,git/checkout,6,1.119
git/checkout with submodules updates a changed submodule reference,0.283,git/checkout,6,1.119
git/config config looks up config values,0.058,git/config,12,0.883
git/config config returns null for undefined values,0.056,git/config,12,0.883
git/config global config getGlobalConfigPath gets the config path,0.068,git/config,12,0.883
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.073,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.072,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.072,git/config,12,0.883
git/submodule listSubmodules returns the submodule entry,0.149,git/submodule,3,0.77
git/submodule listSubmodules returns the expected tag,0.198,git/submodule,3,0.77
git/submodule resetSubmodulePaths update submodule to original commit,0.376,git/submodule,3,0.77
git/rev-parse isGitRepository should return true for a repository,0.122,git/rev-parse,10,0.838
git/rev-parse isGitRepository should return false for a directory,0.064,git/rev-parse,10,0.838
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.838
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.838
git/rev-parse isBareRepository returns false for empty directory,0.057,git/rev-parse,10,0.838
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.838
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.838
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.838
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.054,git/rev-parse,10,0.838
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.193,git/rev-parse,10,0.838
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.669
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.669
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.669
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.669
git/merge merge and is successful returns true,0.047,git/merge,7,0.556
git/merge merge and is a noop returns false,0.057,git/merge,7,0.556
git/merge getMergeBase returns the common ancestor of two branches,0.068,git/merge,7,0.556
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.365
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.365
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.365
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.365
git/core config lock file error handling can parse lock file path from stderr,0.056,git/core,6,0.365
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.365
git/log getCommits loads history,0.065,git/log,7,0.612
git/log getCommits handles repository with HEAD file on disk,0.097,git/log,7,0.612
git/log getCommits handles repository with signed commit and log.showSignature set,0.106,git/log,7,0.612
git/log getChangedFiles loads the files changed in the commit,0.055,git/log,7,0.612
git/log getChangedFiles detects renames,0.093,git/log,7,0.612
git/log getChangedFiles detect copies,0.102,git/log,7,0.612
git/log getChangedFiles handles commit when HEAD exists on disk,0.053,git/log,7,0.612
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.57
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,11,0.57
git/remote findDefaultRemote returns something when origin removed,0.067,git/remote,11,0.57
git-lfs isUsingLFS returns false for repository not using LFS,0.056,git-lfs,9,0.546
git-lfs isUsingLFS returns true if LFS is tracking a path,0.077,git-lfs,9,0.546
Update remote url updates the repository's remote url when the github url changes,0.111,Update remote url,4,0.415
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.415
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.415
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.415
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.387
AppStore can select a repository,0.224,AppStore,5,0.277
git/for-each-ref getBranches fetches branches using for-each-ref,0.295,git/for-each-ref,3,0.479
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.479
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.066,git/for-each-ref,3,0.479
git/reset reset can hard reset a repository,0.085,git/reset,2,0.127
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.307,git/rebase,21,7.631
git/rebase detect conflicts status detects REBASE_HEAD,0.267,git/rebase,21,7.631
git/rebase detect conflicts has conflicted files in working directory,0.267,git/rebase,21,7.631
git/rebase detect conflicts is a detached HEAD state,0.263,git/rebase,21,7.631
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.261,git/rebase,21,7.631
git/rebase abort after conflicts found no longer has working directory changes,0.25,git/rebase,21,7.631
git/rebase abort after conflicts found returns to the feature branch,0.26,git/rebase,21,7.631
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.338,git/rebase,21,7.631
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.328,git/rebase,21,7.631
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.324,git/rebase,21,7.631
git/rebase continue after resolving conflicts returns success,0.377,git/rebase,21,7.631
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.38,git/rebase,21,7.631
git/rebase continue after resolving conflicts no longer has working directory changes,0.377,git/rebase,21,7.631
git/rebase continue after resolving conflicts returns to the feature branch,0.395,git/rebase,21,7.631
git/rebase continue after resolving conflicts branch is now a different ref,0.386,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files returns success,0.376,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.389,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.392,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.404,git/rebase,21,7.631
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.631
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.378,git/rebase,21,7.631
git/commit createCommit normal commits the given files,0.122,git/commit,21,4.574
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.574
git/commit createCommit normal can commit for empty repository,0.134,git/commit,21,4.574
git/commit createCommit normal can commit renames,0.157,git/commit,21,4.574
git/commit createCommit partials can commit some lines from new file,0.184,git/commit,21,4.574
git/commit createCommit partials can commit second hunk from modified file,0.199,git/commit,21,4.574
git/commit createCommit partials can commit single delete from modified file,0.179,git/commit,21,4.574
git/commit createCommit partials can commit multiple hunks from modified file,0.201,git/commit,21,4.574
git/commit createCommit partials can commit some lines from deleted file,0.19,git/commit,21,4.574
git/commit createCommit partials can commit renames with modifications,0.193,git/commit,21,4.574
git/commit createCommit partials can commit renames with partially selected modifications,0.237,git/commit,21,4.574
git/commit createCommit with a merge conflict creates a merge commit,0.272,git/commit,21,4.574
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.239,git/commit,21,4.574
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.337,git/commit,21,4.574
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.328,git/commit,21,4.574
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.396,git/commit,21,4.574
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.404,git/commit,21,4.574
git/commit createMergeCommit with no changes throws an error,0.112,git/commit,21,4.574
git/commit index corner cases can commit when staged new file is then deleted,0.154,git/commit,21,4.574
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.176,git/commit,21,4.574
git/commit index corner cases file is deleted in index,0.179,git/commit,21,4.574
git/rebase can parse progress returns a value indicating conflicts were encountered,0.406,git/rebase,7,3.82
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.82
git/rebase can parse progress is a detached HEAD state,0.401,git/rebase,7,3.82
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.837,git/rebase,7,3.82
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.837,git/rebase,7,3.82
git/rebase can parse progress for long rebase is a detached HEAD state,0.884,git/rebase,7,3.82
GitStore loadCommitBatch includes HEAD when loading commits,0.353,GitStore,11,2.539
GitStore can discard changes from a repository,0.168,GitStore,11,2.539
GitStore can discard a renamed file,0.149,GitStore,11,2.539
GitStore undo first commit reports the repository is unborn,0.187,GitStore,11,2.539
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.539
GitStore undo first commit clears the undo commit dialog,0.216,GitStore,11,2.539
GitStore undo first commit has no staged files,0.212,GitStore,11,2.539
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.539
git/status getStatus with conflicted repo parses conflicted files with markers,0.339,git/status,12,2.078
git/status getStatus with conflicted repo parses conflicted files without markers,0.306,git/status,12,2.078
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.398,git/status,12,2.078
git/status getStatus with conflicted repo parses resolved files,0.306,git/status,12,2.078
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.124,git/status,12,2.078
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.147,git/status,12,2.078
git/status getStatus with unconflicted repo parses changed files,0.06,git/status,12,2.078
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.054,git/status,12,2.078
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.078
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.078
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.078
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.048,git/diff,19,1.894
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.894
git/diff getBlobImage retrieves valid image for modified file,0.097,git/diff,19,1.894
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.894
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.894
git/diff imageDiff changes for text are not set,0.092,git/diff,19,1.894
git/diff getWorkingDirectoryDiff counts lines for new file,0.094,git/diff,19,1.894
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,1.894
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,1.894
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.125,git/diff,19,1.894
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.142,git/diff,19,1.894
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.147,git/diff,19,1.894
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.122,git/diff,19,1.894
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.119,git/diff,19,1.894
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.894
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.894
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,1.894
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,1.894
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.122,git/diff,19,1.894
BranchPruner does nothing on non GitHub repositories,0.243,BranchPruner,6,1.832
BranchPruner prunes for GitHub repository,0.316,BranchPruner,6,1.832
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.252,BranchPruner,6,1.832
BranchPruner does not prune if there is no default branch,0.256,BranchPruner,6,1.832
BranchPruner does not prune reserved branches,0.317,BranchPruner,6,1.832
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.553
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.553
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.553
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.553
git/branch tip returns non-origin remote,0.082,git/branch,13,1.553
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.09,git/branch,13,1.553
git/branch getBranchesPointedAt in a local repo finds one branch name,0.063,git/branch,13,1.553
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.553
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.553
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.553
git/branch deleteBranch deletes local branches,0.136,git/branch,13,1.553
git/branch deleteBranch deletes remote branches,0.336,git/branch,13,1.553
git/branch deleteBranch handles attempted delete of removed remote branch,0.391,git/branch,13,1.553
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.117,git/stash,14,1.392
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.141,git/stash,14,1.392
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.392
git/checkout can checkout a valid branch name in an existing repository,0.125,git/checkout,6,0.975
git/checkout can checkout a branch when it exists on multiple remotes,0.122,git/checkout,6,0.975
git/checkout will fail when an existing branch matches the remote branch,0.118,git/checkout,6,0.975
git/checkout with submodules cleans up an submodule that no longer exists,0.296,git/checkout,6,0.975
git/checkout with submodules updates a changed submodule reference,0.243,git/checkout,6,0.975
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.411,formatPatch,5,1.106
git/reflog getRecentBranches returns the recently checked out branches,0.214,git/reflog,6,1.182
git/reflog getRecentBranches works after renaming a branch,0.204,git/reflog,6,1.182
git/reflog getRecentBranches returns a limited number of branches,0.27,git/reflog,6,1.182
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.17,git/reflog,6,1.182
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.203,git/reflog,6,1.182
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.079,git/reflog,6,1.182
git/config config looks up config values,0.053,git/config,12,0.801
git/config config returns null for undefined values,0.047,git/config,12,0.801
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,12,0.801
git/config global config setGlobalConfigValue will replace all entries for a global value,0.084,git/config,12,0.801
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.062,git/config,12,0.801
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.061,git/config,12,0.801
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.061,git/config,12,0.801
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.06,git/config,12,0.801
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.063,git/config,12,0.801
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.801
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.801
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.801
git/rev-parse isGitRepository should return true for a repository,0.061,git/rev-parse,10,0.777
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.777
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.777
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.777
git/rev-parse isBareRepository returns false for empty directory,0.061,git/rev-parse,10,0.777
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.777
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.777
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.777
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.777
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.19,git/rev-parse,10,0.777
git/submodule listSubmodules returns the submodule entry,0.136,git/submodule,3,0.717
git/submodule listSubmodules returns the expected tag,0.179,git/submodule,3,0.717
git/submodule resetSubmodulePaths update submodule to original commit,0.361,git/submodule,3,0.717
gitignore readGitIgnoreAtRoot reads contents from disk,0.019,gitignore,9,0.649
gitignore saveGitIgnore applies rule correctly to repository,0.094,gitignore,9,0.649
gitignore appendIgnoreRule appends one rule,0.109,gitignore,9,0.649
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.649
git/log getCommits loads history,0.068,git/log,7,0.623
git/log getCommits handles repository with HEAD file on disk,0.094,git/log,7,0.623
git/log getCommits handles repository with signed commit and log.showSignature set,0.113,git/log,7,0.623
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.623
git/log getChangedFiles detects renames,0.094,git/log,7,0.623
git/log getChangedFiles detect copies,0.102,git/log,7,0.623
git/log getChangedFiles handles commit when HEAD exists on disk,0.054,git/log,7,0.623
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.576
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.576
git/remote findDefaultRemote returns something when origin removed,0.069,git/remote,11,0.576
git/merge merge and is successful returns true,0.048,git/merge,7,0.608
git/merge merge and is a noop returns false,0.062,git/merge,7,0.608
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.608
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.568
git-lfs isUsingLFS returns true if LFS is tracking a path,0.078,git-lfs,9,0.568
git/for-each-ref getBranches fetches branches using for-each-ref,0.076,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for empty repo,0.07,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.245
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.42
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.42
Update remote url doesn't update repository's remote url if protocols don't match,0.086,Update remote url,4,0.42
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.42
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.048,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.033,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.364
git/core error handling does not throw for errors that were expected,0.053,git/core,6,0.371
git/core error handling throws for errors that were not expected,0.054,git/core,6,0.371
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.371
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.371
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.371
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.371
AppStore can select a repository,0.232,AppStore,5,0.29
git/reset reset can hard reset a repository,0.312,git/reset,2,0.353
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.317,git/rebase,21,7.643
git/rebase detect conflicts status detects REBASE_HEAD,0.265,git/rebase,21,7.643
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.643
git/rebase detect conflicts is a detached HEAD state,0.266,git/rebase,21,7.643
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.266,git/rebase,21,7.643
git/rebase abort after conflicts found no longer has working directory changes,0.255,git/rebase,21,7.643
git/rebase abort after conflicts found returns to the feature branch,0.263,git/rebase,21,7.643
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.338,git/rebase,21,7.643
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.328,git/rebase,21,7.643
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.323,git/rebase,21,7.643
git/rebase continue after resolving conflicts returns success,0.375,git/rebase,21,7.643
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.378,git/rebase,21,7.643
git/rebase continue after resolving conflicts no longer has working directory changes,0.378,git/rebase,21,7.643
git/rebase continue after resolving conflicts returns to the feature branch,0.39,git/rebase,21,7.643
git/rebase continue after resolving conflicts branch is now a different ref,0.388,git/rebase,21,7.643
git/rebase continue with additional changes unrelated to conflicted files returns success,0.385,git/rebase,21,7.643
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.643
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.393,git/rebase,21,7.643
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.396,git/rebase,21,7.643
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.643
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.379,git/rebase,21,7.643
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.507
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.507
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.507
git/commit createCommit normal can commit renames,0.156,git/commit,21,4.507
git/commit createCommit partials can commit some lines from new file,0.185,git/commit,21,4.507
git/commit createCommit partials can commit second hunk from modified file,0.2,git/commit,21,4.507
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.507
git/commit createCommit partials can commit multiple hunks from modified file,0.19,git/commit,21,4.507
git/commit createCommit partials can commit some lines from deleted file,0.17,git/commit,21,4.507
git/commit createCommit partials can commit renames with modifications,0.179,git/commit,21,4.507
git/commit createCommit partials can commit renames with partially selected modifications,0.221,git/commit,21,4.507
git/commit createCommit with a merge conflict creates a merge commit,0.253,git/commit,21,4.507
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.241,git/commit,21,4.507
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.334,git/commit,21,4.507
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.327,git/commit,21,4.507
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.404,git/commit,21,4.507
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.407,git/commit,21,4.507
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.507
git/commit index corner cases can commit when staged new file is then deleted,0.156,git/commit,21,4.507
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.179,git/commit,21,4.507
git/commit index corner cases file is deleted in index,0.177,git/commit,21,4.507
git/rebase can parse progress returns a value indicating conflicts were encountered,0.405,git/rebase,7,3.854
git/rebase can parse progress status detects REBASE_HEAD,0.403,git/rebase,7,3.854
git/rebase can parse progress is a detached HEAD state,0.412,git/rebase,7,3.854
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.883,git/rebase,7,3.854
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.848,git/rebase,7,3.854
git/rebase can parse progress for long rebase is a detached HEAD state,0.853,git/rebase,7,3.854
GitStore loadCommitBatch includes HEAD when loading commits,0.355,GitStore,11,2.591
GitStore can discard changes from a repository,0.192,GitStore,11,2.591
GitStore can discard a renamed file,0.156,GitStore,11,2.591
GitStore undo first commit reports the repository is unborn,0.193,GitStore,11,2.591
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.591
GitStore undo first commit clears the undo commit dialog,0.218,GitStore,11,2.591
GitStore undo first commit has no staged files,0.21,GitStore,11,2.591
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.591
git/status getStatus with conflicted repo parses conflicted files with markers,0.346,git/status,12,2.065
git/status getStatus with conflicted repo parses conflicted files without markers,0.305,git/status,12,2.065
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.394,git/status,12,2.065
git/status getStatus with conflicted repo parses resolved files,0.3,git/status,12,2.065
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.118,git/status,12,2.065
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.15,git/status,12,2.065
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,2.065
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,2.065
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.065
git/status getStatus with unconflicted repo reflects copies,0.112,git/status,12,2.065
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.055,git/status,12,2.065
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.044,git/diff,19,1.841
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.841
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,1.841
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.841
git/diff imageDiff changes for images are set,0.117,git/diff,19,1.841
git/diff imageDiff changes for text are not set,0.082,git/diff,19,1.841
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,1.841
git/diff getWorkingDirectoryDiff counts lines for modified file,0.092,git/diff,19,1.841
git/diff getWorkingDirectoryDiff counts lines for staged file,0.084,git/diff,19,1.841
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.125,git/diff,19,1.841
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.147,git/diff,19,1.841
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.149,git/diff,19,1.841
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.128,git/diff,19,1.841
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.113,git/diff,19,1.841
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.082,git/diff,19,1.841
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.064,git/diff,19,1.841
git/diff getBinaryPaths in repo with text only files returns an empty array,0.092,git/diff,19,1.841
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.109,git/diff,19,1.841
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.12,git/diff,19,1.841
BranchPruner does nothing on non GitHub repositories,0.239,BranchPruner,6,1.773
BranchPruner prunes for GitHub repository,0.312,BranchPruner,6,1.773
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.251,BranchPruner,6,1.773
BranchPruner does not prune if there is no default branch,0.26,BranchPruner,6,1.773
BranchPruner does not prune reserved branches,0.295,BranchPruner,6,1.773
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.469
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.469
git/branch tip returns detached for arbitrary checkout,0.054,git/branch,13,1.469
git/branch tip returns current branch when on a valid HEAD,0.073,git/branch,13,1.469
git/branch tip returns non-origin remote,0.075,git/branch,13,1.469
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.469
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.469
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.469
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.469
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.089,git/branch,13,1.469
git/branch deleteBranch deletes local branches,0.118,git/branch,13,1.469
git/branch deleteBranch deletes remote branches,0.317,git/branch,13,1.469
git/branch deleteBranch handles attempted delete of removed remote branch,0.375,git/branch,13,1.469
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.112,git/stash,14,1.358
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.138,git/stash,14,1.358
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.101,git/stash,14,1.358
git/reflog getRecentBranches returns the recently checked out branches,0.158,git/reflog,6,1.066
git/reflog getRecentBranches works after renaming a branch,0.193,git/reflog,6,1.066
git/reflog getRecentBranches returns a limited number of branches,0.255,git/reflog,6,1.066
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.154,git/reflog,6,1.066
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.191,git/reflog,6,1.066
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.066
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.455,formatPatch,5,1.118
git/checkout can checkout a valid branch name in an existing repository,0.129,git/checkout,6,1.116
git/checkout can checkout a branch when it exists on multiple remotes,0.137,git/checkout,6,1.116
git/checkout will fail when an existing branch matches the remote branch,0.127,git/checkout,6,1.116
git/checkout with submodules cleans up an submodule that no longer exists,0.341,git/checkout,6,1.116
git/checkout with submodules updates a changed submodule reference,0.309,git/checkout,6,1.116
git/config config looks up config values,0.057,git/config,12,0.892
git/config config returns null for undefined values,0.055,git/config,12,0.892
git/config global config getGlobalConfigPath gets the config path,0.068,git/config,12,0.892
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.073,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.073,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.071,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.892
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.793
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.793
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.793
git/rev-parse isBareRepository returns true for initialized bare repository,0.071,git/rev-parse,10,0.793
git/rev-parse isBareRepository returns false for empty directory,0.063,git/rev-parse,10,0.793
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.793
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.793
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.059,git/rev-parse,10,0.793
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.06,git/rev-parse,10,0.793
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.193,git/rev-parse,10,0.793
git/submodule listSubmodules returns the submodule entry,0.14,git/submodule,3,0.855
git/submodule listSubmodules returns the expected tag,0.208,git/submodule,3,0.855
git/submodule resetSubmodulePaths update submodule to original commit,0.466,git/submodule,3,0.855
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.779
gitignore saveGitIgnore applies rule correctly to repository,0.113,gitignore,9,0.779
gitignore appendIgnoreRule appends one rule,0.134,gitignore,9,0.779
gitignore appendIgnoreRule appends multiple rules,0.145,gitignore,9,0.779
git/log getCommits loads history,0.073,git/log,7,0.663
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.663
git/log getCommits handles repository with signed commit and log.showSignature set,0.119,git/log,7,0.663
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.663
git/log getChangedFiles detects renames,0.098,git/log,7,0.663
git/log getChangedFiles detect copies,0.109,git/log,7,0.663
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.663
git/merge merge and is successful returns true,0.049,git/merge,7,0.67
git/merge merge and is a noop returns false,0.062,git/merge,7,0.67
git/merge getMergeBase returns the common ancestor of two branches,0.079,git/merge,7,0.67
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.644
git/remote findDefaultRemote returns origin when multiple remotes found,0.067,git/remote,11,0.644
git/remote findDefaultRemote returns something when origin removed,0.077,git/remote,11,0.644
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.606
git-lfs isUsingLFS returns true if LFS is tracking a path,0.089,git-lfs,9,0.606
Update remote url updates the repository's remote url when the github url changes,0.116,Update remote url,4,0.42
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.42
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.42
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.082,Update remote url,4,0.42
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.38
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.38
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.38
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.38
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.38
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.38
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.055,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.042,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.389
git/reset reset can hard reset a repository,0.082,git/reset,2,0.12
AppStore can select a repository,0.255,AppStore,5,0.312
git/for-each-ref getBranches fetches branches using for-each-ref,0.338,git/for-each-ref,3,0.524
git/for-each-ref getBranches should return empty list for empty repo,0.078,git/for-each-ref,3,0.524
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.524
validatedRepositoryPath returns the path to the repository,0.065,validatedRepositoryPath,2,0.12
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.063
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.306,git/rebase,21,7.556
git/rebase detect conflicts status detects REBASE_HEAD,0.261,git/rebase,21,7.556
git/rebase detect conflicts has conflicted files in working directory,0.262,git/rebase,21,7.556
git/rebase detect conflicts is a detached HEAD state,0.266,git/rebase,21,7.556
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.257,git/rebase,21,7.556
git/rebase abort after conflicts found no longer has working directory changes,0.254,git/rebase,21,7.556
git/rebase abort after conflicts found returns to the feature branch,0.254,git/rebase,21,7.556
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.332,git/rebase,21,7.556
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.32,git/rebase,21,7.556
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.32,git/rebase,21,7.556
git/rebase continue after resolving conflicts returns success,0.371,git/rebase,21,7.556
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.376,git/rebase,21,7.556
git/rebase continue after resolving conflicts no longer has working directory changes,0.373,git/rebase,21,7.556
git/rebase continue after resolving conflicts returns to the feature branch,0.386,git/rebase,21,7.556
git/rebase continue after resolving conflicts branch is now a different ref,0.386,git/rebase,21,7.556
git/rebase continue with additional changes unrelated to conflicted files returns success,0.379,git/rebase,21,7.556
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.386,git/rebase,21,7.556
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.394,git/rebase,21,7.556
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.394,git/rebase,21,7.556
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.393,git/rebase,21,7.556
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.375,git/rebase,21,7.556
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.473
git/commit createCommit normal commit does not strip commentary by default,0.106,git/commit,21,4.473
git/commit createCommit normal can commit for empty repository,0.132,git/commit,21,4.473
git/commit createCommit normal can commit renames,0.153,git/commit,21,4.473
git/commit createCommit partials can commit some lines from new file,0.186,git/commit,21,4.473
git/commit createCommit partials can commit second hunk from modified file,0.187,git/commit,21,4.473
git/commit createCommit partials can commit single delete from modified file,0.176,git/commit,21,4.473
git/commit createCommit partials can commit multiple hunks from modified file,0.192,git/commit,21,4.473
git/commit createCommit partials can commit some lines from deleted file,0.18,git/commit,21,4.473
git/commit createCommit partials can commit renames with modifications,0.188,git/commit,21,4.473
git/commit createCommit partials can commit renames with partially selected modifications,0.226,git/commit,21,4.473
git/commit createCommit with a merge conflict creates a merge commit,0.255,git/commit,21,4.473
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.232,git/commit,21,4.473
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.327,git/commit,21,4.473
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.331,git/commit,21,4.473
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.409,git/commit,21,4.473
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.397,git/commit,21,4.473
git/commit createMergeCommit with no changes throws an error,0.102,git/commit,21,4.473
git/commit index corner cases can commit when staged new file is then deleted,0.152,git/commit,21,4.473
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.175,git/commit,21,4.473
git/commit index corner cases file is deleted in index,0.179,git/commit,21,4.473
git/rebase can parse progress returns a value indicating conflicts were encountered,0.397,git/rebase,7,3.771
git/rebase can parse progress status detects REBASE_HEAD,0.402,git/rebase,7,3.771
git/rebase can parse progress is a detached HEAD state,0.408,git/rebase,7,3.771
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.828,git/rebase,7,3.771
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.832,git/rebase,7,3.771
git/rebase can parse progress for long rebase is a detached HEAD state,0.851,git/rebase,7,3.771
GitStore loadCommitBatch includes HEAD when loading commits,0.427,GitStore,11,2.629
GitStore can discard changes from a repository,0.171,GitStore,11,2.629
GitStore can discard a renamed file,0.152,GitStore,11,2.629
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.629
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.629
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.629
GitStore undo first commit has no staged files,0.212,GitStore,11,2.629
GitStore repository with HEAD file can discard modified change cleanly,0.119,GitStore,11,2.629
git/status getStatus with conflicted repo parses conflicted files with markers,0.306,git/status,12,2.091
git/status getStatus with conflicted repo parses conflicted files without markers,0.307,git/status,12,2.091
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.42,git/status,12,2.091
git/status getStatus with conflicted repo parses resolved files,0.304,git/status,12,2.091
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.091
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.091
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.091
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.06,git/status,12,2.091
git/status getStatus with unconflicted repo reflects renames,0.12,git/status,12,2.091
git/status getStatus with unconflicted repo reflects copies,0.122,git/status,12,2.091
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.091
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.093,git/diff,19,2.075
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,2.075
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,2.075
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,2.075
git/diff imageDiff changes for images are set,0.082,git/diff,19,2.075
git/diff imageDiff changes for text are not set,0.094,git/diff,19,2.075
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,2.075
git/diff getWorkingDirectoryDiff counts lines for modified file,0.104,git/diff,19,2.075
git/diff getWorkingDirectoryDiff counts lines for staged file,0.099,git/diff,19,2.075
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.136,git/diff,19,2.075
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.174,git/diff,19,2.075
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.179,git/diff,19,2.075
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.141,git/diff,19,2.075
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.148,git/diff,19,2.075
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.099,git/diff,19,2.075
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.077,git/diff,19,2.075
git/diff getBinaryPaths in repo with text only files returns an empty array,0.106,git/diff,19,2.075
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.11,git/diff,19,2.075
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.127,git/diff,19,2.075
BranchPruner does nothing on non GitHub repositories,0.292,BranchPruner,6,1.824
BranchPruner prunes for GitHub repository,0.307,BranchPruner,6,1.824
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.238,BranchPruner,6,1.824
BranchPruner does not prune if there is no default branch,0.241,BranchPruner,6,1.824
BranchPruner does not prune reserved branches,0.306,BranchPruner,6,1.824
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.465
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.465
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.465
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.465
git/branch tip returns non-origin remote,0.082,git/branch,13,1.465
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,13,1.465
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.465
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.465
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.465
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.081,git/branch,13,1.465
git/branch deleteBranch deletes local branches,0.118,git/branch,13,1.465
git/branch deleteBranch deletes remote branches,0.305,git/branch,13,1.465
git/branch deleteBranch handles attempted delete of removed remote branch,0.365,git/branch,13,1.465
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.104,git/stash,14,1.304
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.133,git/stash,14,1.304
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.304
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.539,formatPatch,5,1.152
git/checkout can checkout a valid branch name in an existing repository,0.117,git/checkout,6,0.961
git/checkout can checkout a branch when it exists on multiple remotes,0.12,git/checkout,6,0.961
git/checkout will fail when an existing branch matches the remote branch,0.113,git/checkout,6,0.961
git/checkout with submodules cleans up an submodule that no longer exists,0.284,git/checkout,6,0.961
git/checkout with submodules updates a changed submodule reference,0.252,git/checkout,6,0.961
git/reflog getRecentBranches returns the recently checked out branches,0.149,git/reflog,6,1.033
git/reflog getRecentBranches works after renaming a branch,0.185,git/reflog,6,1.033
git/reflog getRecentBranches returns a limited number of branches,0.245,git/reflog,6,1.033
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.148,git/reflog,6,1.033
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.183,git/reflog,6,1.033
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.079,git/reflog,6,1.033
git/config config looks up config values,0.057,git/config,12,0.796
git/config config returns null for undefined values,0.053,git/config,12,0.796
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,12,0.796
git/config global config setGlobalConfigValue will replace all entries for a global value,0.082,git/config,12,0.796
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.061,git/config,12,0.796
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.061,git/config,12,0.796
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.063,git/config,12,0.796
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.062,git/config,12,0.796
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.063,git/config,12,0.796
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.067,git/config,12,0.796
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.063,git/config,12,0.796
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.065,git/config,12,0.796
git/submodule listSubmodules returns the submodule entry,0.143,git/submodule,3,0.71
git/submodule listSubmodules returns the expected tag,0.19,git/submodule,3,0.71
git/submodule resetSubmodulePaths update submodule to original commit,0.335,git/submodule,3,0.71
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.761
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.761
git/rev-parse isBareRepository returns false for default initialized repository,0.061,git/rev-parse,10,0.761
git/rev-parse isBareRepository returns true for initialized bare repository,0.063,git/rev-parse,10,0.761
git/rev-parse isBareRepository returns false for empty directory,0.055,git/rev-parse,10,0.761
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.761
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.761
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.053,git/rev-parse,10,0.761
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.052,git/rev-parse,10,0.761
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.204,git/rev-parse,10,0.761
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.657
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.657
gitignore appendIgnoreRule appends one rule,0.111,gitignore,9,0.657
gitignore appendIgnoreRule appends multiple rules,0.115,gitignore,9,0.657
git/merge merge and is successful returns true,0.045,git/merge,7,0.643
git/merge merge and is a noop returns false,0.056,git/merge,7,0.643
git/merge getMergeBase returns the common ancestor of two branches,0.147,git/merge,7,0.643
git/log getCommits loads history,0.061,git/log,7,0.645
git/log getCommits handles repository with HEAD file on disk,0.097,git/log,7,0.645
git/log getCommits handles repository with signed commit and log.showSignature set,0.113,git/log,7,0.645
git/log getChangedFiles loads the files changed in the commit,0.056,git/log,7,0.645
git/log getChangedFiles detects renames,0.104,git/log,7,0.645
git/log getChangedFiles detect copies,0.11,git/log,7,0.645
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.645
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.575
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.575
git/remote findDefaultRemote returns something when origin removed,0.073,git/remote,11,0.575
git-lfs isUsingLFS returns false for repository not using LFS,0.065,git-lfs,9,0.535
git-lfs isUsingLFS returns true if LFS is tracking a path,0.084,git-lfs,9,0.535
git/for-each-ref getBranches fetches branches using for-each-ref,0.074,git/for-each-ref,3,0.243
git/for-each-ref getBranches should return empty list for empty repo,0.067,git/for-each-ref,3,0.243
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.243
Update remote url updates the repository's remote url when the github url changes,0.102,Update remote url,4,0.397
Update remote url doesn't update the repository's remote url when the github url is the same,0.083,Update remote url,4,0.397
Update remote url doesn't update repository's remote url if protocols don't match,0.079,Update remote url,4,0.397
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.08,Update remote url,4,0.397
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.361
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.361
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.361
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.046,patch formatting,8,0.361
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.033,patch formatting,8,0.361
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.361
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.361
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.361
git/core error handling does not throw for errors that were expected,0.053,git/core,6,0.353
git/core error handling throws for errors that were not expected,0.057,git/core,6,0.353
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.353
git/core exit code handling throws for exit codes that were not expected,0.056,git/core,6,0.353
git/core config lock file error handling can parse lock file path from stderr,0.055,git/core,6,0.353
git/core config lock file error handling normalizes paths,0.041,git/core,6,0.353
AppStore can select a repository,0.22,AppStore,5,0.274
git/reset reset can hard reset a repository,0.3,git/reset,2,0.342
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.057
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.311,git/rebase,21,7.673
git/rebase detect conflicts status detects REBASE_HEAD,0.27,git/rebase,21,7.673
git/rebase detect conflicts has conflicted files in working directory,0.27,git/rebase,21,7.673
git/rebase detect conflicts is a detached HEAD state,0.27,git/rebase,21,7.673
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.264,git/rebase,21,7.673
git/rebase abort after conflicts found no longer has working directory changes,0.257,git/rebase,21,7.673
git/rebase abort after conflicts found returns to the feature branch,0.258,git/rebase,21,7.673
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.342,git/rebase,21,7.673
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.329,git/rebase,21,7.673
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.328,git/rebase,21,7.673
git/rebase continue after resolving conflicts returns success,0.375,git/rebase,21,7.673
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.38,git/rebase,21,7.673
git/rebase continue after resolving conflicts no longer has working directory changes,0.38,git/rebase,21,7.673
git/rebase continue after resolving conflicts returns to the feature branch,0.396,git/rebase,21,7.673
git/rebase continue after resolving conflicts branch is now a different ref,0.392,git/rebase,21,7.673
git/rebase continue with additional changes unrelated to conflicted files returns success,0.384,git/rebase,21,7.673
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.673
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.394,git/rebase,21,7.673
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.395,git/rebase,21,7.673
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.404,git/rebase,21,7.673
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.374,git/rebase,21,7.673
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.514
git/commit createCommit normal commit does not strip commentary by default,0.116,git/commit,21,4.514
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.514
git/commit createCommit normal can commit renames,0.153,git/commit,21,4.514
git/commit createCommit partials can commit some lines from new file,0.186,git/commit,21,4.514
git/commit createCommit partials can commit second hunk from modified file,0.196,git/commit,21,4.514
git/commit createCommit partials can commit single delete from modified file,0.176,git/commit,21,4.514
git/commit createCommit partials can commit multiple hunks from modified file,0.191,git/commit,21,4.514
git/commit createCommit partials can commit some lines from deleted file,0.181,git/commit,21,4.514
git/commit createCommit partials can commit renames with modifications,0.182,git/commit,21,4.514
git/commit createCommit partials can commit renames with partially selected modifications,0.22,git/commit,21,4.514
git/commit createCommit with a merge conflict creates a merge commit,0.265,git/commit,21,4.514
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.237,git/commit,21,4.514
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.336,git/commit,21,4.514
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.326,git/commit,21,4.514
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.4,git/commit,21,4.514
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.413,git/commit,21,4.514
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.514
git/commit index corner cases can commit when staged new file is then deleted,0.151,git/commit,21,4.514
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.172,git/commit,21,4.514
git/commit index corner cases file is deleted in index,0.177,git/commit,21,4.514
git/rebase can parse progress returns a value indicating conflicts were encountered,0.411,git/rebase,7,3.85
git/rebase can parse progress status detects REBASE_HEAD,0.407,git/rebase,7,3.85
git/rebase can parse progress is a detached HEAD state,0.416,git/rebase,7,3.85
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.848,git/rebase,7,3.85
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.858,git/rebase,7,3.85
git/rebase can parse progress for long rebase is a detached HEAD state,0.857,git/rebase,7,3.85
GitStore loadCommitBatch includes HEAD when loading commits,0.438,GitStore,11,2.704
GitStore can discard changes from a repository,0.17,GitStore,11,2.704
GitStore can discard a renamed file,0.155,GitStore,11,2.704
GitStore undo first commit reports the repository is unborn,0.194,GitStore,11,2.704
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.704
GitStore undo first commit clears the undo commit dialog,0.225,GitStore,11,2.704
GitStore undo first commit has no staged files,0.213,GitStore,11,2.704
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.704
git/status getStatus with conflicted repo parses conflicted files with markers,0.347,git/status,12,2.141
git/status getStatus with conflicted repo parses conflicted files without markers,0.312,git/status,12,2.141
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.416,git/status,12,2.141
git/status getStatus with conflicted repo parses resolved files,0.303,git/status,12,2.141
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.122,git/status,12,2.141
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.156,git/status,12,2.141
git/status getStatus with unconflicted repo parses changed files,0.072,git/status,12,2.141
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.141
git/status getStatus with unconflicted repo reflects renames,0.117,git/status,12,2.141
git/status getStatus with unconflicted repo reflects copies,0.116,git/status,12,2.141
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.063,git/status,12,2.141
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,1.883
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.038,git/diff,19,1.883
git/diff getBlobImage retrieves valid image for modified file,0.095,git/diff,19,1.883
git/diff getBlobImage retrieves valid images for deleted file,0.066,git/diff,19,1.883
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.883
git/diff imageDiff changes for text are not set,0.085,git/diff,19,1.883
git/diff getWorkingDirectoryDiff counts lines for new file,0.095,git/diff,19,1.883
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.883
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.883
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.122,git/diff,19,1.883
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.146,git/diff,19,1.883
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.15,git/diff,19,1.883
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.137,git/diff,19,1.883
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.117,git/diff,19,1.883
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.086,git/diff,19,1.883
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.066,git/diff,19,1.883
git/diff getBinaryPaths in repo with text only files returns an empty array,0.098,git/diff,19,1.883
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,1.883
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.883
BranchPruner does nothing on non GitHub repositories,0.238,BranchPruner,6,1.785
BranchPruner prunes for GitHub repository,0.315,BranchPruner,6,1.785
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.257,BranchPruner,6,1.785
BranchPruner does not prune if there is no default branch,0.255,BranchPruner,6,1.785
BranchPruner does not prune reserved branches,0.29,BranchPruner,6,1.785
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.529
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.529
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,13,1.529
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.529
git/branch tip returns non-origin remote,0.087,git/branch,13,1.529
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.529
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.529
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.529
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.529
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.529
git/branch deleteBranch deletes local branches,0.123,git/branch,13,1.529
git/branch deleteBranch deletes remote branches,0.335,git/branch,13,1.529
git/branch deleteBranch handles attempted delete of removed remote branch,0.389,git/branch,13,1.529
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.107,git/stash,14,1.379
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.141,git/stash,14,1.379
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.105,git/stash,14,1.379
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.46,formatPatch,5,1.115
git/reflog getRecentBranches returns the recently checked out branches,0.157,git/reflog,6,1.13
git/reflog getRecentBranches works after renaming a branch,0.207,git/reflog,6,1.13
git/reflog getRecentBranches returns a limited number of branches,0.279,git/reflog,6,1.13
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.165,git/reflog,6,1.13
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.21,git/reflog,6,1.13
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.07,git/reflog,6,1.13
git/checkout can checkout a valid branch name in an existing repository,0.189,git/checkout,6,1.109
git/checkout can checkout a branch when it exists on multiple remotes,0.132,git/checkout,6,1.109
git/checkout will fail when an existing branch matches the remote branch,0.125,git/checkout,6,1.109
git/checkout with submodules cleans up an submodule that no longer exists,0.315,git/checkout,6,1.109
git/checkout with submodules updates a changed submodule reference,0.272,git/checkout,6,1.109
git/config config looks up config values,0.056,git/config,12,0.853
git/config config returns null for undefined values,0.053,git/config,12,0.853
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.853
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.066,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.066,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.068,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.066,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.853
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.772
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.772
git/rev-parse isBareRepository returns false for default initialized repository,0.063,git/rev-parse,10,0.772
git/rev-parse isBareRepository returns true for initialized bare repository,0.064,git/rev-parse,10,0.772
git/rev-parse isBareRepository returns false for empty directory,0.066,git/rev-parse,10,0.772
git/rev-parse isBareRepository throws error for missing directory,0.051,git/rev-parse,10,0.772
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.772
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.058,git/rev-parse,10,0.772
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.772
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.192,git/rev-parse,10,0.772
git/submodule listSubmodules returns the submodule entry,0.135,git/submodule,3,0.73
git/submodule listSubmodules returns the expected tag,0.192,git/submodule,3,0.73
git/submodule resetSubmodulePaths update submodule to original commit,0.36,git/submodule,3,0.73
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.669
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.669
gitignore appendIgnoreRule appends one rule,0.113,gitignore,9,0.669
gitignore appendIgnoreRule appends multiple rules,0.129,gitignore,9,0.669
git/log getCommits loads history,0.064,git/log,7,0.624
git/log getCommits handles repository with HEAD file on disk,0.089,git/log,7,0.624
git/log getCommits handles repository with signed commit and log.showSignature set,0.114,git/log,7,0.624
git/log getChangedFiles loads the files changed in the commit,0.057,git/log,7,0.624
git/log getChangedFiles detects renames,0.096,git/log,7,0.624
git/log getChangedFiles detect copies,0.102,git/log,7,0.624
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.624
git/merge merge and is successful returns true,0.045,git/merge,7,0.608
git/merge merge and is a noop returns false,0.057,git/merge,7,0.608
git/merge getMergeBase returns the common ancestor of two branches,0.074,git/merge,7,0.608
git/remote getRemotes should return both remotes,0.054,git/remote,11,0.589
git/remote findDefaultRemote returns origin when multiple remotes found,0.067,git/remote,11,0.589
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.589
git-lfs isUsingLFS returns false for repository not using LFS,0.136,git-lfs,9,0.632
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.632
Update remote url updates the repository's remote url when the github url changes,0.11,Update remote url,4,0.408
Update remote url doesn't update the repository's remote url when the github url is the same,0.083,Update remote url,4,0.408
Update remote url doesn't update repository's remote url if protocols don't match,0.079,Update remote url,4,0.408
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.408
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.057,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.38
git/core error handling does not throw for errors that were expected,0.052,git/core,6,0.37
git/core error handling throws for errors that were not expected,0.057,git/core,6,0.37
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.37
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.37
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.37
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.37
git/reset reset can hard reset a repository,0.079,git/reset,2,0.119
AppStore can select a repository,0.231,AppStore,5,0.288
git/for-each-ref getBranches fetches branches using for-each-ref,0.297,git/for-each-ref,3,0.466
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.466
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.057,git/for-each-ref,3,0.466
validatedRepositoryPath returns the path to the repository,0.055,validatedRepositoryPath,2,0.11
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.059
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.314,git/rebase,21,7.668
git/rebase detect conflicts status detects REBASE_HEAD,0.267,git/rebase,21,7.668
git/rebase detect conflicts has conflicted files in working directory,0.263,git/rebase,21,7.668
git/rebase detect conflicts is a detached HEAD state,0.267,git/rebase,21,7.668
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.261,git/rebase,21,7.668
git/rebase abort after conflicts found no longer has working directory changes,0.258,git/rebase,21,7.668
git/rebase abort after conflicts found returns to the feature branch,0.263,git/rebase,21,7.668
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.337,git/rebase,21,7.668
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.324,git/rebase,21,7.668
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.332,git/rebase,21,7.668
git/rebase continue after resolving conflicts returns success,0.38,git/rebase,21,7.668
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.668
git/rebase continue after resolving conflicts no longer has working directory changes,0.387,git/rebase,21,7.668
git/rebase continue after resolving conflicts returns to the feature branch,0.401,git/rebase,21,7.668
git/rebase continue after resolving conflicts branch is now a different ref,0.389,git/rebase,21,7.668
git/rebase continue with additional changes unrelated to conflicted files returns success,0.382,git/rebase,21,7.668
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.387,git/rebase,21,7.668
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.392,git/rebase,21,7.668
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.406,git/rebase,21,7.668
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.401,git/rebase,21,7.668
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.372,git/rebase,21,7.668
git/commit createCommit normal commits the given files,0.119,git/commit,21,4.573
git/commit createCommit normal commit does not strip commentary by default,0.107,git/commit,21,4.573
git/commit createCommit normal can commit for empty repository,0.133,git/commit,21,4.573
git/commit createCommit normal can commit renames,0.153,git/commit,21,4.573
git/commit createCommit partials can commit some lines from new file,0.18,git/commit,21,4.573
git/commit createCommit partials can commit second hunk from modified file,0.193,git/commit,21,4.573
git/commit createCommit partials can commit single delete from modified file,0.175,git/commit,21,4.573
git/commit createCommit partials can commit multiple hunks from modified file,0.196,git/commit,21,4.573
git/commit createCommit partials can commit some lines from deleted file,0.191,git/commit,21,4.573
git/commit createCommit partials can commit renames with modifications,0.191,git/commit,21,4.573
git/commit createCommit partials can commit renames with partially selected modifications,0.238,git/commit,21,4.573
git/commit createCommit with a merge conflict creates a merge commit,0.266,git/commit,21,4.573
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.239,git/commit,21,4.573
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.342,git/commit,21,4.573
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.336,git/commit,21,4.573
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.421,git/commit,21,4.573
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.416,git/commit,21,4.573
git/commit createMergeCommit with no changes throws an error,0.107,git/commit,21,4.573
git/commit index corner cases can commit when staged new file is then deleted,0.152,git/commit,21,4.573
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.18,git/commit,21,4.573
git/commit index corner cases file is deleted in index,0.178,git/commit,21,4.573
git/rebase can parse progress returns a value indicating conflicts were encountered,0.398,git/rebase,7,3.786
git/rebase can parse progress status detects REBASE_HEAD,0.4,git/rebase,7,3.786
git/rebase can parse progress is a detached HEAD state,0.406,git/rebase,7,3.786
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.845,git/rebase,7,3.786
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.84,git/rebase,7,3.786
git/rebase can parse progress for long rebase is a detached HEAD state,0.841,git/rebase,7,3.786
GitStore loadCommitBatch includes HEAD when loading commits,0.432,GitStore,11,2.674
GitStore can discard changes from a repository,0.172,GitStore,11,2.674
GitStore can discard a renamed file,0.16,GitStore,11,2.674
GitStore undo first commit reports the repository is unborn,0.199,GitStore,11,2.674
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.674
GitStore undo first commit clears the undo commit dialog,0.22,GitStore,11,2.674
GitStore undo first commit has no staged files,0.211,GitStore,11,2.674
GitStore repository with HEAD file can discard modified change cleanly,0.119,GitStore,11,2.674
git/status getStatus with conflicted repo parses conflicted files with markers,0.356,git/status,12,2.152
git/status getStatus with conflicted repo parses conflicted files without markers,0.321,git/status,12,2.152
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.415,git/status,12,2.152
git/status getStatus with conflicted repo parses resolved files,0.306,git/status,12,2.152
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.12,git/status,12,2.152
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.148,git/status,12,2.152
git/status getStatus with unconflicted repo parses changed files,0.075,git/status,12,2.152
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.066,git/status,12,2.152
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.152
git/status getStatus with unconflicted repo reflects copies,0.119,git/status,12,2.152
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.152
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.049,git/diff,19,1.905
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.905
git/diff getBlobImage retrieves valid image for modified file,0.102,git/diff,19,1.905
git/diff getBlobImage retrieves valid images for deleted file,0.068,git/diff,19,1.905
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.905
git/diff imageDiff changes for text are not set,0.088,git/diff,19,1.905
git/diff getWorkingDirectoryDiff counts lines for new file,0.094,git/diff,19,1.905
git/diff getWorkingDirectoryDiff counts lines for modified file,0.099,git/diff,19,1.905
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,1.905
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.129,git/diff,19,1.905
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.149,git/diff,19,1.905
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.905
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.132,git/diff,19,1.905
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.114,git/diff,19,1.905
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.079,git/diff,19,1.905
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.066,git/diff,19,1.905
git/diff getBinaryPaths in repo with text only files returns an empty array,0.094,git/diff,19,1.905
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.104,git/diff,19,1.905
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.122,git/diff,19,1.905
BranchPruner does nothing on non GitHub repositories,0.25,BranchPruner,6,1.776
BranchPruner prunes for GitHub repository,0.315,BranchPruner,6,1.776
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.263,BranchPruner,6,1.776
BranchPruner does not prune if there is no default branch,0.229,BranchPruner,6,1.776
BranchPruner does not prune reserved branches,0.294,BranchPruner,6,1.776
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.534
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.534
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,13,1.534
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.534
git/branch tip returns non-origin remote,0.082,git/branch,13,1.534
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.534
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.534
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.534
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.534
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.534
git/branch deleteBranch deletes local branches,0.125,git/branch,13,1.534
git/branch deleteBranch deletes remote branches,0.346,git/branch,13,1.534
git/branch deleteBranch handles attempted delete of removed remote branch,0.387,git/branch,13,1.534
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.109,git/stash,14,1.374
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.14,git/stash,14,1.374
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.103,git/stash,14,1.374
git/reflog getRecentBranches returns the recently checked out branches,0.154,git/reflog,6,1.078
git/reflog getRecentBranches works after renaming a branch,0.199,git/reflog,6,1.078
git/reflog getRecentBranches returns a limited number of branches,0.268,git/reflog,6,1.078
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.152,git/reflog,6,1.078
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.196,git/reflog,6,1.078
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.078
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.421,formatPatch,5,1.163
git/checkout can checkout a valid branch name in an existing repository,0.127,git/checkout,6,1.09
git/checkout can checkout a branch when it exists on multiple remotes,0.133,git/checkout,6,1.09
git/checkout will fail when an existing branch matches the remote branch,0.129,git/checkout,6,1.09
git/checkout with submodules cleans up an submodule that no longer exists,0.331,git/checkout,6,1.09
git/checkout with submodules updates a changed submodule reference,0.294,git/checkout,6,1.09
git/config config looks up config values,0.054,git/config,12,0.847
git/config config returns null for undefined values,0.051,git/config,12,0.847
git/config global config getGlobalConfigPath gets the config path,0.064,git/config,12,0.847
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.066,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.07,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.073,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.072,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.063,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.847
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.739
git/rev-parse isGitRepository should return false for a directory,0.047,git/rev-parse,10,0.739
git/rev-parse isBareRepository returns false for default initialized repository,0.06,git/rev-parse,10,0.739
git/rev-parse isBareRepository returns true for initialized bare repository,0.066,git/rev-parse,10,0.739
git/rev-parse isBareRepository returns false for empty directory,0.059,git/rev-parse,10,0.739
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.739
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.739
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.054,git/rev-parse,10,0.739
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.055,git/rev-parse,10,0.739
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.184,git/rev-parse,10,0.739
git/submodule listSubmodules returns the submodule entry,0.123,git/submodule,3,0.724
git/submodule listSubmodules returns the expected tag,0.178,git/submodule,3,0.724
git/submodule resetSubmodulePaths update submodule to original commit,0.382,git/submodule,3,0.724
gitignore readGitIgnoreAtRoot reads contents from disk,0.018,gitignore,9,0.648
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.648
gitignore appendIgnoreRule appends one rule,0.109,gitignore,9,0.648
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.648
git-lfs isUsingLFS returns false for repository not using LFS,0.129,git-lfs,9,0.588
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.588
git/log getCommits loads history,0.07,git/log,7,0.64
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.64
git/log getCommits handles repository with signed commit and log.showSignature set,0.113,git/log,7,0.64
git/log getChangedFiles loads the files changed in the commit,0.057,git/log,7,0.64
git/log getChangedFiles detects renames,0.1,git/log,7,0.64
git/log getChangedFiles detect copies,0.104,git/log,7,0.64
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.64
git/merge merge and is successful returns true,0.048,git/merge,7,0.583
git/merge merge and is a noop returns false,0.064,git/merge,7,0.583
git/merge getMergeBase returns the common ancestor of two branches,0.07,git/merge,7,0.583
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.566
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.566
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.566
git/for-each-ref getBranches fetches branches using for-each-ref,0.072,git/for-each-ref,3,0.24
git/for-each-ref getBranches should return empty list for empty repo,0.07,git/for-each-ref,3,0.24
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.057,git/for-each-ref,3,0.24
Update remote url updates the repository's remote url when the github url changes,0.109,Update remote url,4,0.405
Update remote url doesn't update the repository's remote url when the github url is the same,0.082,Update remote url,4,0.405
Update remote url doesn't update repository's remote url if protocols don't match,0.08,Update remote url,4,0.405
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.082,Update remote url,4,0.405
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.05,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.368
git/core error handling does not throw for errors that were expected,0.055,git/core,6,0.349
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.349
git/core exit code handling does not throw for exit codes that were expected,0.053,git/core,6,0.349
git/core exit code handling throws for exit codes that were not expected,0.051,git/core,6,0.349
git/core config lock file error handling can parse lock file path from stderr,0.054,git/core,6,0.349
git/core config lock file error handling normalizes paths,0.041,git/core,6,0.349
AppStore can select a repository,0.239,AppStore,5,0.293
git/reset reset can hard reset a repository,0.339,git/reset,2,0.381
validatedRepositoryPath returns the path to the repository,0.052,validatedRepositoryPath,2,0.11
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.315,git/rebase,21,7.604
git/rebase detect conflicts status detects REBASE_HEAD,0.262,git/rebase,21,7.604
git/rebase detect conflicts has conflicted files in working directory,0.262,git/rebase,21,7.604
git/rebase detect conflicts is a detached HEAD state,0.269,git/rebase,21,7.604
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.259,git/rebase,21,7.604
git/rebase abort after conflicts found no longer has working directory changes,0.262,git/rebase,21,7.604
git/rebase abort after conflicts found returns to the feature branch,0.26,git/rebase,21,7.604
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.338,git/rebase,21,7.604
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.323,git/rebase,21,7.604
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.319,git/rebase,21,7.604
git/rebase continue after resolving conflicts returns success,0.379,git/rebase,21,7.604
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.373,git/rebase,21,7.604
git/rebase continue after resolving conflicts no longer has working directory changes,0.372,git/rebase,21,7.604
git/rebase continue after resolving conflicts returns to the feature branch,0.385,git/rebase,21,7.604
git/rebase continue after resolving conflicts branch is now a different ref,0.388,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files returns success,0.381,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.386,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.386,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.397,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.396,git/rebase,21,7.604
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.369,git/rebase,21,7.604
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.467
git/commit createCommit normal commit does not strip commentary by default,0.106,git/commit,21,4.467
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.467
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.467
git/commit createCommit partials can commit some lines from new file,0.184,git/commit,21,4.467
git/commit createCommit partials can commit second hunk from modified file,0.199,git/commit,21,4.467
git/commit createCommit partials can commit single delete from modified file,0.181,git/commit,21,4.467
git/commit createCommit partials can commit multiple hunks from modified file,0.196,git/commit,21,4.467
git/commit createCommit partials can commit some lines from deleted file,0.178,git/commit,21,4.467
git/commit createCommit partials can commit renames with modifications,0.184,git/commit,21,4.467
git/commit createCommit partials can commit renames with partially selected modifications,0.225,git/commit,21,4.467
git/commit createCommit with a merge conflict creates a merge commit,0.262,git/commit,21,4.467
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.236,git/commit,21,4.467
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.329,git/commit,21,4.467
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.316,git/commit,21,4.467
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.394,git/commit,21,4.467
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.392,git/commit,21,4.467
git/commit createMergeCommit with no changes throws an error,0.105,git/commit,21,4.467
git/commit index corner cases can commit when staged new file is then deleted,0.152,git/commit,21,4.467
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.175,git/commit,21,4.467
git/commit index corner cases file is deleted in index,0.175,git/commit,21,4.467
git/rebase can parse progress returns a value indicating conflicts were encountered,0.387,git/rebase,7,3.715
git/rebase can parse progress status detects REBASE_HEAD,0.392,git/rebase,7,3.715
git/rebase can parse progress is a detached HEAD state,0.389,git/rebase,7,3.715
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.828,git/rebase,7,3.715
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.818,git/rebase,7,3.715
git/rebase can parse progress for long rebase is a detached HEAD state,0.84,git/rebase,7,3.715
GitStore loadCommitBatch includes HEAD when loading commits,0.402,GitStore,11,2.581
GitStore can discard changes from a repository,0.165,GitStore,11,2.581
GitStore can discard a renamed file,0.177,GitStore,11,2.581
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.581
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.581
GitStore undo first commit clears the undo commit dialog,0.213,GitStore,11,2.581
GitStore undo first commit has no staged files,0.206,GitStore,11,2.581
GitStore repository with HEAD file can discard modified change cleanly,0.112,GitStore,11,2.581
git/status getStatus with conflicted repo parses conflicted files with markers,0.298,git/status,12,2.04
git/status getStatus with conflicted repo parses conflicted files without markers,0.297,git/status,12,2.04
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.392,git/status,12,2.04
git/status getStatus with conflicted repo parses resolved files,0.299,git/status,12,2.04
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,2.04
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.04
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.04
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.04
git/status getStatus with unconflicted repo reflects renames,0.117,git/status,12,2.04
git/status getStatus with unconflicted repo reflects copies,0.116,git/status,12,2.04
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.064,git/status,12,2.04
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.092,git/diff,19,2.025
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,2.025
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,2.025
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,2.025
git/diff imageDiff changes for images are set,0.084,git/diff,19,2.025
git/diff imageDiff changes for text are not set,0.086,git/diff,19,2.025
git/diff getWorkingDirectoryDiff counts lines for new file,0.096,git/diff,19,2.025
git/diff getWorkingDirectoryDiff counts lines for modified file,0.092,git/diff,19,2.025
git/diff getWorkingDirectoryDiff counts lines for staged file,0.087,git/diff,19,2.025
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.133,git/diff,19,2.025
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.168,git/diff,19,2.025
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.174,git/diff,19,2.025
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.144,git/diff,19,2.025
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.142,git/diff,19,2.025
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.095,git/diff,19,2.025
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.072,git/diff,19,2.025
git/diff getBinaryPaths in repo with text only files returns an empty array,0.1,git/diff,19,2.025
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.11,git/diff,19,2.025
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.131,git/diff,19,2.025
BranchPruner does nothing on non GitHub repositories,0.264,BranchPruner,6,1.915
BranchPruner prunes for GitHub repository,0.33,BranchPruner,6,1.915
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.255,BranchPruner,6,1.915
BranchPruner does not prune if there is no default branch,0.251,BranchPruner,6,1.915
BranchPruner does not prune reserved branches,0.319,BranchPruner,6,1.915
git/branch tip returns unborn for new repository,0.035,git/branch,13,1.637
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.637
git/branch tip returns detached for arbitrary checkout,0.055,git/branch,13,1.637
git/branch tip returns current branch when on a valid HEAD,0.08,git/branch,13,1.637
git/branch tip returns non-origin remote,0.085,git/branch,13,1.637
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,13,1.637
git/branch getBranchesPointedAt in a local repo finds one branch name,0.055,git/branch,13,1.637
git/branch getBranchesPointedAt in a local repo finds no branch names,0.052,git/branch,13,1.637
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.637
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.089,git/branch,13,1.637
git/branch deleteBranch deletes local branches,0.136,git/branch,13,1.637
git/branch deleteBranch deletes remote branches,0.374,git/branch,13,1.637
git/branch deleteBranch handles attempted delete of removed remote branch,0.438,git/branch,13,1.637
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.106,git/stash,14,1.386
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.136,git/stash,14,1.386
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.096,git/stash,14,1.386
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.445,formatPatch,5,1.07
git/checkout can checkout a valid branch name in an existing repository,0.119,git/checkout,6,1.058
git/checkout can checkout a branch when it exists on multiple remotes,0.129,git/checkout,6,1.058
git/checkout will fail when an existing branch matches the remote branch,0.122,git/checkout,6,1.058
git/checkout with submodules cleans up an submodule that no longer exists,0.305,git/checkout,6,1.058
git/checkout with submodules updates a changed submodule reference,0.257,git/checkout,6,1.058
git/reflog getRecentBranches returns the recently checked out branches,0.146,git/reflog,6,1.064
git/reflog getRecentBranches works after renaming a branch,0.194,git/reflog,6,1.064
git/reflog getRecentBranches returns a limited number of branches,0.255,git/reflog,6,1.064
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.157,git/reflog,6,1.064
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.191,git/reflog,6,1.064
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.075,git/reflog,6,1.064
git/config config looks up config values,0.053,git/config,12,0.827
git/config config returns null for undefined values,0.055,git/config,12,0.827
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.827
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.066,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.066,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.064,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.065,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.064,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.068,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.065,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.066,git/config,12,0.827
git/rev-parse isGitRepository should return true for a repository,0.048,git/rev-parse,10,0.719
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.719
git/rev-parse isBareRepository returns false for default initialized repository,0.059,git/rev-parse,10,0.719
git/rev-parse isBareRepository returns true for initialized bare repository,0.06,git/rev-parse,10,0.719
git/rev-parse isBareRepository returns false for empty directory,0.057,git/rev-parse,10,0.719
git/rev-parse isBareRepository throws error for missing directory,0.048,git/rev-parse,10,0.719
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.059,git/rev-parse,10,0.719
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.051,git/rev-parse,10,0.719
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.056,git/rev-parse,10,0.719
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.178,git/rev-parse,10,0.719
git/submodule listSubmodules returns the submodule entry,0.138,git/submodule,3,0.754
git/submodule listSubmodules returns the expected tag,0.188,git/submodule,3,0.754
git/submodule resetSubmodulePaths update submodule to original commit,0.386,git/submodule,3,0.754
gitignore readGitIgnoreAtRoot reads contents from disk,0.019,gitignore,9,0.666
gitignore saveGitIgnore applies rule correctly to repository,0.097,gitignore,9,0.666
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.666
gitignore appendIgnoreRule appends multiple rules,0.123,gitignore,9,0.666
git/log getCommits loads history,0.139,git/log,7,0.734
git/log getCommits handles repository with HEAD file on disk,0.103,git/log,7,0.734
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.734
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.734
git/log getChangedFiles detects renames,0.1,git/log,7,0.734
git/log getChangedFiles detect copies,0.115,git/log,7,0.734
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.734
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.541
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.541
git/merge merge and is successful returns true,0.05,git/merge,7,0.594
git/merge merge and is a noop returns false,0.058,git/merge,7,0.594
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.594
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.569
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.569
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.569
Update remote url updates the repository's remote url when the github url changes,0.105,Update remote url,4,0.394
Update remote url doesn't update the repository's remote url when the github url is the same,0.079,Update remote url,4,0.394
Update remote url doesn't update repository's remote url if protocols don't match,0.078,Update remote url,4,0.394
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.081,Update remote url,4,0.394
git/reset reset can hard reset a repository,0.073,git/reset,2,0.114
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.047,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.047,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.048,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.043,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.375
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.375
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.367
git/core error handling throws for errors that were not expected,0.052,git/core,6,0.367
git/core exit code handling does not throw for exit codes that were expected,0.056,git/core,6,0.367
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.367
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.367
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.367
AppStore can select a repository,0.229,AppStore,5,0.283
git/for-each-ref getBranches fetches branches using for-each-ref,0.303,git/for-each-ref,3,0.478
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.478
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.478
validatedRepositoryPath returns the path to the repository,0.056,validatedRepositoryPath,2,0.111
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.307,git/rebase,21,7.609
git/rebase detect conflicts status detects REBASE_HEAD,0.263,git/rebase,21,7.609
git/rebase detect conflicts has conflicted files in working directory,0.258,git/rebase,21,7.609
git/rebase detect conflicts is a detached HEAD state,0.269,git/rebase,21,7.609
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.265,git/rebase,21,7.609
git/rebase abort after conflicts found no longer has working directory changes,0.252,git/rebase,21,7.609
git/rebase abort after conflicts found returns to the feature branch,0.256,git/rebase,21,7.609
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.332,git/rebase,21,7.609
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.315,git/rebase,21,7.609
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.321,git/rebase,21,7.609
git/rebase continue after resolving conflicts returns success,0.375,git/rebase,21,7.609
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.373,git/rebase,21,7.609
git/rebase continue after resolving conflicts no longer has working directory changes,0.38,git/rebase,21,7.609
git/rebase continue after resolving conflicts returns to the feature branch,0.391,git/rebase,21,7.609
git/rebase continue after resolving conflicts branch is now a different ref,0.384,git/rebase,21,7.609
git/rebase continue with additional changes unrelated to conflicted files returns success,0.38,git/rebase,21,7.609
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.386,git/rebase,21,7.609
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.385,git/rebase,21,7.609
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.42,git/rebase,21,7.609
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.411,git/rebase,21,7.609
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.38,git/rebase,21,7.609
git/commit createCommit normal commits the given files,0.133,git/commit,21,4.668
git/commit createCommit normal commit does not strip commentary by default,0.117,git/commit,21,4.668
git/commit createCommit normal can commit for empty repository,0.145,git/commit,21,4.668
git/commit createCommit normal can commit renames,0.166,git/commit,21,4.668
git/commit createCommit partials can commit some lines from new file,0.196,git/commit,21,4.668
git/commit createCommit partials can commit second hunk from modified file,0.211,git/commit,21,4.668
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.668
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.668
git/commit createCommit partials can commit some lines from deleted file,0.195,git/commit,21,4.668
git/commit createCommit partials can commit renames with modifications,0.206,git/commit,21,4.668
git/commit createCommit partials can commit renames with partially selected modifications,0.249,git/commit,21,4.668
git/commit createCommit with a merge conflict creates a merge commit,0.261,git/commit,21,4.668
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.242,git/commit,21,4.668
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.335,git/commit,21,4.668
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.342,git/commit,21,4.668
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.399,git/commit,21,4.668
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.412,git/commit,21,4.668
git/commit createMergeCommit with no changes throws an error,0.107,git/commit,21,4.668
git/commit index corner cases can commit when staged new file is then deleted,0.154,git/commit,21,4.668
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.175,git/commit,21,4.668
git/commit index corner cases file is deleted in index,0.177,git/commit,21,4.668
git/rebase can parse progress returns a value indicating conflicts were encountered,0.399,git/rebase,7,3.797
git/rebase can parse progress status detects REBASE_HEAD,0.4,git/rebase,7,3.797
git/rebase can parse progress is a detached HEAD state,0.4,git/rebase,7,3.797
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.829,git/rebase,7,3.797
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.836,git/rebase,7,3.797
git/rebase can parse progress for long rebase is a detached HEAD state,0.877,git/rebase,7,3.797
GitStore loadCommitBatch includes HEAD when loading commits,0.416,GitStore,11,2.684
GitStore can discard changes from a repository,0.168,GitStore,11,2.684
GitStore can discard a renamed file,0.186,GitStore,11,2.684
GitStore undo first commit reports the repository is unborn,0.191,GitStore,11,2.684
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.684
GitStore undo first commit clears the undo commit dialog,0.225,GitStore,11,2.684
GitStore undo first commit has no staged files,0.209,GitStore,11,2.684
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.684
git/status getStatus with conflicted repo parses conflicted files with markers,0.307,git/status,12,2.078
git/status getStatus with conflicted repo parses conflicted files without markers,0.308,git/status,12,2.078
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.408,git/status,12,2.078
git/status getStatus with conflicted repo parses resolved files,0.309,git/status,12,2.078
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.124,git/status,12,2.078
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.15,git/status,12,2.078
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.078
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.078
git/status getStatus with unconflicted repo reflects renames,0.112,git/status,12,2.078
git/status getStatus with unconflicted repo reflects copies,0.113,git/status,12,2.078
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.062,git/status,12,2.078
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.082,git/diff,19,1.859
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.859
git/diff getBlobImage retrieves valid image for modified file,0.05,git/diff,19,1.859
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.859
git/diff imageDiff changes for images are set,0.082,git/diff,19,1.859
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.859
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,1.859
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.859
git/diff getWorkingDirectoryDiff counts lines for staged file,0.094,git/diff,19,1.859
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.169,git/diff,19,1.859
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.144,git/diff,19,1.859
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.149,git/diff,19,1.859
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.124,git/diff,19,1.859
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.107,git/diff,19,1.859
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.859
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.057,git/diff,19,1.859
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.859
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.097,git/diff,19,1.859
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.105,git/diff,19,1.859
BranchPruner does nothing on non GitHub repositories,0.223,BranchPruner,6,1.646
BranchPruner prunes for GitHub repository,0.284,BranchPruner,6,1.646
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.246,BranchPruner,6,1.646
BranchPruner does not prune if there is no default branch,0.226,BranchPruner,6,1.646
BranchPruner does not prune reserved branches,0.278,BranchPruner,6,1.646
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.434
git/branch tip returns correct ref if checkout occurs,0.038,git/branch,13,1.434
git/branch tip returns detached for arbitrary checkout,0.054,git/branch,13,1.434
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,13,1.434
git/branch tip returns non-origin remote,0.079,git/branch,13,1.434
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.434
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.434
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.434
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.058,git/branch,13,1.434
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.085,git/branch,13,1.434
git/branch deleteBranch deletes local branches,0.12,git/branch,13,1.434
git/branch deleteBranch deletes remote branches,0.301,git/branch,13,1.434
git/branch deleteBranch handles attempted delete of removed remote branch,0.351,git/branch,13,1.434
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.102,git/stash,14,1.317
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.129,git/stash,14,1.317
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.092,git/stash,14,1.317
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.401,formatPatch,5,0.997
git/reflog getRecentBranches returns the recently checked out branches,0.202,git/reflog,6,1.057
git/reflog getRecentBranches works after renaming a branch,0.181,git/reflog,6,1.057
git/reflog getRecentBranches returns a limited number of branches,0.24,git/reflog,6,1.057
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.147,git/reflog,6,1.057
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.18,git/reflog,6,1.057
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.067,git/reflog,6,1.057
git/checkout can checkout a valid branch name in an existing repository,0.117,git/checkout,6,0.984
git/checkout can checkout a branch when it exists on multiple remotes,0.121,git/checkout,6,0.984
git/checkout will fail when an existing branch matches the remote branch,0.114,git/checkout,6,0.984
git/checkout with submodules cleans up an submodule that no longer exists,0.3,git/checkout,6,0.984
git/checkout with submodules updates a changed submodule reference,0.256,git/checkout,6,0.984
git/config config looks up config values,0.052,git/config,12,0.827
git/config config returns null for undefined values,0.05,git/config,12,0.827
git/config global config getGlobalConfigPath gets the config path,0.061,git/config,12,0.827
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.065,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.065,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.065,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.065,git/config,12,0.827
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.827
git/submodule listSubmodules returns the submodule entry,0.146,git/submodule,3,0.728
git/submodule listSubmodules returns the expected tag,0.196,git/submodule,3,0.728
git/submodule resetSubmodulePaths update submodule to original commit,0.344,git/submodule,3,0.728
git/log getCommits loads history,0.069,git/log,7,0.663
git/log getCommits handles repository with HEAD file on disk,0.106,git/log,7,0.663
git/log getCommits handles repository with signed commit and log.showSignature set,0.117,git/log,7,0.663
git/log getChangedFiles loads the files changed in the commit,0.061,git/log,7,0.663
git/log getChangedFiles detects renames,0.105,git/log,7,0.663
git/log getChangedFiles detect copies,0.108,git/log,7,0.663
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.663
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.771
git/rev-parse isGitRepository should return false for a directory,0.057,git/rev-parse,10,0.771
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.771
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.771
git/rev-parse isBareRepository returns false for empty directory,0.057,git/rev-parse,10,0.771
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.771
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.771
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.771
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.05,git/rev-parse,10,0.771
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.196,git/rev-parse,10,0.771
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.724
gitignore saveGitIgnore applies rule correctly to repository,0.109,gitignore,9,0.724
gitignore appendIgnoreRule appends one rule,0.127,gitignore,9,0.724
gitignore appendIgnoreRule appends multiple rules,0.129,gitignore,9,0.724
git/merge merge and is successful returns true,0.045,git/merge,7,0.618
git/merge merge and is a noop returns false,0.06,git/merge,7,0.618
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.618
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.605
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.605
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.605
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.577
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.577
git/for-each-ref getBranches fetches branches using for-each-ref,0.074,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for empty repo,0.069,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.242
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.419
Update remote url doesn't update the repository's remote url when the github url is the same,0.088,Update remote url,4,0.419
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.419
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.419
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.384
git/core error handling does not throw for errors that were expected,0.059,git/core,6,0.392
git/core error handling throws for errors that were not expected,0.061,git/core,6,0.392
git/core exit code handling does not throw for exit codes that were expected,0.06,git/core,6,0.392
git/core exit code handling throws for exit codes that were not expected,0.062,git/core,6,0.392
git/core config lock file error handling can parse lock file path from stderr,0.063,git/core,6,0.392
git/core config lock file error handling normalizes paths,0.047,git/core,6,0.392
AppStore can select a repository,0.25,AppStore,5,0.307
git/reset reset can hard reset a repository,0.331,git/reset,2,0.374
validatedRepositoryPath returns the path to the repository,0.057,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.311,git/rebase,21,7.714
git/rebase detect conflicts status detects REBASE_HEAD,0.269,git/rebase,21,7.714
git/rebase detect conflicts has conflicted files in working directory,0.267,git/rebase,21,7.714
git/rebase detect conflicts is a detached HEAD state,0.269,git/rebase,21,7.714
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.265,git/rebase,21,7.714
git/rebase abort after conflicts found no longer has working directory changes,0.257,git/rebase,21,7.714
git/rebase abort after conflicts found returns to the feature branch,0.26,git/rebase,21,7.714
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.342,git/rebase,21,7.714
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.327,git/rebase,21,7.714
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.33,git/rebase,21,7.714
git/rebase continue after resolving conflicts returns success,0.379,git/rebase,21,7.714
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.387,git/rebase,21,7.714
git/rebase continue after resolving conflicts no longer has working directory changes,0.383,git/rebase,21,7.714
git/rebase continue after resolving conflicts returns to the feature branch,0.399,git/rebase,21,7.714
git/rebase continue after resolving conflicts branch is now a different ref,0.39,git/rebase,21,7.714
git/rebase continue with additional changes unrelated to conflicted files returns success,0.389,git/rebase,21,7.714
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.391,git/rebase,21,7.714
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.398,git/rebase,21,7.714
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.403,git/rebase,21,7.714
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.408,git/rebase,21,7.714
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.385,git/rebase,21,7.714
git/commit createCommit normal commits the given files,0.121,git/commit,21,4.629
git/commit createCommit normal commit does not strip commentary by default,0.105,git/commit,21,4.629
git/commit createCommit normal can commit for empty repository,0.133,git/commit,21,4.629
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.629
git/commit createCommit partials can commit some lines from new file,0.185,git/commit,21,4.629
git/commit createCommit partials can commit second hunk from modified file,0.2,git/commit,21,4.629
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.629
git/commit createCommit partials can commit multiple hunks from modified file,0.2,git/commit,21,4.629
git/commit createCommit partials can commit some lines from deleted file,0.19,git/commit,21,4.629
git/commit createCommit partials can commit renames with modifications,0.198,git/commit,21,4.629
git/commit createCommit partials can commit renames with partially selected modifications,0.25,git/commit,21,4.629
git/commit createCommit with a merge conflict creates a merge commit,0.273,git/commit,21,4.629
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.237,git/commit,21,4.629
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.341,git/commit,21,4.629
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.339,git/commit,21,4.629
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.409,git/commit,21,4.629
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.421,git/commit,21,4.629
git/commit createMergeCommit with no changes throws an error,0.125,git/commit,21,4.629
git/commit index corner cases can commit when staged new file is then deleted,0.156,git/commit,21,4.629
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.174,git/commit,21,4.629
git/commit index corner cases file is deleted in index,0.18,git/commit,21,4.629
git/rebase can parse progress returns a value indicating conflicts were encountered,0.405,git/rebase,7,3.82
git/rebase can parse progress status detects REBASE_HEAD,0.409,git/rebase,7,3.82
git/rebase can parse progress is a detached HEAD state,0.419,git/rebase,7,3.82
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.832,git/rebase,7,3.82
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.844,git/rebase,7,3.82
git/rebase can parse progress for long rebase is a detached HEAD state,0.858,git/rebase,7,3.82
GitStore loadCommitBatch includes HEAD when loading commits,0.451,GitStore,11,2.683
GitStore can discard changes from a repository,0.167,GitStore,11,2.683
GitStore can discard a renamed file,0.153,GitStore,11,2.683
GitStore undo first commit reports the repository is unborn,0.195,GitStore,11,2.683
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.683
GitStore undo first commit clears the undo commit dialog,0.222,GitStore,11,2.683
GitStore undo first commit has no staged files,0.204,GitStore,11,2.683
GitStore repository with HEAD file can discard modified change cleanly,0.118,GitStore,11,2.683
git/status getStatus with conflicted repo parses conflicted files with markers,0.34,git/status,12,2.102
git/status getStatus with conflicted repo parses conflicted files without markers,0.309,git/status,12,2.102
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.402,git/status,12,2.102
git/status getStatus with conflicted repo parses resolved files,0.3,git/status,12,2.102
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,2.102
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.102
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.102
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.102
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.102
git/status getStatus with unconflicted repo reflects copies,0.116,git/status,12,2.102
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.102
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.048,git/diff,19,1.853
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.853
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,1.853
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.853
git/diff imageDiff changes for images are set,0.121,git/diff,19,1.853
git/diff imageDiff changes for text are not set,0.09,git/diff,19,1.853
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,1.853
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.853
git/diff getWorkingDirectoryDiff counts lines for staged file,0.082,git/diff,19,1.853
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.112,git/diff,19,1.853
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.136,git/diff,19,1.853
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.153,git/diff,19,1.853
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.127,git/diff,19,1.853
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.115,git/diff,19,1.853
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.853
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.066,git/diff,19,1.853
git/diff getBinaryPaths in repo with text only files returns an empty array,0.098,git/diff,19,1.853
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.103,git/diff,19,1.853
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.112,git/diff,19,1.853
BranchPruner does nothing on non GitHub repositories,0.246,BranchPruner,6,1.777
BranchPruner prunes for GitHub repository,0.319,BranchPruner,6,1.777
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.258,BranchPruner,6,1.777
BranchPruner does not prune if there is no default branch,0.255,BranchPruner,6,1.777
BranchPruner does not prune reserved branches,0.286,BranchPruner,6,1.777
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.488
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.488
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,13,1.488
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.488
git/branch tip returns non-origin remote,0.085,git/branch,13,1.488
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,13,1.488
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.488
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.488
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.488
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.085,git/branch,13,1.488
git/branch deleteBranch deletes local branches,0.118,git/branch,13,1.488
git/branch deleteBranch deletes remote branches,0.32,git/branch,13,1.488
git/branch deleteBranch handles attempted delete of removed remote branch,0.37,git/branch,13,1.488
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.105,git/stash,14,1.337
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.137,git/stash,14,1.337
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.101,git/stash,14,1.337
git/reflog getRecentBranches returns the recently checked out branches,0.158,git/reflog,6,1.057
git/reflog getRecentBranches works after renaming a branch,0.197,git/reflog,6,1.057
git/reflog getRecentBranches returns a limited number of branches,0.257,git/reflog,6,1.057
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.151,git/reflog,6,1.057
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.188,git/reflog,6,1.057
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.066,git/reflog,6,1.057
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.458,formatPatch,5,1.118
git/checkout can checkout a valid branch name in an existing repository,0.135,git/checkout,6,1.065
git/checkout can checkout a branch when it exists on multiple remotes,0.135,git/checkout,6,1.065
git/checkout will fail when an existing branch matches the remote branch,0.127,git/checkout,6,1.065
git/checkout with submodules cleans up an submodule that no longer exists,0.322,git/checkout,6,1.065
git/checkout with submodules updates a changed submodule reference,0.272,git/checkout,6,1.065
git/config config looks up config values,0.054,git/config,12,0.892
git/config config returns null for undefined values,0.055,git/config,12,0.892
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.892
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.07,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.079,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.075,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.071,git/config,12,0.892
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.072,git/config,12,0.892
git/rev-parse isGitRepository should return true for a repository,0.06,git/rev-parse,10,0.812
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns true for initialized bare repository,0.072,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns false for empty directory,0.063,git/rev-parse,10,0.812
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.068,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.064,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.202,git/rev-parse,10,0.812
git/submodule listSubmodules returns the submodule entry,0.144,git/submodule,3,0.742
git/submodule listSubmodules returns the expected tag,0.189,git/submodule,3,0.742
git/submodule resetSubmodulePaths update submodule to original commit,0.367,git/submodule,3,0.742
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.755
gitignore saveGitIgnore applies rule correctly to repository,0.118,gitignore,9,0.755
gitignore appendIgnoreRule appends one rule,0.127,gitignore,9,0.755
gitignore appendIgnoreRule appends multiple rules,0.133,gitignore,9,0.755
git/log getCommits loads history,0.138,git/log,7,0.74
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.74
git/log getCommits handles repository with signed commit and log.showSignature set,0.131,git/log,7,0.74
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.74
git/log getChangedFiles detects renames,0.1,git/log,7,0.74
git/log getChangedFiles detect copies,0.112,git/log,7,0.74
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.74
git/merge merge and is successful returns true,0.05,git/merge,7,0.634
git/merge merge and is a noop returns false,0.063,git/merge,7,0.634
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.634
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.602
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.602
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.602
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.549
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.549
Update remote url updates the repository's remote url when the github url changes,0.113,Update remote url,4,0.413
Update remote url doesn't update the repository's remote url when the github url is the same,0.083,Update remote url,4,0.413
Update remote url doesn't update repository's remote url if protocols don't match,0.083,Update remote url,4,0.413
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.081,Update remote url,4,0.413
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.376
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.376
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.376
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.376
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.376
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.36
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.36
git/reset reset can hard reset a repository,0.074,git/reset,2,0.113
AppStore can select a repository,0.346,AppStore,5,0.403
git/for-each-ref getBranches fetches branches using for-each-ref,0.296,git/for-each-ref,3,0.472
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.472
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.472
validatedRepositoryPath returns the path to the repository,0.057,validatedRepositoryPath,2,0.114
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.312,git/rebase,21,7.719
git/rebase detect conflicts status detects REBASE_HEAD,0.268,git/rebase,21,7.719
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.719
git/rebase detect conflicts is a detached HEAD state,0.264,git/rebase,21,7.719
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.263,git/rebase,21,7.719
git/rebase abort after conflicts found no longer has working directory changes,0.26,git/rebase,21,7.719
git/rebase abort after conflicts found returns to the feature branch,0.256,git/rebase,21,7.719
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.344,git/rebase,21,7.719
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.331,git/rebase,21,7.719
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.324,git/rebase,21,7.719
git/rebase continue after resolving conflicts returns success,0.389,git/rebase,21,7.719
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.383,git/rebase,21,7.719
git/rebase continue after resolving conflicts no longer has working directory changes,0.38,git/rebase,21,7.719
git/rebase continue after resolving conflicts returns to the feature branch,0.395,git/rebase,21,7.719
git/rebase continue after resolving conflicts branch is now a different ref,0.395,git/rebase,21,7.719
git/rebase continue with additional changes unrelated to conflicted files returns success,0.388,git/rebase,21,7.719
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.391,git/rebase,21,7.719
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.394,git/rebase,21,7.719
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.407,git/rebase,21,7.719
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.412,git/rebase,21,7.719
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.385,git/rebase,21,7.719
git/commit createCommit normal commits the given files,0.125,git/commit,21,4.602
git/commit createCommit normal commit does not strip commentary by default,0.108,git/commit,21,4.602
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.602
git/commit createCommit normal can commit renames,0.157,git/commit,21,4.602
git/commit createCommit partials can commit some lines from new file,0.199,git/commit,21,4.602
git/commit createCommit partials can commit second hunk from modified file,0.209,git/commit,21,4.602
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.602
git/commit createCommit partials can commit multiple hunks from modified file,0.199,git/commit,21,4.602
git/commit createCommit partials can commit some lines from deleted file,0.182,git/commit,21,4.602
git/commit createCommit partials can commit renames with modifications,0.181,git/commit,21,4.602
git/commit createCommit partials can commit renames with partially selected modifications,0.228,git/commit,21,4.602
git/commit createCommit with a merge conflict creates a merge commit,0.256,git/commit,21,4.602
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.24,git/commit,21,4.602
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.339,git/commit,21,4.602
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.335,git/commit,21,4.602
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.411,git/commit,21,4.602
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.422,git/commit,21,4.602
git/commit createMergeCommit with no changes throws an error,0.114,git/commit,21,4.602
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.602
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.602
git/commit index corner cases file is deleted in index,0.181,git/commit,21,4.602
git/rebase can parse progress returns a value indicating conflicts were encountered,0.407,git/rebase,7,3.834
git/rebase can parse progress status detects REBASE_HEAD,0.406,git/rebase,7,3.834
git/rebase can parse progress is a detached HEAD state,0.406,git/rebase,7,3.834
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.856,git/rebase,7,3.834
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.847,git/rebase,7,3.834
git/rebase can parse progress for long rebase is a detached HEAD state,0.86,git/rebase,7,3.834
GitStore loadCommitBatch includes HEAD when loading commits,0.445,GitStore,11,2.689
GitStore can discard changes from a repository,0.17,GitStore,11,2.689
GitStore can discard a renamed file,0.152,GitStore,11,2.689
GitStore undo first commit reports the repository is unborn,0.195,GitStore,11,2.689
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.689
GitStore undo first commit clears the undo commit dialog,0.226,GitStore,11,2.689
GitStore undo first commit has no staged files,0.209,GitStore,11,2.689
GitStore repository with HEAD file can discard modified change cleanly,0.119,GitStore,11,2.689
git/status getStatus with conflicted repo parses conflicted files with markers,0.308,git/status,12,2.123
git/status getStatus with conflicted repo parses conflicted files without markers,0.351,git/status,12,2.123
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.405,git/status,12,2.123
git/status getStatus with conflicted repo parses resolved files,0.305,git/status,12,2.123
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.121,git/status,12,2.123
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.161,git/status,12,2.123
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.123
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.06,git/status,12,2.123
git/status getStatus with unconflicted repo reflects renames,0.119,git/status,12,2.123
git/status getStatus with unconflicted repo reflects copies,0.115,git/status,12,2.123
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.056,git/status,12,2.123
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.046,git/diff,19,1.787
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.787
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,1.787
git/diff getBlobImage retrieves valid images for deleted file,0.068,git/diff,19,1.787
git/diff imageDiff changes for images are set,0.126,git/diff,19,1.787
git/diff imageDiff changes for text are not set,0.099,git/diff,19,1.787
git/diff getWorkingDirectoryDiff counts lines for new file,0.084,git/diff,19,1.787
git/diff getWorkingDirectoryDiff counts lines for modified file,0.085,git/diff,19,1.787
git/diff getWorkingDirectoryDiff counts lines for staged file,0.08,git/diff,19,1.787
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.11,git/diff,19,1.787
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.134,git/diff,19,1.787
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.141,git/diff,19,1.787
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.116,git/diff,19,1.787
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.112,git/diff,19,1.787
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.079,git/diff,19,1.787
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.059,git/diff,19,1.787
git/diff getBinaryPaths in repo with text only files returns an empty array,0.087,git/diff,19,1.787
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.098,git/diff,19,1.787
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.119,git/diff,19,1.787
BranchPruner does nothing on non GitHub repositories,0.256,BranchPruner,6,1.802
BranchPruner prunes for GitHub repository,0.312,BranchPruner,6,1.802
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.246,BranchPruner,6,1.802
BranchPruner does not prune if there is no default branch,0.255,BranchPruner,6,1.802
BranchPruner does not prune reserved branches,0.307,BranchPruner,6,1.802
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.51
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.51
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.51
git/branch tip returns current branch when on a valid HEAD,0.076,git/branch,13,1.51
git/branch tip returns non-origin remote,0.083,git/branch,13,1.51
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.51
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.51
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.51
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.057,git/branch,13,1.51
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,13,1.51
git/branch deleteBranch deletes local branches,0.121,git/branch,13,1.51
git/branch deleteBranch deletes remote branches,0.332,git/branch,13,1.51
git/branch deleteBranch handles attempted delete of removed remote branch,0.377,git/branch,13,1.51
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.109,git/stash,14,1.35
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.139,git/stash,14,1.35
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.35
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.447,formatPatch,5,1.163
git/checkout can checkout a valid branch name in an existing repository,0.127,git/checkout,6,1.053
git/checkout can checkout a branch when it exists on multiple remotes,0.133,git/checkout,6,1.053
git/checkout will fail when an existing branch matches the remote branch,0.124,git/checkout,6,1.053
git/checkout with submodules cleans up an submodule that no longer exists,0.334,git/checkout,6,1.053
git/checkout with submodules updates a changed submodule reference,0.263,git/checkout,6,1.053
git/reflog getRecentBranches returns the recently checked out branches,0.156,git/reflog,6,1.134
git/reflog getRecentBranches works after renaming a branch,0.205,git/reflog,6,1.134
git/reflog getRecentBranches returns a limited number of branches,0.279,git/reflog,6,1.134
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.167,git/reflog,6,1.134
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.206,git/reflog,6,1.134
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.079,git/reflog,6,1.134
git/config config looks up config values,0.058,git/config,12,0.868
git/config config returns null for undefined values,0.056,git/config,12,0.868
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.868
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,12,0.868
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.868
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.868
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.067,git/config,12,0.868
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.868
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.075,git/config,12,0.868
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.075,git/config,12,0.868
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.868
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.868
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.825
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.825
git/rev-parse isBareRepository returns false for default initialized repository,0.066,git/rev-parse,10,0.825
git/rev-parse isBareRepository returns true for initialized bare repository,0.071,git/rev-parse,10,0.825
git/rev-parse isBareRepository returns false for empty directory,0.065,git/rev-parse,10,0.825
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.825
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.825
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.058,git/rev-parse,10,0.825
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.064,git/rev-parse,10,0.825
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.219,git/rev-parse,10,0.825
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.733
gitignore saveGitIgnore applies rule correctly to repository,0.108,gitignore,9,0.733
gitignore appendIgnoreRule appends one rule,0.128,gitignore,9,0.733
gitignore appendIgnoreRule appends multiple rules,0.129,gitignore,9,0.733
git/submodule listSubmodules returns the submodule entry,0.129,git/submodule,3,0.714
git/submodule listSubmodules returns the expected tag,0.186,git/submodule,3,0.714
git/submodule resetSubmodulePaths update submodule to original commit,0.357,git/submodule,3,0.714
git/log getCommits loads history,0.073,git/log,7,0.677
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.677
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.677
git/log getChangedFiles loads the files changed in the commit,0.063,git/log,7,0.677
git/log getChangedFiles detects renames,0.102,git/log,7,0.677
git/log getChangedFiles detect copies,0.114,git/log,7,0.677
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.677
git/merge merge and is successful returns true,0.048,git/merge,7,0.66
git/merge merge and is a noop returns false,0.065,git/merge,7,0.66
git/merge getMergeBase returns the common ancestor of two branches,0.079,git/merge,7,0.66
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.628
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.628
git/remote findDefaultRemote returns something when origin removed,0.077,git/remote,11,0.628
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.588
git-lfs isUsingLFS returns true if LFS is tracking a path,0.087,git-lfs,9,0.588
git/for-each-ref getBranches fetches branches using for-each-ref,0.075,git/for-each-ref,3,0.255
git/for-each-ref getBranches should return empty list for empty repo,0.08,git/for-each-ref,3,0.255
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.255
Update remote url updates the repository's remote url when the github url changes,0.121,Update remote url,4,0.442
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.442
Update remote url doesn't update repository's remote url if protocols don't match,0.092,Update remote url,4,0.442
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.089,Update remote url,4,0.442
AppStore can select a repository,0.244,AppStore,5,0.301
git/core error handling does not throw for errors that were expected,0.302,git/core,6,0.628
git/core error handling throws for errors that were not expected,0.057,git/core,6,0.628
git/core exit code handling does not throw for exit codes that were expected,0.061,git/core,6,0.628
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.628
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.628
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.628
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.055,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.382
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.111
git/reset reset can hard reset a repository,0.087,git/reset,2,0.128
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.316,git/rebase,21,7.666
git/rebase detect conflicts status detects REBASE_HEAD,0.265,git/rebase,21,7.666
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.666
git/rebase detect conflicts is a detached HEAD state,0.272,git/rebase,21,7.666
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.265,git/rebase,21,7.666
git/rebase abort after conflicts found no longer has working directory changes,0.262,git/rebase,21,7.666
git/rebase abort after conflicts found returns to the feature branch,0.257,git/rebase,21,7.666
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.335,git/rebase,21,7.666
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.327,git/rebase,21,7.666
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.328,git/rebase,21,7.666
git/rebase continue after resolving conflicts returns success,0.374,git/rebase,21,7.666
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.377,git/rebase,21,7.666
git/rebase continue after resolving conflicts no longer has working directory changes,0.387,git/rebase,21,7.666
git/rebase continue after resolving conflicts returns to the feature branch,0.393,git/rebase,21,7.666
git/rebase continue after resolving conflicts branch is now a different ref,0.392,git/rebase,21,7.666
git/rebase continue with additional changes unrelated to conflicted files returns success,0.387,git/rebase,21,7.666
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.391,git/rebase,21,7.666
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.395,git/rebase,21,7.666
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.395,git/rebase,21,7.666
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.405,git/rebase,21,7.666
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.375,git/rebase,21,7.666
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.567
git/commit createCommit normal commit does not strip commentary by default,0.108,git/commit,21,4.567
git/commit createCommit normal can commit for empty repository,0.132,git/commit,21,4.567
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.567
git/commit createCommit partials can commit some lines from new file,0.186,git/commit,21,4.567
git/commit createCommit partials can commit second hunk from modified file,0.203,git/commit,21,4.567
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.567
git/commit createCommit partials can commit multiple hunks from modified file,0.204,git/commit,21,4.567
git/commit createCommit partials can commit some lines from deleted file,0.183,git/commit,21,4.567
git/commit createCommit partials can commit renames with modifications,0.187,git/commit,21,4.567
git/commit createCommit partials can commit renames with partially selected modifications,0.229,git/commit,21,4.567
git/commit createCommit with a merge conflict creates a merge commit,0.262,git/commit,21,4.567
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.234,git/commit,21,4.567
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.332,git/commit,21,4.567
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.329,git/commit,21,4.567
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.412,git/commit,21,4.567
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.417,git/commit,21,4.567
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.567
git/commit index corner cases can commit when staged new file is then deleted,0.153,git/commit,21,4.567
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.176,git/commit,21,4.567
git/commit index corner cases file is deleted in index,0.183,git/commit,21,4.567
git/rebase can parse progress returns a value indicating conflicts were encountered,0.408,git/rebase,7,3.789
git/rebase can parse progress status detects REBASE_HEAD,0.404,git/rebase,7,3.789
git/rebase can parse progress is a detached HEAD state,0.403,git/rebase,7,3.789
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.832,git/rebase,7,3.789
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.841,git/rebase,7,3.789
git/rebase can parse progress for long rebase is a detached HEAD state,0.85,git/rebase,7,3.789
GitStore loadCommitBatch includes HEAD when loading commits,0.365,GitStore,11,2.581
GitStore can discard changes from a repository,0.172,GitStore,11,2.581
GitStore can discard a renamed file,0.153,GitStore,11,2.581
GitStore undo first commit reports the repository is unborn,0.19,GitStore,11,2.581
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.581
GitStore undo first commit clears the undo commit dialog,0.215,GitStore,11,2.581
GitStore undo first commit has no staged files,0.208,GitStore,11,2.581
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.581
git/status getStatus with conflicted repo parses conflicted files with markers,0.345,git/status,12,2.106
git/status getStatus with conflicted repo parses conflicted files without markers,0.304,git/status,12,2.106
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.405,git/status,12,2.106
git/status getStatus with conflicted repo parses resolved files,0.301,git/status,12,2.106
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.121,git/status,12,2.106
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.106
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.106
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.106
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.106
git/status getStatus with unconflicted repo reflects copies,0.124,git/status,12,2.106
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,2.106
BranchPruner does nothing on non GitHub repositories,0.276,BranchPruner,6,2.017
BranchPruner prunes for GitHub repository,0.349,BranchPruner,6,2.017
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.275,BranchPruner,6,2.017
BranchPruner does not prune if there is no default branch,0.273,BranchPruner,6,2.017
BranchPruner does not prune reserved branches,0.344,BranchPruner,6,2.017
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.096,git/diff,19,1.895
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.895
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,1.895
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.895
git/diff imageDiff changes for images are set,0.078,git/diff,19,1.895
git/diff imageDiff changes for text are not set,0.093,git/diff,19,1.895
git/diff getWorkingDirectoryDiff counts lines for new file,0.09,git/diff,19,1.895
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.895
git/diff getWorkingDirectoryDiff counts lines for staged file,0.093,git/diff,19,1.895
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.129,git/diff,19,1.895
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.148,git/diff,19,1.895
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.15,git/diff,19,1.895
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.13,git/diff,19,1.895
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.122,git/diff,19,1.895
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.895
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.063,git/diff,19,1.895
git/diff getBinaryPaths in repo with text only files returns an empty array,0.086,git/diff,19,1.895
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.101,git/diff,19,1.895
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.895
git/branch tip returns unborn for new repository,0.027,git/branch,13,1.497
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.497
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.497
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.497
git/branch tip returns non-origin remote,0.083,git/branch,13,1.497
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.497
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.497
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.497
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.497
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.497
git/branch deleteBranch deletes local branches,0.124,git/branch,13,1.497
git/branch deleteBranch deletes remote branches,0.319,git/branch,13,1.497
git/branch deleteBranch handles attempted delete of removed remote branch,0.376,git/branch,13,1.497
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.356
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.135,git/stash,14,1.356
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.101,git/stash,14,1.356
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.445,formatPatch,5,1.088
git/reflog getRecentBranches returns the recently checked out branches,0.155,git/reflog,6,1.095
git/reflog getRecentBranches works after renaming a branch,0.198,git/reflog,6,1.095
git/reflog getRecentBranches returns a limited number of branches,0.264,git/reflog,6,1.095
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.165,git/reflog,6,1.095
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.2,git/reflog,6,1.095
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.095
git/checkout can checkout a valid branch name in an existing repository,0.118,git/checkout,6,1.114
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.114
git/checkout will fail when an existing branch matches the remote branch,0.124,git/checkout,6,1.114
git/checkout with submodules cleans up an submodule that no longer exists,0.328,git/checkout,6,1.114
git/checkout with submodules updates a changed submodule reference,0.276,git/checkout,6,1.114
git/config config looks up config values,0.057,git/config,12,0.825
git/config config returns null for undefined values,0.052,git/config,12,0.825
git/config global config getGlobalConfigPath gets the config path,0.062,git/config,12,0.825
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.825
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.825
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.825
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.064,git/config,12,0.825
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.825
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.064,git/config,12,0.825
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.065,git/config,12,0.825
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.062,git/config,12,0.825
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.064,git/config,12,0.825
git/rev-parse isGitRepository should return true for a repository,0.05,git/rev-parse,10,0.737
git/rev-parse isGitRepository should return false for a directory,0.05,git/rev-parse,10,0.737
git/rev-parse isBareRepository returns false for default initialized repository,0.059,git/rev-parse,10,0.737
git/rev-parse isBareRepository returns true for initialized bare repository,0.06,git/rev-parse,10,0.737
git/rev-parse isBareRepository returns false for empty directory,0.05,git/rev-parse,10,0.737
git/rev-parse isBareRepository throws error for missing directory,0.049,git/rev-parse,10,0.737
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.059,git/rev-parse,10,0.737
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.05,git/rev-parse,10,0.737
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.737
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.209,git/rev-parse,10,0.737
gitignore readGitIgnoreAtRoot reads contents from disk,0.014,gitignore,9,0.63
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.63
gitignore appendIgnoreRule appends one rule,0.105,gitignore,9,0.63
gitignore appendIgnoreRule appends multiple rules,0.108,gitignore,9,0.63
git/submodule listSubmodules returns the submodule entry,0.128,git/submodule,3,0.709
git/submodule listSubmodules returns the expected tag,0.19,git/submodule,3,0.709
git/submodule resetSubmodulePaths update submodule to original commit,0.349,git/submodule,3,0.709
git/log getCommits loads history,0.135,git/log,7,0.737
git/log getCommits handles repository with HEAD file on disk,0.109,git/log,7,0.737
git/log getCommits handles repository with signed commit and log.showSignature set,0.117,git/log,7,0.737
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.737
git/log getChangedFiles detects renames,0.109,git/log,7,0.737
git/log getChangedFiles detect copies,0.113,git/log,7,0.737
git/log getChangedFiles handles commit when HEAD exists on disk,0.054,git/log,7,0.737
git/merge merge and is successful returns true,0.044,git/merge,7,0.591
git/merge merge and is a noop returns false,0.055,git/merge,7,0.591
git/merge getMergeBase returns the common ancestor of two branches,0.069,git/merge,7,0.591
git/core error handling does not throw for errors that were expected,0.054,git/core,6,0.366
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.366
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.366
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.366
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.366
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.366
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.58
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.58
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.58
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.543
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.543
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.423
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.423
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.423
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.423
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.053,patch formatting,8,0.388
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.388
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.388
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.388
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.388
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.388
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.388
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.388
AppStore can select a repository,0.224,AppStore,5,0.279
git/for-each-ref getBranches fetches branches using for-each-ref,0.293,git/for-each-ref,3,0.467
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.467
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.467
git/reset reset can hard reset a repository,0.083,git/reset,2,0.126
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.308,git/rebase,21,7.558
git/rebase detect conflicts status detects REBASE_HEAD,0.266,git/rebase,21,7.558
git/rebase detect conflicts has conflicted files in working directory,0.261,git/rebase,21,7.558
git/rebase detect conflicts is a detached HEAD state,0.27,git/rebase,21,7.558
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.255,git/rebase,21,7.558
git/rebase abort after conflicts found no longer has working directory changes,0.253,git/rebase,21,7.558
git/rebase abort after conflicts found returns to the feature branch,0.256,git/rebase,21,7.558
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.334,git/rebase,21,7.558
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.319,git/rebase,21,7.558
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.32,git/rebase,21,7.558
git/rebase continue after resolving conflicts returns success,0.376,git/rebase,21,7.558
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.375,git/rebase,21,7.558
git/rebase continue after resolving conflicts no longer has working directory changes,0.371,git/rebase,21,7.558
git/rebase continue after resolving conflicts returns to the feature branch,0.387,git/rebase,21,7.558
git/rebase continue after resolving conflicts branch is now a different ref,0.382,git/rebase,21,7.558
git/rebase continue with additional changes unrelated to conflicted files returns success,0.381,git/rebase,21,7.558
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.558
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.391,git/rebase,21,7.558
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.39,git/rebase,21,7.558
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.393,git/rebase,21,7.558
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.368,git/rebase,21,7.558
git/commit createCommit normal commits the given files,0.122,git/commit,21,4.528
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.528
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.528
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.528
git/commit createCommit partials can commit some lines from new file,0.177,git/commit,21,4.528
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.528
git/commit createCommit partials can commit single delete from modified file,0.177,git/commit,21,4.528
git/commit createCommit partials can commit multiple hunks from modified file,0.192,git/commit,21,4.528
git/commit createCommit partials can commit some lines from deleted file,0.177,git/commit,21,4.528
git/commit createCommit partials can commit renames with modifications,0.188,git/commit,21,4.528
git/commit createCommit partials can commit renames with partially selected modifications,0.232,git/commit,21,4.528
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.528
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.24,git/commit,21,4.528
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.326,git/commit,21,4.528
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.323,git/commit,21,4.528
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.413,git/commit,21,4.528
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.416,git/commit,21,4.528
git/commit createMergeCommit with no changes throws an error,0.117,git/commit,21,4.528
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.528
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.172,git/commit,21,4.528
git/commit index corner cases file is deleted in index,0.173,git/commit,21,4.528
git/rebase can parse progress returns a value indicating conflicts were encountered,0.399,git/rebase,7,3.8
git/rebase can parse progress status detects REBASE_HEAD,0.411,git/rebase,7,3.8
git/rebase can parse progress is a detached HEAD state,0.404,git/rebase,7,3.8
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.827,git/rebase,7,3.8
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.866,git/rebase,7,3.8
git/rebase can parse progress for long rebase is a detached HEAD state,0.843,git/rebase,7,3.8
GitStore loadCommitBatch includes HEAD when loading commits,0.44,GitStore,11,2.672
GitStore can discard changes from a repository,0.171,GitStore,11,2.672
GitStore can discard a renamed file,0.154,GitStore,11,2.672
GitStore undo first commit reports the repository is unborn,0.194,GitStore,11,2.672
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.672
GitStore undo first commit clears the undo commit dialog,0.218,GitStore,11,2.672
GitStore undo first commit has no staged files,0.209,GitStore,11,2.672
GitStore repository with HEAD file can discard modified change cleanly,0.123,GitStore,11,2.672
git/status getStatus with conflicted repo parses conflicted files with markers,0.307,git/status,12,2.087
git/status getStatus with conflicted repo parses conflicted files without markers,0.307,git/status,12,2.087
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.406,git/status,12,2.087
git/status getStatus with conflicted repo parses resolved files,0.316,git/status,12,2.087
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.087
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.146,git/status,12,2.087
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.087
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.087
git/status getStatus with unconflicted repo reflects renames,0.123,git/status,12,2.087
git/status getStatus with unconflicted repo reflects copies,0.123,git/status,12,2.087
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.087
BranchPruner does nothing on non GitHub repositories,0.305,BranchPruner,6,2.027
BranchPruner prunes for GitHub repository,0.336,BranchPruner,6,2.027
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.275,BranchPruner,6,2.027
BranchPruner does not prune if there is no default branch,0.271,BranchPruner,6,2.027
BranchPruner does not prune reserved branches,0.342,BranchPruner,6,2.027
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.052,git/diff,19,1.925
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.925
git/diff getBlobImage retrieves valid image for modified file,0.1,git/diff,19,1.925
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.925
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.925
git/diff imageDiff changes for text are not set,0.094,git/diff,19,1.925
git/diff getWorkingDirectoryDiff counts lines for new file,0.09,git/diff,19,1.925
git/diff getWorkingDirectoryDiff counts lines for modified file,0.086,git/diff,19,1.925
git/diff getWorkingDirectoryDiff counts lines for staged file,0.085,git/diff,19,1.925
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.129,git/diff,19,1.925
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.154,git/diff,19,1.925
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.925
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.141,git/diff,19,1.925
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.125,git/diff,19,1.925
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.925
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.068,git/diff,19,1.925
git/diff getBinaryPaths in repo with text only files returns an empty array,0.091,git/diff,19,1.925
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.104,git/diff,19,1.925
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.925
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.545
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.545
git/branch tip returns detached for arbitrary checkout,0.059,git/branch,13,1.545
git/branch tip returns current branch when on a valid HEAD,0.083,git/branch,13,1.545
git/branch tip returns non-origin remote,0.088,git/branch,13,1.545
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.545
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.545
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.545
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.055,git/branch,13,1.545
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.085,git/branch,13,1.545
git/branch deleteBranch deletes local branches,0.128,git/branch,13,1.545
git/branch deleteBranch deletes remote branches,0.333,git/branch,13,1.545
git/branch deleteBranch handles attempted delete of removed remote branch,0.392,git/branch,13,1.545
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.376
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.139,git/stash,14,1.376
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.098,git/stash,14,1.376
git/checkout can checkout a valid branch name in an existing repository,0.125,git/checkout,6,0.988
git/checkout can checkout a branch when it exists on multiple remotes,0.127,git/checkout,6,0.988
git/checkout will fail when an existing branch matches the remote branch,0.117,git/checkout,6,0.988
git/checkout with submodules cleans up an submodule that no longer exists,0.299,git/checkout,6,0.988
git/checkout with submodules updates a changed submodule reference,0.248,git/checkout,6,0.988
git/reflog getRecentBranches returns the recently checked out branches,0.208,git/reflog,6,1.109
git/reflog getRecentBranches works after renaming a branch,0.193,git/reflog,6,1.109
git/reflog getRecentBranches returns a limited number of branches,0.251,git/reflog,6,1.109
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.159,git/reflog,6,1.109
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.187,git/reflog,6,1.109
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.109
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.429,formatPatch,5,1.075
git/config config looks up config values,0.054,git/config,12,0.821
git/config config returns null for undefined values,0.055,git/config,12,0.821
git/config global config getGlobalConfigPath gets the config path,0.07,git/config,12,0.821
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,12,0.821
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.066,git/config,12,0.821
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.059,git/config,12,0.821
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.061,git/config,12,0.821
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.06,git/config,12,0.821
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.061,git/config,12,0.821
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.066,git/config,12,0.821
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.821
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.821
git/log getCommits loads history,0.067,git/log,7,0.65
git/log getCommits handles repository with HEAD file on disk,0.098,git/log,7,0.65
git/log getCommits handles repository with signed commit and log.showSignature set,0.112,git/log,7,0.65
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.65
git/log getChangedFiles detects renames,0.098,git/log,7,0.65
git/log getChangedFiles detect copies,0.108,git/log,7,0.65
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.65
git/rev-parse isGitRepository should return true for a repository,0.053,git/rev-parse,10,0.788
git/rev-parse isGitRepository should return false for a directory,0.049,git/rev-parse,10,0.788
git/rev-parse isBareRepository returns false for default initialized repository,0.066,git/rev-parse,10,0.788
git/rev-parse isBareRepository returns true for initialized bare repository,0.074,git/rev-parse,10,0.788
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.788
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.788
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.068,git/rev-parse,10,0.788
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.058,git/rev-parse,10,0.788
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.055,git/rev-parse,10,0.788
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.212,git/rev-parse,10,0.788
git/submodule listSubmodules returns the submodule entry,0.135,git/submodule,3,0.724
git/submodule listSubmodules returns the expected tag,0.189,git/submodule,3,0.724
git/submodule resetSubmodulePaths update submodule to original commit,0.361,git/submodule,3,0.724
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.687
gitignore saveGitIgnore applies rule correctly to repository,0.105,gitignore,9,0.687
gitignore appendIgnoreRule appends one rule,0.118,gitignore,9,0.687
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.687
git/merge merge and is successful returns true,0.045,git/merge,7,0.586
git/merge merge and is a noop returns false,0.057,git/merge,7,0.586
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.586
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.574
git/remote findDefaultRemote returns origin when multiple remotes found,0.068,git/remote,11,0.574
git/remote findDefaultRemote returns something when origin removed,0.067,git/remote,11,0.574
git-lfs isUsingLFS returns false for repository not using LFS,0.057,git-lfs,9,0.557
git-lfs isUsingLFS returns true if LFS is tracking a path,0.078,git-lfs,9,0.557
git/for-each-ref getBranches fetches branches using for-each-ref,0.073,git/for-each-ref,3,0.246
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.246
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.246
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.411
Update remote url doesn't update the repository's remote url when the github url is the same,0.083,Update remote url,4,0.411
Update remote url doesn't update repository's remote url if protocols don't match,0.082,Update remote url,4,0.411
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.081,Update remote url,4,0.411
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.054,patch formatting,8,0.47
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.049,patch formatting,8,0.47
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.47
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.152,patch formatting,8,0.47
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.47
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.47
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.47
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.027,patch formatting,8,0.47
git/core error handling does not throw for errors that were expected,0.054,git/core,6,0.363
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.363
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.363
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.363
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.363
git/core config lock file error handling normalizes paths,0.041,git/core,6,0.363
AppStore can select a repository,0.224,AppStore,5,0.281
git/reset reset can hard reset a repository,0.301,git/reset,2,0.344
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.31,git/rebase,21,7.676
git/rebase detect conflicts status detects REBASE_HEAD,0.266,git/rebase,21,7.676
git/rebase detect conflicts has conflicted files in working directory,0.265,git/rebase,21,7.676
git/rebase detect conflicts is a detached HEAD state,0.275,git/rebase,21,7.676
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.263,git/rebase,21,7.676
git/rebase abort after conflicts found no longer has working directory changes,0.256,git/rebase,21,7.676
git/rebase abort after conflicts found returns to the feature branch,0.258,git/rebase,21,7.676
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.336,git/rebase,21,7.676
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.325,git/rebase,21,7.676
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.327,git/rebase,21,7.676
git/rebase continue after resolving conflicts returns success,0.38,git/rebase,21,7.676
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.382,git/rebase,21,7.676
git/rebase continue after resolving conflicts no longer has working directory changes,0.384,git/rebase,21,7.676
git/rebase continue after resolving conflicts returns to the feature branch,0.394,git/rebase,21,7.676
git/rebase continue after resolving conflicts branch is now a different ref,0.39,git/rebase,21,7.676
git/rebase continue with additional changes unrelated to conflicted files returns success,0.391,git/rebase,21,7.676
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.39,git/rebase,21,7.676
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.393,git/rebase,21,7.676
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.397,git/rebase,21,7.676
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.676
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.381,git/rebase,21,7.676
git/commit createCommit normal commits the given files,0.125,git/commit,21,4.611
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.611
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.611
git/commit createCommit normal can commit renames,0.158,git/commit,21,4.611
git/commit createCommit partials can commit some lines from new file,0.181,git/commit,21,4.611
git/commit createCommit partials can commit second hunk from modified file,0.199,git/commit,21,4.611
git/commit createCommit partials can commit single delete from modified file,0.18,git/commit,21,4.611
git/commit createCommit partials can commit multiple hunks from modified file,0.201,git/commit,21,4.611
git/commit createCommit partials can commit some lines from deleted file,0.187,git/commit,21,4.611
git/commit createCommit partials can commit renames with modifications,0.191,git/commit,21,4.611
git/commit createCommit partials can commit renames with partially selected modifications,0.239,git/commit,21,4.611
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.611
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.24,git/commit,21,4.611
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.34,git/commit,21,4.611
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.332,git/commit,21,4.611
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.409,git/commit,21,4.611
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.419,git/commit,21,4.611
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.611
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.611
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.611
git/commit index corner cases file is deleted in index,0.18,git/commit,21,4.611
git/rebase can parse progress returns a value indicating conflicts were encountered,0.404,git/rebase,7,3.827
git/rebase can parse progress status detects REBASE_HEAD,0.403,git/rebase,7,3.827
git/rebase can parse progress is a detached HEAD state,0.406,git/rebase,7,3.827
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.86,git/rebase,7,3.827
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.838,git/rebase,7,3.827
git/rebase can parse progress for long rebase is a detached HEAD state,0.861,git/rebase,7,3.827
GitStore loadCommitBatch includes HEAD when loading commits,0.38,GitStore,11,2.574
GitStore can discard changes from a repository,0.168,GitStore,11,2.574
GitStore can discard a renamed file,0.149,GitStore,11,2.574
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.574
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.574
GitStore undo first commit clears the undo commit dialog,0.22,GitStore,11,2.574
GitStore undo first commit has no staged files,0.208,GitStore,11,2.574
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.574
git/status getStatus with conflicted repo parses conflicted files with markers,0.346,git/status,12,2.119
git/status getStatus with conflicted repo parses conflicted files without markers,0.298,git/status,12,2.119
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.418,git/status,12,2.119
git/status getStatus with conflicted repo parses resolved files,0.298,git/status,12,2.119
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,2.119
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.15,git/status,12,2.119
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.119
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.065,git/status,12,2.119
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.119
git/status getStatus with unconflicted repo reflects copies,0.119,git/status,12,2.119
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.119
BranchPruner does nothing on non GitHub repositories,0.273,BranchPruner,6,1.894
BranchPruner prunes for GitHub repository,0.347,BranchPruner,6,1.894
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.267,BranchPruner,6,1.894
BranchPruner does not prune if there is no default branch,0.286,BranchPruner,6,1.894
BranchPruner does not prune reserved branches,0.308,BranchPruner,6,1.894
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.046,git/diff,19,1.946
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.946
git/diff getBlobImage retrieves valid image for modified file,0.092,git/diff,19,1.946
git/diff getBlobImage retrieves valid images for deleted file,0.068,git/diff,19,1.946
git/diff imageDiff changes for images are set,0.08,git/diff,19,1.946
git/diff imageDiff changes for text are not set,0.097,git/diff,19,1.946
git/diff getWorkingDirectoryDiff counts lines for new file,0.096,git/diff,19,1.946
git/diff getWorkingDirectoryDiff counts lines for modified file,0.095,git/diff,19,1.946
git/diff getWorkingDirectoryDiff counts lines for staged file,0.094,git/diff,19,1.946
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.128,git/diff,19,1.946
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.153,git/diff,19,1.946
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.158,git/diff,19,1.946
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.144,git/diff,19,1.946
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.121,git/diff,19,1.946
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.946
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.946
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.946
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,1.946
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.127,git/diff,19,1.946
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.542
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,13,1.542
git/branch tip returns detached for arbitrary checkout,0.059,git/branch,13,1.542
git/branch tip returns current branch when on a valid HEAD,0.084,git/branch,13,1.542
git/branch tip returns non-origin remote,0.084,git/branch,13,1.542
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.093,git/branch,13,1.542
git/branch getBranchesPointedAt in a local repo finds one branch name,0.061,git/branch,13,1.542
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.542
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.056,git/branch,13,1.542
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.089,git/branch,13,1.542
git/branch deleteBranch deletes local branches,0.125,git/branch,13,1.542
git/branch deleteBranch deletes remote branches,0.327,git/branch,13,1.542
git/branch deleteBranch handles attempted delete of removed remote branch,0.385,git/branch,13,1.542
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.107,git/stash,14,1.354
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.139,git/stash,14,1.354
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.354
git/reflog getRecentBranches returns the recently checked out branches,0.151,git/reflog,6,1.081
git/reflog getRecentBranches works after renaming a branch,0.189,git/reflog,6,1.081
git/reflog getRecentBranches returns a limited number of branches,0.257,git/reflog,6,1.081
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.155,git/reflog,6,1.081
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.208,git/reflog,6,1.081
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.08,git/reflog,6,1.081
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.39,formatPatch,5,1.052
git/checkout can checkout a valid branch name in an existing repository,0.129,git/checkout,6,1.022
git/checkout can checkout a branch when it exists on multiple remotes,0.134,git/checkout,6,1.022
git/checkout will fail when an existing branch matches the remote branch,0.124,git/checkout,6,1.022
git/checkout with submodules cleans up an submodule that no longer exists,0.311,git/checkout,6,1.022
git/checkout with submodules updates a changed submodule reference,0.249,git/checkout,6,1.022
git/config config looks up config values,0.055,git/config,12,0.879
git/config config returns null for undefined values,0.058,git/config,12,0.879
git/config global config getGlobalConfigPath gets the config path,0.07,git/config,12,0.879
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.075,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.879
git/rev-parse isGitRepository should return true for a repository,0.059,git/rev-parse,10,0.792
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.792
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.792
git/rev-parse isBareRepository returns true for initialized bare repository,0.072,git/rev-parse,10,0.792
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.792
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.792
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.792
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.792
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.063,git/rev-parse,10,0.792
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.199,git/rev-parse,10,0.792
git/submodule listSubmodules returns the submodule entry,0.141,git/submodule,3,0.829
git/submodule listSubmodules returns the expected tag,0.199,git/submodule,3,0.829
git/submodule resetSubmodulePaths update submodule to original commit,0.447,git/submodule,3,0.829
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.805
gitignore saveGitIgnore applies rule correctly to repository,0.106,gitignore,9,0.805
gitignore appendIgnoreRule appends one rule,0.127,gitignore,9,0.805
gitignore appendIgnoreRule appends multiple rules,0.133,gitignore,9,0.805
git/log getCommits loads history,0.069,git/log,7,0.675
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.675
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.675
git/log getChangedFiles loads the files changed in the commit,0.061,git/log,7,0.675
git/log getChangedFiles detects renames,0.109,git/log,7,0.675
git/log getChangedFiles detect copies,0.115,git/log,7,0.675
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.675
git/merge merge and is successful returns true,0.046,git/merge,7,0.623
git/merge merge and is a noop returns false,0.064,git/merge,7,0.623
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.623
git/remote getRemotes should return both remotes,0.063,git/remote,11,0.591
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.591
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.591
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.539
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.539
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.047,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.047,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.05,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile includes empty context lines,0.034,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.027,patch formatting,8,0.364
Update remote url updates the repository's remote url when the github url changes,0.107,Update remote url,4,0.41
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.41
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.41
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.41
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.383
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.383
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.383
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.383
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.383
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.383
git/reset reset can hard reset a repository,0.079,git/reset,2,0.118
AppStore can select a repository,0.23,AppStore,5,0.287
git/for-each-ref getBranches fetches branches using for-each-ref,0.396,git/for-each-ref,3,0.574
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.574
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.574
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.306,git/rebase,21,7.604
git/rebase detect conflicts status detects REBASE_HEAD,0.268,git/rebase,21,7.604
git/rebase detect conflicts has conflicted files in working directory,0.258,git/rebase,21,7.604
git/rebase detect conflicts is a detached HEAD state,0.262,git/rebase,21,7.604
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.261,git/rebase,21,7.604
git/rebase abort after conflicts found no longer has working directory changes,0.253,git/rebase,21,7.604
git/rebase abort after conflicts found returns to the feature branch,0.261,git/rebase,21,7.604
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.336,git/rebase,21,7.604
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.318,git/rebase,21,7.604
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.324,git/rebase,21,7.604
git/rebase continue after resolving conflicts returns success,0.375,git/rebase,21,7.604
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.382,git/rebase,21,7.604
git/rebase continue after resolving conflicts no longer has working directory changes,0.376,git/rebase,21,7.604
git/rebase continue after resolving conflicts returns to the feature branch,0.385,git/rebase,21,7.604
git/rebase continue after resolving conflicts branch is now a different ref,0.395,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files returns success,0.38,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.389,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.39,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.392,git/rebase,21,7.604
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.399,git/rebase,21,7.604
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.373,git/rebase,21,7.604
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.592
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.592
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.592
git/commit createCommit normal can commit renames,0.161,git/commit,21,4.592
git/commit createCommit partials can commit some lines from new file,0.193,git/commit,21,4.592
git/commit createCommit partials can commit second hunk from modified file,0.203,git/commit,21,4.592
git/commit createCommit partials can commit single delete from modified file,0.174,git/commit,21,4.592
git/commit createCommit partials can commit multiple hunks from modified file,0.192,git/commit,21,4.592
git/commit createCommit partials can commit some lines from deleted file,0.183,git/commit,21,4.592
git/commit createCommit partials can commit renames with modifications,0.19,git/commit,21,4.592
git/commit createCommit partials can commit renames with partially selected modifications,0.235,git/commit,21,4.592
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.592
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.239,git/commit,21,4.592
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.346,git/commit,21,4.592
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.331,git/commit,21,4.592
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.416,git/commit,21,4.592
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.411,git/commit,21,4.592
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.592
git/commit index corner cases can commit when staged new file is then deleted,0.157,git/commit,21,4.592
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.177,git/commit,21,4.592
git/commit index corner cases file is deleted in index,0.178,git/commit,21,4.592
git/rebase can parse progress returns a value indicating conflicts were encountered,0.399,git/rebase,7,3.776
git/rebase can parse progress status detects REBASE_HEAD,0.4,git/rebase,7,3.776
git/rebase can parse progress is a detached HEAD state,0.4,git/rebase,7,3.776
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.84,git/rebase,7,3.776
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.835,git/rebase,7,3.776
git/rebase can parse progress for long rebase is a detached HEAD state,0.85,git/rebase,7,3.776
GitStore loadCommitBatch includes HEAD when loading commits,0.43,GitStore,11,2.68
GitStore can discard changes from a repository,0.172,GitStore,11,2.68
GitStore can discard a renamed file,0.169,GitStore,11,2.68
GitStore undo first commit reports the repository is unborn,0.191,GitStore,11,2.68
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.68
GitStore undo first commit clears the undo commit dialog,0.22,GitStore,11,2.68
GitStore undo first commit has no staged files,0.211,GitStore,11,2.68
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.68
git/status getStatus with conflicted repo parses conflicted files with markers,0.307,git/status,12,2.06
git/status getStatus with conflicted repo parses conflicted files without markers,0.312,git/status,12,2.06
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.412,git/status,12,2.06
git/status getStatus with conflicted repo parses resolved files,0.304,git/status,12,2.06
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.06
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.147,git/status,12,2.06
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,2.06
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.053,git/status,12,2.06
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.06
git/status getStatus with unconflicted repo reflects copies,0.113,git/status,12,2.06
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.06
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.08,git/diff,19,2.053
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,2.053
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,2.053
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,2.053
git/diff imageDiff changes for images are set,0.087,git/diff,19,2.053
git/diff imageDiff changes for text are not set,0.097,git/diff,19,2.053
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,2.053
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,2.053
git/diff getWorkingDirectoryDiff counts lines for staged file,0.088,git/diff,19,2.053
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.13,git/diff,19,2.053
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.169,git/diff,19,2.053
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.176,git/diff,19,2.053
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.143,git/diff,19,2.053
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.142,git/diff,19,2.053
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.095,git/diff,19,2.053
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,2.053
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,2.053
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.11,git/diff,19,2.053
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.165,git/diff,19,2.053
BranchPruner does nothing on non GitHub repositories,0.227,BranchPruner,6,1.662
BranchPruner prunes for GitHub repository,0.284,BranchPruner,6,1.662
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.269,BranchPruner,6,1.662
BranchPruner does not prune if there is no default branch,0.221,BranchPruner,6,1.662
BranchPruner does not prune reserved branches,0.274,BranchPruner,6,1.662
git/branch tip returns unborn for new repository,0.024,git/branch,13,1.362
git/branch tip returns correct ref if checkout occurs,0.038,git/branch,13,1.362
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.362
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,13,1.362
git/branch tip returns non-origin remote,0.074,git/branch,13,1.362
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,13,1.362
git/branch getBranchesPointedAt in a local repo finds one branch name,0.051,git/branch,13,1.362
git/branch getBranchesPointedAt in a local repo finds no branch names,0.047,git/branch,13,1.362
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.045,git/branch,13,1.362
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,13,1.362
git/branch deleteBranch deletes local branches,0.114,git/branch,13,1.362
git/branch deleteBranch deletes remote branches,0.289,git/branch,13,1.362
git/branch deleteBranch handles attempted delete of removed remote branch,0.347,git/branch,13,1.362
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.099,git/stash,14,1.262
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.132,git/stash,14,1.262
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.091,git/stash,14,1.262
git/reflog getRecentBranches returns the recently checked out branches,0.148,git/reflog,6,1.024
git/reflog getRecentBranches works after renaming a branch,0.186,git/reflog,6,1.024
git/reflog getRecentBranches returns a limited number of branches,0.242,git/reflog,6,1.024
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.156,git/reflog,6,1.024
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.181,git/reflog,6,1.024
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.067,git/reflog,6,1.024
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.46,formatPatch,5,1.104
git/checkout can checkout a valid branch name in an existing repository,0.126,git/checkout,6,1.047
git/checkout can checkout a branch when it exists on multiple remotes,0.132,git/checkout,6,1.047
git/checkout will fail when an existing branch matches the remote branch,0.125,git/checkout,6,1.047
git/checkout with submodules cleans up an submodule that no longer exists,0.323,git/checkout,6,1.047
git/checkout with submodules updates a changed submodule reference,0.268,git/checkout,6,1.047
git/config config looks up config values,0.053,git/config,12,0.872
git/config config returns null for undefined values,0.055,git/config,12,0.872
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.872
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,12,0.872
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.076,git/config,12,0.872
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.872
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.872
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.872
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.073,git/config,12,0.872
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.872
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.872
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.872
git/submodule listSubmodules returns the submodule entry,0.145,git/submodule,3,0.744
git/submodule listSubmodules returns the expected tag,0.204,git/submodule,3,0.744
git/submodule resetSubmodulePaths update submodule to original commit,0.352,git/submodule,3,0.744
gitignore readGitIgnoreAtRoot reads contents from disk,0.094,gitignore,9,0.753
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.753
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.753
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.753
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.788
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.788
git/rev-parse isBareRepository returns false for default initialized repository,0.066,git/rev-parse,10,0.788
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.788
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.788
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.788
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.071,git/rev-parse,10,0.788
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.058,git/rev-parse,10,0.788
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.788
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.19,git/rev-parse,10,0.788
git/log getCommits loads history,0.068,git/log,7,0.651
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.651
git/log getCommits handles repository with signed commit and log.showSignature set,0.115,git/log,7,0.651
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.651
git/log getChangedFiles detects renames,0.099,git/log,7,0.651
git/log getChangedFiles detect copies,0.113,git/log,7,0.651
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.651
git/merge merge and is successful returns true,0.045,git/merge,7,0.609
git/merge merge and is a noop returns false,0.061,git/merge,7,0.609
git/merge getMergeBase returns the common ancestor of two branches,0.074,git/merge,7,0.609
git/remote getRemotes should return both remotes,0.066,git/remote,11,0.584
git/remote findDefaultRemote returns origin when multiple remotes found,0.067,git/remote,11,0.584
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.584
git/for-each-ref getBranches fetches branches using for-each-ref,0.077,git/for-each-ref,3,0.251
git/for-each-ref getBranches should return empty list for empty repo,0.076,git/for-each-ref,3,0.251
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.251
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.59
git-lfs isUsingLFS returns true if LFS is tracking a path,0.084,git-lfs,9,0.59
Update remote url updates the repository's remote url when the github url changes,0.109,Update remote url,4,0.401
Update remote url doesn't update the repository's remote url when the github url is the same,0.08,Update remote url,4,0.401
Update remote url doesn't update repository's remote url if protocols don't match,0.08,Update remote url,4,0.401
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.081,Update remote url,4,0.401
git/core error handling does not throw for errors that were expected,0.055,git/core,6,0.355
git/core error handling throws for errors that were not expected,0.053,git/core,6,0.355
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.355
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.355
git/core config lock file error handling can parse lock file path from stderr,0.058,git/core,6,0.355
git/core config lock file error handling normalizes paths,0.041,git/core,6,0.355
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.046,patch formatting,8,0.35
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.35
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.35
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.35
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.034,patch formatting,8,0.35
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.35
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.35
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.35
AppStore can select a repository,0.228,AppStore,5,0.283
git/reset reset can hard reset a repository,0.303,git/reset,2,0.346
validatedRepositoryPath returns the path to the repository,0.157,validatedRepositoryPath,2,0.213
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.064
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.31,git/rebase,21,7.647
git/rebase detect conflicts status detects REBASE_HEAD,0.265,git/rebase,21,7.647
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,7.647
git/rebase detect conflicts is a detached HEAD state,0.267,git/rebase,21,7.647
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.263,git/rebase,21,7.647
git/rebase abort after conflicts found no longer has working directory changes,0.256,git/rebase,21,7.647
git/rebase abort after conflicts found returns to the feature branch,0.258,git/rebase,21,7.647
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.33,git/rebase,21,7.647
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.326,git/rebase,21,7.647
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.329,git/rebase,21,7.647
git/rebase continue after resolving conflicts returns success,0.376,git/rebase,21,7.647
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.375,git/rebase,21,7.647
git/rebase continue after resolving conflicts no longer has working directory changes,0.381,git/rebase,21,7.647
git/rebase continue after resolving conflicts returns to the feature branch,0.392,git/rebase,21,7.647
git/rebase continue after resolving conflicts branch is now a different ref,0.39,git/rebase,21,7.647
git/rebase continue with additional changes unrelated to conflicted files returns success,0.387,git/rebase,21,7.647
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.392,git/rebase,21,7.647
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.398,git/rebase,21,7.647
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.396,git/rebase,21,7.647
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.403,git/rebase,21,7.647
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.374,git/rebase,21,7.647
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.651
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.651
git/commit createCommit normal can commit for empty repository,0.134,git/commit,21,4.651
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.651
git/commit createCommit partials can commit some lines from new file,0.199,git/commit,21,4.651
git/commit createCommit partials can commit second hunk from modified file,0.202,git/commit,21,4.651
git/commit createCommit partials can commit single delete from modified file,0.18,git/commit,21,4.651
git/commit createCommit partials can commit multiple hunks from modified file,0.199,git/commit,21,4.651
git/commit createCommit partials can commit some lines from deleted file,0.186,git/commit,21,4.651
git/commit createCommit partials can commit renames with modifications,0.192,git/commit,21,4.651
git/commit createCommit partials can commit renames with partially selected modifications,0.238,git/commit,21,4.651
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.651
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.241,git/commit,21,4.651
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.342,git/commit,21,4.651
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.346,git/commit,21,4.651
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.413,git/commit,21,4.651
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.417,git/commit,21,4.651
git/commit createMergeCommit with no changes throws an error,0.117,git/commit,21,4.651
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.651
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.181,git/commit,21,4.651
git/commit index corner cases file is deleted in index,0.188,git/commit,21,4.651
git/rebase can parse progress returns a value indicating conflicts were encountered,0.405,git/rebase,7,3.874
git/rebase can parse progress status detects REBASE_HEAD,0.416,git/rebase,7,3.874
git/rebase can parse progress is a detached HEAD state,0.415,git/rebase,7,3.874
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.863,git/rebase,7,3.874
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.855,git/rebase,7,3.874
git/rebase can parse progress for long rebase is a detached HEAD state,0.862,git/rebase,7,3.874
GitStore loadCommitBatch includes HEAD when loading commits,0.397,GitStore,11,2.627
GitStore can discard changes from a repository,0.17,GitStore,11,2.627
GitStore can discard a renamed file,0.152,GitStore,11,2.627
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.627
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.627
GitStore undo first commit clears the undo commit dialog,0.229,GitStore,11,2.627
GitStore undo first commit has no staged files,0.212,GitStore,11,2.627
GitStore repository with HEAD file can discard modified change cleanly,0.119,GitStore,11,2.627
git/status getStatus with conflicted repo parses conflicted files with markers,0.346,git/status,12,2.074
git/status getStatus with conflicted repo parses conflicted files without markers,0.305,git/status,12,2.074
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.393,git/status,12,2.074
git/status getStatus with conflicted repo parses resolved files,0.3,git/status,12,2.074
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.12,git/status,12,2.074
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.155,git/status,12,2.074
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.074
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.055,git/status,12,2.074
git/status getStatus with unconflicted repo reflects renames,0.112,git/status,12,2.074
git/status getStatus with unconflicted repo reflects copies,0.108,git/status,12,2.074
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.054,git/status,12,2.074
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,1.914
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.914
git/diff getBlobImage retrieves valid image for modified file,0.051,git/diff,19,1.914
git/diff getBlobImage retrieves valid images for deleted file,0.068,git/diff,19,1.914
git/diff imageDiff changes for images are set,0.125,git/diff,19,1.914
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.914
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,1.914
git/diff getWorkingDirectoryDiff counts lines for modified file,0.099,git/diff,19,1.914
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,1.914
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,1.914
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.147,git/diff,19,1.914
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.153,git/diff,19,1.914
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.136,git/diff,19,1.914
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.914
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.086,git/diff,19,1.914
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.068,git/diff,19,1.914
git/diff getBinaryPaths in repo with text only files returns an empty array,0.098,git/diff,19,1.914
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.11,git/diff,19,1.914
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.914
BranchPruner does nothing on non GitHub repositories,0.253,BranchPruner,6,1.741
BranchPruner prunes for GitHub repository,0.288,BranchPruner,6,1.741
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.251,BranchPruner,6,1.741
BranchPruner does not prune if there is no default branch,0.236,BranchPruner,6,1.741
BranchPruner does not prune reserved branches,0.292,BranchPruner,6,1.741
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.397
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.397
git/branch tip returns detached for arbitrary checkout,0.054,git/branch,13,1.397
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,13,1.397
git/branch tip returns non-origin remote,0.074,git/branch,13,1.397
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,13,1.397
git/branch getBranchesPointedAt in a local repo finds one branch name,0.051,git/branch,13,1.397
git/branch getBranchesPointedAt in a local repo finds no branch names,0.047,git/branch,13,1.397
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.046,git/branch,13,1.397
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.083,git/branch,13,1.397
git/branch deleteBranch deletes local branches,0.112,git/branch,13,1.397
git/branch deleteBranch deletes remote branches,0.303,git/branch,13,1.397
git/branch deleteBranch handles attempted delete of removed remote branch,0.358,git/branch,13,1.397
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.106,git/stash,14,1.336
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.14,git/stash,14,1.336
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.336
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.427,formatPatch,5,1.063
git/checkout can checkout a valid branch name in an existing repository,0.124,git/checkout,6,1.024
git/checkout can checkout a branch when it exists on multiple remotes,0.129,git/checkout,6,1.024
git/checkout will fail when an existing branch matches the remote branch,0.121,git/checkout,6,1.024
git/checkout with submodules cleans up an submodule that no longer exists,0.305,git/checkout,6,1.024
git/checkout with submodules updates a changed submodule reference,0.273,git/checkout,6,1.024
git/reflog getRecentBranches returns the recently checked out branches,0.159,git/reflog,6,1.125
git/reflog getRecentBranches works after renaming a branch,0.207,git/reflog,6,1.125
git/reflog getRecentBranches returns a limited number of branches,0.272,git/reflog,6,1.125
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.166,git/reflog,6,1.125
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.204,git/reflog,6,1.125
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.125
git/config config looks up config values,0.056,git/config,12,0.853
git/config config returns null for undefined values,0.052,git/config,12,0.853
git/config global config getGlobalConfigPath gets the config path,0.062,git/config,12,0.853
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.067,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.067,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.073,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.853
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.853
git/rev-parse isGitRepository should return true for a repository,0.059,git/rev-parse,10,0.821
git/rev-parse isGitRepository should return false for a directory,0.061,git/rev-parse,10,0.821
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.821
git/rev-parse isBareRepository returns true for initialized bare repository,0.072,git/rev-parse,10,0.821
git/rev-parse isBareRepository returns false for empty directory,0.064,git/rev-parse,10,0.821
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.821
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.821
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.06,git/rev-parse,10,0.821
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.821
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.204,git/rev-parse,10,0.821
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.743
gitignore saveGitIgnore applies rule correctly to repository,0.108,gitignore,9,0.743
gitignore appendIgnoreRule appends one rule,0.129,gitignore,9,0.743
gitignore appendIgnoreRule appends multiple rules,0.135,gitignore,9,0.743
git/submodule listSubmodules returns the submodule entry,0.139,git/submodule,3,0.763
git/submodule listSubmodules returns the expected tag,0.2,git/submodule,3,0.763
git/submodule resetSubmodulePaths update submodule to original commit,0.38,git/submodule,3,0.763
git/log getCommits loads history,0.073,git/log,7,0.658
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.658
git/log getCommits handles repository with signed commit and log.showSignature set,0.117,git/log,7,0.658
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.658
git/log getChangedFiles detects renames,0.101,git/log,7,0.658
git/log getChangedFiles detect copies,0.106,git/log,7,0.658
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.658
git/merge merge and is successful returns true,0.044,git/merge,7,0.653
git/merge merge and is a noop returns false,0.061,git/merge,7,0.653
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.653
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.595
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.595
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.642
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.642
git/remote findDefaultRemote returns something when origin removed,0.075,git/remote,11,0.642
Update remote url updates the repository's remote url when the github url changes,0.118,Update remote url,4,0.426
Update remote url doesn't update the repository's remote url when the github url is the same,0.092,Update remote url,4,0.426
Update remote url doesn't update repository's remote url if protocols don't match,0.083,Update remote url,4,0.426
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.082,Update remote url,4,0.426
git/core error handling does not throw for errors that were expected,0.054,git/core,6,0.369
git/core error handling throws for errors that were not expected,0.061,git/core,6,0.369
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.369
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.369
git/core config lock file error handling can parse lock file path from stderr,0.058,git/core,6,0.369
git/core config lock file error handling normalizes paths,0.042,git/core,6,0.369
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.056,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.376
git/reset reset can hard reset a repository,0.08,git/reset,2,0.119
AppStore can select a repository,0.27,AppStore,5,0.328
git/for-each-ref getBranches fetches branches using for-each-ref,0.256,git/for-each-ref,3,0.437
git/for-each-ref getBranches should return empty list for empty repo,0.079,git/for-each-ref,3,0.437
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.063,git/for-each-ref,3,0.437
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.116
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.02,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.319,git/rebase,21,7.574
git/rebase detect conflicts status detects REBASE_HEAD,0.263,git/rebase,21,7.574
git/rebase detect conflicts has conflicted files in working directory,0.259,git/rebase,21,7.574
git/rebase detect conflicts is a detached HEAD state,0.262,git/rebase,21,7.574
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.263,git/rebase,21,7.574
git/rebase abort after conflicts found no longer has working directory changes,0.256,git/rebase,21,7.574
git/rebase abort after conflicts found returns to the feature branch,0.256,git/rebase,21,7.574
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.336,git/rebase,21,7.574
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.323,git/rebase,21,7.574
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.321,git/rebase,21,7.574
git/rebase continue after resolving conflicts returns success,0.373,git/rebase,21,7.574
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.375,git/rebase,21,7.574
git/rebase continue after resolving conflicts no longer has working directory changes,0.378,git/rebase,21,7.574
git/rebase continue after resolving conflicts returns to the feature branch,0.389,git/rebase,21,7.574
git/rebase continue after resolving conflicts branch is now a different ref,0.39,git/rebase,21,7.574
git/rebase continue with additional changes unrelated to conflicted files returns success,0.377,git/rebase,21,7.574
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.388,git/rebase,21,7.574
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.385,git/rebase,21,7.574
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.394,git/rebase,21,7.574
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.399,git/rebase,21,7.574
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.367,git/rebase,21,7.574
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.511
git/commit createCommit normal commit does not strip commentary by default,0.105,git/commit,21,4.511
git/commit createCommit normal can commit for empty repository,0.135,git/commit,21,4.511
git/commit createCommit normal can commit renames,0.152,git/commit,21,4.511
git/commit createCommit partials can commit some lines from new file,0.177,git/commit,21,4.511
git/commit createCommit partials can commit second hunk from modified file,0.189,git/commit,21,4.511
git/commit createCommit partials can commit single delete from modified file,0.174,git/commit,21,4.511
git/commit createCommit partials can commit multiple hunks from modified file,0.193,git/commit,21,4.511
git/commit createCommit partials can commit some lines from deleted file,0.184,git/commit,21,4.511
git/commit createCommit partials can commit renames with modifications,0.189,git/commit,21,4.511
git/commit createCommit partials can commit renames with partially selected modifications,0.233,git/commit,21,4.511
git/commit createCommit with a merge conflict creates a merge commit,0.261,git/commit,21,4.511
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.239,git/commit,21,4.511
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.338,git/commit,21,4.511
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.333,git/commit,21,4.511
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.409,git/commit,21,4.511
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.402,git/commit,21,4.511
git/commit createMergeCommit with no changes throws an error,0.103,git/commit,21,4.511
git/commit index corner cases can commit when staged new file is then deleted,0.153,git/commit,21,4.511
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.511
git/commit index corner cases file is deleted in index,0.18,git/commit,21,4.511
git/rebase can parse progress returns a value indicating conflicts were encountered,0.398,git/rebase,7,3.779
git/rebase can parse progress status detects REBASE_HEAD,0.402,git/rebase,7,3.779
git/rebase can parse progress is a detached HEAD state,0.398,git/rebase,7,3.779
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.842,git/rebase,7,3.779
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.841,git/rebase,7,3.779
git/rebase can parse progress for long rebase is a detached HEAD state,0.843,git/rebase,7,3.779
GitStore loadCommitBatch includes HEAD when loading commits,0.398,GitStore,11,2.607
GitStore can discard changes from a repository,0.171,GitStore,11,2.607
GitStore can discard a renamed file,0.149,GitStore,11,2.607
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.607
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.607
GitStore undo first commit clears the undo commit dialog,0.221,GitStore,11,2.607
GitStore undo first commit has no staged files,0.211,GitStore,11,2.607
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.607
git/status getStatus with conflicted repo parses conflicted files with markers,0.307,git/status,12,2.072
git/status getStatus with conflicted repo parses conflicted files without markers,0.314,git/status,12,2.072
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.406,git/status,12,2.072
git/status getStatus with conflicted repo parses resolved files,0.311,git/status,12,2.072
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.124,git/status,12,2.072
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.072
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.072
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.072
git/status getStatus with unconflicted repo reflects renames,0.115,git/status,12,2.072
git/status getStatus with unconflicted repo reflects copies,0.111,git/status,12,2.072
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.072
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.081,git/diff,19,2.012
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,2.012
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,2.012
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,2.012
git/diff imageDiff changes for images are set,0.081,git/diff,19,2.012
git/diff imageDiff changes for text are not set,0.093,git/diff,19,2.012
git/diff getWorkingDirectoryDiff counts lines for new file,0.089,git/diff,19,2.012
git/diff getWorkingDirectoryDiff counts lines for modified file,0.1,git/diff,19,2.012
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,2.012
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.13,git/diff,19,2.012
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.172,git/diff,19,2.012
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.174,git/diff,19,2.012
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.141,git/diff,19,2.012
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.141,git/diff,19,2.012
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.098,git/diff,19,2.012
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,2.012
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,2.012
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,2.012
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.129,git/diff,19,2.012
BranchPruner does nothing on non GitHub repositories,0.294,BranchPruner,6,1.754
BranchPruner prunes for GitHub repository,0.302,BranchPruner,6,1.754
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.235,BranchPruner,6,1.754
BranchPruner does not prune if there is no default branch,0.227,BranchPruner,6,1.754
BranchPruner does not prune reserved branches,0.284,BranchPruner,6,1.754
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.465
git/branch tip returns correct ref if checkout occurs,0.039,git/branch,13,1.465
git/branch tip returns detached for arbitrary checkout,0.061,git/branch,13,1.465
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.465
git/branch tip returns non-origin remote,0.084,git/branch,13,1.465
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.465
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.465
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.465
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.465
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.089,git/branch,13,1.465
git/branch deleteBranch deletes local branches,0.12,git/branch,13,1.465
git/branch deleteBranch deletes remote branches,0.305,git/branch,13,1.465
git/branch deleteBranch handles attempted delete of removed remote branch,0.361,git/branch,13,1.465
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.104,git/stash,14,1.31
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.132,git/stash,14,1.31
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.095,git/stash,14,1.31
git/reflog getRecentBranches returns the recently checked out branches,0.151,git/reflog,6,1.039
git/reflog getRecentBranches works after renaming a branch,0.189,git/reflog,6,1.039
git/reflog getRecentBranches returns a limited number of branches,0.245,git/reflog,6,1.039
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.153,git/reflog,6,1.039
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.187,git/reflog,6,1.039
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.07,git/reflog,6,1.039
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.458,formatPatch,5,1.085
git/checkout can checkout a valid branch name in an existing repository,0.124,git/checkout,6,1.06
git/checkout can checkout a branch when it exists on multiple remotes,0.132,git/checkout,6,1.06
git/checkout will fail when an existing branch matches the remote branch,0.124,git/checkout,6,1.06
git/checkout with submodules cleans up an submodule that no longer exists,0.319,git/checkout,6,1.06
git/checkout with submodules updates a changed submodule reference,0.289,git/checkout,6,1.06
git/config config looks up config values,0.056,git/config,12,0.887
git/config config returns null for undefined values,0.058,git/config,12,0.887
git/config global config getGlobalConfigPath gets the config path,0.068,git/config,12,0.887
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.887
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.075,git/config,12,0.887
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.887
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.887
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.075,git/config,12,0.887
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,0.887
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.887
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.887
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.887
git/rev-parse isGitRepository should return true for a repository,0.054,git/rev-parse,10,0.763
git/rev-parse isGitRepository should return false for a directory,0.05,git/rev-parse,10,0.763
git/rev-parse isBareRepository returns false for default initialized repository,0.063,git/rev-parse,10,0.763
git/rev-parse isBareRepository returns true for initialized bare repository,0.065,git/rev-parse,10,0.763
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.763
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.763
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.763
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.763
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.763
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.194,git/rev-parse,10,0.763
git/submodule listSubmodules returns the submodule entry,0.129,git/submodule,3,0.763
git/submodule listSubmodules returns the expected tag,0.187,git/submodule,3,0.763
git/submodule resetSubmodulePaths update submodule to original commit,0.407,git/submodule,3,0.763
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.717
gitignore saveGitIgnore applies rule correctly to repository,0.108,gitignore,9,0.717
gitignore appendIgnoreRule appends one rule,0.127,gitignore,9,0.717
gitignore appendIgnoreRule appends multiple rules,0.128,gitignore,9,0.717
git/log getCommits loads history,0.067,git/log,7,0.674
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.674
git/log getCommits handles repository with signed commit and log.showSignature set,0.123,git/log,7,0.674
git/log getChangedFiles loads the files changed in the commit,0.064,git/log,7,0.674
git/log getChangedFiles detects renames,0.106,git/log,7,0.674
git/log getChangedFiles detect copies,0.114,git/log,7,0.674
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.674
git/merge merge and is successful returns true,0.046,git/merge,7,0.647
git/merge merge and is a noop returns false,0.062,git/merge,7,0.647
git/merge getMergeBase returns the common ancestor of two branches,0.075,git/merge,7,0.647
git/remote getRemotes should return both remotes,0.138,git/remote,11,0.701
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,11,0.701
git/remote findDefaultRemote returns something when origin removed,0.073,git/remote,11,0.701
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.579
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.579
git/for-each-ref getBranches fetches branches using for-each-ref,0.077,git/for-each-ref,3,0.253
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.253
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.253
Update remote url updates the repository's remote url when the github url changes,0.116,Update remote url,4,0.424
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.424
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.424
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.424
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.027,patch formatting,8,0.371
git/core error handling does not throw for errors that were expected,0.05,git/core,6,0.355
git/core error handling throws for errors that were not expected,0.057,git/core,6,0.355
git/core exit code handling does not throw for exit codes that were expected,0.056,git/core,6,0.355
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.355
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.355
git/core config lock file error handling normalizes paths,0.041,git/core,6,0.355
AppStore can select a repository,0.238,AppStore,5,0.292
git/reset reset can hard reset a repository,0.307,git/reset,2,0.349
validatedRepositoryPath returns the path to the repository,0.055,validatedRepositoryPath,2,0.11
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.314,git/rebase,21,7.744
git/rebase detect conflicts status detects REBASE_HEAD,0.268,git/rebase,21,7.744
git/rebase detect conflicts has conflicted files in working directory,0.267,git/rebase,21,7.744
git/rebase detect conflicts is a detached HEAD state,0.271,git/rebase,21,7.744
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.264,git/rebase,21,7.744
git/rebase abort after conflicts found no longer has working directory changes,0.264,git/rebase,21,7.744
git/rebase abort after conflicts found returns to the feature branch,0.266,git/rebase,21,7.744
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.34,git/rebase,21,7.744
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.327,git/rebase,21,7.744
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.335,git/rebase,21,7.744
git/rebase continue after resolving conflicts returns success,0.379,git/rebase,21,7.744
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.384,git/rebase,21,7.744
git/rebase continue after resolving conflicts no longer has working directory changes,0.386,git/rebase,21,7.744
git/rebase continue after resolving conflicts returns to the feature branch,0.4,git/rebase,21,7.744
git/rebase continue after resolving conflicts branch is now a different ref,0.397,git/rebase,21,7.744
git/rebase continue with additional changes unrelated to conflicted files returns success,0.391,git/rebase,21,7.744
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.394,git/rebase,21,7.744
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.395,git/rebase,21,7.744
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.404,git/rebase,21,7.744
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.408,git/rebase,21,7.744
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.387,git/rebase,21,7.744
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.605
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.605
git/commit createCommit normal can commit for empty repository,0.139,git/commit,21,4.605
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.605
git/commit createCommit partials can commit some lines from new file,0.199,git/commit,21,4.605
git/commit createCommit partials can commit second hunk from modified file,0.204,git/commit,21,4.605
git/commit createCommit partials can commit single delete from modified file,0.175,git/commit,21,4.605
git/commit createCommit partials can commit multiple hunks from modified file,0.194,git/commit,21,4.605
git/commit createCommit partials can commit some lines from deleted file,0.181,git/commit,21,4.605
git/commit createCommit partials can commit renames with modifications,0.185,git/commit,21,4.605
git/commit createCommit partials can commit renames with partially selected modifications,0.233,git/commit,21,4.605
git/commit createCommit with a merge conflict creates a merge commit,0.261,git/commit,21,4.605
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.243,git/commit,21,4.605
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.337,git/commit,21,4.605
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.337,git/commit,21,4.605
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.419,git/commit,21,4.605
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.419,git/commit,21,4.605
git/commit createMergeCommit with no changes throws an error,0.117,git/commit,21,4.605
git/commit index corner cases can commit when staged new file is then deleted,0.154,git/commit,21,4.605
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.177,git/commit,21,4.605
git/commit index corner cases file is deleted in index,0.178,git/commit,21,4.605
git/rebase can parse progress returns a value indicating conflicts were encountered,0.405,git/rebase,7,3.849
git/rebase can parse progress status detects REBASE_HEAD,0.41,git/rebase,7,3.849
git/rebase can parse progress is a detached HEAD state,0.425,git/rebase,7,3.849
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.837,git/rebase,7,3.849
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.847,git/rebase,7,3.849
git/rebase can parse progress for long rebase is a detached HEAD state,0.871,git/rebase,7,3.849
GitStore loadCommitBatch includes HEAD when loading commits,0.441,GitStore,11,2.686
GitStore can discard changes from a repository,0.168,GitStore,11,2.686
GitStore can discard a renamed file,0.152,GitStore,11,2.686
GitStore undo first commit reports the repository is unborn,0.199,GitStore,11,2.686
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.686
GitStore undo first commit clears the undo commit dialog,0.225,GitStore,11,2.686
GitStore undo first commit has no staged files,0.212,GitStore,11,2.686
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.686
git/status getStatus with conflicted repo parses conflicted files with markers,0.35,git/status,12,2.119
git/status getStatus with conflicted repo parses conflicted files without markers,0.31,git/status,12,2.119
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.403,git/status,12,2.119
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,2.119
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.119
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.119
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.119
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.119
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.119
git/status getStatus with unconflicted repo reflects copies,0.119,git/status,12,2.119
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.064,git/status,12,2.119
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.049,git/diff,19,1.916
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.048,git/diff,19,1.916
git/diff getBlobImage retrieves valid image for modified file,0.1,git/diff,19,1.916
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.916
git/diff imageDiff changes for images are set,0.083,git/diff,19,1.916
git/diff imageDiff changes for text are not set,0.092,git/diff,19,1.916
git/diff getWorkingDirectoryDiff counts lines for new file,0.093,git/diff,19,1.916
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.916
git/diff getWorkingDirectoryDiff counts lines for staged file,0.088,git/diff,19,1.916
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.12,git/diff,19,1.916
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.142,git/diff,19,1.916
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.916
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.131,git/diff,19,1.916
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.119,git/diff,19,1.916
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.092,git/diff,19,1.916
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.063,git/diff,19,1.916
git/diff getBinaryPaths in repo with text only files returns an empty array,0.102,git/diff,19,1.916
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,1.916
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.916
BranchPruner does nothing on non GitHub repositories,0.244,BranchPruner,6,1.787
BranchPruner prunes for GitHub repository,0.308,BranchPruner,6,1.787
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.244,BranchPruner,6,1.787
BranchPruner does not prune if there is no default branch,0.243,BranchPruner,6,1.787
BranchPruner does not prune reserved branches,0.317,BranchPruner,6,1.787
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.479
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.479
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.479
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.479
git/branch tip returns non-origin remote,0.083,git/branch,13,1.479
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.479
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.479
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.479
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.051,git/branch,13,1.479
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.089,git/branch,13,1.479
git/branch deleteBranch deletes local branches,0.122,git/branch,13,1.479
git/branch deleteBranch deletes remote branches,0.311,git/branch,13,1.479
git/branch deleteBranch handles attempted delete of removed remote branch,0.37,git/branch,13,1.479
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.111,git/stash,14,1.358
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.138,git/stash,14,1.358
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.358
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.411,formatPatch,5,1.055
git/checkout can checkout a valid branch name in an existing repository,0.125,git/checkout,6,1.035
git/checkout can checkout a branch when it exists on multiple remotes,0.134,git/checkout,6,1.035
git/checkout will fail when an existing branch matches the remote branch,0.124,git/checkout,6,1.035
git/checkout with submodules cleans up an submodule that no longer exists,0.31,git/checkout,6,1.035
git/checkout with submodules updates a changed submodule reference,0.27,git/checkout,6,1.035
git/reflog getRecentBranches returns the recently checked out branches,0.219,git/reflog,6,1.2
git/reflog getRecentBranches works after renaming a branch,0.207,git/reflog,6,1.2
git/reflog getRecentBranches returns a limited number of branches,0.282,git/reflog,6,1.2
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.167,git/reflog,6,1.2
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.204,git/reflog,6,1.2
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.079,git/reflog,6,1.2
git/config config looks up config values,0.056,git/config,12,0.85
git/config config returns null for undefined values,0.054,git/config,12,0.85
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.85
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.07,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.066,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.067,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.066,git/config,12,0.85
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.85
git/submodule listSubmodules returns the submodule entry,0.146,git/submodule,3,0.732
git/submodule listSubmodules returns the expected tag,0.191,git/submodule,3,0.732
git/submodule resetSubmodulePaths update submodule to original commit,0.355,git/submodule,3,0.732
git/rev-parse isGitRepository should return true for a repository,0.052,git/rev-parse,10,0.824
git/rev-parse isGitRepository should return false for a directory,0.062,git/rev-parse,10,0.824
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.824
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.824
git/rev-parse isBareRepository returns false for empty directory,0.059,git/rev-parse,10,0.824
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.824
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.824
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.061,git/rev-parse,10,0.824
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.054,git/rev-parse,10,0.824
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.227,git/rev-parse,10,0.824
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.702
gitignore saveGitIgnore applies rule correctly to repository,0.103,gitignore,9,0.702
gitignore appendIgnoreRule appends one rule,0.116,gitignore,9,0.702
gitignore appendIgnoreRule appends multiple rules,0.124,gitignore,9,0.702
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.571
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.571
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.571
git/log getCommits loads history,0.068,git/log,7,0.642
git/log getCommits handles repository with HEAD file on disk,0.102,git/log,7,0.642
git/log getCommits handles repository with signed commit and log.showSignature set,0.112,git/log,7,0.642
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.642
git/log getChangedFiles detects renames,0.097,git/log,7,0.642
git/log getChangedFiles detect copies,0.108,git/log,7,0.642
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.642
git/merge merge and is successful returns true,0.044,git/merge,7,0.611
git/merge merge and is a noop returns false,0.061,git/merge,7,0.611
git/merge getMergeBase returns the common ancestor of two branches,0.078,git/merge,7,0.611
git-lfs isUsingLFS returns false for repository not using LFS,0.139,git-lfs,9,0.635
git-lfs isUsingLFS returns true if LFS is tracking a path,0.088,git-lfs,9,0.635
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.42
Update remote url doesn't update the repository's remote url when the github url is the same,0.084,Update remote url,4,0.42
Update remote url doesn't update repository's remote url if protocols don't match,0.089,Update remote url,4,0.42
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.082,Update remote url,4,0.42
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.049,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.383
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.383
git/core error handling does not throw for errors that were expected,0.059,git/core,6,0.364
git/core error handling throws for errors that were not expected,0.057,git/core,6,0.364
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.364
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.364
git/core config lock file error handling can parse lock file path from stderr,0.056,git/core,6,0.364
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.364
git/reset reset can hard reset a repository,0.074,git/reset,2,0.113
AppStore can select a repository,0.224,AppStore,5,0.281
git/for-each-ref getBranches fetches branches using for-each-ref,0.295,git/for-each-ref,3,0.475
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.475
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.067,git/for-each-ref,3,0.475
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.109
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.318,git/rebase,21,7.745
git/rebase detect conflicts status detects REBASE_HEAD,0.27,git/rebase,21,7.745
git/rebase detect conflicts has conflicted files in working directory,0.27,git/rebase,21,7.745
git/rebase detect conflicts is a detached HEAD state,0.27,git/rebase,21,7.745
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.261,git/rebase,21,7.745
git/rebase abort after conflicts found no longer has working directory changes,0.259,git/rebase,21,7.745
git/rebase abort after conflicts found returns to the feature branch,0.263,git/rebase,21,7.745
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.341,git/rebase,21,7.745
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.325,git/rebase,21,7.745
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.333,git/rebase,21,7.745
git/rebase continue after resolving conflicts returns success,0.383,git/rebase,21,7.745
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.387,git/rebase,21,7.745
git/rebase continue after resolving conflicts no longer has working directory changes,0.391,git/rebase,21,7.745
git/rebase continue after resolving conflicts returns to the feature branch,0.395,git/rebase,21,7.745
git/rebase continue after resolving conflicts branch is now a different ref,0.393,git/rebase,21,7.745
git/rebase continue with additional changes unrelated to conflicted files returns success,0.388,git/rebase,21,7.745
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.392,git/rebase,21,7.745
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.397,git/rebase,21,7.745
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.406,git/rebase,21,7.745
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.408,git/rebase,21,7.745
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.384,git/rebase,21,7.745
git/commit createCommit normal commits the given files,0.119,git/commit,21,4.665
git/commit createCommit normal commit does not strip commentary by default,0.117,git/commit,21,4.665
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.665
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.665
git/commit createCommit partials can commit some lines from new file,0.189,git/commit,21,4.665
git/commit createCommit partials can commit second hunk from modified file,0.202,git/commit,21,4.665
git/commit createCommit partials can commit single delete from modified file,0.179,git/commit,21,4.665
git/commit createCommit partials can commit multiple hunks from modified file,0.208,git/commit,21,4.665
git/commit createCommit partials can commit some lines from deleted file,0.19,git/commit,21,4.665
git/commit createCommit partials can commit renames with modifications,0.197,git/commit,21,4.665
git/commit createCommit partials can commit renames with partially selected modifications,0.238,git/commit,21,4.665
git/commit createCommit with a merge conflict creates a merge commit,0.264,git/commit,21,4.665
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.24,git/commit,21,4.665
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.347,git/commit,21,4.665
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.333,git/commit,21,4.665
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.418,git/commit,21,4.665
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.419,git/commit,21,4.665
git/commit createMergeCommit with no changes throws an error,0.118,git/commit,21,4.665
git/commit index corner cases can commit when staged new file is then deleted,0.16,git/commit,21,4.665
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.184,git/commit,21,4.665
git/commit index corner cases file is deleted in index,0.184,git/commit,21,4.665
git/rebase can parse progress returns a value indicating conflicts were encountered,0.413,git/rebase,7,3.892
git/rebase can parse progress status detects REBASE_HEAD,0.416,git/rebase,7,3.892
git/rebase can parse progress is a detached HEAD state,0.414,git/rebase,7,3.892
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.841,git/rebase,7,3.892
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.847,git/rebase,7,3.892
git/rebase can parse progress for long rebase is a detached HEAD state,0.908,git/rebase,7,3.892
GitStore loadCommitBatch includes HEAD when loading commits,0.42,GitStore,11,2.652
GitStore can discard changes from a repository,0.17,GitStore,11,2.652
GitStore can discard a renamed file,0.152,GitStore,11,2.652
GitStore undo first commit reports the repository is unborn,0.191,GitStore,11,2.652
GitStore undo first commit pre-fills the commit message,0.13,GitStore,11,2.652
GitStore undo first commit clears the undo commit dialog,0.228,GitStore,11,2.652
GitStore undo first commit has no staged files,0.212,GitStore,11,2.652
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.652
git/status getStatus with conflicted repo parses conflicted files with markers,0.307,git/status,12,2.098
git/status getStatus with conflicted repo parses conflicted files without markers,0.341,git/status,12,2.098
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.4,git/status,12,2.098
git/status getStatus with conflicted repo parses resolved files,0.304,git/status,12,2.098
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.122,git/status,12,2.098
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.098
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.098
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.064,git/status,12,2.098
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.098
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.098
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.098
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.044,git/diff,19,1.885
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.885
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,1.885
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.885
git/diff imageDiff changes for images are set,0.125,git/diff,19,1.885
git/diff imageDiff changes for text are not set,0.088,git/diff,19,1.885
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,1.885
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.885
git/diff getWorkingDirectoryDiff counts lines for staged file,0.088,git/diff,19,1.885
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.125,git/diff,19,1.885
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.147,git/diff,19,1.885
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.885
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.129,git/diff,19,1.885
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.885
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.083,git/diff,19,1.885
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.069,git/diff,19,1.885
git/diff getBinaryPaths in repo with text only files returns an empty array,0.09,git/diff,19,1.885
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.104,git/diff,19,1.885
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.885
BranchPruner does nothing on non GitHub repositories,0.248,BranchPruner,6,1.821
BranchPruner prunes for GitHub repository,0.307,BranchPruner,6,1.821
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.253,BranchPruner,6,1.821
BranchPruner does not prune if there is no default branch,0.257,BranchPruner,6,1.821
BranchPruner does not prune reserved branches,0.312,BranchPruner,6,1.821
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.513
git/branch tip returns correct ref if checkout occurs,0.039,git/branch,13,1.513
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.513
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.513
git/branch tip returns non-origin remote,0.081,git/branch,13,1.513
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.513
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.513
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.513
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.513
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.085,git/branch,13,1.513
git/branch deleteBranch deletes local branches,0.128,git/branch,13,1.513
git/branch deleteBranch deletes remote branches,0.328,git/branch,13,1.513
git/branch deleteBranch handles attempted delete of removed remote branch,0.386,git/branch,13,1.513
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.108,git/stash,14,1.364
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.141,git/stash,14,1.364
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.364
git/reflog getRecentBranches returns the recently checked out branches,0.153,git/reflog,6,1.063
git/reflog getRecentBranches works after renaming a branch,0.197,git/reflog,6,1.063
git/reflog getRecentBranches returns a limited number of branches,0.254,git/reflog,6,1.063
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.157,git/reflog,6,1.063
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.191,git/reflog,6,1.063
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.063
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.389,formatPatch,5,1.051
git/checkout can checkout a valid branch name in an existing repository,0.123,git/checkout,6,1.022
git/checkout can checkout a branch when it exists on multiple remotes,0.127,git/checkout,6,1.022
git/checkout will fail when an existing branch matches the remote branch,0.119,git/checkout,6,1.022
git/checkout with submodules cleans up an submodule that no longer exists,0.312,git/checkout,6,1.022
git/checkout with submodules updates a changed submodule reference,0.267,git/checkout,6,1.022
git/config config looks up config values,0.054,git/config,12,0.861
git/config config returns null for undefined values,0.05,git/config,12,0.861
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.861
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,12,0.861
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.07,git/config,12,0.861
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.861
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.861
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.861
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.073,git/config,12,0.861
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.861
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.861
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.861
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.811
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.811
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.811
git/rev-parse isBareRepository returns true for initialized bare repository,0.071,git/rev-parse,10,0.811
git/rev-parse isBareRepository returns false for empty directory,0.063,git/rev-parse,10,0.811
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.811
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.068,git/rev-parse,10,0.811
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.062,git/rev-parse,10,0.811
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.064,git/rev-parse,10,0.811
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.205,git/rev-parse,10,0.811
git/submodule listSubmodules returns the submodule entry,0.135,git/submodule,3,0.756
git/submodule listSubmodules returns the expected tag,0.193,git/submodule,3,0.756
git/submodule resetSubmodulePaths update submodule to original commit,0.386,git/submodule,3,0.756
gitignore readGitIgnoreAtRoot reads contents from disk,0.021,gitignore,9,0.774
gitignore saveGitIgnore applies rule correctly to repository,0.114,gitignore,9,0.774
gitignore appendIgnoreRule appends one rule,0.133,gitignore,9,0.774
gitignore appendIgnoreRule appends multiple rules,0.14,gitignore,9,0.774
git/log getCommits loads history,0.072,git/log,7,0.657
git/log getCommits handles repository with HEAD file on disk,0.097,git/log,7,0.657
git/log getCommits handles repository with signed commit and log.showSignature set,0.125,git/log,7,0.657
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.657
git/log getChangedFiles detects renames,0.096,git/log,7,0.657
git/log getChangedFiles detect copies,0.108,git/log,7,0.657
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.657
git-lfs isUsingLFS returns false for repository not using LFS,0.057,git-lfs,9,0.594
git-lfs isUsingLFS returns true if LFS is tracking a path,0.083,git-lfs,9,0.594
git/merge merge and is successful returns true,0.05,git/merge,7,0.669
git/merge merge and is a noop returns false,0.067,git/merge,7,0.669
git/merge getMergeBase returns the common ancestor of two branches,0.08,git/merge,7,0.669
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.726
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.726
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.726
git/for-each-ref getBranches fetches branches using for-each-ref,0.075,git/for-each-ref,3,0.254
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.254
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.254
Update remote url updates the repository's remote url when the github url changes,0.116,Update remote url,4,0.428
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.428
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.428
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.086,Update remote url,4,0.428
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.39
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.053,patch formatting,8,0.39
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.052,patch formatting,8,0.39
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.39
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.39
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.39
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.39
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.39
git/core error handling does not throw for errors that were expected,0.055,git/core,6,0.369
git/core error handling throws for errors that were not expected,0.056,git/core,6,0.369
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.369
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.369
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.369
git/core config lock file error handling normalizes paths,0.048,git/core,6,0.369
AppStore can select a repository,0.238,AppStore,5,0.294
git/reset reset can hard reset a repository,0.317,git/reset,2,0.359
validatedRepositoryPath returns the path to the repository,0.061,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.306,git/rebase,21,7.572
git/rebase detect conflicts status detects REBASE_HEAD,0.259,git/rebase,21,7.572
git/rebase detect conflicts has conflicted files in working directory,0.262,git/rebase,21,7.572
git/rebase detect conflicts is a detached HEAD state,0.273,git/rebase,21,7.572
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.255,git/rebase,21,7.572
git/rebase abort after conflicts found no longer has working directory changes,0.254,git/rebase,21,7.572
git/rebase abort after conflicts found returns to the feature branch,0.257,git/rebase,21,7.572
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.339,git/rebase,21,7.572
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.319,git/rebase,21,7.572
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.324,git/rebase,21,7.572
git/rebase continue after resolving conflicts returns success,0.371,git/rebase,21,7.572
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.383,git/rebase,21,7.572
git/rebase continue after resolving conflicts no longer has working directory changes,0.374,git/rebase,21,7.572
git/rebase continue after resolving conflicts returns to the feature branch,0.392,git/rebase,21,7.572
git/rebase continue after resolving conflicts branch is now a different ref,0.383,git/rebase,21,7.572
git/rebase continue with additional changes unrelated to conflicted files returns success,0.378,git/rebase,21,7.572
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.384,git/rebase,21,7.572
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.384,git/rebase,21,7.572
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.393,git/rebase,21,7.572
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.399,git/rebase,21,7.572
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.372,git/rebase,21,7.572
git/commit createCommit normal commits the given files,0.129,git/commit,21,4.491
git/commit createCommit normal commit does not strip commentary by default,0.105,git/commit,21,4.491
git/commit createCommit normal can commit for empty repository,0.134,git/commit,21,4.491
git/commit createCommit normal can commit renames,0.153,git/commit,21,4.491
git/commit createCommit partials can commit some lines from new file,0.19,git/commit,21,4.491
git/commit createCommit partials can commit second hunk from modified file,0.191,git/commit,21,4.491
git/commit createCommit partials can commit single delete from modified file,0.172,git/commit,21,4.491
git/commit createCommit partials can commit multiple hunks from modified file,0.188,git/commit,21,4.491
git/commit createCommit partials can commit some lines from deleted file,0.174,git/commit,21,4.491
git/commit createCommit partials can commit renames with modifications,0.189,git/commit,21,4.491
git/commit createCommit partials can commit renames with partially selected modifications,0.231,git/commit,21,4.491
git/commit createCommit with a merge conflict creates a merge commit,0.258,git/commit,21,4.491
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.233,git/commit,21,4.491
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.332,git/commit,21,4.491
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.318,git/commit,21,4.491
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.41,git/commit,21,4.491
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.405,git/commit,21,4.491
git/commit createMergeCommit with no changes throws an error,0.112,git/commit,21,4.491
git/commit index corner cases can commit when staged new file is then deleted,0.154,git/commit,21,4.491
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.174,git/commit,21,4.491
git/commit index corner cases file is deleted in index,0.181,git/commit,21,4.491
git/rebase can parse progress returns a value indicating conflicts were encountered,0.39,git/rebase,7,3.766
git/rebase can parse progress status detects REBASE_HEAD,0.402,git/rebase,7,3.766
git/rebase can parse progress is a detached HEAD state,0.407,git/rebase,7,3.766
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.825,git/rebase,7,3.766
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.845,git/rebase,7,3.766
git/rebase can parse progress for long rebase is a detached HEAD state,0.845,git/rebase,7,3.766
GitStore loadCommitBatch includes HEAD when loading commits,0.413,GitStore,11,2.628
GitStore can discard changes from a repository,0.171,GitStore,11,2.628
GitStore can discard a renamed file,0.151,GitStore,11,2.628
GitStore undo first commit reports the repository is unborn,0.19,GitStore,11,2.628
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.628
GitStore undo first commit clears the undo commit dialog,0.218,GitStore,11,2.628
GitStore undo first commit has no staged files,0.209,GitStore,11,2.628
GitStore repository with HEAD file can discard modified change cleanly,0.118,GitStore,11,2.628
git/status getStatus with conflicted repo parses conflicted files with markers,0.306,git/status,12,2.098
git/status getStatus with conflicted repo parses conflicted files without markers,0.31,git/status,12,2.098
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.41,git/status,12,2.098
git/status getStatus with conflicted repo parses resolved files,0.31,git/status,12,2.098
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.098
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.098
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.098
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.06,git/status,12,2.098
git/status getStatus with unconflicted repo reflects renames,0.121,git/status,12,2.098
git/status getStatus with unconflicted repo reflects copies,0.118,git/status,12,2.098
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.064,git/status,12,2.098
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.084,git/diff,19,2.047
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,2.047
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,2.047
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,2.047
git/diff imageDiff changes for images are set,0.082,git/diff,19,2.047
git/diff imageDiff changes for text are not set,0.098,git/diff,19,2.047
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,2.047
git/diff getWorkingDirectoryDiff counts lines for modified file,0.099,git/diff,19,2.047
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,2.047
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.129,git/diff,19,2.047
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.172,git/diff,19,2.047
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.178,git/diff,19,2.047
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.148,git/diff,19,2.047
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.144,git/diff,19,2.047
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.097,git/diff,19,2.047
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,2.047
git/diff getBinaryPaths in repo with text only files returns an empty array,0.101,git/diff,19,2.047
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.111,git/diff,19,2.047
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.133,git/diff,19,2.047
BranchPruner does nothing on non GitHub repositories,0.308,BranchPruner,6,1.826
BranchPruner prunes for GitHub repository,0.304,BranchPruner,6,1.826
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.242,BranchPruner,6,1.826
BranchPruner does not prune if there is no default branch,0.241,BranchPruner,6,1.826
BranchPruner does not prune reserved branches,0.311,BranchPruner,6,1.826
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.458
git/branch tip returns correct ref if checkout occurs,0.039,git/branch,13,1.458
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.458
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.458
git/branch tip returns non-origin remote,0.081,git/branch,13,1.458
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.458
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.458
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.458
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.458
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,13,1.458
git/branch deleteBranch deletes local branches,0.119,git/branch,13,1.458
git/branch deleteBranch deletes remote branches,0.311,git/branch,13,1.458
git/branch deleteBranch handles attempted delete of removed remote branch,0.359,git/branch,13,1.458
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.104,git/stash,14,1.311
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.134,git/stash,14,1.311
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.095,git/stash,14,1.311
git/reflog getRecentBranches returns the recently checked out branches,0.149,git/reflog,6,1.091
git/reflog getRecentBranches works after renaming a branch,0.187,git/reflog,6,1.091
git/reflog getRecentBranches returns a limited number of branches,0.302,git/reflog,6,1.091
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.155,git/reflog,6,1.091
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.183,git/reflog,6,1.091
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.075,git/reflog,6,1.091
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.456,formatPatch,5,1.097
git/checkout can checkout a valid branch name in an existing repository,0.12,git/checkout,6,0.989
git/checkout can checkout a branch when it exists on multiple remotes,0.124,git/checkout,6,0.989
git/checkout will fail when an existing branch matches the remote branch,0.117,git/checkout,6,0.989
git/checkout with submodules cleans up an submodule that no longer exists,0.296,git/checkout,6,0.989
git/checkout with submodules updates a changed submodule reference,0.257,git/checkout,6,0.989
git/config config looks up config values,0.049,git/config,12,0.849
git/config config returns null for undefined values,0.053,git/config,12,0.849
git/config global config getGlobalConfigPath gets the config path,0.061,git/config,12,0.849
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,12,0.849
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.069,git/config,12,0.849
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.849
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.849
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.849
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.849
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.068,git/config,12,0.849
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.849
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.849
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.767
git/rev-parse isGitRepository should return false for a directory,0.049,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns false for default initialized repository,0.061,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns true for initialized bare repository,0.067,git/rev-parse,10,0.767
git/rev-parse isBareRepository returns false for empty directory,0.062,git/rev-parse,10,0.767
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.06,git/rev-parse,10,0.767
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.19,git/rev-parse,10,0.767
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.674
gitignore saveGitIgnore applies rule correctly to repository,0.098,gitignore,9,0.674
gitignore appendIgnoreRule appends one rule,0.116,gitignore,9,0.674
gitignore appendIgnoreRule appends multiple rules,0.116,gitignore,9,0.674
git/submodule listSubmodules returns the submodule entry,0.131,git/submodule,3,0.743
git/submodule listSubmodules returns the expected tag,0.18,git/submodule,3,0.743
git/submodule resetSubmodulePaths update submodule to original commit,0.391,git/submodule,3,0.743
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.558
git/remote findDefaultRemote returns origin when multiple remotes found,0.059,git/remote,11,0.558
git/remote findDefaultRemote returns something when origin removed,0.064,git/remote,11,0.558
git/merge merge and is successful returns true,0.047,git/merge,7,0.62
git/merge merge and is a noop returns false,0.06,git/merge,7,0.62
git/merge getMergeBase returns the common ancestor of two branches,0.074,git/merge,7,0.62
git/log getCommits loads history,0.155,git/log,7,0.768
git/log getCommits handles repository with HEAD file on disk,0.102,git/log,7,0.768
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.768
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.768
git/log getChangedFiles detects renames,0.105,git/log,7,0.768
git/log getChangedFiles detect copies,0.121,git/log,7,0.768
git/log getChangedFiles handles commit when HEAD exists on disk,0.061,git/log,7,0.768
git-lfs isUsingLFS returns false for repository not using LFS,0.064,git-lfs,9,0.582
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.582
Update remote url updates the repository's remote url when the github url changes,0.116,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.421
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.082,Update remote url,4,0.421
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.378
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.049,patch formatting,8,0.378
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.378
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.378
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.378
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.378
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.378
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.378
git/core error handling does not throw for errors that were expected,0.054,git/core,6,0.343
git/core error handling throws for errors that were not expected,0.053,git/core,6,0.343
git/core exit code handling does not throw for exit codes that were expected,0.051,git/core,6,0.343
git/core exit code handling throws for exit codes that were not expected,0.051,git/core,6,0.343
git/core config lock file error handling can parse lock file path from stderr,0.053,git/core,6,0.343
git/core config lock file error handling normalizes paths,0.04,git/core,6,0.343
git/reset reset can hard reset a repository,0.074,git/reset,2,0.113
AppStore can select a repository,0.232,AppStore,5,0.288
git/for-each-ref getBranches fetches branches using for-each-ref,0.306,git/for-each-ref,3,0.482
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.482
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.482
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.109
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.057
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.324,git/rebase,21,7.773
git/rebase detect conflicts status detects REBASE_HEAD,0.273,git/rebase,21,7.773
git/rebase detect conflicts has conflicted files in working directory,0.267,git/rebase,21,7.773
git/rebase detect conflicts is a detached HEAD state,0.267,git/rebase,21,7.773
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.262,git/rebase,21,7.773
git/rebase abort after conflicts found no longer has working directory changes,0.256,git/rebase,21,7.773
git/rebase abort after conflicts found returns to the feature branch,0.262,git/rebase,21,7.773
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.331,git/rebase,21,7.773
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.33,git/rebase,21,7.773
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.332,git/rebase,21,7.773
git/rebase continue after resolving conflicts returns success,0.383,git/rebase,21,7.773
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.392,git/rebase,21,7.773
git/rebase continue after resolving conflicts no longer has working directory changes,0.395,git/rebase,21,7.773
git/rebase continue after resolving conflicts returns to the feature branch,0.404,git/rebase,21,7.773
git/rebase continue after resolving conflicts branch is now a different ref,0.394,git/rebase,21,7.773
git/rebase continue with additional changes unrelated to conflicted files returns success,0.391,git/rebase,21,7.773
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.391,git/rebase,21,7.773
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.393,git/rebase,21,7.773
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.407,git/rebase,21,7.773
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.405,git/rebase,21,7.773
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.386,git/rebase,21,7.773
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.549
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.549
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.549
git/commit createCommit normal can commit renames,0.156,git/commit,21,4.549
git/commit createCommit partials can commit some lines from new file,0.182,git/commit,21,4.549
git/commit createCommit partials can commit second hunk from modified file,0.191,git/commit,21,4.549
git/commit createCommit partials can commit single delete from modified file,0.179,git/commit,21,4.549
git/commit createCommit partials can commit multiple hunks from modified file,0.196,git/commit,21,4.549
git/commit createCommit partials can commit some lines from deleted file,0.179,git/commit,21,4.549
git/commit createCommit partials can commit renames with modifications,0.187,git/commit,21,4.549
git/commit createCommit partials can commit renames with partially selected modifications,0.23,git/commit,21,4.549
git/commit createCommit with a merge conflict creates a merge commit,0.262,git/commit,21,4.549
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.237,git/commit,21,4.549
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.335,git/commit,21,4.549
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.327,git/commit,21,4.549
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.407,git/commit,21,4.549
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.414,git/commit,21,4.549
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.549
git/commit index corner cases can commit when staged new file is then deleted,0.156,git/commit,21,4.549
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.173,git/commit,21,4.549
git/commit index corner cases file is deleted in index,0.183,git/commit,21,4.549
git/rebase can parse progress returns a value indicating conflicts were encountered,0.419,git/rebase,7,3.906
git/rebase can parse progress status detects REBASE_HEAD,0.421,git/rebase,7,3.906
git/rebase can parse progress is a detached HEAD state,0.418,git/rebase,7,3.906
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.856,git/rebase,7,3.906
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.871,git/rebase,7,3.906
git/rebase can parse progress for long rebase is a detached HEAD state,0.867,git/rebase,7,3.906
GitStore loadCommitBatch includes HEAD when loading commits,0.447,GitStore,11,2.713
GitStore can discard changes from a repository,0.171,GitStore,11,2.713
GitStore can discard a renamed file,0.155,GitStore,11,2.713
GitStore undo first commit reports the repository is unborn,0.196,GitStore,11,2.713
GitStore undo first commit pre-fills the commit message,0.13,GitStore,11,2.713
GitStore undo first commit clears the undo commit dialog,0.227,GitStore,11,2.713
GitStore undo first commit has no staged files,0.21,GitStore,11,2.713
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.713
git/status getStatus with conflicted repo parses conflicted files with markers,0.351,git/status,12,2.115
git/status getStatus with conflicted repo parses conflicted files without markers,0.311,git/status,12,2.115
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.403,git/status,12,2.115
git/status getStatus with conflicted repo parses resolved files,0.298,git/status,12,2.115
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.121,git/status,12,2.115
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.115
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.115
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.115
git/status getStatus with unconflicted repo reflects renames,0.115,git/status,12,2.115
git/status getStatus with unconflicted repo reflects copies,0.114,git/status,12,2.115
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.065,git/status,12,2.115
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.047,git/diff,19,1.831
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.831
git/diff getBlobImage retrieves valid image for modified file,0.097,git/diff,19,1.831
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.831
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.831
git/diff imageDiff changes for text are not set,0.085,git/diff,19,1.831
git/diff getWorkingDirectoryDiff counts lines for new file,0.089,git/diff,19,1.831
git/diff getWorkingDirectoryDiff counts lines for modified file,0.09,git/diff,19,1.831
git/diff getWorkingDirectoryDiff counts lines for staged file,0.083,git/diff,19,1.831
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.117,git/diff,19,1.831
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.138,git/diff,19,1.831
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.146,git/diff,19,1.831
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.129,git/diff,19,1.831
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.12,git/diff,19,1.831
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.831
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.062,git/diff,19,1.831
git/diff getBinaryPaths in repo with text only files returns an empty array,0.09,git/diff,19,1.831
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.097,git/diff,19,1.831
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.117,git/diff,19,1.831
BranchPruner does nothing on non GitHub repositories,0.239,BranchPruner,6,1.738
BranchPruner prunes for GitHub repository,0.302,BranchPruner,6,1.738
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.244,BranchPruner,6,1.738
BranchPruner does not prune if there is no default branch,0.24,BranchPruner,6,1.738
BranchPruner does not prune reserved branches,0.291,BranchPruner,6,1.738
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.512
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.512
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.512
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.512
git/branch tip returns non-origin remote,0.082,git/branch,13,1.512
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.09,git/branch,13,1.512
git/branch getBranchesPointedAt in a local repo finds one branch name,0.063,git/branch,13,1.512
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.512
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.512
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.512
git/branch deleteBranch deletes local branches,0.127,git/branch,13,1.512
git/branch deleteBranch deletes remote branches,0.323,git/branch,13,1.512
git/branch deleteBranch handles attempted delete of removed remote branch,0.377,git/branch,13,1.512
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.396
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.144,git/stash,14,1.396
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.396
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.448,formatPatch,5,1.103
git/reflog getRecentBranches returns the recently checked out branches,0.163,git/reflog,6,1.118
git/reflog getRecentBranches works after renaming a branch,0.205,git/reflog,6,1.118
git/reflog getRecentBranches returns a limited number of branches,0.278,git/reflog,6,1.118
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.162,git/reflog,6,1.118
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.199,git/reflog,6,1.118
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.067,git/reflog,6,1.118
git/checkout can checkout a valid branch name in an existing repository,0.187,git/checkout,6,1.119
git/checkout can checkout a branch when it exists on multiple remotes,0.134,git/checkout,6,1.119
git/checkout will fail when an existing branch matches the remote branch,0.129,git/checkout,6,1.119
git/checkout with submodules cleans up an submodule that no longer exists,0.321,git/checkout,6,1.119
git/checkout with submodules updates a changed submodule reference,0.273,git/checkout,6,1.119
git/config config looks up config values,0.056,git/config,12,0.854
git/config config returns null for undefined values,0.053,git/config,12,0.854
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.854
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,12,0.854
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.854
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.854
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.854
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.854
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.854
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.069,git/config,12,0.854
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.854
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.854
git/log getCommits loads history,0.069,git/log,7,0.669
git/log getCommits handles repository with HEAD file on disk,0.105,git/log,7,0.669
git/log getCommits handles repository with signed commit and log.showSignature set,0.119,git/log,7,0.669
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.669
git/log getChangedFiles detects renames,0.101,git/log,7,0.669
git/log getChangedFiles detect copies,0.112,git/log,7,0.669
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.669
git/rev-parse isGitRepository should return true for a repository,0.052,git/rev-parse,10,0.75
git/rev-parse isGitRepository should return false for a directory,0.052,git/rev-parse,10,0.75
git/rev-parse isBareRepository returns false for default initialized repository,0.062,git/rev-parse,10,0.75
git/rev-parse isBareRepository returns true for initialized bare repository,0.063,git/rev-parse,10,0.75
git/rev-parse isBareRepository returns false for empty directory,0.053,git/rev-parse,10,0.75
git/rev-parse isBareRepository throws error for missing directory,0.05,git/rev-parse,10,0.75
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.75
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.75
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.054,git/rev-parse,10,0.75
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.198,git/rev-parse,10,0.75
git/submodule listSubmodules returns the submodule entry,0.134,git/submodule,3,0.707
git/submodule listSubmodules returns the expected tag,0.185,git/submodule,3,0.707
git/submodule resetSubmodulePaths update submodule to original commit,0.346,git/submodule,3,0.707
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.685
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.685
gitignore appendIgnoreRule appends one rule,0.116,gitignore,9,0.685
gitignore appendIgnoreRule appends multiple rules,0.127,gitignore,9,0.685
git/merge merge and is successful returns true,0.046,git/merge,7,0.573
git/merge merge and is a noop returns false,0.054,git/merge,7,0.573
git/merge getMergeBase returns the common ancestor of two branches,0.068,git/merge,7,0.573
git-lfs isUsingLFS returns false for repository not using LFS,0.054,git-lfs,9,0.612
git-lfs isUsingLFS returns true if LFS is tracking a path,0.148,git-lfs,9,0.612
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.582
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.582
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.582
git/for-each-ref getBranches fetches branches using for-each-ref,0.072,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.245
Update remote url updates the repository's remote url when the github url changes,0.113,Update remote url,4,0.423
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.423
Update remote url doesn't update repository's remote url if protocols don't match,0.089,Update remote url,4,0.423
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.423
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.047,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.033,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile includes empty context lines,0.027,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.364
git/core error handling does not throw for errors that were expected,0.051,git/core,6,0.371
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.371
git/core exit code handling does not throw for exit codes that were expected,0.06,git/core,6,0.371
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.371
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.371
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.371
AppStore can select a repository,0.235,AppStore,5,0.289
git/reset reset can hard reset a repository,0.24,git/reset,2,0.281
validatedRepositoryPath returns the path to the repository,0.056,validatedRepositoryPath,2,0.107
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.056
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.311,git/rebase,21,7.712
git/rebase detect conflicts status detects REBASE_HEAD,0.266,git/rebase,21,7.712
git/rebase detect conflicts has conflicted files in working directory,0.27,git/rebase,21,7.712
git/rebase detect conflicts is a detached HEAD state,0.276,git/rebase,21,7.712
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.26,git/rebase,21,7.712
git/rebase abort after conflicts found no longer has working directory changes,0.256,git/rebase,21,7.712
git/rebase abort after conflicts found returns to the feature branch,0.257,git/rebase,21,7.712
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.334,git/rebase,21,7.712
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.322,git/rebase,21,7.712
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.333,git/rebase,21,7.712
git/rebase continue after resolving conflicts returns success,0.383,git/rebase,21,7.712
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.379,git/rebase,21,7.712
git/rebase continue after resolving conflicts no longer has working directory changes,0.385,git/rebase,21,7.712
git/rebase continue after resolving conflicts returns to the feature branch,0.398,git/rebase,21,7.712
git/rebase continue after resolving conflicts branch is now a different ref,0.392,git/rebase,21,7.712
git/rebase continue with additional changes unrelated to conflicted files returns success,0.389,git/rebase,21,7.712
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.391,git/rebase,21,7.712
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.393,git/rebase,21,7.712
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.403,git/rebase,21,7.712
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.406,git/rebase,21,7.712
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.383,git/rebase,21,7.712
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.641
git/commit createCommit normal commit does not strip commentary by default,0.107,git/commit,21,4.641
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.641
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.641
git/commit createCommit partials can commit some lines from new file,0.195,git/commit,21,4.641
git/commit createCommit partials can commit second hunk from modified file,0.2,git/commit,21,4.641
git/commit createCommit partials can commit single delete from modified file,0.192,git/commit,21,4.641
git/commit createCommit partials can commit multiple hunks from modified file,0.199,git/commit,21,4.641
git/commit createCommit partials can commit some lines from deleted file,0.183,git/commit,21,4.641
git/commit createCommit partials can commit renames with modifications,0.195,git/commit,21,4.641
git/commit createCommit partials can commit renames with partially selected modifications,0.241,git/commit,21,4.641
git/commit createCommit with a merge conflict creates a merge commit,0.265,git/commit,21,4.641
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.242,git/commit,21,4.641
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.343,git/commit,21,4.641
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.333,git/commit,21,4.641
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.416,git/commit,21,4.641
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.412,git/commit,21,4.641
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.641
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.641
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.181,git/commit,21,4.641
git/commit index corner cases file is deleted in index,0.187,git/commit,21,4.641
git/rebase can parse progress returns a value indicating conflicts were encountered,0.41,git/rebase,7,3.87
git/rebase can parse progress status detects REBASE_HEAD,0.408,git/rebase,7,3.87
git/rebase can parse progress is a detached HEAD state,0.448,git/rebase,7,3.87
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.855,git/rebase,7,3.87
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.847,git/rebase,7,3.87
git/rebase can parse progress for long rebase is a detached HEAD state,0.849,git/rebase,7,3.87
GitStore loadCommitBatch includes HEAD when loading commits,0.443,GitStore,11,2.637
GitStore can discard changes from a repository,0.168,GitStore,11,2.637
GitStore can discard a renamed file,0.151,GitStore,11,2.637
GitStore undo first commit reports the repository is unborn,0.194,GitStore,11,2.637
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.637
GitStore undo first commit clears the undo commit dialog,0.218,GitStore,11,2.637
GitStore undo first commit has no staged files,0.207,GitStore,11,2.637
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.637
git/status getStatus with conflicted repo parses conflicted files with markers,0.344,git/status,12,2.103
git/status getStatus with conflicted repo parses conflicted files without markers,0.305,git/status,12,2.103
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.396,git/status,12,2.103
git/status getStatus with conflicted repo parses resolved files,0.305,git/status,12,2.103
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.122,git/status,12,2.103
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.103
git/status getStatus with unconflicted repo parses changed files,0.071,git/status,12,2.103
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.103
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.103
git/status getStatus with unconflicted repo reflects copies,0.115,git/status,12,2.103
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.062,git/status,12,2.103
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,1.843
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.843
git/diff getBlobImage retrieves valid image for modified file,0.089,git/diff,19,1.843
git/diff getBlobImage retrieves valid images for deleted file,0.062,git/diff,19,1.843
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.843
git/diff imageDiff changes for text are not set,0.086,git/diff,19,1.843
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,1.843
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,1.843
git/diff getWorkingDirectoryDiff counts lines for staged file,0.081,git/diff,19,1.843
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.118,git/diff,19,1.843
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.14,git/diff,19,1.843
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.146,git/diff,19,1.843
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.127,git/diff,19,1.843
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.116,git/diff,19,1.843
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.843
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.066,git/diff,19,1.843
git/diff getBinaryPaths in repo with text only files returns an empty array,0.098,git/diff,19,1.843
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.11,git/diff,19,1.843
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.843
BranchPruner does nothing on non GitHub repositories,0.261,BranchPruner,6,1.804
BranchPruner prunes for GitHub repository,0.328,BranchPruner,6,1.804
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.242,BranchPruner,6,1.804
BranchPruner does not prune if there is no default branch,0.239,BranchPruner,6,1.804
BranchPruner does not prune reserved branches,0.315,BranchPruner,6,1.804
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.507
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.507
git/branch tip returns detached for arbitrary checkout,0.055,git/branch,13,1.507
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.507
git/branch tip returns non-origin remote,0.079,git/branch,13,1.507
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.507
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.507
git/branch getBranchesPointedAt in a local repo finds no branch names,0.05,git/branch,13,1.507
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.051,git/branch,13,1.507
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.088,git/branch,13,1.507
git/branch deleteBranch deletes local branches,0.124,git/branch,13,1.507
git/branch deleteBranch deletes remote branches,0.339,git/branch,13,1.507
git/branch deleteBranch handles attempted delete of removed remote branch,0.384,git/branch,13,1.507
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.109,git/stash,14,1.382
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.142,git/stash,14,1.382
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.382
git/checkout can checkout a valid branch name in an existing repository,0.124,git/checkout,6,1.039
git/checkout can checkout a branch when it exists on multiple remotes,0.13,git/checkout,6,1.039
git/checkout will fail when an existing branch matches the remote branch,0.127,git/checkout,6,1.039
git/checkout with submodules cleans up an submodule that no longer exists,0.31,git/checkout,6,1.039
git/checkout with submodules updates a changed submodule reference,0.275,git/checkout,6,1.039
git/reflog getRecentBranches returns the recently checked out branches,0.163,git/reflog,6,1.158
git/reflog getRecentBranches works after renaming a branch,0.213,git/reflog,6,1.158
git/reflog getRecentBranches returns a limited number of branches,0.283,git/reflog,6,1.158
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.168,git/reflog,6,1.158
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.207,git/reflog,6,1.158
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.082,git/reflog,6,1.158
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.416,formatPatch,5,1.138
git/config config looks up config values,0.115,git/config,12,0.924
git/config config returns null for undefined values,0.056,git/config,12,0.924
git/config global config getGlobalConfigPath gets the config path,0.068,git/config,12,0.924
git/config global config setGlobalConfigValue will replace all entries for a global value,0.098,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.066,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.064,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.073,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.924
git/rev-parse isGitRepository should return true for a repository,0.063,git/rev-parse,10,0.823
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.823
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.823
git/rev-parse isBareRepository returns true for initialized bare repository,0.07,git/rev-parse,10,0.823
git/rev-parse isBareRepository returns false for empty directory,0.065,git/rev-parse,10,0.823
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.823
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.823
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.061,git/rev-parse,10,0.823
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.823
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.215,git/rev-parse,10,0.823
git/submodule listSubmodules returns the submodule entry,0.138,git/submodule,3,0.738
git/submodule listSubmodules returns the expected tag,0.187,git/submodule,3,0.738
git/submodule resetSubmodulePaths update submodule to original commit,0.369,git/submodule,3,0.738
gitignore readGitIgnoreAtRoot reads contents from disk,0.019,gitignore,9,0.693
gitignore saveGitIgnore applies rule correctly to repository,0.101,gitignore,9,0.693
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.693
gitignore appendIgnoreRule appends multiple rules,0.124,gitignore,9,0.693
git/log getCommits loads history,0.143,git/log,7,0.714
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.714
git/log getCommits handles repository with signed commit and log.showSignature set,0.111,git/log,7,0.714
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.714
git/log getChangedFiles detects renames,0.093,git/log,7,0.714
git/log getChangedFiles detect copies,0.113,git/log,7,0.714
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.714
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.55
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.55
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.563
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.563
git/remote findDefaultRemote returns something when origin removed,0.063,git/remote,11,0.563
git/merge merge and is successful returns true,0.044,git/merge,7,0.577
git/merge merge and is a noop returns false,0.054,git/merge,7,0.577
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.577
Update remote url updates the repository's remote url when the github url changes,0.106,Update remote url,4,0.402
Update remote url doesn't update the repository's remote url when the github url is the same,0.079,Update remote url,4,0.402
Update remote url doesn't update repository's remote url if protocols don't match,0.086,Update remote url,4,0.402
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.081,Update remote url,4,0.402
git/core error handling does not throw for errors that were expected,0.055,git/core,6,0.37
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.37
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,6,0.37
git/core exit code handling throws for exit codes that were not expected,0.056,git/core,6,0.37
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.37
git/core config lock file error handling normalizes paths,0.039,git/core,6,0.37
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.046,patch formatting,8,0.351
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.049,patch formatting,8,0.351
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.351
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.351
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.351
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.031,patch formatting,8,0.351
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.351
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.351
AppStore can select a repository,0.224,AppStore,5,0.278
git/reset reset can hard reset a repository,0.298,git/reset,2,0.34
git/for-each-ref getBranches fetches branches using for-each-ref,0.163,git/for-each-ref,3,0.331
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.331
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.055,git/for-each-ref,3,0.331
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.114
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.315,git/rebase,21,7.606
git/rebase detect conflicts status detects REBASE_HEAD,0.266,git/rebase,21,7.606
git/rebase detect conflicts has conflicted files in working directory,0.259,git/rebase,21,7.606
git/rebase detect conflicts is a detached HEAD state,0.26,git/rebase,21,7.606
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.259,git/rebase,21,7.606
git/rebase abort after conflicts found no longer has working directory changes,0.252,git/rebase,21,7.606
git/rebase abort after conflicts found returns to the feature branch,0.266,git/rebase,21,7.606
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.336,git/rebase,21,7.606
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.321,git/rebase,21,7.606
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.327,git/rebase,21,7.606
git/rebase continue after resolving conflicts returns success,0.371,git/rebase,21,7.606
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.377,git/rebase,21,7.606
git/rebase continue after resolving conflicts no longer has working directory changes,0.384,git/rebase,21,7.606
git/rebase continue after resolving conflicts returns to the feature branch,0.386,git/rebase,21,7.606
git/rebase continue after resolving conflicts branch is now a different ref,0.383,git/rebase,21,7.606
git/rebase continue with additional changes unrelated to conflicted files returns success,0.375,git/rebase,21,7.606
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.391,git/rebase,21,7.606
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.387,git/rebase,21,7.606
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.398,git/rebase,21,7.606
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.405,git/rebase,21,7.606
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.374,git/rebase,21,7.606
git/commit createCommit normal commits the given files,0.124,git/commit,21,4.606
git/commit createCommit normal commit does not strip commentary by default,0.113,git/commit,21,4.606
git/commit createCommit normal can commit for empty repository,0.135,git/commit,21,4.606
git/commit createCommit normal can commit renames,0.156,git/commit,21,4.606
git/commit createCommit partials can commit some lines from new file,0.19,git/commit,21,4.606
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.606
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.606
git/commit createCommit partials can commit multiple hunks from modified file,0.204,git/commit,21,4.606
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.606
git/commit createCommit partials can commit renames with modifications,0.188,git/commit,21,4.606
git/commit createCommit partials can commit renames with partially selected modifications,0.233,git/commit,21,4.606
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.606
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.24,git/commit,21,4.606
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.336,git/commit,21,4.606
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.335,git/commit,21,4.606
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.404,git/commit,21,4.606
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.427,git/commit,21,4.606
git/commit createMergeCommit with no changes throws an error,0.112,git/commit,21,4.606
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.606
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.179,git/commit,21,4.606
git/commit index corner cases file is deleted in index,0.178,git/commit,21,4.606
git/rebase can parse progress returns a value indicating conflicts were encountered,0.394,git/rebase,7,3.815
git/rebase can parse progress status detects REBASE_HEAD,0.407,git/rebase,7,3.815
git/rebase can parse progress is a detached HEAD state,0.406,git/rebase,7,3.815
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.842,git/rebase,7,3.815
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.842,git/rebase,7,3.815
git/rebase can parse progress for long rebase is a detached HEAD state,0.871,git/rebase,7,3.815
GitStore loadCommitBatch includes HEAD when loading commits,0.42,GitStore,11,2.673
GitStore can discard changes from a repository,0.169,GitStore,11,2.673
GitStore can discard a renamed file,0.173,GitStore,11,2.673
GitStore undo first commit reports the repository is unborn,0.196,GitStore,11,2.673
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.673
GitStore undo first commit clears the undo commit dialog,0.218,GitStore,11,2.673
GitStore undo first commit has no staged files,0.21,GitStore,11,2.673
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.673
git/status getStatus with conflicted repo parses conflicted files with markers,0.305,git/status,12,2.048
git/status getStatus with conflicted repo parses conflicted files without markers,0.308,git/status,12,2.048
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.409,git/status,12,2.048
git/status getStatus with conflicted repo parses resolved files,0.307,git/status,12,2.048
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.048
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.147,git/status,12,2.048
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,2.048
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.054,git/status,12,2.048
git/status getStatus with unconflicted repo reflects renames,0.118,git/status,12,2.048
git/status getStatus with unconflicted repo reflects copies,0.106,git/status,12,2.048
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.056,git/status,12,2.048
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.082,git/diff,19,2.014
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,2.014
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,2.014
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,2.014
git/diff imageDiff changes for images are set,0.084,git/diff,19,2.014
git/diff imageDiff changes for text are not set,0.093,git/diff,19,2.014
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,2.014
git/diff getWorkingDirectoryDiff counts lines for modified file,0.103,git/diff,19,2.014
git/diff getWorkingDirectoryDiff counts lines for staged file,0.094,git/diff,19,2.014
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.128,git/diff,19,2.014
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.169,git/diff,19,2.014
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.175,git/diff,19,2.014
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.145,git/diff,19,2.014
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.144,git/diff,19,2.014
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.097,git/diff,19,2.014
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,2.014
git/diff getBinaryPaths in repo with text only files returns an empty array,0.097,git/diff,19,2.014
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.102,git/diff,19,2.014
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.122,git/diff,19,2.014
BranchPruner does nothing on non GitHub repositories,0.299,BranchPruner,6,1.871
BranchPruner prunes for GitHub repository,0.327,BranchPruner,6,1.871
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.265,BranchPruner,6,1.871
BranchPruner does not prune if there is no default branch,0.26,BranchPruner,6,1.871
BranchPruner does not prune reserved branches,0.293,BranchPruner,6,1.871
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.462
git/branch tip returns correct ref if checkout occurs,0.04,git/branch,13,1.462
git/branch tip returns detached for arbitrary checkout,0.059,git/branch,13,1.462
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.462
git/branch tip returns non-origin remote,0.078,git/branch,13,1.462
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,13,1.462
git/branch getBranchesPointedAt in a local repo finds one branch name,0.061,git/branch,13,1.462
git/branch getBranchesPointedAt in a local repo finds no branch names,0.051,git/branch,13,1.462
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.051,git/branch,13,1.462
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.083,git/branch,13,1.462
git/branch deleteBranch deletes local branches,0.123,git/branch,13,1.462
git/branch deleteBranch deletes remote branches,0.307,git/branch,13,1.462
git/branch deleteBranch handles attempted delete of removed remote branch,0.369,git/branch,13,1.462
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.108,git/stash,14,1.328
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.138,git/stash,14,1.328
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.328
git/reflog getRecentBranches returns the recently checked out branches,0.156,git/reflog,6,1.098
git/reflog getRecentBranches works after renaming a branch,0.19,git/reflog,6,1.098
git/reflog getRecentBranches returns a limited number of branches,0.303,git/reflog,6,1.098
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.15,git/reflog,6,1.098
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.189,git/reflog,6,1.098
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.07,git/reflog,6,1.098
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.431,formatPatch,5,1.054
git/checkout can checkout a valid branch name in an existing repository,0.12,git/checkout,6,1.035
git/checkout can checkout a branch when it exists on multiple remotes,0.126,git/checkout,6,1.035
git/checkout will fail when an existing branch matches the remote branch,0.116,git/checkout,6,1.035
git/checkout with submodules cleans up an submodule that no longer exists,0.333,git/checkout,6,1.035
git/checkout with submodules updates a changed submodule reference,0.269,git/checkout,6,1.035
git/config config looks up config values,0.052,git/config,12,0.847
git/config config returns null for undefined values,0.055,git/config,12,0.847
git/config global config getGlobalConfigPath gets the config path,0.07,git/config,12,0.847
git/config global config setGlobalConfigValue will replace all entries for a global value,0.085,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.063,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.06,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.062,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.074,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.072,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.847
git/rev-parse isGitRepository should return true for a repository,0.052,git/rev-parse,10,0.742
git/rev-parse isGitRepository should return false for a directory,0.049,git/rev-parse,10,0.742
git/rev-parse isBareRepository returns false for default initialized repository,0.06,git/rev-parse,10,0.742
git/rev-parse isBareRepository returns true for initialized bare repository,0.063,git/rev-parse,10,0.742
git/rev-parse isBareRepository returns false for empty directory,0.062,git/rev-parse,10,0.742
git/rev-parse isBareRepository throws error for missing directory,0.049,git/rev-parse,10,0.742
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.06,git/rev-parse,10,0.742
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.052,git/rev-parse,10,0.742
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.064,git/rev-parse,10,0.742
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.188,git/rev-parse,10,0.742
git/submodule listSubmodules returns the submodule entry,0.125,git/submodule,3,0.697
git/submodule listSubmodules returns the expected tag,0.182,git/submodule,3,0.697
git/submodule resetSubmodulePaths update submodule to original commit,0.348,git/submodule,3,0.697
git/log getCommits loads history,0.066,git/log,7,0.613
git/log getCommits handles repository with HEAD file on disk,0.088,git/log,7,0.613
git/log getCommits handles repository with signed commit and log.showSignature set,0.103,git/log,7,0.613
git/log getChangedFiles loads the files changed in the commit,0.062,git/log,7,0.613
git/log getChangedFiles detects renames,0.097,git/log,7,0.613
git/log getChangedFiles detect copies,0.106,git/log,7,0.613
git/log getChangedFiles handles commit when HEAD exists on disk,0.054,git/log,7,0.613
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.678
gitignore saveGitIgnore applies rule correctly to repository,0.103,gitignore,9,0.678
gitignore appendIgnoreRule appends one rule,0.121,gitignore,9,0.678
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.678
git/merge merge and is successful returns true,0.121,git/merge,7,0.669
git/merge merge and is a noop returns false,0.062,git/merge,7,0.669
git/merge getMergeBase returns the common ancestor of two branches,0.075,git/merge,7,0.669
git/remote getRemotes should return both remotes,0.063,git/remote,11,0.577
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.577
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.577
git-lfs isUsingLFS returns false for repository not using LFS,0.065,git-lfs,9,0.541
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.541
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.411
Update remote url doesn't update the repository's remote url when the github url is the same,0.084,Update remote url,4,0.411
Update remote url doesn't update repository's remote url if protocols don't match,0.083,Update remote url,4,0.411
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.081,Update remote url,4,0.411
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.375
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.375
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.375
git/core exit code handling throws for exit codes that were not expected,0.056,git/core,6,0.375
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.375
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.375
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.37
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.37
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.047,patch formatting,8,0.37
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.37
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.37
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.37
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.37
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.37
git/reset reset can hard reset a repository,0.079,git/reset,2,0.118
git/for-each-ref getBranches fetches branches using for-each-ref,0.076,git/for-each-ref,3,0.252
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.252
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.064,git/for-each-ref,3,0.252
AppStore can select a repository,0.226,AppStore,5,0.283
validatedRepositoryPath returns the path to the repository,0.283,validatedRepositoryPath,2,0.338
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.061
