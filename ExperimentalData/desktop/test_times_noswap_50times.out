git/rebase detect conflicts returns a value indicating conflicts were encountered,0.35,git/rebase,21,8.234
git/rebase detect conflicts status detects REBASE_HEAD,0.286,git/rebase,21,8.234
git/rebase detect conflicts has conflicted files in working directory,0.283,git/rebase,21,8.234
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,8.234
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.276,git/rebase,21,8.234
git/rebase abort after conflicts found no longer has working directory changes,0.269,git/rebase,21,8.234
git/rebase abort after conflicts found returns to the feature branch,0.27,git/rebase,21,8.234
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.356,git/rebase,21,8.234
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.342,git/rebase,21,8.234
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.348,git/rebase,21,8.234
git/rebase continue after resolving conflicts returns success,0.401,git/rebase,21,8.234
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.41,git/rebase,21,8.234
git/rebase continue after resolving conflicts no longer has working directory changes,0.409,git/rebase,21,8.234
git/rebase continue after resolving conflicts returns to the feature branch,0.409,git/rebase,21,8.234
git/rebase continue after resolving conflicts branch is now a different ref,0.411,git/rebase,21,8.234
git/rebase continue with additional changes unrelated to conflicted files returns success,0.426,git/rebase,21,8.234
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.407,git/rebase,21,8.234
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.428,git/rebase,21,8.234
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.421,git/rebase,21,8.234
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.431,git/rebase,21,8.234
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,8.234
git/commit createCommit normal commits the given files,0.127,git/commit,21,4.783
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.783
git/commit createCommit normal can commit for empty repository,0.142,git/commit,21,4.783
git/commit createCommit normal can commit renames,0.174,git/commit,21,4.783
git/commit createCommit partials can commit some lines from new file,0.192,git/commit,21,4.783
git/commit createCommit partials can commit second hunk from modified file,0.209,git/commit,21,4.783
git/commit createCommit partials can commit single delete from modified file,0.189,git/commit,21,4.783
git/commit createCommit partials can commit multiple hunks from modified file,0.208,git/commit,21,4.783
git/commit createCommit partials can commit some lines from deleted file,0.192,git/commit,21,4.783
git/commit createCommit partials can commit renames with modifications,0.199,git/commit,21,4.783
git/commit createCommit partials can commit renames with partially selected modifications,0.24,git/commit,21,4.783
git/commit createCommit with a merge conflict creates a merge commit,0.272,git/commit,21,4.783
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.256,git/commit,21,4.783
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.357,git/commit,21,4.783
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.345,git/commit,21,4.783
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.437,git/commit,21,4.783
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.428,git/commit,21,4.783
git/commit createMergeCommit with no changes throws an error,0.11,git/commit,21,4.783
git/commit index corner cases can commit when staged new file is then deleted,0.162,git/commit,21,4.783
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.188,git/commit,21,4.783
git/commit index corner cases file is deleted in index,0.188,git/commit,21,4.783
git/rebase can parse progress returns a value indicating conflicts were encountered,0.424,git/rebase,7,4.072
git/rebase can parse progress status detects REBASE_HEAD,0.429,git/rebase,7,4.072
git/rebase can parse progress is a detached HEAD state,0.422,git/rebase,7,4.072
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.893,git/rebase,7,4.072
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.914,git/rebase,7,4.072
git/rebase can parse progress for long rebase is a detached HEAD state,0.929,git/rebase,7,4.072
GitStore loadCommitBatch includes HEAD when loading commits,0.393,GitStore,11,2.779
GitStore can discard changes from a repository,0.176,GitStore,11,2.779
GitStore can discard a renamed file,0.172,GitStore,11,2.779
GitStore undo first commit reports the repository is unborn,0.2,GitStore,11,2.779
GitStore undo first commit pre-fills the commit message,0.137,GitStore,11,2.779
GitStore undo first commit clears the undo commit dialog,0.233,GitStore,11,2.779
GitStore undo first commit has no staged files,0.23,GitStore,11,2.779
GitStore repository with HEAD file can discard modified change cleanly,0.149,GitStore,11,2.779
BranchPruner does nothing on non GitHub repositories,0.319,BranchPruner,6,2.046
BranchPruner prunes for GitHub repository,0.354,BranchPruner,6,2.046
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.259,BranchPruner,6,2.046
BranchPruner does not prune if there is no default branch,0.258,BranchPruner,6,2.046
BranchPruner does not prune reserved branches,0.346,BranchPruner,6,2.046
git/status getStatus with conflicted repo parses conflicted files with markers,0.318,git/status,12,2.105
git/status getStatus with conflicted repo parses conflicted files without markers,0.322,git/status,12,2.105
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.413,git/status,12,2.105
git/status getStatus with conflicted repo parses resolved files,0.314,git/status,12,2.105
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.122,git/status,12,2.105
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.194,git/status,12,2.105
git/status getStatus with unconflicted repo parses changed files,0.063,git/status,12,2.105
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.057,git/status,12,2.105
git/status getStatus with unconflicted repo reflects renames,0.097,git/status,12,2.105
git/status getStatus with unconflicted repo reflects copies,0.104,git/status,12,2.105
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.054,git/status,12,2.105
git/branch tip returns unborn for new repository,0.025,git/branch,13,1.435
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,13,1.435
git/branch tip returns detached for arbitrary checkout,0.053,git/branch,13,1.435
git/branch tip returns current branch when on a valid HEAD,0.071,git/branch,13,1.435
git/branch tip returns non-origin remote,0.076,git/branch,13,1.435
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,13,1.435
git/branch getBranchesPointedAt in a local repo finds one branch name,0.055,git/branch,13,1.435
git/branch getBranchesPointedAt in a local repo finds no branch names,0.058,git/branch,13,1.435
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.435
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.082,git/branch,13,1.435
git/branch deleteBranch deletes local branches,0.126,git/branch,13,1.435
git/branch deleteBranch deletes remote branches,0.304,git/branch,13,1.435
git/branch deleteBranch handles attempted delete of removed remote branch,0.355,git/branch,13,1.435
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.05,git/diff,19,1.883
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.883
git/diff getBlobImage retrieves valid image for modified file,0.092,git/diff,19,1.883
git/diff getBlobImage retrieves valid images for deleted file,0.065,git/diff,19,1.883
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.883
git/diff imageDiff changes for text are not set,0.085,git/diff,19,1.883
git/diff getWorkingDirectoryDiff counts lines for new file,0.097,git/diff,19,1.883
git/diff getWorkingDirectoryDiff counts lines for modified file,0.087,git/diff,19,1.883
git/diff getWorkingDirectoryDiff counts lines for staged file,0.098,git/diff,19,1.883
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,1.883
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.147,git/diff,19,1.883
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.156,git/diff,19,1.883
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.131,git/diff,19,1.883
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.132,git/diff,19,1.883
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.081,git/diff,19,1.883
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.064,git/diff,19,1.883
git/diff getBinaryPaths in repo with text only files returns an empty array,0.088,git/diff,19,1.883
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.107,git/diff,19,1.883
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.114,git/diff,19,1.883
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.109,git/stash,14,1.369
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.14,git/stash,14,1.369
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.101,git/stash,14,1.369
git/checkout can checkout a valid branch name in an existing repository,0.129,git/checkout,6,1.04
git/checkout can checkout a branch when it exists on multiple remotes,0.135,git/checkout,6,1.04
git/checkout will fail when an existing branch matches the remote branch,0.132,git/checkout,6,1.04
git/checkout with submodules cleans up an submodule that no longer exists,0.303,git/checkout,6,1.04
git/checkout with submodules updates a changed submodule reference,0.269,git/checkout,6,1.04
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.457,formatPatch,5,1.174
git/reflog getRecentBranches returns the recently checked out branches,0.165,git/reflog,6,1.175
git/reflog getRecentBranches works after renaming a branch,0.214,git/reflog,6,1.175
git/reflog getRecentBranches returns a limited number of branches,0.292,git/reflog,6,1.175
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.17,git/reflog,6,1.175
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.213,git/reflog,6,1.175
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.078,git/reflog,6,1.175
git/submodule listSubmodules returns the submodule entry,0.13,git/submodule,3,0.702
git/submodule listSubmodules returns the expected tag,0.188,git/submodule,3,0.702
git/submodule resetSubmodulePaths update submodule to original commit,0.345,git/submodule,3,0.702
git/config config looks up config values,0.122,git/config,12,0.946
git/config config returns null for undefined values,0.053,git/config,12,0.946
git/config global config getGlobalConfigPath gets the config path,0.07,git/config,12,0.946
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.946
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.946
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.071,git/config,12,0.946
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.946
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.946
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,0.946
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.079,git/config,12,0.946
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.946
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.946
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.798
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.798
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.798
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.798
git/rev-parse isBareRepository returns false for empty directory,0.057,git/rev-parse,10,0.798
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.798
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.068,git/rev-parse,10,0.798
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.06,git/rev-parse,10,0.798
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.052,git/rev-parse,10,0.798
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.212,git/rev-parse,10,0.798
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.714
gitignore saveGitIgnore applies rule correctly to repository,0.103,gitignore,9,0.714
gitignore appendIgnoreRule appends one rule,0.123,gitignore,9,0.714
gitignore appendIgnoreRule appends multiple rules,0.127,gitignore,9,0.714
git/log getCommits loads history,0.075,git/log,7,0.643
git/log getCommits handles repository with HEAD file on disk,0.092,git/log,7,0.643
git/log getCommits handles repository with signed commit and log.showSignature set,0.107,git/log,7,0.643
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.643
git/log getChangedFiles detects renames,0.1,git/log,7,0.643
git/log getChangedFiles detect copies,0.112,git/log,7,0.643
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.643
git-lfs isUsingLFS returns false for repository not using LFS,0.064,git-lfs,9,0.562
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.562
git/merge merge and is successful returns true,0.05,git/merge,7,0.619
git/merge merge and is a noop returns false,0.062,git/merge,7,0.619
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.619
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.599
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.599
git/remote findDefaultRemote returns something when origin removed,0.069,git/remote,11,0.599
AppStore can select a repository,0.188,AppStore,5,0.246
Update remote url updates the repository's remote url when the github url changes,0.325,Update remote url,4,0.632
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.632
Update remote url doesn't update repository's remote url if protocols don't match,0.081,Update remote url,4,0.632
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.09,Update remote url,4,0.632
git/core error handling does not throw for errors that were expected,0.154,git/core,6,0.476
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.476
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.476
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.476
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.476
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.476
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.039,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.379
git/for-each-ref getBranches fetches branches using for-each-ref,0.078,git/for-each-ref,3,0.25
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.25
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.25
git/reset reset can hard reset a repository,0.089,git/reset,2,0.132
validatedRepositoryPath returns the path to the repository,0.061,validatedRepositoryPath,2,0.114
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.059
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.336,git/rebase,21,8.077
git/rebase detect conflicts status detects REBASE_HEAD,0.28,git/rebase,21,8.077
git/rebase detect conflicts has conflicted files in working directory,0.278,git/rebase,21,8.077
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,8.077
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.268,git/rebase,21,8.077
git/rebase abort after conflicts found no longer has working directory changes,0.269,git/rebase,21,8.077
git/rebase abort after conflicts found returns to the feature branch,0.268,git/rebase,21,8.077
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.36,git/rebase,21,8.077
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.338,git/rebase,21,8.077
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.341,git/rebase,21,8.077
git/rebase continue after resolving conflicts returns success,0.405,git/rebase,21,8.077
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.399,git/rebase,21,8.077
git/rebase continue after resolving conflicts no longer has working directory changes,0.401,git/rebase,21,8.077
git/rebase continue after resolving conflicts returns to the feature branch,0.408,git/rebase,21,8.077
git/rebase continue after resolving conflicts branch is now a different ref,0.41,git/rebase,21,8.077
git/rebase continue with additional changes unrelated to conflicted files returns success,0.406,git/rebase,21,8.077
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.406,git/rebase,21,8.077
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.415,git/rebase,21,8.077
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.422,git/rebase,21,8.077
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.417,git/rebase,21,8.077
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.077
git/commit createCommit normal commits the given files,0.128,git/commit,21,4.727
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.727
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.727
git/commit createCommit normal can commit renames,0.163,git/commit,21,4.727
git/commit createCommit partials can commit some lines from new file,0.194,git/commit,21,4.727
git/commit createCommit partials can commit second hunk from modified file,0.2,git/commit,21,4.727
git/commit createCommit partials can commit single delete from modified file,0.179,git/commit,21,4.727
git/commit createCommit partials can commit multiple hunks from modified file,0.203,git/commit,21,4.727
git/commit createCommit partials can commit some lines from deleted file,0.193,git/commit,21,4.727
git/commit createCommit partials can commit renames with modifications,0.2,git/commit,21,4.727
git/commit createCommit partials can commit renames with partially selected modifications,0.236,git/commit,21,4.727
git/commit createCommit with a merge conflict creates a merge commit,0.269,git/commit,21,4.727
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.247,git/commit,21,4.727
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.359,git/commit,21,4.727
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.343,git/commit,21,4.727
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.434,git/commit,21,4.727
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.424,git/commit,21,4.727
git/commit createMergeCommit with no changes throws an error,0.109,git/commit,21,4.727
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.727
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.191,git/commit,21,4.727
git/commit index corner cases file is deleted in index,0.189,git/commit,21,4.727
git/rebase can parse progress returns a value indicating conflicts were encountered,0.419,git/rebase,7,4.053
git/rebase can parse progress status detects REBASE_HEAD,0.422,git/rebase,7,4.053
git/rebase can parse progress is a detached HEAD state,0.424,git/rebase,7,4.053
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.881,git/rebase,7,4.053
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.891,git/rebase,7,4.053
git/rebase can parse progress for long rebase is a detached HEAD state,0.963,git/rebase,7,4.053
GitStore loadCommitBatch includes HEAD when loading commits,0.396,GitStore,11,2.692
GitStore can discard changes from a repository,0.173,GitStore,11,2.692
GitStore can discard a renamed file,0.175,GitStore,11,2.692
GitStore undo first commit reports the repository is unborn,0.203,GitStore,11,2.692
GitStore undo first commit pre-fills the commit message,0.134,GitStore,11,2.692
GitStore undo first commit clears the undo commit dialog,0.227,GitStore,11,2.692
GitStore undo first commit has no staged files,0.219,GitStore,11,2.692
GitStore repository with HEAD file can discard modified change cleanly,0.123,GitStore,11,2.692
git/status getStatus with conflicted repo parses conflicted files with markers,0.333,git/status,12,2.196
git/status getStatus with conflicted repo parses conflicted files without markers,0.329,git/status,12,2.196
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.448,git/status,12,2.196
git/status getStatus with conflicted repo parses resolved files,0.343,git/status,12,2.196
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.129,git/status,12,2.196
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.196
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,2.196
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.057,git/status,12,2.196
git/status getStatus with unconflicted repo reflects renames,0.117,git/status,12,2.196
git/status getStatus with unconflicted repo reflects copies,0.111,git/status,12,2.196
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.053,git/status,12,2.196
BranchPruner does nothing on non GitHub repositories,0.302,BranchPruner,6,2.104
BranchPruner prunes for GitHub repository,0.359,BranchPruner,6,2.104
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.28,BranchPruner,6,2.104
BranchPruner does not prune if there is no default branch,0.278,BranchPruner,6,2.104
BranchPruner does not prune reserved branches,0.352,BranchPruner,6,2.104
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.047,git/diff,19,1.953
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.953
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,1.953
git/diff getBlobImage retrieves valid images for deleted file,0.074,git/diff,19,1.953
git/diff imageDiff changes for images are set,0.085,git/diff,19,1.953
git/diff imageDiff changes for text are not set,0.152,git/diff,19,1.953
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,1.953
git/diff getWorkingDirectoryDiff counts lines for modified file,0.098,git/diff,19,1.953
git/diff getWorkingDirectoryDiff counts lines for staged file,0.083,git/diff,19,1.953
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.124,git/diff,19,1.953
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.156,git/diff,19,1.953
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.158,git/diff,19,1.953
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.146,git/diff,19,1.953
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.128,git/diff,19,1.953
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.953
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.072,git/diff,19,1.953
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,1.953
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.095,git/diff,19,1.953
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.117,git/diff,19,1.953
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.547
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.547
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.547
git/branch tip returns current branch when on a valid HEAD,0.084,git/branch,13,1.547
git/branch tip returns non-origin remote,0.084,git/branch,13,1.547
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,13,1.547
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.547
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.547
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.055,git/branch,13,1.547
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.547
git/branch deleteBranch deletes local branches,0.126,git/branch,13,1.547
git/branch deleteBranch deletes remote branches,0.332,git/branch,13,1.547
git/branch deleteBranch handles attempted delete of removed remote branch,0.388,git/branch,13,1.547
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.374
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.145,git/stash,14,1.374
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.374
git/reflog getRecentBranches returns the recently checked out branches,0.152,git/reflog,6,1.074
git/reflog getRecentBranches works after renaming a branch,0.194,git/reflog,6,1.074
git/reflog getRecentBranches returns a limited number of branches,0.268,git/reflog,6,1.074
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.155,git/reflog,6,1.074
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.192,git/reflog,6,1.074
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.074
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.435,formatPatch,5,1.116
git/checkout can checkout a valid branch name in an existing repository,0.13,git/checkout,6,1.024
git/checkout can checkout a branch when it exists on multiple remotes,0.134,git/checkout,6,1.024
git/checkout will fail when an existing branch matches the remote branch,0.13,git/checkout,6,1.024
git/checkout with submodules cleans up an submodule that no longer exists,0.299,git/checkout,6,1.024
git/checkout with submodules updates a changed submodule reference,0.258,git/checkout,6,1.024
git/config config looks up config values,0.057,git/config,12,0.9
git/config config returns null for undefined values,0.056,git/config,12,0.9
git/config global config getGlobalConfigPath gets the config path,0.073,git/config,12,0.9
git/config global config setGlobalConfigValue will replace all entries for a global value,0.099,git/config,12,0.9
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.074,git/config,12,0.9
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.9
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.072,git/config,12,0.9
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.9
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.9
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.073,git/config,12,0.9
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.071,git/config,12,0.9
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.074,git/config,12,0.9
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.811
git/rev-parse isGitRepository should return false for a directory,0.057,git/rev-parse,10,0.811
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.811
git/rev-parse isBareRepository returns true for initialized bare repository,0.072,git/rev-parse,10,0.811
git/rev-parse isBareRepository returns false for empty directory,0.062,git/rev-parse,10,0.811
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.811
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.811
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.061,git/rev-parse,10,0.811
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.811
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.204,git/rev-parse,10,0.811
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.764
gitignore saveGitIgnore applies rule correctly to repository,0.112,gitignore,9,0.764
gitignore appendIgnoreRule appends one rule,0.134,gitignore,9,0.764
gitignore appendIgnoreRule appends multiple rules,0.134,gitignore,9,0.764
git/submodule listSubmodules returns the submodule entry,0.144,git/submodule,3,0.746
git/submodule listSubmodules returns the expected tag,0.203,git/submodule,3,0.746
git/submodule resetSubmodulePaths update submodule to original commit,0.359,git/submodule,3,0.746
git/log getCommits loads history,0.075,git/log,7,0.675
git/log getCommits handles repository with HEAD file on disk,0.105,git/log,7,0.675
git/log getCommits handles repository with signed commit and log.showSignature set,0.122,git/log,7,0.675
git/log getChangedFiles loads the files changed in the commit,0.061,git/log,7,0.675
git/log getChangedFiles detects renames,0.109,git/log,7,0.675
git/log getChangedFiles detect copies,0.107,git/log,7,0.675
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.675
Update remote url updates the repository's remote url when the github url changes,0.118,Update remote url,4,0.436
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.436
Update remote url doesn't update repository's remote url if protocols don't match,0.089,Update remote url,4,0.436
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.087,Update remote url,4,0.436
git/merge merge and is successful returns true,0.05,git/merge,7,0.712
git/merge merge and is a noop returns false,0.066,git/merge,7,0.712
git/merge getMergeBase returns the common ancestor of two branches,0.082,git/merge,7,0.712
git/remote getRemotes should return both remotes,0.062,git/remote,11,0.654
git/remote findDefaultRemote returns origin when multiple remotes found,0.067,git/remote,11,0.654
git/remote findDefaultRemote returns something when origin removed,0.073,git/remote,11,0.654
git-lfs isUsingLFS returns false for repository not using LFS,0.064,git-lfs,9,0.645
git-lfs isUsingLFS returns true if LFS is tracking a path,0.087,git-lfs,9,0.645
git/core error handling does not throw for errors that were expected,0.061,git/core,6,0.358
git/core error handling throws for errors that were not expected,0.054,git/core,6,0.358
git/core exit code handling does not throw for exit codes that were expected,0.053,git/core,6,0.358
git/core exit code handling throws for exit codes that were not expected,0.053,git/core,6,0.358
git/core config lock file error handling can parse lock file path from stderr,0.056,git/core,6,0.358
git/core config lock file error handling normalizes paths,0.038,git/core,6,0.358
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.048,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.054,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.365
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.365
git/for-each-ref getBranches fetches branches using for-each-ref,0.074,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.057,git/for-each-ref,3,0.242
AppStore can select a repository,0.221,AppStore,5,0.277
git/reset reset can hard reset a repository,0.35,git/reset,2,0.389
validatedRepositoryPath returns the path to the repository,0.063,validatedRepositoryPath,2,0.121
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.02,git/git-attributes,1,0.063
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.342,git/rebase,21,8.087
git/rebase detect conflicts status detects REBASE_HEAD,0.285,git/rebase,21,8.087
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.087
git/rebase detect conflicts is a detached HEAD state,0.285,git/rebase,21,8.087
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.272,git/rebase,21,8.087
git/rebase abort after conflicts found no longer has working directory changes,0.276,git/rebase,21,8.087
git/rebase abort after conflicts found returns to the feature branch,0.274,git/rebase,21,8.087
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.354,git/rebase,21,8.087
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.347,git/rebase,21,8.087
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.341,git/rebase,21,8.087
git/rebase continue after resolving conflicts returns success,0.4,git/rebase,21,8.087
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.403,git/rebase,21,8.087
git/rebase continue after resolving conflicts no longer has working directory changes,0.409,git/rebase,21,8.087
git/rebase continue after resolving conflicts returns to the feature branch,0.414,git/rebase,21,8.087
git/rebase continue after resolving conflicts branch is now a different ref,0.414,git/rebase,21,8.087
git/rebase continue with additional changes unrelated to conflicted files returns success,0.413,git/rebase,21,8.087
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.409,git/rebase,21,8.087
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.421,git/rebase,21,8.087
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.424,git/rebase,21,8.087
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.428,git/rebase,21,8.087
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.397,git/rebase,21,8.087
git/commit createCommit normal commits the given files,0.13,git/commit,21,4.815
git/commit createCommit normal commit does not strip commentary by default,0.113,git/commit,21,4.815
git/commit createCommit normal can commit for empty repository,0.142,git/commit,21,4.815
git/commit createCommit normal can commit renames,0.167,git/commit,21,4.815
git/commit createCommit partials can commit some lines from new file,0.193,git/commit,21,4.815
git/commit createCommit partials can commit second hunk from modified file,0.207,git/commit,21,4.815
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.815
git/commit createCommit partials can commit multiple hunks from modified file,0.211,git/commit,21,4.815
git/commit createCommit partials can commit some lines from deleted file,0.198,git/commit,21,4.815
git/commit createCommit partials can commit renames with modifications,0.198,git/commit,21,4.815
git/commit createCommit partials can commit renames with partially selected modifications,0.244,git/commit,21,4.815
git/commit createCommit with a merge conflict creates a merge commit,0.271,git/commit,21,4.815
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.261,git/commit,21,4.815
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.355,git/commit,21,4.815
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.35,git/commit,21,4.815
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.432,git/commit,21,4.815
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.431,git/commit,21,4.815
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.815
git/commit index corner cases can commit when staged new file is then deleted,0.165,git/commit,21,4.815
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.192,git/commit,21,4.815
git/commit index corner cases file is deleted in index,0.191,git/commit,21,4.815
git/rebase can parse progress returns a value indicating conflicts were encountered,0.419,git/rebase,7,4.052
git/rebase can parse progress status detects REBASE_HEAD,0.43,git/rebase,7,4.052
git/rebase can parse progress is a detached HEAD state,0.427,git/rebase,7,4.052
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.895,git/rebase,7,4.052
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.911,git/rebase,7,4.052
git/rebase can parse progress for long rebase is a detached HEAD state,0.917,git/rebase,7,4.052
GitStore loadCommitBatch includes HEAD when loading commits,0.402,GitStore,11,2.761
GitStore can discard changes from a repository,0.192,GitStore,11,2.761
GitStore can discard a renamed file,0.158,GitStore,11,2.761
GitStore undo first commit reports the repository is unborn,0.201,GitStore,11,2.761
GitStore undo first commit pre-fills the commit message,0.132,GitStore,11,2.761
GitStore undo first commit clears the undo commit dialog,0.228,GitStore,11,2.761
GitStore undo first commit has no staged files,0.225,GitStore,11,2.761
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.761
git/status getStatus with conflicted repo parses conflicted files with markers,0.361,git/status,12,2.2
git/status getStatus with conflicted repo parses conflicted files without markers,0.324,git/status,12,2.2
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.427,git/status,12,2.2
git/status getStatus with conflicted repo parses resolved files,0.323,git/status,12,2.2
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.2
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.157,git/status,12,2.2
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.2
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.2
git/status getStatus with unconflicted repo reflects renames,0.12,git/status,12,2.2
git/status getStatus with unconflicted repo reflects copies,0.122,git/status,12,2.2
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.2
BranchPruner does nothing on non GitHub repositories,0.285,BranchPruner,6,1.771
BranchPruner prunes for GitHub repository,0.294,BranchPruner,6,1.771
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.241,BranchPruner,6,1.771
BranchPruner does not prune if there is no default branch,0.241,BranchPruner,6,1.771
BranchPruner does not prune reserved branches,0.3,BranchPruner,6,1.771
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.051,git/diff,19,1.923
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.923
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,1.923
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.923
git/diff imageDiff changes for images are set,0.078,git/diff,19,1.923
git/diff imageDiff changes for text are not set,0.098,git/diff,19,1.923
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,1.923
git/diff getWorkingDirectoryDiff counts lines for modified file,0.088,git/diff,19,1.923
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,1.923
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.134,git/diff,19,1.923
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.156,git/diff,19,1.923
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.161,git/diff,19,1.923
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.138,git/diff,19,1.923
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.127,git/diff,19,1.923
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.088,git/diff,19,1.923
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,1.923
git/diff getBinaryPaths in repo with text only files returns an empty array,0.097,git/diff,19,1.923
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.111,git/diff,19,1.923
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.128,git/diff,19,1.923
git/branch tip returns unborn for new repository,0.028,git/branch,13,1.567
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,13,1.567
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.567
git/branch tip returns current branch when on a valid HEAD,0.087,git/branch,13,1.567
git/branch tip returns non-origin remote,0.088,git/branch,13,1.567
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.088,git/branch,13,1.567
git/branch getBranchesPointedAt in a local repo finds one branch name,0.061,git/branch,13,1.567
git/branch getBranchesPointedAt in a local repo finds no branch names,0.052,git/branch,13,1.567
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.051,git/branch,13,1.567
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.567
git/branch deleteBranch deletes local branches,0.133,git/branch,13,1.567
git/branch deleteBranch deletes remote branches,0.334,git/branch,13,1.567
git/branch deleteBranch handles attempted delete of removed remote branch,0.396,git/branch,13,1.567
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.118,git/stash,14,1.454
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.148,git/stash,14,1.454
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.107,git/stash,14,1.454
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.394,formatPatch,5,1.084
git/reflog getRecentBranches returns the recently checked out branches,0.166,git/reflog,6,1.162
git/reflog getRecentBranches works after renaming a branch,0.214,git/reflog,6,1.162
git/reflog getRecentBranches returns a limited number of branches,0.287,git/reflog,6,1.162
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.17,git/reflog,6,1.162
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.21,git/reflog,6,1.162
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.162
git/checkout can checkout a valid branch name in an existing repository,0.135,git/checkout,6,1.057
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.057
git/checkout will fail when an existing branch matches the remote branch,0.132,git/checkout,6,1.057
git/checkout with submodules cleans up an submodule that no longer exists,0.308,git/checkout,6,1.057
git/checkout with submodules updates a changed submodule reference,0.27,git/checkout,6,1.057
git/config config looks up config values,0.116,git/config,12,0.971
git/config config returns null for undefined values,0.057,git/config,12,0.971
git/config global config getGlobalConfigPath gets the config path,0.079,git/config,12,0.971
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,12,0.971
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.971
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.971
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.971
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.075,git/config,12,0.971
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.074,git/config,12,0.971
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.971
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.078,git/config,12,0.971
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.072,git/config,12,0.971
git/rev-parse isGitRepository should return true for a repository,0.059,git/rev-parse,10,0.806
git/rev-parse isGitRepository should return false for a directory,0.053,git/rev-parse,10,0.806
git/rev-parse isBareRepository returns false for default initialized repository,0.069,git/rev-parse,10,0.806
git/rev-parse isBareRepository returns true for initialized bare repository,0.076,git/rev-parse,10,0.806
git/rev-parse isBareRepository returns false for empty directory,0.06,git/rev-parse,10,0.806
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.806
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.068,git/rev-parse,10,0.806
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.806
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.806
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.199,git/rev-parse,10,0.806
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.733
gitignore saveGitIgnore applies rule correctly to repository,0.112,gitignore,9,0.733
gitignore appendIgnoreRule appends one rule,0.125,gitignore,9,0.733
gitignore appendIgnoreRule appends multiple rules,0.127,gitignore,9,0.733
git/submodule listSubmodules returns the submodule entry,0.137,git/submodule,3,0.706
git/submodule listSubmodules returns the expected tag,0.188,git/submodule,3,0.706
git/submodule resetSubmodulePaths update submodule to original commit,0.341,git/submodule,3,0.706
git/merge merge and is successful returns true,0.047,git/merge,7,0.598
git/merge merge and is a noop returns false,0.06,git/merge,7,0.598
git/merge getMergeBase returns the common ancestor of two branches,0.07,git/merge,7,0.598
git/log getCommits loads history,0.071,git/log,7,0.669
git/log getCommits handles repository with HEAD file on disk,0.098,git/log,7,0.669
git/log getCommits handles repository with signed commit and log.showSignature set,0.133,git/log,7,0.669
git/log getChangedFiles loads the files changed in the commit,0.062,git/log,7,0.669
git/log getChangedFiles detects renames,0.101,git/log,7,0.669
git/log getChangedFiles detect copies,0.107,git/log,7,0.669
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.669
git/remote getRemotes should return both remotes,0.064,git/remote,11,0.617
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.617
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.617
git-lfs isUsingLFS returns false for repository not using LFS,0.066,git-lfs,9,0.576
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.576
Update remote url updates the repository's remote url when the github url changes,0.208,Update remote url,4,0.521
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.521
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.521
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.521
git/reset reset can hard reset a repository,0.081,git/reset,2,0.124
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.381
git/core error handling does not throw for errors that were expected,0.062,git/core,6,0.386
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.386
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.386
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.386
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.386
git/core config lock file error handling normalizes paths,0.049,git/core,6,0.386
AppStore can select a repository,0.204,AppStore,5,0.26
git/for-each-ref getBranches fetches branches using for-each-ref,0.312,git/for-each-ref,3,0.492
git/for-each-ref getBranches should return empty list for empty repo,0.079,git/for-each-ref,3,0.492
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.492
validatedRepositoryPath returns the path to the repository,0.056,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.344,git/rebase,21,8.149
git/rebase detect conflicts status detects REBASE_HEAD,0.279,git/rebase,21,8.149
git/rebase detect conflicts has conflicted files in working directory,0.28,git/rebase,21,8.149
git/rebase detect conflicts is a detached HEAD state,0.282,git/rebase,21,8.149
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.274,git/rebase,21,8.149
git/rebase abort after conflicts found no longer has working directory changes,0.278,git/rebase,21,8.149
git/rebase abort after conflicts found returns to the feature branch,0.278,git/rebase,21,8.149
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.364,git/rebase,21,8.149
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.347,git/rebase,21,8.149
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.344,git/rebase,21,8.149
git/rebase continue after resolving conflicts returns success,0.404,git/rebase,21,8.149
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.402,git/rebase,21,8.149
git/rebase continue after resolving conflicts no longer has working directory changes,0.405,git/rebase,21,8.149
git/rebase continue after resolving conflicts returns to the feature branch,0.417,git/rebase,21,8.149
git/rebase continue after resolving conflicts branch is now a different ref,0.42,git/rebase,21,8.149
git/rebase continue with additional changes unrelated to conflicted files returns success,0.416,git/rebase,21,8.149
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.413,git/rebase,21,8.149
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.421,git/rebase,21,8.149
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.425,git/rebase,21,8.149
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.433,git/rebase,21,8.149
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.408,git/rebase,21,8.149
git/commit createCommit normal commits the given files,0.133,git/commit,21,4.875
git/commit createCommit normal commit does not strip commentary by default,0.117,git/commit,21,4.875
git/commit createCommit normal can commit for empty repository,0.143,git/commit,21,4.875
git/commit createCommit normal can commit renames,0.165,git/commit,21,4.875
git/commit createCommit partials can commit some lines from new file,0.192,git/commit,21,4.875
git/commit createCommit partials can commit second hunk from modified file,0.205,git/commit,21,4.875
git/commit createCommit partials can commit single delete from modified file,0.189,git/commit,21,4.875
git/commit createCommit partials can commit multiple hunks from modified file,0.212,git/commit,21,4.875
git/commit createCommit partials can commit some lines from deleted file,0.201,git/commit,21,4.875
git/commit createCommit partials can commit renames with modifications,0.202,git/commit,21,4.875
git/commit createCommit partials can commit renames with partially selected modifications,0.257,git/commit,21,4.875
git/commit createCommit with a merge conflict creates a merge commit,0.282,git/commit,21,4.875
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.262,git/commit,21,4.875
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.366,git/commit,21,4.875
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.349,git/commit,21,4.875
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.445,git/commit,21,4.875
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.432,git/commit,21,4.875
git/commit createMergeCommit with no changes throws an error,0.117,git/commit,21,4.875
git/commit index corner cases can commit when staged new file is then deleted,0.166,git/commit,21,4.875
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.19,git/commit,21,4.875
git/commit index corner cases file is deleted in index,0.187,git/commit,21,4.875
git/rebase can parse progress returns a value indicating conflicts were encountered,0.433,git/rebase,7,4.058
git/rebase can parse progress status detects REBASE_HEAD,0.431,git/rebase,7,4.058
git/rebase can parse progress is a detached HEAD state,0.437,git/rebase,7,4.058
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.886,git/rebase,7,4.058
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.91,git/rebase,7,4.058
git/rebase can parse progress for long rebase is a detached HEAD state,0.907,git/rebase,7,4.058
GitStore loadCommitBatch includes HEAD when loading commits,0.369,GitStore,11,2.684
GitStore can discard changes from a repository,0.176,GitStore,11,2.684
GitStore can discard a renamed file,0.157,GitStore,11,2.684
GitStore undo first commit reports the repository is unborn,0.197,GitStore,11,2.684
GitStore undo first commit pre-fills the commit message,0.136,GitStore,11,2.684
GitStore undo first commit clears the undo commit dialog,0.231,GitStore,11,2.684
GitStore undo first commit has no staged files,0.228,GitStore,11,2.684
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.684
git/status getStatus with conflicted repo parses conflicted files with markers,0.356,git/status,12,2.173
git/status getStatus with conflicted repo parses conflicted files without markers,0.316,git/status,12,2.173
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.417,git/status,12,2.173
git/status getStatus with conflicted repo parses resolved files,0.319,git/status,12,2.173
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.127,git/status,12,2.173
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.173
git/status getStatus with unconflicted repo parses changed files,0.071,git/status,12,2.173
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.173
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.173
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.173
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.173
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.051,git/diff,19,1.923
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.923
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,1.923
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.923
git/diff imageDiff changes for images are set,0.13,git/diff,19,1.923
git/diff imageDiff changes for text are not set,0.093,git/diff,19,1.923
git/diff getWorkingDirectoryDiff counts lines for new file,0.097,git/diff,19,1.923
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.923
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.923
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.116,git/diff,19,1.923
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.141,git/diff,19,1.923
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.151,git/diff,19,1.923
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.13,git/diff,19,1.923
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.121,git/diff,19,1.923
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.093,git/diff,19,1.923
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.071,git/diff,19,1.923
git/diff getBinaryPaths in repo with text only files returns an empty array,0.111,git/diff,19,1.923
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.103,git/diff,19,1.923
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.118,git/diff,19,1.923
BranchPruner does nothing on non GitHub repositories,0.243,BranchPruner,6,1.818
BranchPruner prunes for GitHub repository,0.317,BranchPruner,6,1.818
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.256,BranchPruner,6,1.818
BranchPruner does not prune if there is no default branch,0.254,BranchPruner,6,1.818
BranchPruner does not prune reserved branches,0.312,BranchPruner,6,1.818
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.506
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.506
git/branch tip returns detached for arbitrary checkout,0.062,git/branch,13,1.506
git/branch tip returns current branch when on a valid HEAD,0.076,git/branch,13,1.506
git/branch tip returns non-origin remote,0.081,git/branch,13,1.506
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.082,git/branch,13,1.506
git/branch getBranchesPointedAt in a local repo finds one branch name,0.053,git/branch,13,1.506
git/branch getBranchesPointedAt in a local repo finds no branch names,0.05,git/branch,13,1.506
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.506
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.083,git/branch,13,1.506
git/branch deleteBranch deletes local branches,0.129,git/branch,13,1.506
git/branch deleteBranch deletes remote branches,0.323,git/branch,13,1.506
git/branch deleteBranch handles attempted delete of removed remote branch,0.389,git/branch,13,1.506
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.113,git/stash,14,1.401
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.141,git/stash,14,1.401
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.101,git/stash,14,1.401
git/reflog getRecentBranches returns the recently checked out branches,0.16,git/reflog,6,1.106
git/reflog getRecentBranches works after renaming a branch,0.199,git/reflog,6,1.106
git/reflog getRecentBranches returns a limited number of branches,0.262,git/reflog,6,1.106
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.106
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.209,git/reflog,6,1.106
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.106
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.458,formatPatch,5,1.149
git/checkout can checkout a valid branch name in an existing repository,0.136,git/checkout,6,1.074
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.074
git/checkout will fail when an existing branch matches the remote branch,0.137,git/checkout,6,1.074
git/checkout with submodules cleans up an submodule that no longer exists,0.316,git/checkout,6,1.074
git/checkout with submodules updates a changed submodule reference,0.273,git/checkout,6,1.074
git/config config looks up config values,0.058,git/config,12,0.924
git/config config returns null for undefined values,0.056,git/config,12,0.924
git/config global config getGlobalConfigPath gets the config path,0.07,git/config,12,0.924
git/config global config setGlobalConfigValue will replace all entries for a global value,0.105,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.075,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.072,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.074,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.076,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.076,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.074,git/config,12,0.924
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.073,git/config,12,0.924
git/rev-parse isGitRepository should return true for a repository,0.06,git/rev-parse,10,0.852
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.852
git/rev-parse isBareRepository returns false for default initialized repository,0.071,git/rev-parse,10,0.852
git/rev-parse isBareRepository returns true for initialized bare repository,0.079,git/rev-parse,10,0.852
git/rev-parse isBareRepository returns false for empty directory,0.073,git/rev-parse,10,0.852
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.852
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.852
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.061,git/rev-parse,10,0.852
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.063,git/rev-parse,10,0.852
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.217,git/rev-parse,10,0.852
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.787
gitignore saveGitIgnore applies rule correctly to repository,0.116,gitignore,9,0.787
gitignore appendIgnoreRule appends one rule,0.14,gitignore,9,0.787
gitignore appendIgnoreRule appends multiple rules,0.137,gitignore,9,0.787
git/submodule listSubmodules returns the submodule entry,0.143,git/submodule,3,0.834
git/submodule listSubmodules returns the expected tag,0.219,git/submodule,3,0.834
git/submodule resetSubmodulePaths update submodule to original commit,0.43,git/submodule,3,0.834
git/log getCommits loads history,0.072,git/log,7,0.66
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.66
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.66
git/log getChangedFiles loads the files changed in the commit,0.063,git/log,7,0.66
git/log getChangedFiles detects renames,0.097,git/log,7,0.66
git/log getChangedFiles detect copies,0.11,git/log,7,0.66
git/log getChangedFiles handles commit when HEAD exists on disk,0.061,git/log,7,0.66
git/remote getRemotes should return both remotes,0.065,git/remote,11,0.653
git/remote findDefaultRemote returns origin when multiple remotes found,0.067,git/remote,11,0.653
git/remote findDefaultRemote returns something when origin removed,0.076,git/remote,11,0.653
git/merge merge and is successful returns true,0.05,git/merge,7,0.703
git/merge merge and is a noop returns false,0.067,git/merge,7,0.703
git/merge getMergeBase returns the common ancestor of two branches,0.09,git/merge,7,0.703
git-lfs isUsingLFS returns false for repository not using LFS,0.064,git-lfs,9,0.633
git-lfs isUsingLFS returns true if LFS is tracking a path,0.085,git-lfs,9,0.633
Update remote url updates the repository's remote url when the github url changes,0.119,Update remote url,4,0.429
Update remote url doesn't update the repository's remote url when the github url is the same,0.09,Update remote url,4,0.429
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.429
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.429
git/for-each-ref getBranches fetches branches using for-each-ref,0.079,git/for-each-ref,3,0.251
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.251
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.251
git/core error handling does not throw for errors that were expected,0.062,git/core,6,0.382
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.382
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.382
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.382
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.382
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.382
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.057,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.056,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.04,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.395
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.395
AppStore can select a repository,0.229,AppStore,5,0.281
git/reset reset can hard reset a repository,0.353,git/reset,2,0.392
validatedRepositoryPath returns the path to the repository,0.062,validatedRepositoryPath,2,0.117
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.02,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.327,git/rebase,21,8.01
git/rebase detect conflicts status detects REBASE_HEAD,0.276,git/rebase,21,8.01
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,8.01
git/rebase detect conflicts is a detached HEAD state,0.279,git/rebase,21,8.01
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.269,git/rebase,21,8.01
git/rebase abort after conflicts found no longer has working directory changes,0.275,git/rebase,21,8.01
git/rebase abort after conflicts found returns to the feature branch,0.287,git/rebase,21,8.01
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.344,git/rebase,21,8.01
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.334,git/rebase,21,8.01
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.343,git/rebase,21,8.01
git/rebase continue after resolving conflicts returns success,0.397,git/rebase,21,8.01
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.396,git/rebase,21,8.01
git/rebase continue after resolving conflicts no longer has working directory changes,0.406,git/rebase,21,8.01
git/rebase continue after resolving conflicts returns to the feature branch,0.407,git/rebase,21,8.01
git/rebase continue after resolving conflicts branch is now a different ref,0.415,git/rebase,21,8.01
git/rebase continue with additional changes unrelated to conflicted files returns success,0.409,git/rebase,21,8.01
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.406,git/rebase,21,8.01
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.414,git/rebase,21,8.01
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.419,git/rebase,21,8.01
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.417,git/rebase,21,8.01
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.407,git/rebase,21,8.01
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.671
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.671
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.671
git/commit createCommit normal can commit renames,0.159,git/commit,21,4.671
git/commit createCommit partials can commit some lines from new file,0.191,git/commit,21,4.671
git/commit createCommit partials can commit second hunk from modified file,0.192,git/commit,21,4.671
git/commit createCommit partials can commit single delete from modified file,0.175,git/commit,21,4.671
git/commit createCommit partials can commit multiple hunks from modified file,0.197,git/commit,21,4.671
git/commit createCommit partials can commit some lines from deleted file,0.179,git/commit,21,4.671
git/commit createCommit partials can commit renames with modifications,0.197,git/commit,21,4.671
git/commit createCommit partials can commit renames with partially selected modifications,0.239,git/commit,21,4.671
git/commit createCommit with a merge conflict creates a merge commit,0.268,git/commit,21,4.671
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.244,git/commit,21,4.671
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.362,git/commit,21,4.671
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.339,git/commit,21,4.671
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.423,git/commit,21,4.671
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.426,git/commit,21,4.671
git/commit createMergeCommit with no changes throws an error,0.11,git/commit,21,4.671
git/commit index corner cases can commit when staged new file is then deleted,0.157,git/commit,21,4.671
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.189,git/commit,21,4.671
git/commit index corner cases file is deleted in index,0.19,git/commit,21,4.671
git/rebase can parse progress returns a value indicating conflicts were encountered,0.418,git/rebase,7,3.965
git/rebase can parse progress status detects REBASE_HEAD,0.423,git/rebase,7,3.965
git/rebase can parse progress is a detached HEAD state,0.422,git/rebase,7,3.965
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.868,git/rebase,7,3.965
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.886,git/rebase,7,3.965
git/rebase can parse progress for long rebase is a detached HEAD state,0.898,git/rebase,7,3.965
GitStore loadCommitBatch includes HEAD when loading commits,0.404,GitStore,11,2.731
GitStore can discard changes from a repository,0.174,GitStore,11,2.731
GitStore can discard a renamed file,0.184,GitStore,11,2.731
GitStore undo first commit reports the repository is unborn,0.203,GitStore,11,2.731
GitStore undo first commit pre-fills the commit message,0.134,GitStore,11,2.731
GitStore undo first commit clears the undo commit dialog,0.235,GitStore,11,2.731
GitStore undo first commit has no staged files,0.216,GitStore,11,2.731
GitStore repository with HEAD file can discard modified change cleanly,0.12,GitStore,11,2.731
git/status getStatus with conflicted repo parses conflicted files with markers,0.325,git/status,12,2.178
git/status getStatus with conflicted repo parses conflicted files without markers,0.324,git/status,12,2.178
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.424,git/status,12,2.178
git/status getStatus with conflicted repo parses resolved files,0.332,git/status,12,2.178
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.129,git/status,12,2.178
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.156,git/status,12,2.178
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.178
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.178
git/status getStatus with unconflicted repo reflects renames,0.122,git/status,12,2.178
git/status getStatus with unconflicted repo reflects copies,0.121,git/status,12,2.178
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.065,git/status,12,2.178
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.092,git/diff,19,2.078
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,2.078
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,2.078
git/diff getBlobImage retrieves valid images for deleted file,0.074,git/diff,19,2.078
git/diff imageDiff changes for images are set,0.085,git/diff,19,2.078
git/diff imageDiff changes for text are not set,0.095,git/diff,19,2.078
git/diff getWorkingDirectoryDiff counts lines for new file,0.1,git/diff,19,2.078
git/diff getWorkingDirectoryDiff counts lines for modified file,0.098,git/diff,19,2.078
git/diff getWorkingDirectoryDiff counts lines for staged file,0.088,git/diff,19,2.078
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.132,git/diff,19,2.078
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.18,git/diff,19,2.078
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.175,git/diff,19,2.078
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.146,git/diff,19,2.078
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.16,git/diff,19,2.078
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.102,git/diff,19,2.078
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,2.078
git/diff getBinaryPaths in repo with text only files returns an empty array,0.097,git/diff,19,2.078
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,2.078
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.127,git/diff,19,2.078
BranchPruner does nothing on non GitHub repositories,0.293,BranchPruner,6,1.828
BranchPruner prunes for GitHub repository,0.303,BranchPruner,6,1.828
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.249,BranchPruner,6,1.828
BranchPruner does not prune if there is no default branch,0.252,BranchPruner,6,1.828
BranchPruner does not prune reserved branches,0.301,BranchPruner,6,1.828
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.489
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.489
git/branch tip returns detached for arbitrary checkout,0.065,git/branch,13,1.489
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,13,1.489
git/branch tip returns non-origin remote,0.078,git/branch,13,1.489
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,13,1.489
git/branch getBranchesPointedAt in a local repo finds one branch name,0.053,git/branch,13,1.489
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.489
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.489
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.088,git/branch,13,1.489
git/branch deleteBranch deletes local branches,0.121,git/branch,13,1.489
git/branch deleteBranch deletes remote branches,0.316,git/branch,13,1.489
git/branch deleteBranch handles attempted delete of removed remote branch,0.382,git/branch,13,1.489
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.116,git/stash,14,1.403
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.147,git/stash,14,1.403
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.104,git/stash,14,1.403
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.445,formatPatch,5,1.102
git/reflog getRecentBranches returns the recently checked out branches,0.156,git/reflog,6,1.108
git/reflog getRecentBranches works after renaming a branch,0.199,git/reflog,6,1.108
git/reflog getRecentBranches returns a limited number of branches,0.265,git/reflog,6,1.108
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.163,git/reflog,6,1.108
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.204,git/reflog,6,1.108
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.079,git/reflog,6,1.108
git/checkout can checkout a valid branch name in an existing repository,0.128,git/checkout,6,0.995
git/checkout can checkout a branch when it exists on multiple remotes,0.129,git/checkout,6,0.995
git/checkout will fail when an existing branch matches the remote branch,0.121,git/checkout,6,0.995
git/checkout with submodules cleans up an submodule that no longer exists,0.287,git/checkout,6,0.995
git/checkout with submodules updates a changed submodule reference,0.258,git/checkout,6,0.995
git/config config looks up config values,0.054,git/config,12,0.863
git/config config returns null for undefined values,0.054,git/config,12,0.863
git/config global config getGlobalConfigPath gets the config path,0.064,git/config,12,0.863
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.069,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.073,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.863
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.776
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.776
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.776
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.776
git/rev-parse isBareRepository returns false for empty directory,0.061,git/rev-parse,10,0.776
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.776
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.776
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.776
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.776
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.196,git/rev-parse,10,0.776
git/submodule listSubmodules returns the submodule entry,0.122,git/submodule,3,0.712
git/submodule listSubmodules returns the expected tag,0.191,git/submodule,3,0.712
git/submodule resetSubmodulePaths update submodule to original commit,0.357,git/submodule,3,0.712
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.743
gitignore saveGitIgnore applies rule correctly to repository,0.109,gitignore,9,0.743
gitignore appendIgnoreRule appends one rule,0.133,gitignore,9,0.743
gitignore appendIgnoreRule appends multiple rules,0.133,gitignore,9,0.743
git/merge merge and is successful returns true,0.047,git/merge,7,0.645
git/merge merge and is a noop returns false,0.062,git/merge,7,0.645
git/merge getMergeBase returns the common ancestor of two branches,0.079,git/merge,7,0.645
git/log getCommits loads history,0.071,git/log,7,0.681
git/log getCommits handles repository with HEAD file on disk,0.105,git/log,7,0.681
git/log getCommits handles repository with signed commit and log.showSignature set,0.123,git/log,7,0.681
git/log getChangedFiles loads the files changed in the commit,0.062,git/log,7,0.681
git/log getChangedFiles detects renames,0.103,git/log,7,0.681
git/log getChangedFiles detect copies,0.112,git/log,7,0.681
git/log getChangedFiles handles commit when HEAD exists on disk,0.061,git/log,7,0.681
git/remote getRemotes should return both remotes,0.064,git/remote,11,0.654
git/remote findDefaultRemote returns origin when multiple remotes found,0.069,git/remote,11,0.654
git/remote findDefaultRemote returns something when origin removed,0.076,git/remote,11,0.654
git-lfs isUsingLFS returns false for repository not using LFS,0.068,git-lfs,9,0.622
git-lfs isUsingLFS returns true if LFS is tracking a path,0.086,git-lfs,9,0.622
Update remote url updates the repository's remote url when the github url changes,0.122,Update remote url,4,0.527
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.527
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.527
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.179,Update remote url,4,0.527
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.057,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.048,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.034,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.376
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.376
git/reset reset can hard reset a repository,0.079,git/reset,2,0.117
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.378
git/core error handling throws for errors that were not expected,0.057,git/core,6,0.378
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.378
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.378
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.378
git/core config lock file error handling normalizes paths,0.047,git/core,6,0.378
AppStore can select a repository,0.208,AppStore,5,0.267
git/for-each-ref getBranches fetches branches using for-each-ref,0.319,git/for-each-ref,3,0.5
git/for-each-ref getBranches should return empty list for empty repo,0.077,git/for-each-ref,3,0.5
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.5
validatedRepositoryPath returns the path to the repository,0.064,validatedRepositoryPath,2,0.119
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.326,git/rebase,21,8.011
git/rebase detect conflicts status detects REBASE_HEAD,0.28,git/rebase,21,8.011
git/rebase detect conflicts has conflicted files in working directory,0.277,git/rebase,21,8.011
git/rebase detect conflicts is a detached HEAD state,0.281,git/rebase,21,8.011
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.278,git/rebase,21,8.011
git/rebase abort after conflicts found no longer has working directory changes,0.265,git/rebase,21,8.011
git/rebase abort after conflicts found returns to the feature branch,0.267,git/rebase,21,8.011
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.347,git/rebase,21,8.011
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.336,git/rebase,21,8.011
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.344,git/rebase,21,8.011
git/rebase continue after resolving conflicts returns success,0.401,git/rebase,21,8.011
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.394,git/rebase,21,8.011
git/rebase continue after resolving conflicts no longer has working directory changes,0.405,git/rebase,21,8.011
git/rebase continue after resolving conflicts returns to the feature branch,0.408,git/rebase,21,8.011
git/rebase continue after resolving conflicts branch is now a different ref,0.404,git/rebase,21,8.011
git/rebase continue with additional changes unrelated to conflicted files returns success,0.401,git/rebase,21,8.011
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.4,git/rebase,21,8.011
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.413,git/rebase,21,8.011
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.426,git/rebase,21,8.011
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.424,git/rebase,21,8.011
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.412,git/rebase,21,8.011
git/commit createCommit normal commits the given files,0.127,git/commit,21,4.699
git/commit createCommit normal commit does not strip commentary by default,0.108,git/commit,21,4.699
git/commit createCommit normal can commit for empty repository,0.134,git/commit,21,4.699
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.699
git/commit createCommit partials can commit some lines from new file,0.192,git/commit,21,4.699
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.699
git/commit createCommit partials can commit single delete from modified file,0.187,git/commit,21,4.699
git/commit createCommit partials can commit multiple hunks from modified file,0.204,git/commit,21,4.699
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.699
git/commit createCommit partials can commit renames with modifications,0.196,git/commit,21,4.699
git/commit createCommit partials can commit renames with partially selected modifications,0.24,git/commit,21,4.699
git/commit createCommit with a merge conflict creates a merge commit,0.27,git/commit,21,4.699
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.246,git/commit,21,4.699
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.366,git/commit,21,4.699
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.335,git/commit,21,4.699
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.42,git/commit,21,4.699
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.425,git/commit,21,4.699
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.699
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.699
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.182,git/commit,21,4.699
git/commit index corner cases file is deleted in index,0.187,git/commit,21,4.699
git/rebase can parse progress returns a value indicating conflicts were encountered,0.417,git/rebase,7,3.98
git/rebase can parse progress status detects REBASE_HEAD,0.437,git/rebase,7,3.98
git/rebase can parse progress is a detached HEAD state,0.428,git/rebase,7,3.98
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.877,git/rebase,7,3.98
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.879,git/rebase,7,3.98
git/rebase can parse progress for long rebase is a detached HEAD state,0.89,git/rebase,7,3.98
GitStore loadCommitBatch includes HEAD when loading commits,0.42,GitStore,11,2.759
GitStore can discard changes from a repository,0.176,GitStore,11,2.759
GitStore can discard a renamed file,0.154,GitStore,11,2.759
GitStore undo first commit reports the repository is unborn,0.195,GitStore,11,2.759
GitStore undo first commit pre-fills the commit message,0.134,GitStore,11,2.759
GitStore undo first commit clears the undo commit dialog,0.231,GitStore,11,2.759
GitStore undo first commit has no staged files,0.222,GitStore,11,2.759
GitStore repository with HEAD file can discard modified change cleanly,0.165,GitStore,11,2.759
git/status getStatus with conflicted repo parses conflicted files with markers,0.315,git/status,12,2.17
git/status getStatus with conflicted repo parses conflicted files without markers,0.329,git/status,12,2.17
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.44,git/status,12,2.17
git/status getStatus with conflicted repo parses resolved files,0.328,git/status,12,2.17
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.128,git/status,12,2.17
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.17
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.17
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.06,git/status,12,2.17
git/status getStatus with unconflicted repo reflects renames,0.119,git/status,12,2.17
git/status getStatus with unconflicted repo reflects copies,0.114,git/status,12,2.17
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.055,git/status,12,2.17
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.093,git/diff,19,2.081
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,2.081
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,2.081
git/diff getBlobImage retrieves valid images for deleted file,0.076,git/diff,19,2.081
git/diff imageDiff changes for images are set,0.085,git/diff,19,2.081
git/diff imageDiff changes for text are not set,0.096,git/diff,19,2.081
git/diff getWorkingDirectoryDiff counts lines for new file,0.1,git/diff,19,2.081
git/diff getWorkingDirectoryDiff counts lines for modified file,0.101,git/diff,19,2.081
git/diff getWorkingDirectoryDiff counts lines for staged file,0.094,git/diff,19,2.081
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.138,git/diff,19,2.081
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.175,git/diff,19,2.081
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.179,git/diff,19,2.081
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.145,git/diff,19,2.081
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.146,git/diff,19,2.081
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.097,git/diff,19,2.081
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,2.081
git/diff getBinaryPaths in repo with text only files returns an empty array,0.103,git/diff,19,2.081
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.112,git/diff,19,2.081
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.134,git/diff,19,2.081
BranchPruner does nothing on non GitHub repositories,0.275,BranchPruner,6,2.124
BranchPruner prunes for GitHub repository,0.371,BranchPruner,6,2.124
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.286,BranchPruner,6,2.124
BranchPruner does not prune if there is no default branch,0.291,BranchPruner,6,2.124
BranchPruner does not prune reserved branches,0.358,BranchPruner,6,2.124
git/branch tip returns unborn for new repository,0.032,git/branch,13,1.7
git/branch tip returns correct ref if checkout occurs,0.058,git/branch,13,1.7
git/branch tip returns detached for arbitrary checkout,0.063,git/branch,13,1.7
git/branch tip returns current branch when on a valid HEAD,0.089,git/branch,13,1.7
git/branch tip returns non-origin remote,0.095,git/branch,13,1.7
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.097,git/branch,13,1.7
git/branch getBranchesPointedAt in a local repo finds one branch name,0.065,git/branch,13,1.7
git/branch getBranchesPointedAt in a local repo finds no branch names,0.057,git/branch,13,1.7
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.056,git/branch,13,1.7
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.103,git/branch,13,1.7
git/branch deleteBranch deletes local branches,0.181,git/branch,13,1.7
git/branch deleteBranch deletes remote branches,0.347,git/branch,13,1.7
git/branch deleteBranch handles attempted delete of removed remote branch,0.406,git/branch,13,1.7
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.113,git/stash,14,1.395
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.144,git/stash,14,1.395
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.395
git/reflog getRecentBranches returns the recently checked out branches,0.159,git/reflog,6,1.065
git/reflog getRecentBranches works after renaming a branch,0.197,git/reflog,6,1.065
git/reflog getRecentBranches returns a limited number of branches,0.255,git/reflog,6,1.065
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.154,git/reflog,6,1.065
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.19,git/reflog,6,1.065
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.067,git/reflog,6,1.065
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.487,formatPatch,5,1.146
git/checkout can checkout a valid branch name in an existing repository,0.131,git/checkout,6,1.059
git/checkout can checkout a branch when it exists on multiple remotes,0.126,git/checkout,6,1.059
git/checkout will fail when an existing branch matches the remote branch,0.122,git/checkout,6,1.059
git/checkout with submodules cleans up an submodule that no longer exists,0.333,git/checkout,6,1.059
git/checkout with submodules updates a changed submodule reference,0.27,git/checkout,6,1.059
git/config config looks up config values,0.057,git/config,12,0.863
git/config config returns null for undefined values,0.055,git/config,12,0.863
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.863
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.07,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.072,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.863
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.781
git/rev-parse isGitRepository should return false for a directory,0.05,git/rev-parse,10,0.781
git/rev-parse isBareRepository returns false for default initialized repository,0.063,git/rev-parse,10,0.781
git/rev-parse isBareRepository returns true for initialized bare repository,0.065,git/rev-parse,10,0.781
git/rev-parse isBareRepository returns false for empty directory,0.064,git/rev-parse,10,0.781
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.781
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.781
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.062,git/rev-parse,10,0.781
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.063,git/rev-parse,10,0.781
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.191,git/rev-parse,10,0.781
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.701
gitignore saveGitIgnore applies rule correctly to repository,0.101,gitignore,9,0.701
gitignore appendIgnoreRule appends one rule,0.122,gitignore,9,0.701
gitignore appendIgnoreRule appends multiple rules,0.123,gitignore,9,0.701
git/submodule listSubmodules returns the submodule entry,0.135,git/submodule,3,0.715
git/submodule listSubmodules returns the expected tag,0.187,git/submodule,3,0.715
git/submodule resetSubmodulePaths update submodule to original commit,0.352,git/submodule,3,0.715
git/log getCommits loads history,0.065,git/log,7,0.644
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.644
git/log getCommits handles repository with signed commit and log.showSignature set,0.114,git/log,7,0.644
git/log getChangedFiles loads the files changed in the commit,0.055,git/log,7,0.644
git/log getChangedFiles detects renames,0.101,git/log,7,0.644
git/log getChangedFiles detect copies,0.109,git/log,7,0.644
git/log getChangedFiles handles commit when HEAD exists on disk,0.054,git/log,7,0.644
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.582
git/remote findDefaultRemote returns origin when multiple remotes found,0.06,git/remote,11,0.582
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.582
git/merge merge and is successful returns true,0.129,git/merge,7,0.709
git/merge merge and is a noop returns false,0.063,git/merge,7,0.709
git/merge getMergeBase returns the common ancestor of two branches,0.075,git/merge,7,0.709
git-lfs isUsingLFS returns false for repository not using LFS,0.058,git-lfs,9,0.557
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.557
Update remote url updates the repository's remote url when the github url changes,0.111,Update remote url,4,0.396
Update remote url doesn't update the repository's remote url when the github url is the same,0.078,Update remote url,4,0.396
Update remote url doesn't update repository's remote url if protocols don't match,0.079,Update remote url,4,0.396
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.076,Update remote url,4,0.396
git/for-each-ref getBranches fetches branches using for-each-ref,0.073,git/for-each-ref,3,0.233
git/for-each-ref getBranches should return empty list for empty repo,0.067,git/for-each-ref,3,0.233
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.054,git/for-each-ref,3,0.233
git/core error handling does not throw for errors that were expected,0.054,git/core,6,0.366
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.366
git/core exit code handling does not throw for exit codes that were expected,0.053,git/core,6,0.366
git/core exit code handling throws for exit codes that were not expected,0.053,git/core,6,0.366
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.366
git/core config lock file error handling normalizes paths,0.05,git/core,6,0.366
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.054,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.05,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.033,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.364
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.027,patch formatting,8,0.364
AppStore can select a repository,0.194,AppStore,5,0.249
validatedRepositoryPath returns the path to the repository,0.284,validatedRepositoryPath,2,0.34
git/reset reset can hard reset a repository,0.083,git/reset,2,0.12
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.328,git/rebase,21,8.075
git/rebase detect conflicts status detects REBASE_HEAD,0.278,git/rebase,21,8.075
git/rebase detect conflicts has conflicted files in working directory,0.28,git/rebase,21,8.075
git/rebase detect conflicts is a detached HEAD state,0.285,git/rebase,21,8.075
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.277,git/rebase,21,8.075
git/rebase abort after conflicts found no longer has working directory changes,0.271,git/rebase,21,8.075
git/rebase abort after conflicts found returns to the feature branch,0.276,git/rebase,21,8.075
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.349,git/rebase,21,8.075
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.341,git/rebase,21,8.075
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.344,git/rebase,21,8.075
git/rebase continue after resolving conflicts returns success,0.407,git/rebase,21,8.075
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.401,git/rebase,21,8.075
git/rebase continue after resolving conflicts no longer has working directory changes,0.407,git/rebase,21,8.075
git/rebase continue after resolving conflicts returns to the feature branch,0.408,git/rebase,21,8.075
git/rebase continue after resolving conflicts branch is now a different ref,0.41,git/rebase,21,8.075
git/rebase continue with additional changes unrelated to conflicted files returns success,0.413,git/rebase,21,8.075
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.412,git/rebase,21,8.075
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.418,git/rebase,21,8.075
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.434,git/rebase,21,8.075
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.426,git/rebase,21,8.075
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.075
git/commit createCommit normal commits the given files,0.129,git/commit,21,4.767
git/commit createCommit normal commit does not strip commentary by default,0.114,git/commit,21,4.767
git/commit createCommit normal can commit for empty repository,0.142,git/commit,21,4.767
git/commit createCommit normal can commit renames,0.168,git/commit,21,4.767
git/commit createCommit partials can commit some lines from new file,0.201,git/commit,21,4.767
git/commit createCommit partials can commit second hunk from modified file,0.203,git/commit,21,4.767
git/commit createCommit partials can commit single delete from modified file,0.188,git/commit,21,4.767
git/commit createCommit partials can commit multiple hunks from modified file,0.205,git/commit,21,4.767
git/commit createCommit partials can commit some lines from deleted file,0.198,git/commit,21,4.767
git/commit createCommit partials can commit renames with modifications,0.208,git/commit,21,4.767
git/commit createCommit partials can commit renames with partially selected modifications,0.233,git/commit,21,4.767
git/commit createCommit with a merge conflict creates a merge commit,0.272,git/commit,21,4.767
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.252,git/commit,21,4.767
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.348,git/commit,21,4.767
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.351,git/commit,21,4.767
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.424,git/commit,21,4.767
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.426,git/commit,21,4.767
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.767
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.767
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.185,git/commit,21,4.767
git/commit index corner cases file is deleted in index,0.185,git/commit,21,4.767
git/rebase can parse progress returns a value indicating conflicts were encountered,0.424,git/rebase,7,4.055
git/rebase can parse progress status detects REBASE_HEAD,0.437,git/rebase,7,4.055
git/rebase can parse progress is a detached HEAD state,0.433,git/rebase,7,4.055
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.918,git/rebase,7,4.055
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.89,git/rebase,7,4.055
git/rebase can parse progress for long rebase is a detached HEAD state,0.901,git/rebase,7,4.055
GitStore loadCommitBatch includes HEAD when loading commits,0.398,GitStore,11,2.71
GitStore can discard changes from a repository,0.181,GitStore,11,2.71
GitStore can discard a renamed file,0.154,GitStore,11,2.71
GitStore undo first commit reports the repository is unborn,0.203,GitStore,11,2.71
GitStore undo first commit pre-fills the commit message,0.132,GitStore,11,2.71
GitStore undo first commit clears the undo commit dialog,0.228,GitStore,11,2.71
GitStore undo first commit has no staged files,0.228,GitStore,11,2.71
GitStore repository with HEAD file can discard modified change cleanly,0.126,GitStore,11,2.71
git/status getStatus with conflicted repo parses conflicted files with markers,0.368,git/status,12,2.212
git/status getStatus with conflicted repo parses conflicted files without markers,0.326,git/status,12,2.212
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.43,git/status,12,2.212
git/status getStatus with conflicted repo parses resolved files,0.316,git/status,12,2.212
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.133,git/status,12,2.212
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.157,git/status,12,2.212
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.212
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.212
git/status getStatus with unconflicted repo reflects renames,0.12,git/status,12,2.212
git/status getStatus with unconflicted repo reflects copies,0.124,git/status,12,2.212
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,2.212
BranchPruner does nothing on non GitHub repositories,0.325,BranchPruner,6,1.8
BranchPruner prunes for GitHub repository,0.321,BranchPruner,6,1.8
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.234,BranchPruner,6,1.8
BranchPruner does not prune if there is no default branch,0.227,BranchPruner,6,1.8
BranchPruner does not prune reserved branches,0.283,BranchPruner,6,1.8
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.05,git/diff,19,1.899
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.899
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,1.899
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,1.899
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.899
git/diff imageDiff changes for text are not set,0.097,git/diff,19,1.899
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,1.899
git/diff getWorkingDirectoryDiff counts lines for modified file,0.088,git/diff,19,1.899
git/diff getWorkingDirectoryDiff counts lines for staged file,0.084,git/diff,19,1.899
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.128,git/diff,19,1.899
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.154,git/diff,19,1.899
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.162,git/diff,19,1.899
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.139,git/diff,19,1.899
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.125,git/diff,19,1.899
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.093,git/diff,19,1.899
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.899
git/diff getBinaryPaths in repo with text only files returns an empty array,0.093,git/diff,19,1.899
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.105,git/diff,19,1.899
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.127,git/diff,19,1.899
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.562
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,13,1.562
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.562
git/branch tip returns current branch when on a valid HEAD,0.083,git/branch,13,1.562
git/branch tip returns non-origin remote,0.082,git/branch,13,1.562
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.562
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.562
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.562
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.562
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,13,1.562
git/branch deleteBranch deletes local branches,0.13,git/branch,13,1.562
git/branch deleteBranch deletes remote branches,0.341,git/branch,13,1.562
git/branch deleteBranch handles attempted delete of removed remote branch,0.397,git/branch,13,1.562
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.114,git/stash,14,1.469
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.153,git/stash,14,1.469
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.111,git/stash,14,1.469
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.415,formatPatch,5,1.106
git/reflog getRecentBranches returns the recently checked out branches,0.169,git/reflog,6,1.186
git/reflog getRecentBranches works after renaming a branch,0.217,git/reflog,6,1.186
git/reflog getRecentBranches returns a limited number of branches,0.296,git/reflog,6,1.186
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.172,git/reflog,6,1.186
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.214,git/reflog,6,1.186
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.077,git/reflog,6,1.186
git/checkout can checkout a valid branch name in an existing repository,0.138,git/checkout,6,1.06
git/checkout can checkout a branch when it exists on multiple remotes,0.144,git/checkout,6,1.06
git/checkout will fail when an existing branch matches the remote branch,0.135,git/checkout,6,1.06
git/checkout with submodules cleans up an submodule that no longer exists,0.308,git/checkout,6,1.06
git/checkout with submodules updates a changed submodule reference,0.262,git/checkout,6,1.06
git/config config looks up config values,0.117,git/config,12,0.942
git/config config returns null for undefined values,0.055,git/config,12,0.942
git/config global config getGlobalConfigPath gets the config path,0.078,git/config,12,0.942
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.942
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.942
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.942
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.942
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.942
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,0.942
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.942
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.066,git/config,12,0.942
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.942
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.777
git/rev-parse isGitRepository should return false for a directory,0.051,git/rev-parse,10,0.777
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.777
git/rev-parse isBareRepository returns true for initialized bare repository,0.072,git/rev-parse,10,0.777
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.777
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.777
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.777
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.054,git/rev-parse,10,0.777
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.06,git/rev-parse,10,0.777
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.195,git/rev-parse,10,0.777
git/submodule listSubmodules returns the submodule entry,0.131,git/submodule,3,0.761
git/submodule listSubmodules returns the expected tag,0.199,git/submodule,3,0.761
git/submodule resetSubmodulePaths update submodule to original commit,0.392,git/submodule,3,0.761
git/merge merge and is successful returns true,0.045,git/merge,7,0.598
git/merge merge and is a noop returns false,0.059,git/merge,7,0.598
git/merge getMergeBase returns the common ancestor of two branches,0.07,git/merge,7,0.598
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.704
gitignore saveGitIgnore applies rule correctly to repository,0.104,gitignore,9,0.704
gitignore appendIgnoreRule appends one rule,0.12,gitignore,9,0.704
gitignore appendIgnoreRule appends multiple rules,0.124,gitignore,9,0.704
git/log getCommits loads history,0.071,git/log,7,0.668
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.668
git/log getCommits handles repository with signed commit and log.showSignature set,0.125,git/log,7,0.668
git/log getChangedFiles loads the files changed in the commit,0.063,git/log,7,0.668
git/log getChangedFiles detects renames,0.102,git/log,7,0.668
git/log getChangedFiles detect copies,0.109,git/log,7,0.668
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.668
git/remote getRemotes should return both remotes,0.065,git/remote,11,0.615
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.615
git/remote findDefaultRemote returns something when origin removed,0.073,git/remote,11,0.615
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.572
git-lfs isUsingLFS returns true if LFS is tracking a path,0.083,git-lfs,9,0.572
Update remote url updates the repository's remote url when the github url changes,0.12,Update remote url,4,0.431
Update remote url doesn't update the repository's remote url when the github url is the same,0.093,Update remote url,4,0.431
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.431
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.431
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.37
git/core error handling throws for errors that were not expected,0.056,git/core,6,0.37
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.37
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.37
git/core config lock file error handling can parse lock file path from stderr,0.058,git/core,6,0.37
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.37
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.393
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.055,patch formatting,8,0.393
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.393
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.393
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.04,patch formatting,8,0.393
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.393
patch formatting formatPatchesForModifiedFile includes empty context lines,0.035,patch formatting,8,0.393
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.393
validatedRepositoryPath returns the path to the repository,0.154,validatedRepositoryPath,2,0.203
AppStore can select a repository,0.209,AppStore,5,0.268
git/for-each-ref getBranches fetches branches using for-each-ref,0.322,git/for-each-ref,3,0.506
git/for-each-ref getBranches should return empty list for empty repo,0.071,git/for-each-ref,3,0.506
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.071,git/for-each-ref,3,0.506
git/reset reset can hard reset a repository,0.084,git/reset,2,0.126
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.32,git/rebase,21,7.966
git/rebase detect conflicts status detects REBASE_HEAD,0.278,git/rebase,21,7.966
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,7.966
git/rebase detect conflicts is a detached HEAD state,0.281,git/rebase,21,7.966
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.27,git/rebase,21,7.966
git/rebase abort after conflicts found no longer has working directory changes,0.271,git/rebase,21,7.966
git/rebase abort after conflicts found returns to the feature branch,0.268,git/rebase,21,7.966
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.35,git/rebase,21,7.966
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.336,git/rebase,21,7.966
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.339,git/rebase,21,7.966
git/rebase continue after resolving conflicts returns success,0.4,git/rebase,21,7.966
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.396,git/rebase,21,7.966
git/rebase continue after resolving conflicts no longer has working directory changes,0.399,git/rebase,21,7.966
git/rebase continue after resolving conflicts returns to the feature branch,0.417,git/rebase,21,7.966
git/rebase continue after resolving conflicts branch is now a different ref,0.4,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files returns success,0.404,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.403,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.417,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.414,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.41,git/rebase,21,7.966
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.411,git/rebase,21,7.966
git/commit createCommit normal commits the given files,0.128,git/commit,21,4.701
git/commit createCommit normal commit does not strip commentary by default,0.115,git/commit,21,4.701
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.701
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.701
git/commit createCommit partials can commit some lines from new file,0.187,git/commit,21,4.701
git/commit createCommit partials can commit second hunk from modified file,0.201,git/commit,21,4.701
git/commit createCommit partials can commit single delete from modified file,0.18,git/commit,21,4.701
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.701
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.701
git/commit createCommit partials can commit renames with modifications,0.201,git/commit,21,4.701
git/commit createCommit partials can commit renames with partially selected modifications,0.243,git/commit,21,4.701
git/commit createCommit with a merge conflict creates a merge commit,0.274,git/commit,21,4.701
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.257,git/commit,21,4.701
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.361,git/commit,21,4.701
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.345,git/commit,21,4.701
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.43,git/commit,21,4.701
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.414,git/commit,21,4.701
git/commit createMergeCommit with no changes throws an error,0.102,git/commit,21,4.701
git/commit index corner cases can commit when staged new file is then deleted,0.154,git/commit,21,4.701
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.177,git/commit,21,4.701
git/commit index corner cases file is deleted in index,0.184,git/commit,21,4.701
git/rebase can parse progress returns a value indicating conflicts were encountered,0.416,git/rebase,7,3.958
git/rebase can parse progress status detects REBASE_HEAD,0.417,git/rebase,7,3.958
git/rebase can parse progress is a detached HEAD state,0.424,git/rebase,7,3.958
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.867,git/rebase,7,3.958
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.892,git/rebase,7,3.958
git/rebase can parse progress for long rebase is a detached HEAD state,0.89,git/rebase,7,3.958
GitStore loadCommitBatch includes HEAD when loading commits,0.386,GitStore,11,2.656
GitStore can discard changes from a repository,0.17,GitStore,11,2.656
GitStore can discard a renamed file,0.155,GitStore,11,2.656
GitStore undo first commit reports the repository is unborn,0.199,GitStore,11,2.656
GitStore undo first commit pre-fills the commit message,0.13,GitStore,11,2.656
GitStore undo first commit clears the undo commit dialog,0.227,GitStore,11,2.656
GitStore undo first commit has no staged files,0.223,GitStore,11,2.656
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.656
git/status getStatus with conflicted repo parses conflicted files with markers,0.318,git/status,12,2.176
git/status getStatus with conflicted repo parses conflicted files without markers,0.335,git/status,12,2.176
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.45,git/status,12,2.176
git/status getStatus with conflicted repo parses resolved files,0.326,git/status,12,2.176
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.133,git/status,12,2.176
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.156,git/status,12,2.176
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.176
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,2.176
git/status getStatus with unconflicted repo reflects renames,0.115,git/status,12,2.176
git/status getStatus with unconflicted repo reflects copies,0.116,git/status,12,2.176
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.053,git/status,12,2.176
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.084,git/diff,19,2.027
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,2.027
git/diff getBlobImage retrieves valid image for modified file,0.051,git/diff,19,2.027
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,2.027
git/diff imageDiff changes for images are set,0.089,git/diff,19,2.027
git/diff imageDiff changes for text are not set,0.095,git/diff,19,2.027
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,2.027
git/diff getWorkingDirectoryDiff counts lines for modified file,0.097,git/diff,19,2.027
git/diff getWorkingDirectoryDiff counts lines for staged file,0.095,git/diff,19,2.027
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.135,git/diff,19,2.027
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.173,git/diff,19,2.027
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.178,git/diff,19,2.027
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.145,git/diff,19,2.027
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.152,git/diff,19,2.027
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.093,git/diff,19,2.027
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.068,git/diff,19,2.027
git/diff getBinaryPaths in repo with text only files returns an empty array,0.094,git/diff,19,2.027
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.1,git/diff,19,2.027
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.129,git/diff,19,2.027
BranchPruner does nothing on non GitHub repositories,0.299,BranchPruner,6,1.839
BranchPruner prunes for GitHub repository,0.312,BranchPruner,6,1.839
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.248,BranchPruner,6,1.839
BranchPruner does not prune if there is no default branch,0.254,BranchPruner,6,1.839
BranchPruner does not prune reserved branches,0.307,BranchPruner,6,1.839
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.486
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.486
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.486
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,13,1.486
git/branch tip returns non-origin remote,0.077,git/branch,13,1.486
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.486
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.486
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.486
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.486
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.093,git/branch,13,1.486
git/branch deleteBranch deletes local branches,0.123,git/branch,13,1.486
git/branch deleteBranch deletes remote branches,0.323,git/branch,13,1.486
git/branch deleteBranch handles attempted delete of removed remote branch,0.369,git/branch,13,1.486
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.109,git/stash,14,1.371
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.142,git/stash,14,1.371
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.371
git/reflog getRecentBranches returns the recently checked out branches,0.156,git/reflog,6,1.038
git/reflog getRecentBranches works after renaming a branch,0.189,git/reflog,6,1.038
git/reflog getRecentBranches returns a limited number of branches,0.25,git/reflog,6,1.038
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.154,git/reflog,6,1.038
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.185,git/reflog,6,1.038
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.064,git/reflog,6,1.038
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.454,formatPatch,5,1.114
git/checkout can checkout a valid branch name in an existing repository,0.13,git/checkout,6,1.059
git/checkout can checkout a branch when it exists on multiple remotes,0.136,git/checkout,6,1.059
git/checkout will fail when an existing branch matches the remote branch,0.128,git/checkout,6,1.059
git/checkout with submodules cleans up an submodule that no longer exists,0.324,git/checkout,6,1.059
git/checkout with submodules updates a changed submodule reference,0.268,git/checkout,6,1.059
git/config config looks up config values,0.054,git/config,12,0.899
git/config config returns null for undefined values,0.056,git/config,12,0.899
git/config global config getGlobalConfigPath gets the config path,0.069,git/config,12,0.899
git/config global config setGlobalConfigValue will replace all entries for a global value,0.096,git/config,12,0.899
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.073,git/config,12,0.899
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.899
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.899
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.899
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.075,git/config,12,0.899
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.082,git/config,12,0.899
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.071,git/config,12,0.899
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.899
git/rev-parse isGitRepository should return true for a repository,0.059,git/rev-parse,10,0.865
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.865
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.865
git/rev-parse isBareRepository returns true for initialized bare repository,0.071,git/rev-parse,10,0.865
git/rev-parse isBareRepository returns false for empty directory,0.133,git/rev-parse,10,0.865
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.865
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.865
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.865
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.865
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.2,git/rev-parse,10,0.865
git/submodule listSubmodules returns the submodule entry,0.13,git/submodule,3,0.753
git/submodule listSubmodules returns the expected tag,0.203,git/submodule,3,0.753
git/submodule resetSubmodulePaths update submodule to original commit,0.38,git/submodule,3,0.753
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.714
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.714
gitignore appendIgnoreRule appends one rule,0.124,gitignore,9,0.714
gitignore appendIgnoreRule appends multiple rules,0.127,gitignore,9,0.714
git/log getCommits loads history,0.071,git/log,7,0.663
git/log getCommits handles repository with HEAD file on disk,0.101,git/log,7,0.663
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.663
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.663
git/log getChangedFiles detects renames,0.099,git/log,7,0.663
git/log getChangedFiles detect copies,0.11,git/log,7,0.663
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.663
git/remote getRemotes should return both remotes,0.059,git/remote,11,0.584
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.584
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.584
git/merge merge and is successful returns true,0.047,git/merge,7,0.609
git/merge merge and is a noop returns false,0.06,git/merge,7,0.609
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.609
git-lfs isUsingLFS returns false for repository not using LFS,0.064,git-lfs,9,0.565
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.565
git/for-each-ref getBranches fetches branches using for-each-ref,0.078,git/for-each-ref,3,0.249
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.249
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.057,git/for-each-ref,3,0.249
Update remote url updates the repository's remote url when the github url changes,0.11,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url when the github url is the same,0.088,Update remote url,4,0.421
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.088,Update remote url,4,0.421
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.059,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.38
git/core error handling does not throw for errors that were expected,0.059,git/core,6,0.387
git/core error handling throws for errors that were not expected,0.062,git/core,6,0.387
git/core exit code handling does not throw for exit codes that were expected,0.06,git/core,6,0.387
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.387
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.387
git/core config lock file error handling normalizes paths,0.047,git/core,6,0.387
AppStore can select a repository,0.203,AppStore,5,0.261
validatedRepositoryPath returns the path to the repository,0.296,validatedRepositoryPath,2,0.352
git/reset reset can hard reset a repository,0.083,git/reset,2,0.123
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.128,git/git-attributes,1,0.169
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.321,git/rebase,21,7.926
git/rebase detect conflicts status detects REBASE_HEAD,0.274,git/rebase,21,7.926
git/rebase detect conflicts has conflicted files in working directory,0.271,git/rebase,21,7.926
git/rebase detect conflicts is a detached HEAD state,0.278,git/rebase,21,7.926
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.276,git/rebase,21,7.926
git/rebase abort after conflicts found no longer has working directory changes,0.268,git/rebase,21,7.926
git/rebase abort after conflicts found returns to the feature branch,0.268,git/rebase,21,7.926
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.349,git/rebase,21,7.926
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.335,git/rebase,21,7.926
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.338,git/rebase,21,7.926
git/rebase continue after resolving conflicts returns success,0.393,git/rebase,21,7.926
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.397,git/rebase,21,7.926
git/rebase continue after resolving conflicts no longer has working directory changes,0.398,git/rebase,21,7.926
git/rebase continue after resolving conflicts returns to the feature branch,0.406,git/rebase,21,7.926
git/rebase continue after resolving conflicts branch is now a different ref,0.407,git/rebase,21,7.926
git/rebase continue with additional changes unrelated to conflicted files returns success,0.404,git/rebase,21,7.926
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.403,git/rebase,21,7.926
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.41,git/rebase,21,7.926
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.414,git/rebase,21,7.926
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.413,git/rebase,21,7.926
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,7.926
git/commit createCommit normal commits the given files,0.127,git/commit,21,4.717
git/commit createCommit normal commit does not strip commentary by default,0.108,git/commit,21,4.717
git/commit createCommit normal can commit for empty repository,0.134,git/commit,21,4.717
git/commit createCommit normal can commit renames,0.155,git/commit,21,4.717
git/commit createCommit partials can commit some lines from new file,0.201,git/commit,21,4.717
git/commit createCommit partials can commit second hunk from modified file,0.201,git/commit,21,4.717
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.717
git/commit createCommit partials can commit multiple hunks from modified file,0.199,git/commit,21,4.717
git/commit createCommit partials can commit some lines from deleted file,0.192,git/commit,21,4.717
git/commit createCommit partials can commit renames with modifications,0.203,git/commit,21,4.717
git/commit createCommit partials can commit renames with partially selected modifications,0.244,git/commit,21,4.717
git/commit createCommit with a merge conflict creates a merge commit,0.273,git/commit,21,4.717
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.247,git/commit,21,4.717
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.374,git/commit,21,4.717
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.345,git/commit,21,4.717
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.424,git/commit,21,4.717
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.425,git/commit,21,4.717
git/commit createMergeCommit with no changes throws an error,0.105,git/commit,21,4.717
git/commit index corner cases can commit when staged new file is then deleted,0.155,git/commit,21,4.717
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.182,git/commit,21,4.717
git/commit index corner cases file is deleted in index,0.182,git/commit,21,4.717
git/rebase can parse progress returns a value indicating conflicts were encountered,0.427,git/rebase,7,3.984
git/rebase can parse progress status detects REBASE_HEAD,0.427,git/rebase,7,3.984
git/rebase can parse progress is a detached HEAD state,0.427,git/rebase,7,3.984
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.876,git/rebase,7,3.984
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.88,git/rebase,7,3.984
git/rebase can parse progress for long rebase is a detached HEAD state,0.894,git/rebase,7,3.984
GitStore loadCommitBatch includes HEAD when loading commits,0.437,GitStore,11,2.774
GitStore can discard changes from a repository,0.174,GitStore,11,2.774
GitStore can discard a renamed file,0.159,GitStore,11,2.774
GitStore undo first commit reports the repository is unborn,0.199,GitStore,11,2.774
GitStore undo first commit pre-fills the commit message,0.136,GitStore,11,2.774
GitStore undo first commit clears the undo commit dialog,0.234,GitStore,11,2.774
GitStore undo first commit has no staged files,0.228,GitStore,11,2.774
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.774
git/status getStatus with conflicted repo parses conflicted files with markers,0.316,git/status,12,2.143
git/status getStatus with conflicted repo parses conflicted files without markers,0.319,git/status,12,2.143
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.425,git/status,12,2.143
git/status getStatus with conflicted repo parses resolved files,0.323,git/status,12,2.143
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.128,git/status,12,2.143
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.155,git/status,12,2.143
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.143
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.057,git/status,12,2.143
git/status getStatus with unconflicted repo reflects renames,0.121,git/status,12,2.143
git/status getStatus with unconflicted repo reflects copies,0.124,git/status,12,2.143
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.143
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.09,git/diff,19,2.108
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,2.108
git/diff getBlobImage retrieves valid image for modified file,0.057,git/diff,19,2.108
git/diff getBlobImage retrieves valid images for deleted file,0.075,git/diff,19,2.108
git/diff imageDiff changes for images are set,0.085,git/diff,19,2.108
git/diff imageDiff changes for text are not set,0.096,git/diff,19,2.108
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,2.108
git/diff getWorkingDirectoryDiff counts lines for modified file,0.107,git/diff,19,2.108
git/diff getWorkingDirectoryDiff counts lines for staged file,0.096,git/diff,19,2.108
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.137,git/diff,19,2.108
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.183,git/diff,19,2.108
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.182,git/diff,19,2.108
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.145,git/diff,19,2.108
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.148,git/diff,19,2.108
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.104,git/diff,19,2.108
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,2.108
git/diff getBinaryPaths in repo with text only files returns an empty array,0.104,git/diff,19,2.108
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.113,git/diff,19,2.108
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.133,git/diff,19,2.108
BranchPruner does nothing on non GitHub repositories,0.286,BranchPruner,6,2.102
BranchPruner prunes for GitHub repository,0.373,BranchPruner,6,2.102
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.277,BranchPruner,6,2.102
BranchPruner does not prune if there is no default branch,0.281,BranchPruner,6,2.102
BranchPruner does not prune reserved branches,0.362,BranchPruner,6,2.102
git/branch tip returns unborn for new repository,0.027,git/branch,13,1.528
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.528
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,13,1.528
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.528
git/branch tip returns non-origin remote,0.084,git/branch,13,1.528
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.528
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.528
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.528
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.528
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.094,git/branch,13,1.528
git/branch deleteBranch deletes local branches,0.126,git/branch,13,1.528
git/branch deleteBranch deletes remote branches,0.331,git/branch,13,1.528
git/branch deleteBranch handles attempted delete of removed remote branch,0.381,git/branch,13,1.528
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.108,git/stash,14,1.405
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.136,git/stash,14,1.405
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.098,git/stash,14,1.405
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.467,formatPatch,5,1.115
git/checkout can checkout a valid branch name in an existing repository,0.129,git/checkout,6,1.047
git/checkout can checkout a branch when it exists on multiple remotes,0.135,git/checkout,6,1.047
git/checkout will fail when an existing branch matches the remote branch,0.119,git/checkout,6,1.047
git/checkout with submodules cleans up an submodule that no longer exists,0.318,git/checkout,6,1.047
git/checkout with submodules updates a changed submodule reference,0.274,git/checkout,6,1.047
git/reflog getRecentBranches returns the recently checked out branches,0.161,git/reflog,6,1.19
git/reflog getRecentBranches works after renaming a branch,0.206,git/reflog,6,1.19
git/reflog getRecentBranches returns a limited number of branches,0.281,git/reflog,6,1.19
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.22,git/reflog,6,1.19
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.208,git/reflog,6,1.19
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.075,git/reflog,6,1.19
git/config config looks up config values,0.057,git/config,12,0.863
git/config config returns null for undefined values,0.056,git/config,12,0.863
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.863
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.069,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.863
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.863
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.758
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.758
git/rev-parse isBareRepository returns false for default initialized repository,0.06,git/rev-parse,10,0.758
git/rev-parse isBareRepository returns true for initialized bare repository,0.064,git/rev-parse,10,0.758
git/rev-parse isBareRepository returns false for empty directory,0.057,git/rev-parse,10,0.758
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.758
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.062,git/rev-parse,10,0.758
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.055,git/rev-parse,10,0.758
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.758
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.192,git/rev-parse,10,0.758
git/submodule listSubmodules returns the submodule entry,0.129,git/submodule,3,0.71
git/submodule listSubmodules returns the expected tag,0.189,git/submodule,3,0.71
git/submodule resetSubmodulePaths update submodule to original commit,0.349,git/submodule,3,0.71
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.691
gitignore saveGitIgnore applies rule correctly to repository,0.104,gitignore,9,0.691
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.691
gitignore appendIgnoreRule appends multiple rules,0.124,gitignore,9,0.691
git/log getCommits loads history,0.07,git/log,7,0.664
git/log getCommits handles repository with HEAD file on disk,0.101,git/log,7,0.664
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.664
git/log getChangedFiles loads the files changed in the commit,0.062,git/log,7,0.664
git/log getChangedFiles detects renames,0.103,git/log,7,0.664
git/log getChangedFiles detect copies,0.109,git/log,7,0.664
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.664
git/merge merge and is successful returns true,0.046,git/merge,7,0.634
git/merge merge and is a noop returns false,0.063,git/merge,7,0.634
git/merge getMergeBase returns the common ancestor of two branches,0.074,git/merge,7,0.634
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.607
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.607
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.607
git-lfs isUsingLFS returns false for repository not using LFS,0.057,git-lfs,9,0.571
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.571
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.523
Update remote url doesn't update the repository's remote url when the github url is the same,0.088,Update remote url,4,0.523
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.523
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.184,Update remote url,4,0.523
git/core error handling does not throw for errors that were expected,0.063,git/core,6,0.384
git/core error handling throws for errors that were not expected,0.063,git/core,6,0.384
git/core exit code handling does not throw for exit codes that were expected,0.056,git/core,6,0.384
git/core exit code handling throws for exit codes that were not expected,0.056,git/core,6,0.384
git/core config lock file error handling can parse lock file path from stderr,0.058,git/core,6,0.384
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.384
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.046,patch formatting,8,0.373
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.373
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.373
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.373
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.373
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.373
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.373
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.033,patch formatting,8,0.373
validatedRepositoryPath returns the path to the repository,0.057,validatedRepositoryPath,2,0.109
AppStore can select a repository,0.2,AppStore,5,0.257
git/for-each-ref getBranches fetches branches using for-each-ref,0.307,git/for-each-ref,3,0.483
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.483
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.483
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.06
git/reset reset can hard reset a repository,0.084,git/reset,2,0.124
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.315,git/rebase,21,7.931
git/rebase detect conflicts status detects REBASE_HEAD,0.285,git/rebase,21,7.931
git/rebase detect conflicts has conflicted files in working directory,0.27,git/rebase,21,7.931
git/rebase detect conflicts is a detached HEAD state,0.274,git/rebase,21,7.931
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.276,git/rebase,21,7.931
git/rebase abort after conflicts found no longer has working directory changes,0.265,git/rebase,21,7.931
git/rebase abort after conflicts found returns to the feature branch,0.264,git/rebase,21,7.931
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.351,git/rebase,21,7.931
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.339,git/rebase,21,7.931
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.336,git/rebase,21,7.931
git/rebase continue after resolving conflicts returns success,0.392,git/rebase,21,7.931
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.394,git/rebase,21,7.931
git/rebase continue after resolving conflicts no longer has working directory changes,0.396,git/rebase,21,7.931
git/rebase continue after resolving conflicts returns to the feature branch,0.409,git/rebase,21,7.931
git/rebase continue after resolving conflicts branch is now a different ref,0.401,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files returns success,0.404,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.398,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.403,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.434,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.41,git/rebase,21,7.931
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.414,git/rebase,21,7.931
git/commit createCommit normal commits the given files,0.128,git/commit,21,4.722
git/commit createCommit normal commit does not strip commentary by default,0.114,git/commit,21,4.722
git/commit createCommit normal can commit for empty repository,0.144,git/commit,21,4.722
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.722
git/commit createCommit partials can commit some lines from new file,0.191,git/commit,21,4.722
git/commit createCommit partials can commit second hunk from modified file,0.206,git/commit,21,4.722
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.722
git/commit createCommit partials can commit multiple hunks from modified file,0.203,git/commit,21,4.722
git/commit createCommit partials can commit some lines from deleted file,0.186,git/commit,21,4.722
git/commit createCommit partials can commit renames with modifications,0.197,git/commit,21,4.722
git/commit createCommit partials can commit renames with partially selected modifications,0.241,git/commit,21,4.722
git/commit createCommit with a merge conflict creates a merge commit,0.264,git/commit,21,4.722
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.248,git/commit,21,4.722
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.355,git/commit,21,4.722
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.34,git/commit,21,4.722
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.438,git/commit,21,4.722
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.42,git/commit,21,4.722
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.722
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.722
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.182,git/commit,21,4.722
git/commit index corner cases file is deleted in index,0.188,git/commit,21,4.722
git/rebase can parse progress returns a value indicating conflicts were encountered,0.413,git/rebase,7,3.951
git/rebase can parse progress status detects REBASE_HEAD,0.415,git/rebase,7,3.951
git/rebase can parse progress is a detached HEAD state,0.43,git/rebase,7,3.951
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.864,git/rebase,7,3.951
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.882,git/rebase,7,3.951
git/rebase can parse progress for long rebase is a detached HEAD state,0.893,git/rebase,7,3.951
GitStore loadCommitBatch includes HEAD when loading commits,0.406,GitStore,11,2.804
GitStore can discard changes from a repository,0.183,GitStore,11,2.804
GitStore can discard a renamed file,0.185,GitStore,11,2.804
GitStore undo first commit reports the repository is unborn,0.207,GitStore,11,2.804
GitStore undo first commit pre-fills the commit message,0.135,GitStore,11,2.804
GitStore undo first commit clears the undo commit dialog,0.233,GitStore,11,2.804
GitStore undo first commit has no staged files,0.225,GitStore,11,2.804
GitStore repository with HEAD file can discard modified change cleanly,0.154,GitStore,11,2.804
git/status getStatus with conflicted repo parses conflicted files with markers,0.331,git/status,12,2.258
git/status getStatus with conflicted repo parses conflicted files without markers,0.333,git/status,12,2.258
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.488,git/status,12,2.258
git/status getStatus with conflicted repo parses resolved files,0.332,git/status,12,2.258
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.133,git/status,12,2.258
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.161,git/status,12,2.258
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.258
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.258
git/status getStatus with unconflicted repo reflects renames,0.125,git/status,12,2.258
git/status getStatus with unconflicted repo reflects copies,0.118,git/status,12,2.258
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,2.258
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.086,git/diff,19,2.058
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,2.058
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,2.058
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,2.058
git/diff imageDiff changes for images are set,0.088,git/diff,19,2.058
git/diff imageDiff changes for text are not set,0.091,git/diff,19,2.058
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,2.058
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,2.058
git/diff getWorkingDirectoryDiff counts lines for staged file,0.087,git/diff,19,2.058
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.133,git/diff,19,2.058
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.174,git/diff,19,2.058
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.18,git/diff,19,2.058
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.144,git/diff,19,2.058
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.146,git/diff,19,2.058
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.1,git/diff,19,2.058
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,2.058
git/diff getBinaryPaths in repo with text only files returns an empty array,0.106,git/diff,19,2.058
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.114,git/diff,19,2.058
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.136,git/diff,19,2.058
BranchPruner does nothing on non GitHub repositories,0.28,BranchPruner,6,2.113
BranchPruner prunes for GitHub repository,0.369,BranchPruner,6,2.113
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.288,BranchPruner,6,2.113
BranchPruner does not prune if there is no default branch,0.276,BranchPruner,6,2.113
BranchPruner does not prune reserved branches,0.351,BranchPruner,6,2.113
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.65
git/branch tip returns correct ref if checkout occurs,0.056,git/branch,13,1.65
git/branch tip returns detached for arbitrary checkout,0.11,git/branch,13,1.65
git/branch tip returns current branch when on a valid HEAD,0.081,git/branch,13,1.65
git/branch tip returns non-origin remote,0.085,git/branch,13,1.65
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.092,git/branch,13,1.65
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.65
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.65
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.65
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.088,git/branch,13,1.65
git/branch deleteBranch deletes local branches,0.13,git/branch,13,1.65
git/branch deleteBranch deletes remote branches,0.343,git/branch,13,1.65
git/branch deleteBranch handles attempted delete of removed remote branch,0.412,git/branch,13,1.65
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.111,git/stash,14,1.401
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.144,git/stash,14,1.401
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.102,git/stash,14,1.401
git/reflog getRecentBranches returns the recently checked out branches,0.154,git/reflog,6,1.068
git/reflog getRecentBranches works after renaming a branch,0.196,git/reflog,6,1.068
git/reflog getRecentBranches returns a limited number of branches,0.255,git/reflog,6,1.068
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.156,git/reflog,6,1.068
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.194,git/reflog,6,1.068
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.068
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.432,formatPatch,5,1.109
git/checkout can checkout a valid branch name in an existing repository,0.128,git/checkout,6,1.066
git/checkout can checkout a branch when it exists on multiple remotes,0.136,git/checkout,6,1.066
git/checkout will fail when an existing branch matches the remote branch,0.129,git/checkout,6,1.066
git/checkout with submodules cleans up an submodule that no longer exists,0.331,git/checkout,6,1.066
git/checkout with submodules updates a changed submodule reference,0.271,git/checkout,6,1.066
git/config config looks up config values,0.051,git/config,12,0.865
git/config config returns null for undefined values,0.057,git/config,12,0.865
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.865
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.075,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.066,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.865
git/rev-parse isGitRepository should return true for a repository,0.12,git/rev-parse,10,0.829
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.829
git/rev-parse isBareRepository returns false for default initialized repository,0.064,git/rev-parse,10,0.829
git/rev-parse isBareRepository returns true for initialized bare repository,0.065,git/rev-parse,10,0.829
git/rev-parse isBareRepository returns false for empty directory,0.059,git/rev-parse,10,0.829
git/rev-parse isBareRepository throws error for missing directory,0.05,git/rev-parse,10,0.829
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.063,git/rev-parse,10,0.829
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.055,git/rev-parse,10,0.829
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.829
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.193,git/rev-parse,10,0.829
git/submodule listSubmodules returns the submodule entry,0.133,git/submodule,3,0.76
git/submodule listSubmodules returns the expected tag,0.19,git/submodule,3,0.76
git/submodule resetSubmodulePaths update submodule to original commit,0.395,git/submodule,3,0.76
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.679
gitignore saveGitIgnore applies rule correctly to repository,0.103,gitignore,9,0.679
gitignore appendIgnoreRule appends one rule,0.116,gitignore,9,0.679
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.679
git/log getCommits loads history,0.07,git/log,7,0.664
git/log getCommits handles repository with HEAD file on disk,0.106,git/log,7,0.664
git/log getCommits handles repository with signed commit and log.showSignature set,0.119,git/log,7,0.664
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.664
git/log getChangedFiles detects renames,0.101,git/log,7,0.664
git/log getChangedFiles detect copies,0.108,git/log,7,0.664
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.664
git/merge merge and is successful returns true,0.126,git/merge,7,0.706
git/merge merge and is a noop returns false,0.059,git/merge,7,0.706
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.706
git/remote getRemotes should return both remotes,0.063,git/remote,11,0.581
git/remote findDefaultRemote returns origin when multiple remotes found,0.067,git/remote,11,0.581
git/remote findDefaultRemote returns something when origin removed,0.064,git/remote,11,0.581
git-lfs isUsingLFS returns false for repository not using LFS,0.057,git-lfs,9,0.544
git-lfs isUsingLFS returns true if LFS is tracking a path,0.076,git-lfs,9,0.544
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.421
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.088,Update remote url,4,0.421
git/for-each-ref getBranches fetches branches using for-each-ref,0.073,git/for-each-ref,3,0.244
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.244
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.244
git/core error handling does not throw for errors that were expected,0.062,git/core,6,0.368
git/core error handling throws for errors that were not expected,0.054,git/core,6,0.368
git/core exit code handling does not throw for exit codes that were expected,0.054,git/core,6,0.368
git/core exit code handling throws for exit codes that were not expected,0.056,git/core,6,0.368
git/core config lock file error handling can parse lock file path from stderr,0.056,git/core,6,0.368
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.368
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.347
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.347
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.347
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.048,patch formatting,8,0.347
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.347
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.031,patch formatting,8,0.347
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.347
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.347
AppStore can select a repository,0.2,AppStore,5,0.254
git/reset reset can hard reset a repository,0.31,git/reset,2,0.352
validatedRepositoryPath returns the path to the repository,0.054,validatedRepositoryPath,2,0.11
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.345,git/rebase,21,8.102
git/rebase detect conflicts status detects REBASE_HEAD,0.28,git/rebase,21,8.102
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.102
git/rebase detect conflicts is a detached HEAD state,0.285,git/rebase,21,8.102
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.272,git/rebase,21,8.102
git/rebase abort after conflicts found no longer has working directory changes,0.276,git/rebase,21,8.102
git/rebase abort after conflicts found returns to the feature branch,0.277,git/rebase,21,8.102
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.358,git/rebase,21,8.102
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.342,git/rebase,21,8.102
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.341,git/rebase,21,8.102
git/rebase continue after resolving conflicts returns success,0.409,git/rebase,21,8.102
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.408,git/rebase,21,8.102
git/rebase continue after resolving conflicts no longer has working directory changes,0.406,git/rebase,21,8.102
git/rebase continue after resolving conflicts returns to the feature branch,0.411,git/rebase,21,8.102
git/rebase continue after resolving conflicts branch is now a different ref,0.416,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files returns success,0.413,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.409,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.423,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.422,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.431,git/rebase,21,8.102
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.396,git/rebase,21,8.102
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.667
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.667
git/commit createCommit normal can commit for empty repository,0.139,git/commit,21,4.667
git/commit createCommit normal can commit renames,0.163,git/commit,21,4.667
git/commit createCommit partials can commit some lines from new file,0.182,git/commit,21,4.667
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.667
git/commit createCommit partials can commit single delete from modified file,0.179,git/commit,21,4.667
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.667
git/commit createCommit partials can commit some lines from deleted file,0.193,git/commit,21,4.667
git/commit createCommit partials can commit renames with modifications,0.196,git/commit,21,4.667
git/commit createCommit partials can commit renames with partially selected modifications,0.238,git/commit,21,4.667
git/commit createCommit with a merge conflict creates a merge commit,0.267,git/commit,21,4.667
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.251,git/commit,21,4.667
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.354,git/commit,21,4.667
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.338,git/commit,21,4.667
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.424,git/commit,21,4.667
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.414,git/commit,21,4.667
git/commit createMergeCommit with no changes throws an error,0.105,git/commit,21,4.667
git/commit index corner cases can commit when staged new file is then deleted,0.162,git/commit,21,4.667
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.184,git/commit,21,4.667
git/commit index corner cases file is deleted in index,0.188,git/commit,21,4.667
git/rebase can parse progress returns a value indicating conflicts were encountered,0.424,git/rebase,7,4.056
git/rebase can parse progress status detects REBASE_HEAD,0.436,git/rebase,7,4.056
git/rebase can parse progress is a detached HEAD state,0.429,git/rebase,7,4.056
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.902,git/rebase,7,4.056
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.9,git/rebase,7,4.056
git/rebase can parse progress for long rebase is a detached HEAD state,0.911,git/rebase,7,4.056
GitStore loadCommitBatch includes HEAD when loading commits,0.392,GitStore,11,2.748
GitStore can discard changes from a repository,0.182,GitStore,11,2.748
GitStore can discard a renamed file,0.164,GitStore,11,2.748
GitStore undo first commit reports the repository is unborn,0.201,GitStore,11,2.748
GitStore undo first commit pre-fills the commit message,0.135,GitStore,11,2.748
GitStore undo first commit clears the undo commit dialog,0.237,GitStore,11,2.748
GitStore undo first commit has no staged files,0.233,GitStore,11,2.748
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.748
git/status getStatus with conflicted repo parses conflicted files with markers,0.354,git/status,12,2.209
git/status getStatus with conflicted repo parses conflicted files without markers,0.33,git/status,12,2.209
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.427,git/status,12,2.209
git/status getStatus with conflicted repo parses resolved files,0.322,git/status,12,2.209
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,2.209
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.209
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.209
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.209
git/status getStatus with unconflicted repo reflects renames,0.121,git/status,12,2.209
git/status getStatus with unconflicted repo reflects copies,0.121,git/status,12,2.209
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.064,git/status,12,2.209
BranchPruner does nothing on non GitHub repositories,0.282,BranchPruner,6,1.885
BranchPruner prunes for GitHub repository,0.358,BranchPruner,6,1.885
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.268,BranchPruner,6,1.885
BranchPruner does not prune if there is no default branch,0.274,BranchPruner,6,1.885
BranchPruner does not prune reserved branches,0.281,BranchPruner,6,1.885
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.047,git/diff,19,1.926
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.926
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,1.926
git/diff getBlobImage retrieves valid images for deleted file,0.068,git/diff,19,1.926
git/diff imageDiff changes for images are set,0.124,git/diff,19,1.926
git/diff imageDiff changes for text are not set,0.094,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for new file,0.089,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for modified file,0.091,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,1.926
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.125,git/diff,19,1.926
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.156,git/diff,19,1.926
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.157,git/diff,19,1.926
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.139,git/diff,19,1.926
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.125,git/diff,19,1.926
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.926
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.068,git/diff,19,1.926
git/diff getBinaryPaths in repo with text only files returns an empty array,0.094,git/diff,19,1.926
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,1.926
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.926
git/branch tip returns unborn for new repository,0.028,git/branch,13,1.568
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,13,1.568
git/branch tip returns detached for arbitrary checkout,0.062,git/branch,13,1.568
git/branch tip returns current branch when on a valid HEAD,0.082,git/branch,13,1.568
git/branch tip returns non-origin remote,0.087,git/branch,13,1.568
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.568
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.568
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.568
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.568
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.088,git/branch,13,1.568
git/branch deleteBranch deletes local branches,0.134,git/branch,13,1.568
git/branch deleteBranch deletes remote branches,0.344,git/branch,13,1.568
git/branch deleteBranch handles attempted delete of removed remote branch,0.392,git/branch,13,1.568
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.115,git/stash,14,1.43
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.151,git/stash,14,1.43
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.104,git/stash,14,1.43
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.449,formatPatch,5,1.11
git/reflog getRecentBranches returns the recently checked out branches,0.161,git/reflog,6,1.126
git/reflog getRecentBranches works after renaming a branch,0.205,git/reflog,6,1.126
git/reflog getRecentBranches returns a limited number of branches,0.275,git/reflog,6,1.126
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.126
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.205,git/reflog,6,1.126
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.073,git/reflog,6,1.126
git/checkout can checkout a valid branch name in an existing repository,0.131,git/checkout,6,1.061
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.061
git/checkout will fail when an existing branch matches the remote branch,0.133,git/checkout,6,1.061
git/checkout with submodules cleans up an submodule that no longer exists,0.317,git/checkout,6,1.061
git/checkout with submodules updates a changed submodule reference,0.27,git/checkout,6,1.061
git/config config looks up config values,0.058,git/config,12,0.875
git/config config returns null for undefined values,0.053,git/config,12,0.875
git/config global config getGlobalConfigPath gets the config path,0.074,git/config,12,0.875
git/config global config setGlobalConfigValue will replace all entries for a global value,0.1,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.077,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.066,git/config,12,0.875
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.784
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns false for empty directory,0.056,git/rev-parse,10,0.784
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.195,git/rev-parse,10,0.784
git/submodule listSubmodules returns the submodule entry,0.133,git/submodule,3,0.711
git/submodule listSubmodules returns the expected tag,0.19,git/submodule,3,0.711
git/submodule resetSubmodulePaths update submodule to original commit,0.348,git/submodule,3,0.711
git/merge merge and is successful returns true,0.048,git/merge,7,0.641
git/merge merge and is a noop returns false,0.063,git/merge,7,0.641
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.641
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.839
gitignore saveGitIgnore applies rule correctly to repository,0.112,gitignore,9,0.839
gitignore appendIgnoreRule appends one rule,0.134,gitignore,9,0.839
gitignore appendIgnoreRule appends multiple rules,0.207,gitignore,9,0.839
git/log getCommits loads history,0.076,git/log,7,0.676
git/log getCommits handles repository with HEAD file on disk,0.105,git/log,7,0.676
git/log getCommits handles repository with signed commit and log.showSignature set,0.13,git/log,7,0.676
git/log getChangedFiles loads the files changed in the commit,0.061,git/log,7,0.676
git/log getChangedFiles detects renames,0.099,git/log,7,0.676
git/log getChangedFiles detect copies,0.106,git/log,7,0.676
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.676
git/remote getRemotes should return both remotes,0.064,git/remote,11,0.616
git/remote findDefaultRemote returns origin when multiple remotes found,0.059,git/remote,11,0.616
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.616
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.585
git-lfs isUsingLFS returns true if LFS is tracking a path,0.083,git-lfs,9,0.585
Update remote url updates the repository's remote url when the github url changes,0.111,Update remote url,4,0.413
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.413
Update remote url doesn't update repository's remote url if protocols don't match,0.081,Update remote url,4,0.413
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.413
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.381
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.381
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.381
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.381
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.381
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.381
git/reset reset can hard reset a repository,0.081,git/reset,2,0.12
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.392
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.392
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.392
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.392
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.045,patch formatting,8,0.392
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.392
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.392
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.392
AppStore can select a repository,0.199,AppStore,5,0.253
git/for-each-ref getBranches fetches branches using for-each-ref,0.316,git/for-each-ref,3,0.503
git/for-each-ref getBranches should return empty list for empty repo,0.08,git/for-each-ref,3,0.503
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.065,git/for-each-ref,3,0.503
validatedRepositoryPath returns the path to the repository,0.062,validatedRepositoryPath,2,0.118
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.325,git/rebase,21,7.96
git/rebase detect conflicts status detects REBASE_HEAD,0.276,git/rebase,21,7.96
git/rebase detect conflicts has conflicted files in working directory,0.273,git/rebase,21,7.96
git/rebase detect conflicts is a detached HEAD state,0.278,git/rebase,21,7.96
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.28,git/rebase,21,7.96
git/rebase abort after conflicts found no longer has working directory changes,0.269,git/rebase,21,7.96
git/rebase abort after conflicts found returns to the feature branch,0.273,git/rebase,21,7.96
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.346,git/rebase,21,7.96
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.336,git/rebase,21,7.96
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.339,git/rebase,21,7.96
git/rebase continue after resolving conflicts returns success,0.392,git/rebase,21,7.96
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.393,git/rebase,21,7.96
git/rebase continue after resolving conflicts no longer has working directory changes,0.401,git/rebase,21,7.96
git/rebase continue after resolving conflicts returns to the feature branch,0.404,git/rebase,21,7.96
git/rebase continue after resolving conflicts branch is now a different ref,0.404,git/rebase,21,7.96
git/rebase continue with additional changes unrelated to conflicted files returns success,0.397,git/rebase,21,7.96
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.402,git/rebase,21,7.96
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.414,git/rebase,21,7.96
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.416,git/rebase,21,7.96
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.42,git/rebase,21,7.96
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.412,git/rebase,21,7.96
git/commit createCommit normal commits the given files,0.127,git/commit,21,4.764
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.764
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.764
git/commit createCommit normal can commit renames,0.165,git/commit,21,4.764
git/commit createCommit partials can commit some lines from new file,0.195,git/commit,21,4.764
git/commit createCommit partials can commit second hunk from modified file,0.21,git/commit,21,4.764
git/commit createCommit partials can commit single delete from modified file,0.186,git/commit,21,4.764
git/commit createCommit partials can commit multiple hunks from modified file,0.206,git/commit,21,4.764
git/commit createCommit partials can commit some lines from deleted file,0.191,git/commit,21,4.764
git/commit createCommit partials can commit renames with modifications,0.2,git/commit,21,4.764
git/commit createCommit partials can commit renames with partially selected modifications,0.254,git/commit,21,4.764
git/commit createCommit with a merge conflict creates a merge commit,0.274,git/commit,21,4.764
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.246,git/commit,21,4.764
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.36,git/commit,21,4.764
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.345,git/commit,21,4.764
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.434,git/commit,21,4.764
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.424,git/commit,21,4.764
git/commit createMergeCommit with no changes throws an error,0.11,git/commit,21,4.764
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.764
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.184,git/commit,21,4.764
git/commit index corner cases file is deleted in index,0.187,git/commit,21,4.764
git/rebase can parse progress returns a value indicating conflicts were encountered,0.418,git/rebase,7,3.993
git/rebase can parse progress status detects REBASE_HEAD,0.428,git/rebase,7,3.993
git/rebase can parse progress is a detached HEAD state,0.426,git/rebase,7,3.993
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.888,git/rebase,7,3.993
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.886,git/rebase,7,3.993
git/rebase can parse progress for long rebase is a detached HEAD state,0.896,git/rebase,7,3.993
GitStore loadCommitBatch includes HEAD when loading commits,0.401,GitStore,11,2.785
GitStore can discard changes from a repository,0.177,GitStore,11,2.785
GitStore can discard a renamed file,0.194,GitStore,11,2.785
GitStore undo first commit reports the repository is unborn,0.202,GitStore,11,2.785
GitStore undo first commit pre-fills the commit message,0.132,GitStore,11,2.785
GitStore undo first commit clears the undo commit dialog,0.227,GitStore,11,2.785
GitStore undo first commit has no staged files,0.216,GitStore,11,2.785
GitStore repository with HEAD file can discard modified change cleanly,0.155,GitStore,11,2.785
git/status getStatus with conflicted repo parses conflicted files with markers,0.316,git/status,12,2.16
git/status getStatus with conflicted repo parses conflicted files without markers,0.316,git/status,12,2.16
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.423,git/status,12,2.16
git/status getStatus with conflicted repo parses resolved files,0.319,git/status,12,2.16
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.134,git/status,12,2.16
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.163,git/status,12,2.16
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.16
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.16
git/status getStatus with unconflicted repo reflects renames,0.121,git/status,12,2.16
git/status getStatus with unconflicted repo reflects copies,0.123,git/status,12,2.16
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.055,git/status,12,2.16
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.087,git/diff,19,2.068
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,2.068
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,2.068
git/diff getBlobImage retrieves valid images for deleted file,0.075,git/diff,19,2.068
git/diff imageDiff changes for images are set,0.089,git/diff,19,2.068
git/diff imageDiff changes for text are not set,0.096,git/diff,19,2.068
git/diff getWorkingDirectoryDiff counts lines for new file,0.099,git/diff,19,2.068
git/diff getWorkingDirectoryDiff counts lines for modified file,0.098,git/diff,19,2.068
git/diff getWorkingDirectoryDiff counts lines for staged file,0.093,git/diff,19,2.068
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.138,git/diff,19,2.068
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.178,git/diff,19,2.068
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.183,git/diff,19,2.068
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.139,git/diff,19,2.068
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.145,git/diff,19,2.068
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.096,git/diff,19,2.068
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,2.068
git/diff getBinaryPaths in repo with text only files returns an empty array,0.104,git/diff,19,2.068
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.103,git/diff,19,2.068
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,2.068
BranchPruner does nothing on non GitHub repositories,0.316,BranchPruner,6,1.896
BranchPruner prunes for GitHub repository,0.317,BranchPruner,6,1.896
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.253,BranchPruner,6,1.896
BranchPruner does not prune if there is no default branch,0.257,BranchPruner,6,1.896
BranchPruner does not prune reserved branches,0.321,BranchPruner,6,1.896
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.515
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,13,1.515
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.515
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,13,1.515
git/branch tip returns non-origin remote,0.082,git/branch,13,1.515
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.515
git/branch getBranchesPointedAt in a local repo finds one branch name,0.061,git/branch,13,1.515
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.515
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.515
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.086,git/branch,13,1.515
git/branch deleteBranch deletes local branches,0.132,git/branch,13,1.515
git/branch deleteBranch deletes remote branches,0.326,git/branch,13,1.515
git/branch deleteBranch handles attempted delete of removed remote branch,0.382,git/branch,13,1.515
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.381
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.143,git/stash,14,1.381
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.103,git/stash,14,1.381
git/reflog getRecentBranches returns the recently checked out branches,0.158,git/reflog,6,1.107
git/reflog getRecentBranches works after renaming a branch,0.198,git/reflog,6,1.107
git/reflog getRecentBranches returns a limited number of branches,0.265,git/reflog,6,1.107
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.107
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.208,git/reflog,6,1.107
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.107
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.451,formatPatch,5,1.123
git/checkout can checkout a valid branch name in an existing repository,0.129,git/checkout,6,1.047
git/checkout can checkout a branch when it exists on multiple remotes,0.134,git/checkout,6,1.047
git/checkout will fail when an existing branch matches the remote branch,0.125,git/checkout,6,1.047
git/checkout with submodules cleans up an submodule that no longer exists,0.314,git/checkout,6,1.047
git/checkout with submodules updates a changed submodule reference,0.273,git/checkout,6,1.047
git/config config looks up config values,0.058,git/config,12,0.879
git/config config returns null for undefined values,0.054,git/config,12,0.879
git/config global config getGlobalConfigPath gets the config path,0.062,git/config,12,0.879
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.076,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.073,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.072,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.879
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.879
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.717
gitignore saveGitIgnore applies rule correctly to repository,0.107,gitignore,9,0.717
gitignore appendIgnoreRule appends one rule,0.124,gitignore,9,0.717
gitignore appendIgnoreRule appends multiple rules,0.124,gitignore,9,0.717
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.843
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.843
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.843
git/rev-parse isBareRepository returns true for initialized bare repository,0.074,git/rev-parse,10,0.843
git/rev-parse isBareRepository returns false for empty directory,0.063,git/rev-parse,10,0.843
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.843
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.843
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.062,git/rev-parse,10,0.843
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.843
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.233,git/rev-parse,10,0.843
git/submodule listSubmodules returns the submodule entry,0.143,git/submodule,3,0.769
git/submodule listSubmodules returns the expected tag,0.205,git/submodule,3,0.769
git/submodule resetSubmodulePaths update submodule to original commit,0.381,git/submodule,3,0.769
git/log getCommits loads history,0.145,git/log,7,0.758
git/log getCommits handles repository with HEAD file on disk,0.109,git/log,7,0.758
git/log getCommits handles repository with signed commit and log.showSignature set,0.124,git/log,7,0.758
git/log getChangedFiles loads the files changed in the commit,0.061,git/log,7,0.758
git/log getChangedFiles detects renames,0.104,git/log,7,0.758
git/log getChangedFiles detect copies,0.114,git/log,7,0.758
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.758
git/merge merge and is successful returns true,0.048,git/merge,7,0.671
git/merge merge and is a noop returns false,0.063,git/merge,7,0.671
git/merge getMergeBase returns the common ancestor of two branches,0.082,git/merge,7,0.671
git/remote getRemotes should return both remotes,0.065,git/remote,11,0.627
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.627
git/remote findDefaultRemote returns something when origin removed,0.073,git/remote,11,0.627
git-lfs isUsingLFS returns false for repository not using LFS,0.058,git-lfs,9,0.578
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.578
git/for-each-ref getBranches fetches branches using for-each-ref,0.074,git/for-each-ref,3,0.247
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.247
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.247
Update remote url updates the repository's remote url when the github url changes,0.117,Update remote url,4,0.428
Update remote url doesn't update the repository's remote url when the github url is the same,0.09,Update remote url,4,0.428
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.428
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.086,Update remote url,4,0.428
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.053,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.05,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.374
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.374
git/core error handling does not throw for errors that were expected,0.061,git/core,6,0.378
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.378
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.378
git/core exit code handling throws for exit codes that were not expected,0.06,git/core,6,0.378
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.378
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.378
AppStore can select a repository,0.201,AppStore,5,0.255
git/reset reset can hard reset a repository,0.325,git/reset,2,0.364
validatedRepositoryPath returns the path to the repository,0.057,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.334,git/rebase,21,7.966
git/rebase detect conflicts status detects REBASE_HEAD,0.277,git/rebase,21,7.966
git/rebase detect conflicts has conflicted files in working directory,0.278,git/rebase,21,7.966
git/rebase detect conflicts is a detached HEAD state,0.28,git/rebase,21,7.966
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.267,git/rebase,21,7.966
git/rebase abort after conflicts found no longer has working directory changes,0.271,git/rebase,21,7.966
git/rebase abort after conflicts found returns to the feature branch,0.271,git/rebase,21,7.966
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.357,git/rebase,21,7.966
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.338,git/rebase,21,7.966
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.341,git/rebase,21,7.966
git/rebase continue after resolving conflicts returns success,0.397,git/rebase,21,7.966
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.392,git/rebase,21,7.966
git/rebase continue after resolving conflicts no longer has working directory changes,0.4,git/rebase,21,7.966
git/rebase continue after resolving conflicts returns to the feature branch,0.409,git/rebase,21,7.966
git/rebase continue after resolving conflicts branch is now a different ref,0.403,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files returns success,0.399,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.41,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.41,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.414,git/rebase,21,7.966
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.41,git/rebase,21,7.966
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.404,git/rebase,21,7.966
git/commit createCommit normal commits the given files,0.127,git/commit,21,4.72
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.72
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.72
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.72
git/commit createCommit partials can commit some lines from new file,0.188,git/commit,21,4.72
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.72
git/commit createCommit partials can commit single delete from modified file,0.184,git/commit,21,4.72
git/commit createCommit partials can commit multiple hunks from modified file,0.2,git/commit,21,4.72
git/commit createCommit partials can commit some lines from deleted file,0.184,git/commit,21,4.72
git/commit createCommit partials can commit renames with modifications,0.207,git/commit,21,4.72
git/commit createCommit partials can commit renames with partially selected modifications,0.24,git/commit,21,4.72
git/commit createCommit with a merge conflict creates a merge commit,0.267,git/commit,21,4.72
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.248,git/commit,21,4.72
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.354,git/commit,21,4.72
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.34,git/commit,21,4.72
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.425,git/commit,21,4.72
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.44,git/commit,21,4.72
git/commit createMergeCommit with no changes throws an error,0.114,git/commit,21,4.72
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.72
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.188,git/commit,21,4.72
git/commit index corner cases file is deleted in index,0.187,git/commit,21,4.72
git/rebase can parse progress returns a value indicating conflicts were encountered,0.417,git/rebase,7,4.008
git/rebase can parse progress status detects REBASE_HEAD,0.431,git/rebase,7,4.008
git/rebase can parse progress is a detached HEAD state,0.428,git/rebase,7,4.008
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.874,git/rebase,7,4.008
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.88,git/rebase,7,4.008
git/rebase can parse progress for long rebase is a detached HEAD state,0.926,git/rebase,7,4.008
GitStore loadCommitBatch includes HEAD when loading commits,0.423,GitStore,11,2.759
GitStore can discard changes from a repository,0.174,GitStore,11,2.759
GitStore can discard a renamed file,0.156,GitStore,11,2.759
GitStore undo first commit reports the repository is unborn,0.198,GitStore,11,2.759
GitStore undo first commit pre-fills the commit message,0.132,GitStore,11,2.759
GitStore undo first commit clears the undo commit dialog,0.235,GitStore,11,2.759
GitStore undo first commit has no staged files,0.226,GitStore,11,2.759
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.759
git/status getStatus with conflicted repo parses conflicted files with markers,0.314,git/status,12,2.148
git/status getStatus with conflicted repo parses conflicted files without markers,0.317,git/status,12,2.148
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.42,git/status,12,2.148
git/status getStatus with conflicted repo parses resolved files,0.323,git/status,12,2.148
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.132,git/status,12,2.148
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.161,git/status,12,2.148
git/status getStatus with unconflicted repo parses changed files,0.063,git/status,12,2.148
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.148
git/status getStatus with unconflicted repo reflects renames,0.12,git/status,12,2.148
git/status getStatus with unconflicted repo reflects copies,0.127,git/status,12,2.148
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.148
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.09,git/diff,19,2.081
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,2.081
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,2.081
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,2.081
git/diff imageDiff changes for images are set,0.081,git/diff,19,2.081
git/diff imageDiff changes for text are not set,0.093,git/diff,19,2.081
git/diff getWorkingDirectoryDiff counts lines for new file,0.094,git/diff,19,2.081
git/diff getWorkingDirectoryDiff counts lines for modified file,0.101,git/diff,19,2.081
git/diff getWorkingDirectoryDiff counts lines for staged file,0.095,git/diff,19,2.081
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.135,git/diff,19,2.081
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.176,git/diff,19,2.081
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.181,git/diff,19,2.081
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.15,git/diff,19,2.081
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.151,git/diff,19,2.081
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.102,git/diff,19,2.081
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.075,git/diff,19,2.081
git/diff getBinaryPaths in repo with text only files returns an empty array,0.105,git/diff,19,2.081
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.113,git/diff,19,2.081
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.133,git/diff,19,2.081
BranchPruner does nothing on non GitHub repositories,0.317,BranchPruner,6,1.968
BranchPruner prunes for GitHub repository,0.335,BranchPruner,6,1.968
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.269,BranchPruner,6,1.968
BranchPruner does not prune if there is no default branch,0.261,BranchPruner,6,1.968
BranchPruner does not prune reserved branches,0.326,BranchPruner,6,1.968
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.533
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.533
git/branch tip returns detached for arbitrary checkout,0.059,git/branch,13,1.533
git/branch tip returns current branch when on a valid HEAD,0.08,git/branch,13,1.533
git/branch tip returns non-origin remote,0.083,git/branch,13,1.533
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.533
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.533
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.533
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.533
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.093,git/branch,13,1.533
git/branch deleteBranch deletes local branches,0.13,git/branch,13,1.533
git/branch deleteBranch deletes remote branches,0.327,git/branch,13,1.533
git/branch deleteBranch handles attempted delete of removed remote branch,0.384,git/branch,13,1.533
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.112,git/stash,14,1.412
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.147,git/stash,14,1.412
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.103,git/stash,14,1.412
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.407,formatPatch,5,1.069
git/reflog getRecentBranches returns the recently checked out branches,0.152,git/reflog,6,1.111
git/reflog getRecentBranches works after renaming a branch,0.201,git/reflog,6,1.111
git/reflog getRecentBranches returns a limited number of branches,0.271,git/reflog,6,1.111
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.163,git/reflog,6,1.111
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.207,git/reflog,6,1.111
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.073,git/reflog,6,1.111
git/checkout can checkout a valid branch name in an existing repository,0.128,git/checkout,6,1.121
git/checkout can checkout a branch when it exists on multiple remotes,0.193,git/checkout,6,1.121
git/checkout will fail when an existing branch matches the remote branch,0.13,git/checkout,6,1.121
git/checkout with submodules cleans up an submodule that no longer exists,0.314,git/checkout,6,1.121
git/checkout with submodules updates a changed submodule reference,0.282,git/checkout,6,1.121
git/config config looks up config values,0.054,git/config,12,0.882
git/config config returns null for undefined values,0.057,git/config,12,0.882
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.882
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.073,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.077,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.882
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.81
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.81
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.81
git/rev-parse isBareRepository returns true for initialized bare repository,0.07,git/rev-parse,10,0.81
git/rev-parse isBareRepository returns false for empty directory,0.065,git/rev-parse,10,0.81
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.81
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.81
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.058,git/rev-parse,10,0.81
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.81
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.2,git/rev-parse,10,0.81
git/submodule listSubmodules returns the submodule entry,0.131,git/submodule,3,0.767
git/submodule listSubmodules returns the expected tag,0.189,git/submodule,3,0.767
git/submodule resetSubmodulePaths update submodule to original commit,0.403,git/submodule,3,0.767
git/log getCommits loads history,0.07,git/log,7,0.646
git/log getCommits handles repository with HEAD file on disk,0.099,git/log,7,0.646
git/log getCommits handles repository with signed commit and log.showSignature set,0.11,git/log,7,0.646
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.646
git/log getChangedFiles detects renames,0.101,git/log,7,0.646
git/log getChangedFiles detect copies,0.111,git/log,7,0.646
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.646
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.704
gitignore saveGitIgnore applies rule correctly to repository,0.103,gitignore,9,0.704
gitignore appendIgnoreRule appends one rule,0.122,gitignore,9,0.704
gitignore appendIgnoreRule appends multiple rules,0.122,gitignore,9,0.704
git/merge merge and is successful returns true,0.045,git/merge,7,0.614
git/merge merge and is a noop returns false,0.059,git/merge,7,0.614
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.614
git/remote getRemotes should return both remotes,0.142,git/remote,11,0.671
git/remote findDefaultRemote returns origin when multiple remotes found,0.059,git/remote,11,0.671
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.671
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.565
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.565
Update remote url updates the repository's remote url when the github url changes,0.12,Update remote url,4,0.43
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.43
Update remote url doesn't update repository's remote url if protocols don't match,0.083,Update remote url,4,0.43
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.43
git/core error handling does not throw for errors that were expected,0.06,git/core,6,0.384
git/core error handling throws for errors that were not expected,0.064,git/core,6,0.384
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.384
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.384
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.384
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.384
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.048,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.056,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.389
git/reset reset can hard reset a repository,0.082,git/reset,2,0.119
AppStore can select a repository,0.236,AppStore,5,0.294
git/for-each-ref getBranches fetches branches using for-each-ref,0.31,git/for-each-ref,3,0.489
git/for-each-ref getBranches should return empty list for empty repo,0.079,git/for-each-ref,3,0.489
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.489
validatedRepositoryPath returns the path to the repository,0.055,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.329,git/rebase,21,8.054
git/rebase detect conflicts status detects REBASE_HEAD,0.276,git/rebase,21,8.054
git/rebase detect conflicts has conflicted files in working directory,0.29,git/rebase,21,8.054
git/rebase detect conflicts is a detached HEAD state,0.286,git/rebase,21,8.054
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.278,git/rebase,21,8.054
git/rebase abort after conflicts found no longer has working directory changes,0.273,git/rebase,21,8.054
git/rebase abort after conflicts found returns to the feature branch,0.274,git/rebase,21,8.054
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.363,git/rebase,21,8.054
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.347,git/rebase,21,8.054
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.341,git/rebase,21,8.054
git/rebase continue after resolving conflicts returns success,0.402,git/rebase,21,8.054
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.394,git/rebase,21,8.054
git/rebase continue after resolving conflicts no longer has working directory changes,0.404,git/rebase,21,8.054
git/rebase continue after resolving conflicts returns to the feature branch,0.41,git/rebase,21,8.054
git/rebase continue after resolving conflicts branch is now a different ref,0.411,git/rebase,21,8.054
git/rebase continue with additional changes unrelated to conflicted files returns success,0.402,git/rebase,21,8.054
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.406,git/rebase,21,8.054
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.413,git/rebase,21,8.054
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.426,git/rebase,21,8.054
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.425,git/rebase,21,8.054
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.406,git/rebase,21,8.054
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.736
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.736
git/commit createCommit normal can commit for empty repository,0.146,git/commit,21,4.736
git/commit createCommit normal can commit renames,0.169,git/commit,21,4.736
git/commit createCommit partials can commit some lines from new file,0.187,git/commit,21,4.736
git/commit createCommit partials can commit second hunk from modified file,0.197,git/commit,21,4.736
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.736
git/commit createCommit partials can commit multiple hunks from modified file,0.209,git/commit,21,4.736
git/commit createCommit partials can commit some lines from deleted file,0.193,git/commit,21,4.736
git/commit createCommit partials can commit renames with modifications,0.199,git/commit,21,4.736
git/commit createCommit partials can commit renames with partially selected modifications,0.24,git/commit,21,4.736
git/commit createCommit with a merge conflict creates a merge commit,0.272,git/commit,21,4.736
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.254,git/commit,21,4.736
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.356,git/commit,21,4.736
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.342,git/commit,21,4.736
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.429,git/commit,21,4.736
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.416,git/commit,21,4.736
git/commit createMergeCommit with no changes throws an error,0.11,git/commit,21,4.736
git/commit index corner cases can commit when staged new file is then deleted,0.163,git/commit,21,4.736
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.188,git/commit,21,4.736
git/commit index corner cases file is deleted in index,0.182,git/commit,21,4.736
git/rebase can parse progress returns a value indicating conflicts were encountered,0.426,git/rebase,7,4.021
git/rebase can parse progress status detects REBASE_HEAD,0.439,git/rebase,7,4.021
git/rebase can parse progress is a detached HEAD state,0.43,git/rebase,7,4.021
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.896,git/rebase,7,4.021
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.883,git/rebase,7,4.021
git/rebase can parse progress for long rebase is a detached HEAD state,0.892,git/rebase,7,4.021
GitStore loadCommitBatch includes HEAD when loading commits,0.393,GitStore,11,2.778
GitStore can discard changes from a repository,0.177,GitStore,11,2.778
GitStore can discard a renamed file,0.156,GitStore,11,2.778
GitStore undo first commit reports the repository is unborn,0.2,GitStore,11,2.778
GitStore undo first commit pre-fills the commit message,0.137,GitStore,11,2.778
GitStore undo first commit clears the undo commit dialog,0.236,GitStore,11,2.778
GitStore undo first commit has no staged files,0.232,GitStore,11,2.778
GitStore repository with HEAD file can discard modified change cleanly,0.148,GitStore,11,2.778
git/status getStatus with conflicted repo parses conflicted files with markers,0.359,git/status,12,2.184
git/status getStatus with conflicted repo parses conflicted files without markers,0.324,git/status,12,2.184
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.43,git/status,12,2.184
git/status getStatus with conflicted repo parses resolved files,0.319,git/status,12,2.184
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.128,git/status,12,2.184
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.155,git/status,12,2.184
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.184
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.184
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.184
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.184
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.184
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.051,git/diff,19,1.868
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.868
git/diff getBlobImage retrieves valid image for modified file,0.091,git/diff,19,1.868
git/diff getBlobImage retrieves valid images for deleted file,0.064,git/diff,19,1.868
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.868
git/diff imageDiff changes for text are not set,0.081,git/diff,19,1.868
git/diff getWorkingDirectoryDiff counts lines for new file,0.087,git/diff,19,1.868
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,1.868
git/diff getWorkingDirectoryDiff counts lines for staged file,0.086,git/diff,19,1.868
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.115,git/diff,19,1.868
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.149,git/diff,19,1.868
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.152,git/diff,19,1.868
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.128,git/diff,19,1.868
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.122,git/diff,19,1.868
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.868
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.072,git/diff,19,1.868
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,1.868
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.111,git/diff,19,1.868
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.126,git/diff,19,1.868
BranchPruner does nothing on non GitHub repositories,0.266,BranchPruner,6,1.879
BranchPruner prunes for GitHub repository,0.327,BranchPruner,6,1.879
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.257,BranchPruner,6,1.879
BranchPruner does not prune if there is no default branch,0.259,BranchPruner,6,1.879
BranchPruner does not prune reserved branches,0.318,BranchPruner,6,1.879
git/branch tip returns unborn for new repository,0.027,git/branch,13,1.547
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,13,1.547
git/branch tip returns detached for arbitrary checkout,0.055,git/branch,13,1.547
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.547
git/branch tip returns non-origin remote,0.085,git/branch,13,1.547
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.547
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.547
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.547
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.547
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.093,git/branch,13,1.547
git/branch deleteBranch deletes local branches,0.126,git/branch,13,1.547
git/branch deleteBranch deletes remote branches,0.337,git/branch,13,1.547
git/branch deleteBranch handles attempted delete of removed remote branch,0.398,git/branch,13,1.547
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.113,git/stash,14,1.442
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.158,git/stash,14,1.442
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.106,git/stash,14,1.442
git/checkout can checkout a valid branch name in an existing repository,0.132,git/checkout,6,1.081
git/checkout can checkout a branch when it exists on multiple remotes,0.136,git/checkout,6,1.081
git/checkout will fail when an existing branch matches the remote branch,0.131,git/checkout,6,1.081
git/checkout with submodules cleans up an submodule that no longer exists,0.337,git/checkout,6,1.081
git/checkout with submodules updates a changed submodule reference,0.269,git/checkout,6,1.081
git/reflog getRecentBranches returns the recently checked out branches,0.166,git/reflog,6,1.175
git/reflog getRecentBranches works after renaming a branch,0.215,git/reflog,6,1.175
git/reflog getRecentBranches returns a limited number of branches,0.29,git/reflog,6,1.175
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.172,git/reflog,6,1.175
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.213,git/reflog,6,1.175
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.076,git/reflog,6,1.175
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.455,formatPatch,5,1.208
git/config config looks up config values,0.116,git/config,12,0.952
git/config config returns null for undefined values,0.056,git/config,12,0.952
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.952
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.072,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.071,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.073,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.07,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.072,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.072,git/config,12,0.952
git/rev-parse isGitRepository should return true for a repository,0.06,git/rev-parse,10,0.785
git/rev-parse isGitRepository should return false for a directory,0.049,git/rev-parse,10,0.785
git/rev-parse isBareRepository returns false for default initialized repository,0.064,git/rev-parse,10,0.785
git/rev-parse isBareRepository returns true for initialized bare repository,0.067,git/rev-parse,10,0.785
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.785
git/rev-parse isBareRepository throws error for missing directory,0.05,git/rev-parse,10,0.785
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.785
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.053,git/rev-parse,10,0.785
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.056,git/rev-parse,10,0.785
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.218,git/rev-parse,10,0.785
git/submodule listSubmodules returns the submodule entry,0.133,git/submodule,3,0.773
git/submodule listSubmodules returns the expected tag,0.19,git/submodule,3,0.773
git/submodule resetSubmodulePaths update submodule to original commit,0.409,git/submodule,3,0.773
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.698
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.698
gitignore appendIgnoreRule appends one rule,0.124,gitignore,9,0.698
gitignore appendIgnoreRule appends multiple rules,0.123,gitignore,9,0.698
git/remote getRemotes should return both remotes,0.056,git/remote,11,0.576
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.576
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.576
git/log getCommits loads history,0.072,git/log,7,0.661
git/log getCommits handles repository with HEAD file on disk,0.101,git/log,7,0.661
git/log getCommits handles repository with signed commit and log.showSignature set,0.117,git/log,7,0.661
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.661
git/log getChangedFiles detects renames,0.105,git/log,7,0.661
git/log getChangedFiles detect copies,0.107,git/log,7,0.661
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.661
git/merge merge and is successful returns true,0.043,git/merge,7,0.62
git/merge merge and is a noop returns false,0.061,git/merge,7,0.62
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.62
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.571
git-lfs isUsingLFS returns true if LFS is tracking a path,0.084,git-lfs,9,0.571
git/for-each-ref getBranches fetches branches using for-each-ref,0.071,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.245
Update remote url updates the repository's remote url when the github url changes,0.115,Update remote url,4,0.422
Update remote url doesn't update the repository's remote url when the github url is the same,0.089,Update remote url,4,0.422
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.422
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.422
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.053,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.055,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.381
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.374
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.374
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.374
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.374
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.374
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.374
AppStore can select a repository,0.203,AppStore,5,0.257
git/reset reset can hard reset a repository,0.328,git/reset,2,0.37
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.325,git/rebase,21,8.146
git/rebase detect conflicts status detects REBASE_HEAD,0.291,git/rebase,21,8.146
git/rebase detect conflicts has conflicted files in working directory,0.282,git/rebase,21,8.146
git/rebase detect conflicts is a detached HEAD state,0.29,git/rebase,21,8.146
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.28,git/rebase,21,8.146
git/rebase abort after conflicts found no longer has working directory changes,0.276,git/rebase,21,8.146
git/rebase abort after conflicts found returns to the feature branch,0.274,git/rebase,21,8.146
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.361,git/rebase,21,8.146
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.344,git/rebase,21,8.146
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.353,git/rebase,21,8.146
git/rebase continue after resolving conflicts returns success,0.403,git/rebase,21,8.146
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.416,git/rebase,21,8.146
git/rebase continue after resolving conflicts no longer has working directory changes,0.406,git/rebase,21,8.146
git/rebase continue after resolving conflicts returns to the feature branch,0.411,git/rebase,21,8.146
git/rebase continue after resolving conflicts branch is now a different ref,0.418,git/rebase,21,8.146
git/rebase continue with additional changes unrelated to conflicted files returns success,0.41,git/rebase,21,8.146
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.409,git/rebase,21,8.146
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.423,git/rebase,21,8.146
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.423,git/rebase,21,8.146
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.438,git/rebase,21,8.146
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.409,git/rebase,21,8.146
git/commit createCommit normal commits the given files,0.13,git/commit,21,4.747
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.747
git/commit createCommit normal can commit for empty repository,0.143,git/commit,21,4.747
git/commit createCommit normal can commit renames,0.165,git/commit,21,4.747
git/commit createCommit partials can commit some lines from new file,0.199,git/commit,21,4.747
git/commit createCommit partials can commit second hunk from modified file,0.205,git/commit,21,4.747
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.747
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.747
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.747
git/commit createCommit partials can commit renames with modifications,0.19,git/commit,21,4.747
git/commit createCommit partials can commit renames with partially selected modifications,0.235,git/commit,21,4.747
git/commit createCommit with a merge conflict creates a merge commit,0.277,git/commit,21,4.747
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.253,git/commit,21,4.747
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.352,git/commit,21,4.747
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.344,git/commit,21,4.747
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.43,git/commit,21,4.747
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.429,git/commit,21,4.747
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.747
git/commit index corner cases can commit when staged new file is then deleted,0.164,git/commit,21,4.747
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.187,git/commit,21,4.747
git/commit index corner cases file is deleted in index,0.185,git/commit,21,4.747
git/rebase can parse progress returns a value indicating conflicts were encountered,0.419,git/rebase,7,4.005
git/rebase can parse progress status detects REBASE_HEAD,0.431,git/rebase,7,4.005
git/rebase can parse progress is a detached HEAD state,0.425,git/rebase,7,4.005
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.879,git/rebase,7,4.005
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.896,git/rebase,7,4.005
git/rebase can parse progress for long rebase is a detached HEAD state,0.903,git/rebase,7,4.005
GitStore loadCommitBatch includes HEAD when loading commits,0.401,GitStore,11,2.791
GitStore can discard changes from a repository,0.217,GitStore,11,2.791
GitStore can discard a renamed file,0.165,GitStore,11,2.791
GitStore undo first commit reports the repository is unborn,0.203,GitStore,11,2.791
GitStore undo first commit pre-fills the commit message,0.137,GitStore,11,2.791
GitStore undo first commit clears the undo commit dialog,0.235,GitStore,11,2.791
GitStore undo first commit has no staged files,0.231,GitStore,11,2.791
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.791
git/status getStatus with conflicted repo parses conflicted files with markers,0.367,git/status,12,2.216
git/status getStatus with conflicted repo parses conflicted files without markers,0.327,git/status,12,2.216
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.43,git/status,12,2.216
git/status getStatus with conflicted repo parses resolved files,0.318,git/status,12,2.216
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.131,git/status,12,2.216
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.161,git/status,12,2.216
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.216
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.065,git/status,12,2.216
git/status getStatus with unconflicted repo reflects renames,0.115,git/status,12,2.216
git/status getStatus with unconflicted repo reflects copies,0.124,git/status,12,2.216
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.216
BranchPruner does nothing on non GitHub repositories,0.279,BranchPruner,6,1.771
BranchPruner prunes for GitHub repository,0.312,BranchPruner,6,1.771
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.246,BranchPruner,6,1.771
BranchPruner does not prune if there is no default branch,0.232,BranchPruner,6,1.771
BranchPruner does not prune reserved branches,0.289,BranchPruner,6,1.771
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,1.858
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.858
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,1.858
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.858
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.858
git/diff imageDiff changes for text are not set,0.096,git/diff,19,1.858
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,1.858
git/diff getWorkingDirectoryDiff counts lines for modified file,0.092,git/diff,19,1.858
git/diff getWorkingDirectoryDiff counts lines for staged file,0.095,git/diff,19,1.858
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.12,git/diff,19,1.858
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.148,git/diff,19,1.858
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.149,git/diff,19,1.858
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.134,git/diff,19,1.858
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.124,git/diff,19,1.858
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.858
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.068,git/diff,19,1.858
git/diff getBinaryPaths in repo with text only files returns an empty array,0.09,git/diff,19,1.858
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,1.858
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.858
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.582
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.582
git/branch tip returns detached for arbitrary checkout,0.065,git/branch,13,1.582
git/branch tip returns current branch when on a valid HEAD,0.083,git/branch,13,1.582
git/branch tip returns non-origin remote,0.084,git/branch,13,1.582
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.582
git/branch getBranchesPointedAt in a local repo finds one branch name,0.061,git/branch,13,1.582
git/branch getBranchesPointedAt in a local repo finds no branch names,0.051,git/branch,13,1.582
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.05,git/branch,13,1.582
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.085,git/branch,13,1.582
git/branch deleteBranch deletes local branches,0.137,git/branch,13,1.582
git/branch deleteBranch deletes remote branches,0.349,git/branch,13,1.582
git/branch deleteBranch handles attempted delete of removed remote branch,0.406,git/branch,13,1.582
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.114,git/stash,14,1.434
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.148,git/stash,14,1.434
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.104,git/stash,14,1.434
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.465,formatPatch,5,1.148
git/reflog getRecentBranches returns the recently checked out branches,0.163,git/reflog,6,1.163
git/reflog getRecentBranches works after renaming a branch,0.214,git/reflog,6,1.163
git/reflog getRecentBranches returns a limited number of branches,0.293,git/reflog,6,1.163
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.17,git/reflog,6,1.163
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.212,git/reflog,6,1.163
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.163
git/checkout can checkout a valid branch name in an existing repository,0.131,git/checkout,6,1.114
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.114
git/checkout will fail when an existing branch matches the remote branch,0.13,git/checkout,6,1.114
git/checkout with submodules cleans up an submodule that no longer exists,0.316,git/checkout,6,1.114
git/checkout with submodules updates a changed submodule reference,0.323,git/checkout,6,1.114
git/config config looks up config values,0.059,git/config,12,0.89
git/config config returns null for undefined values,0.054,git/config,12,0.89
git/config global config getGlobalConfigPath gets the config path,0.073,git/config,12,0.89
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.072,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.07,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.072,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.075,git/config,12,0.89
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.89
git/rev-parse isGitRepository should return true for a repository,0.123,git/rev-parse,10,0.842
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.842
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.842
git/rev-parse isBareRepository returns true for initialized bare repository,0.066,git/rev-parse,10,0.842
git/rev-parse isBareRepository returns false for empty directory,0.054,git/rev-parse,10,0.842
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.842
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.842
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.842
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.066,git/rev-parse,10,0.842
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.196,git/rev-parse,10,0.842
git/submodule listSubmodules returns the submodule entry,0.138,git/submodule,3,0.832
git/submodule listSubmodules returns the expected tag,0.193,git/submodule,3,0.832
git/submodule resetSubmodulePaths update submodule to original commit,0.457,git/submodule,3,0.832
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.686
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.686
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.686
gitignore appendIgnoreRule appends multiple rules,0.118,gitignore,9,0.686
git/log getCommits loads history,0.069,git/log,7,0.67
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.67
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.67
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.67
git/log getChangedFiles detects renames,0.107,git/log,7,0.67
git/log getChangedFiles detect copies,0.109,git/log,7,0.67
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.67
git/merge merge and is successful returns true,0.049,git/merge,7,0.621
git/merge merge and is a noop returns false,0.059,git/merge,7,0.621
git/merge getMergeBase returns the common ancestor of two branches,0.075,git/merge,7,0.621
git/remote getRemotes should return both remotes,0.064,git/remote,11,0.593
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.593
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.593
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.566
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.566
Update remote url updates the repository's remote url when the github url changes,0.11,Update remote url,4,0.411
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.411
Update remote url doesn't update repository's remote url if protocols don't match,0.082,Update remote url,4,0.411
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.411
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.034,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.368
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.383
git/core error handling throws for errors that were not expected,0.061,git/core,6,0.383
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.383
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.383
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.383
git/core config lock file error handling normalizes paths,0.047,git/core,6,0.383
git/reset reset can hard reset a repository,0.083,git/reset,2,0.125
AppStore can select a repository,0.198,AppStore,5,0.255
git/for-each-ref getBranches fetches branches using for-each-ref,0.322,git/for-each-ref,3,0.506
git/for-each-ref getBranches should return empty list for empty repo,0.076,git/for-each-ref,3,0.506
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.067,git/for-each-ref,3,0.506
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.117
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.063
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.329,git/rebase,21,7.931
git/rebase detect conflicts status detects REBASE_HEAD,0.271,git/rebase,21,7.931
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,7.931
git/rebase detect conflicts is a detached HEAD state,0.284,git/rebase,21,7.931
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.269,git/rebase,21,7.931
git/rebase abort after conflicts found no longer has working directory changes,0.265,git/rebase,21,7.931
git/rebase abort after conflicts found returns to the feature branch,0.271,git/rebase,21,7.931
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.352,git/rebase,21,7.931
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.333,git/rebase,21,7.931
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.345,git/rebase,21,7.931
git/rebase continue after resolving conflicts returns success,0.396,git/rebase,21,7.931
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.391,git/rebase,21,7.931
git/rebase continue after resolving conflicts no longer has working directory changes,0.4,git/rebase,21,7.931
git/rebase continue after resolving conflicts returns to the feature branch,0.405,git/rebase,21,7.931
git/rebase continue after resolving conflicts branch is now a different ref,0.403,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files returns success,0.398,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.399,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.414,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.417,git/rebase,21,7.931
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.409,git/rebase,21,7.931
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.397,git/rebase,21,7.931
git/commit createCommit normal commits the given files,0.128,git/commit,21,4.743
git/commit createCommit normal commit does not strip commentary by default,0.114,git/commit,21,4.743
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.743
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.743
git/commit createCommit partials can commit some lines from new file,0.213,git/commit,21,4.743
git/commit createCommit partials can commit second hunk from modified file,0.197,git/commit,21,4.743
git/commit createCommit partials can commit single delete from modified file,0.189,git/commit,21,4.743
git/commit createCommit partials can commit multiple hunks from modified file,0.204,git/commit,21,4.743
git/commit createCommit partials can commit some lines from deleted file,0.189,git/commit,21,4.743
git/commit createCommit partials can commit renames with modifications,0.198,git/commit,21,4.743
git/commit createCommit partials can commit renames with partially selected modifications,0.236,git/commit,21,4.743
git/commit createCommit with a merge conflict creates a merge commit,0.27,git/commit,21,4.743
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.248,git/commit,21,4.743
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.356,git/commit,21,4.743
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.34,git/commit,21,4.743
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.428,git/commit,21,4.743
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.423,git/commit,21,4.743
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.743
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.743
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.188,git/commit,21,4.743
git/commit index corner cases file is deleted in index,0.189,git/commit,21,4.743
git/rebase can parse progress returns a value indicating conflicts were encountered,0.414,git/rebase,7,3.988
git/rebase can parse progress status detects REBASE_HEAD,0.422,git/rebase,7,3.988
git/rebase can parse progress is a detached HEAD state,0.433,git/rebase,7,3.988
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.89,git/rebase,7,3.988
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.88,git/rebase,7,3.988
git/rebase can parse progress for long rebase is a detached HEAD state,0.896,git/rebase,7,3.988
GitStore loadCommitBatch includes HEAD when loading commits,0.4,GitStore,11,2.773
GitStore can discard changes from a repository,0.174,GitStore,11,2.773
GitStore can discard a renamed file,0.157,GitStore,11,2.773
GitStore undo first commit reports the repository is unborn,0.198,GitStore,11,2.773
GitStore undo first commit pre-fills the commit message,0.135,GitStore,11,2.773
GitStore undo first commit clears the undo commit dialog,0.235,GitStore,11,2.773
GitStore undo first commit has no staged files,0.225,GitStore,11,2.773
GitStore repository with HEAD file can discard modified change cleanly,0.171,GitStore,11,2.773
git/status getStatus with conflicted repo parses conflicted files with markers,0.319,git/status,12,2.188
git/status getStatus with conflicted repo parses conflicted files without markers,0.331,git/status,12,2.188
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.439,git/status,12,2.188
git/status getStatus with conflicted repo parses resolved files,0.33,git/status,12,2.188
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.133,git/status,12,2.188
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.188
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.188
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.188
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.188
git/status getStatus with unconflicted repo reflects copies,0.126,git/status,12,2.188
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.188
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.093,git/diff,19,2.083
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,2.083
git/diff getBlobImage retrieves valid image for modified file,0.057,git/diff,19,2.083
git/diff getBlobImage retrieves valid images for deleted file,0.075,git/diff,19,2.083
git/diff imageDiff changes for images are set,0.087,git/diff,19,2.083
git/diff imageDiff changes for text are not set,0.093,git/diff,19,2.083
git/diff getWorkingDirectoryDiff counts lines for new file,0.098,git/diff,19,2.083
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,2.083
git/diff getWorkingDirectoryDiff counts lines for staged file,0.096,git/diff,19,2.083
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.134,git/diff,19,2.083
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.175,git/diff,19,2.083
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.181,git/diff,19,2.083
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.153,git/diff,19,2.083
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.147,git/diff,19,2.083
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.099,git/diff,19,2.083
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,2.083
git/diff getBinaryPaths in repo with text only files returns an empty array,0.103,git/diff,19,2.083
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,2.083
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.127,git/diff,19,2.083
BranchPruner does nothing on non GitHub repositories,0.28,BranchPruner,6,1.963
BranchPruner prunes for GitHub repository,0.361,BranchPruner,6,1.963
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.302,BranchPruner,6,1.963
BranchPruner does not prune if there is no default branch,0.255,BranchPruner,6,1.963
BranchPruner does not prune reserved branches,0.319,BranchPruner,6,1.963
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.491
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,13,1.491
git/branch tip returns detached for arbitrary checkout,0.058,git/branch,13,1.491
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.491
git/branch tip returns non-origin remote,0.083,git/branch,13,1.491
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.491
git/branch getBranchesPointedAt in a local repo finds one branch name,0.058,git/branch,13,1.491
git/branch getBranchesPointedAt in a local repo finds no branch names,0.05,git/branch,13,1.491
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.051,git/branch,13,1.491
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,13,1.491
git/branch deleteBranch deletes local branches,0.123,git/branch,13,1.491
git/branch deleteBranch deletes remote branches,0.317,git/branch,13,1.491
git/branch deleteBranch handles attempted delete of removed remote branch,0.372,git/branch,13,1.491
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.106,git/stash,14,1.374
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.135,git/stash,14,1.374
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.097,git/stash,14,1.374
git/reflog getRecentBranches returns the recently checked out branches,0.154,git/reflog,6,1.029
git/reflog getRecentBranches works after renaming a branch,0.189,git/reflog,6,1.029
git/reflog getRecentBranches returns a limited number of branches,0.238,git/reflog,6,1.029
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.15,git/reflog,6,1.029
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.187,git/reflog,6,1.029
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.029
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.456,formatPatch,5,1.091
git/checkout can checkout a valid branch name in an existing repository,0.124,git/checkout,6,1.022
git/checkout can checkout a branch when it exists on multiple remotes,0.13,git/checkout,6,1.022
git/checkout will fail when an existing branch matches the remote branch,0.122,git/checkout,6,1.022
git/checkout with submodules cleans up an submodule that no longer exists,0.312,git/checkout,6,1.022
git/checkout with submodules updates a changed submodule reference,0.263,git/checkout,6,1.022
git/config config looks up config values,0.052,git/config,12,0.894
git/config config returns null for undefined values,0.055,git/config,12,0.894
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.894
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.069,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.065,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.064,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.122,git/config,12,0.894
git/rev-parse isGitRepository should return true for a repository,0.052,git/rev-parse,10,0.784
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns false for empty directory,0.066,git/rev-parse,10,0.784
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.066,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.194,git/rev-parse,10,0.784
git/submodule listSubmodules returns the submodule entry,0.13,git/submodule,3,0.756
git/submodule listSubmodules returns the expected tag,0.187,git/submodule,3,0.756
git/submodule resetSubmodulePaths update submodule to original commit,0.401,git/submodule,3,0.756
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.747
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.747
gitignore appendIgnoreRule appends one rule,0.186,gitignore,9,0.747
gitignore appendIgnoreRule appends multiple rules,0.118,gitignore,9,0.747
git/log getCommits loads history,0.07,git/log,7,0.657
git/log getCommits handles repository with HEAD file on disk,0.092,git/log,7,0.657
git/log getCommits handles repository with signed commit and log.showSignature set,0.119,git/log,7,0.657
git/log getChangedFiles loads the files changed in the commit,0.062,git/log,7,0.657
git/log getChangedFiles detects renames,0.102,git/log,7,0.657
git/log getChangedFiles detect copies,0.11,git/log,7,0.657
git/log getChangedFiles handles commit when HEAD exists on disk,0.06,git/log,7,0.657
git/merge merge and is successful returns true,0.048,git/merge,7,0.607
git/merge merge and is a noop returns false,0.058,git/merge,7,0.607
git/merge getMergeBase returns the common ancestor of two branches,0.07,git/merge,7,0.607
git/remote getRemotes should return both remotes,0.062,git/remote,11,0.576
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.576
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.576
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.542
git-lfs isUsingLFS returns true if LFS is tracking a path,0.076,git-lfs,9,0.542
git/for-each-ref getBranches fetches branches using for-each-ref,0.073,git/for-each-ref,3,0.237
git/for-each-ref getBranches should return empty list for empty repo,0.07,git/for-each-ref,3,0.237
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.054,git/for-each-ref,3,0.237
Update remote url updates the repository's remote url when the github url changes,0.111,Update remote url,4,0.414
Update remote url doesn't update the repository's remote url when the github url is the same,0.083,Update remote url,4,0.414
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.414
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.082,Update remote url,4,0.414
git/core error handling does not throw for errors that were expected,0.06,git/core,6,0.374
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.374
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.374
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.374
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.374
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.374
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.381
AppStore can select a repository,0.197,AppStore,5,0.25
git/reset reset can hard reset a repository,0.391,git/reset,2,0.432
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.057
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.328,git/rebase,21,8.085
git/rebase detect conflicts status detects REBASE_HEAD,0.284,git/rebase,21,8.085
git/rebase detect conflicts has conflicted files in working directory,0.284,git/rebase,21,8.085
git/rebase detect conflicts is a detached HEAD state,0.29,git/rebase,21,8.085
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.269,git/rebase,21,8.085
git/rebase abort after conflicts found no longer has working directory changes,0.274,git/rebase,21,8.085
git/rebase abort after conflicts found returns to the feature branch,0.273,git/rebase,21,8.085
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.355,git/rebase,21,8.085
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.34,git/rebase,21,8.085
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.351,git/rebase,21,8.085
git/rebase continue after resolving conflicts returns success,0.404,git/rebase,21,8.085
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.401,git/rebase,21,8.085
git/rebase continue after resolving conflicts no longer has working directory changes,0.406,git/rebase,21,8.085
git/rebase continue after resolving conflicts returns to the feature branch,0.413,git/rebase,21,8.085
git/rebase continue after resolving conflicts branch is now a different ref,0.41,git/rebase,21,8.085
git/rebase continue with additional changes unrelated to conflicted files returns success,0.412,git/rebase,21,8.085
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.407,git/rebase,21,8.085
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.418,git/rebase,21,8.085
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.433,git/rebase,21,8.085
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.429,git/rebase,21,8.085
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.399,git/rebase,21,8.085
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.725
git/commit createCommit normal commit does not strip commentary by default,0.114,git/commit,21,4.725
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.725
git/commit createCommit normal can commit renames,0.166,git/commit,21,4.725
git/commit createCommit partials can commit some lines from new file,0.192,git/commit,21,4.725
git/commit createCommit partials can commit second hunk from modified file,0.201,git/commit,21,4.725
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.725
git/commit createCommit partials can commit multiple hunks from modified file,0.204,git/commit,21,4.725
git/commit createCommit partials can commit some lines from deleted file,0.197,git/commit,21,4.725
git/commit createCommit partials can commit renames with modifications,0.198,git/commit,21,4.725
git/commit createCommit partials can commit renames with partially selected modifications,0.232,git/commit,21,4.725
git/commit createCommit with a merge conflict creates a merge commit,0.265,git/commit,21,4.725
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.248,git/commit,21,4.725
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.357,git/commit,21,4.725
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.343,git/commit,21,4.725
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.431,git/commit,21,4.725
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.432,git/commit,21,4.725
git/commit createMergeCommit with no changes throws an error,0.111,git/commit,21,4.725
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.725
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.184,git/commit,21,4.725
git/commit index corner cases file is deleted in index,0.184,git/commit,21,4.725
git/rebase can parse progress returns a value indicating conflicts were encountered,0.417,git/rebase,7,3.981
git/rebase can parse progress status detects REBASE_HEAD,0.428,git/rebase,7,3.981
git/rebase can parse progress is a detached HEAD state,0.421,git/rebase,7,3.981
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.875,git/rebase,7,3.981
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.885,git/rebase,7,3.981
git/rebase can parse progress for long rebase is a detached HEAD state,0.899,git/rebase,7,3.981
GitStore loadCommitBatch includes HEAD when loading commits,0.385,GitStore,11,2.69
GitStore can discard changes from a repository,0.174,GitStore,11,2.69
GitStore can discard a renamed file,0.184,GitStore,11,2.69
GitStore undo first commit reports the repository is unborn,0.196,GitStore,11,2.69
GitStore undo first commit pre-fills the commit message,0.132,GitStore,11,2.69
GitStore undo first commit clears the undo commit dialog,0.224,GitStore,11,2.69
GitStore undo first commit has no staged files,0.218,GitStore,11,2.69
GitStore repository with HEAD file can discard modified change cleanly,0.123,GitStore,11,2.69
git/status getStatus with conflicted repo parses conflicted files with markers,0.361,git/status,12,2.16
git/status getStatus with conflicted repo parses conflicted files without markers,0.311,git/status,12,2.16
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.42,git/status,12,2.16
git/status getStatus with conflicted repo parses resolved files,0.312,git/status,12,2.16
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.127,git/status,12,2.16
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.155,git/status,12,2.16
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.16
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.16
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.16
git/status getStatus with unconflicted repo reflects copies,0.121,git/status,12,2.16
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.16
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.049,git/diff,19,1.921
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.921
git/diff getBlobImage retrieves valid image for modified file,0.093,git/diff,19,1.921
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.921
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.921
git/diff imageDiff changes for text are not set,0.092,git/diff,19,1.921
git/diff getWorkingDirectoryDiff counts lines for new file,0.087,git/diff,19,1.921
git/diff getWorkingDirectoryDiff counts lines for modified file,0.094,git/diff,19,1.921
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.921
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.124,git/diff,19,1.921
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.155,git/diff,19,1.921
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.155,git/diff,19,1.921
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.132,git/diff,19,1.921
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.124,git/diff,19,1.921
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.085,git/diff,19,1.921
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,1.921
git/diff getBinaryPaths in repo with text only files returns an empty array,0.101,git/diff,19,1.921
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.109,git/diff,19,1.921
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.128,git/diff,19,1.921
BranchPruner does nothing on non GitHub repositories,0.248,BranchPruner,6,1.807
BranchPruner prunes for GitHub repository,0.308,BranchPruner,6,1.807
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.249,BranchPruner,6,1.807
BranchPruner does not prune if there is no default branch,0.246,BranchPruner,6,1.807
BranchPruner does not prune reserved branches,0.32,BranchPruner,6,1.807
git/branch tip returns unborn for new repository,0.027,git/branch,13,1.569
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.569
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.569
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.569
git/branch tip returns non-origin remote,0.086,git/branch,13,1.569
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.569
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.569
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.569
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.055,git/branch,13,1.569
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.569
git/branch deleteBranch deletes local branches,0.129,git/branch,13,1.569
git/branch deleteBranch deletes remote branches,0.349,git/branch,13,1.569
git/branch deleteBranch handles attempted delete of removed remote branch,0.393,git/branch,13,1.569
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.118,git/stash,14,1.46
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.153,git/stash,14,1.46
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.112,git/stash,14,1.46
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.441,formatPatch,5,1.134
git/reflog getRecentBranches returns the recently checked out branches,0.166,git/reflog,6,1.202
git/reflog getRecentBranches works after renaming a branch,0.226,git/reflog,6,1.202
git/reflog getRecentBranches returns a limited number of branches,0.298,git/reflog,6,1.202
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.173,git/reflog,6,1.202
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.22,git/reflog,6,1.202
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.077,git/reflog,6,1.202
git/checkout can checkout a valid branch name in an existing repository,0.136,git/checkout,6,1.076
git/checkout can checkout a branch when it exists on multiple remotes,0.143,git/checkout,6,1.076
git/checkout will fail when an existing branch matches the remote branch,0.132,git/checkout,6,1.076
git/checkout with submodules cleans up an submodule that no longer exists,0.322,git/checkout,6,1.076
git/checkout with submodules updates a changed submodule reference,0.264,git/checkout,6,1.076
git/config config looks up config values,0.058,git/config,12,0.964
git/config config returns null for undefined values,0.058,git/config,12,0.964
git/config global config getGlobalConfigPath gets the config path,0.069,git/config,12,0.964
git/config global config setGlobalConfigValue will replace all entries for a global value,0.1,git/config,12,0.964
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.077,git/config,12,0.964
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.964
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.067,git/config,12,0.964
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.964
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.139,git/config,12,0.964
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.964
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.076,git/config,12,0.964
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.067,git/config,12,0.964
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.812
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.812
git/rev-parse isBareRepository returns false for empty directory,0.069,git/rev-parse,10,0.812
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.071,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.058,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.812
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.199,git/rev-parse,10,0.812
git/submodule listSubmodules returns the submodule entry,0.126,git/submodule,3,0.732
git/submodule listSubmodules returns the expected tag,0.194,git/submodule,3,0.732
git/submodule resetSubmodulePaths update submodule to original commit,0.371,git/submodule,3,0.732
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.746
gitignore saveGitIgnore applies rule correctly to repository,0.11,gitignore,9,0.746
gitignore appendIgnoreRule appends one rule,0.131,gitignore,9,0.746
gitignore appendIgnoreRule appends multiple rules,0.133,gitignore,9,0.746
git/log getCommits loads history,0.07,git/log,7,0.665
git/log getCommits handles repository with HEAD file on disk,0.107,git/log,7,0.665
git/log getCommits handles repository with signed commit and log.showSignature set,0.124,git/log,7,0.665
git/log getChangedFiles loads the files changed in the commit,0.063,git/log,7,0.665
git/log getChangedFiles detects renames,0.099,git/log,7,0.665
git/log getChangedFiles detect copies,0.104,git/log,7,0.665
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.665
git/merge merge and is successful returns true,0.044,git/merge,7,0.609
git/merge merge and is a noop returns false,0.063,git/merge,7,0.609
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.609
git/remote getRemotes should return both remotes,0.059,git/remote,11,0.588
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.588
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.588
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.56
git-lfs isUsingLFS returns true if LFS is tracking a path,0.078,git-lfs,9,0.56
git/reset reset can hard reset a repository,0.166,git/reset,2,0.206
Update remote url updates the repository's remote url when the github url changes,0.112,Update remote url,4,0.429
Update remote url doesn't update the repository's remote url when the github url is the same,0.093,Update remote url,4,0.429
Update remote url doesn't update repository's remote url if protocols don't match,0.082,Update remote url,4,0.429
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.091,Update remote url,4,0.429
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.058,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.047,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.047,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.033,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.031,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile includes empty context lines,0.027,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.027,patch formatting,8,0.358
git/core error handling does not throw for errors that were expected,0.05,git/core,6,0.368
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.368
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.368
git/core exit code handling throws for exit codes that were not expected,0.056,git/core,6,0.368
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.368
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.368
AppStore can select a repository,0.191,AppStore,5,0.246
git/for-each-ref getBranches fetches branches using for-each-ref,0.31,git/for-each-ref,3,0.487
git/for-each-ref getBranches should return empty list for empty repo,0.076,git/for-each-ref,3,0.487
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.487
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.325,git/rebase,21,7.946
git/rebase detect conflicts status detects REBASE_HEAD,0.271,git/rebase,21,7.946
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,7.946
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,7.946
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.274,git/rebase,21,7.946
git/rebase abort after conflicts found no longer has working directory changes,0.27,git/rebase,21,7.946
git/rebase abort after conflicts found returns to the feature branch,0.265,git/rebase,21,7.946
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.351,git/rebase,21,7.946
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.338,git/rebase,21,7.946
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.339,git/rebase,21,7.946
git/rebase continue after resolving conflicts returns success,0.394,git/rebase,21,7.946
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.398,git/rebase,21,7.946
git/rebase continue after resolving conflicts no longer has working directory changes,0.397,git/rebase,21,7.946
git/rebase continue after resolving conflicts returns to the feature branch,0.401,git/rebase,21,7.946
git/rebase continue after resolving conflicts branch is now a different ref,0.401,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files returns success,0.403,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.401,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.41,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.412,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.413,git/rebase,21,7.946
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.407,git/rebase,21,7.946
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.68
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.68
git/commit createCommit normal can commit for empty repository,0.139,git/commit,21,4.68
git/commit createCommit normal can commit renames,0.167,git/commit,21,4.68
git/commit createCommit partials can commit some lines from new file,0.203,git/commit,21,4.68
git/commit createCommit partials can commit second hunk from modified file,0.197,git/commit,21,4.68
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.68
git/commit createCommit partials can commit multiple hunks from modified file,0.196,git/commit,21,4.68
git/commit createCommit partials can commit some lines from deleted file,0.18,git/commit,21,4.68
git/commit createCommit partials can commit renames with modifications,0.193,git/commit,21,4.68
git/commit createCommit partials can commit renames with partially selected modifications,0.236,git/commit,21,4.68
git/commit createCommit with a merge conflict creates a merge commit,0.269,git/commit,21,4.68
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.243,git/commit,21,4.68
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.357,git/commit,21,4.68
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.339,git/commit,21,4.68
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.42,git/commit,21,4.68
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.427,git/commit,21,4.68
git/commit createMergeCommit with no changes throws an error,0.109,git/commit,21,4.68
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.68
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.181,git/commit,21,4.68
git/commit index corner cases file is deleted in index,0.185,git/commit,21,4.68
git/rebase can parse progress returns a value indicating conflicts were encountered,0.412,git/rebase,7,3.94
git/rebase can parse progress status detects REBASE_HEAD,0.418,git/rebase,7,3.94
git/rebase can parse progress is a detached HEAD state,0.424,git/rebase,7,3.94
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.868,git/rebase,7,3.94
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.872,git/rebase,7,3.94
git/rebase can parse progress for long rebase is a detached HEAD state,0.895,git/rebase,7,3.94
GitStore loadCommitBatch includes HEAD when loading commits,0.402,GitStore,11,2.731
GitStore can discard changes from a repository,0.174,GitStore,11,2.731
GitStore can discard a renamed file,0.158,GitStore,11,2.731
GitStore undo first commit reports the repository is unborn,0.203,GitStore,11,2.731
GitStore undo first commit pre-fills the commit message,0.133,GitStore,11,2.731
GitStore undo first commit clears the undo commit dialog,0.235,GitStore,11,2.731
GitStore undo first commit has no staged files,0.224,GitStore,11,2.731
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.731
git/status getStatus with conflicted repo parses conflicted files with markers,0.323,git/status,12,2.181
git/status getStatus with conflicted repo parses conflicted files without markers,0.328,git/status,12,2.181
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.428,git/status,12,2.181
git/status getStatus with conflicted repo parses resolved files,0.332,git/status,12,2.181
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.128,git/status,12,2.181
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.181
git/status getStatus with unconflicted repo parses changed files,0.068,git/status,12,2.181
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.181
git/status getStatus with unconflicted repo reflects renames,0.121,git/status,12,2.181
git/status getStatus with unconflicted repo reflects copies,0.121,git/status,12,2.181
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.181
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.092,git/diff,19,2.095
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,2.095
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,2.095
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,2.095
git/diff imageDiff changes for images are set,0.081,git/diff,19,2.095
git/diff imageDiff changes for text are not set,0.092,git/diff,19,2.095
git/diff getWorkingDirectoryDiff counts lines for new file,0.1,git/diff,19,2.095
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,2.095
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,2.095
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.133,git/diff,19,2.095
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.178,git/diff,19,2.095
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.199,git/diff,19,2.095
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.15,git/diff,19,2.095
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.146,git/diff,19,2.095
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.099,git/diff,19,2.095
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.075,git/diff,19,2.095
git/diff getBinaryPaths in repo with text only files returns an empty array,0.105,git/diff,19,2.095
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.112,git/diff,19,2.095
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.131,git/diff,19,2.095
BranchPruner does nothing on non GitHub repositories,0.277,BranchPruner,6,1.924
BranchPruner prunes for GitHub repository,0.357,BranchPruner,6,1.924
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.306,BranchPruner,6,1.924
BranchPruner does not prune if there is no default branch,0.247,BranchPruner,6,1.924
BranchPruner does not prune reserved branches,0.302,BranchPruner,6,1.924
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.544
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.544
git/branch tip returns detached for arbitrary checkout,0.059,git/branch,13,1.544
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.544
git/branch tip returns non-origin remote,0.083,git/branch,13,1.544
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.544
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.544
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.544
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.544
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,13,1.544
git/branch deleteBranch deletes local branches,0.121,git/branch,13,1.544
git/branch deleteBranch deletes remote branches,0.321,git/branch,13,1.544
git/branch deleteBranch handles attempted delete of removed remote branch,0.418,git/branch,13,1.544
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.108,git/stash,14,1.339
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.139,git/stash,14,1.339
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.339
git/reflog getRecentBranches returns the recently checked out branches,0.207,git/reflog,6,1.102
git/reflog getRecentBranches works after renaming a branch,0.198,git/reflog,6,1.102
git/reflog getRecentBranches returns a limited number of branches,0.247,git/reflog,6,1.102
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.15,git/reflog,6,1.102
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.19,git/reflog,6,1.102
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.067,git/reflog,6,1.102
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.435,formatPatch,5,1.066
git/checkout can checkout a valid branch name in an existing repository,0.122,git/checkout,6,1.042
git/checkout can checkout a branch when it exists on multiple remotes,0.13,git/checkout,6,1.042
git/checkout will fail when an existing branch matches the remote branch,0.122,git/checkout,6,1.042
git/checkout with submodules cleans up an submodule that no longer exists,0.32,git/checkout,6,1.042
git/checkout with submodules updates a changed submodule reference,0.274,git/checkout,6,1.042
git/config config looks up config values,0.058,git/config,12,0.855
git/config config returns null for undefined values,0.055,git/config,12,0.855
git/config global config getGlobalConfigPath gets the config path,0.063,git/config,12,0.855
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,12,0.855
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.855
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.855
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.067,git/config,12,0.855
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.855
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.07,git/config,12,0.855
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.068,git/config,12,0.855
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.855
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.855
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.773
git/rev-parse isGitRepository should return false for a directory,0.052,git/rev-parse,10,0.773
git/rev-parse isBareRepository returns false for default initialized repository,0.063,git/rev-parse,10,0.773
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.773
git/rev-parse isBareRepository returns false for empty directory,0.06,git/rev-parse,10,0.773
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.773
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.773
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.773
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.773
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.201,git/rev-parse,10,0.773
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.682
gitignore saveGitIgnore applies rule correctly to repository,0.103,gitignore,9,0.682
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.682
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.682
git/submodule listSubmodules returns the submodule entry,0.135,git/submodule,3,0.731
git/submodule listSubmodules returns the expected tag,0.193,git/submodule,3,0.731
git/submodule resetSubmodulePaths update submodule to original commit,0.361,git/submodule,3,0.731
git/log getCommits loads history,0.067,git/log,7,0.634
git/log getCommits handles repository with HEAD file on disk,0.096,git/log,7,0.634
git/log getCommits handles repository with signed commit and log.showSignature set,0.113,git/log,7,0.634
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.634
git/log getChangedFiles detects renames,0.097,git/log,7,0.634
git/log getChangedFiles detect copies,0.11,git/log,7,0.634
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.634
git/merge merge and is successful returns true,0.043,git/merge,7,0.622
git/merge merge and is a noop returns false,0.059,git/merge,7,0.622
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.622
git/remote getRemotes should return both remotes,0.064,git/remote,11,0.597
git/remote findDefaultRemote returns origin when multiple remotes found,0.061,git/remote,11,0.597
git/remote findDefaultRemote returns something when origin removed,0.067,git/remote,11,0.597
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.661
git-lfs isUsingLFS returns true if LFS is tracking a path,0.086,git-lfs,9,0.661
git/for-each-ref getBranches fetches branches using for-each-ref,0.079,git/for-each-ref,3,0.252
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.252
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.252
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url when the github url is the same,0.084,Update remote url,4,0.421
Update remote url doesn't update repository's remote url if protocols don't match,0.086,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.421
git/core error handling does not throw for errors that were expected,0.059,git/core,6,0.387
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.387
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.387
git/core exit code handling throws for exit codes that were not expected,0.061,git/core,6,0.387
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.387
git/core config lock file error handling normalizes paths,0.047,git/core,6,0.387
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.382
AppStore can select a repository,0.2,AppStore,5,0.253
git/reset reset can hard reset a repository,0.315,git/reset,2,0.355
validatedRepositoryPath returns the path to the repository,0.062,validatedRepositoryPath,2,0.114
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.332,git/rebase,21,8.117
git/rebase detect conflicts status detects REBASE_HEAD,0.283,git/rebase,21,8.117
git/rebase detect conflicts has conflicted files in working directory,0.28,git/rebase,21,8.117
git/rebase detect conflicts is a detached HEAD state,0.288,git/rebase,21,8.117
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.272,git/rebase,21,8.117
git/rebase abort after conflicts found no longer has working directory changes,0.277,git/rebase,21,8.117
git/rebase abort after conflicts found returns to the feature branch,0.283,git/rebase,21,8.117
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.362,git/rebase,21,8.117
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.34,git/rebase,21,8.117
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.346,git/rebase,21,8.117
git/rebase continue after resolving conflicts returns success,0.406,git/rebase,21,8.117
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.403,git/rebase,21,8.117
git/rebase continue after resolving conflicts no longer has working directory changes,0.406,git/rebase,21,8.117
git/rebase continue after resolving conflicts returns to the feature branch,0.411,git/rebase,21,8.117
git/rebase continue after resolving conflicts branch is now a different ref,0.415,git/rebase,21,8.117
git/rebase continue with additional changes unrelated to conflicted files returns success,0.406,git/rebase,21,8.117
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.407,git/rebase,21,8.117
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.423,git/rebase,21,8.117
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.428,git/rebase,21,8.117
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.433,git/rebase,21,8.117
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.399,git/rebase,21,8.117
git/commit createCommit normal commits the given files,0.13,git/commit,21,4.796
git/commit createCommit normal commit does not strip commentary by default,0.113,git/commit,21,4.796
git/commit createCommit normal can commit for empty repository,0.142,git/commit,21,4.796
git/commit createCommit normal can commit renames,0.165,git/commit,21,4.796
git/commit createCommit partials can commit some lines from new file,0.193,git/commit,21,4.796
git/commit createCommit partials can commit second hunk from modified file,0.204,git/commit,21,4.796
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.796
git/commit createCommit partials can commit multiple hunks from modified file,0.207,git/commit,21,4.796
git/commit createCommit partials can commit some lines from deleted file,0.196,git/commit,21,4.796
git/commit createCommit partials can commit renames with modifications,0.2,git/commit,21,4.796
git/commit createCommit partials can commit renames with partially selected modifications,0.246,git/commit,21,4.796
git/commit createCommit with a merge conflict creates a merge commit,0.273,git/commit,21,4.796
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.255,git/commit,21,4.796
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.35,git/commit,21,4.796
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.35,git/commit,21,4.796
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.461,git/commit,21,4.796
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.415,git/commit,21,4.796
git/commit createMergeCommit with no changes throws an error,0.111,git/commit,21,4.796
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.796
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.189,git/commit,21,4.796
git/commit index corner cases file is deleted in index,0.189,git/commit,21,4.796
git/rebase can parse progress returns a value indicating conflicts were encountered,0.428,git/rebase,7,4.054
git/rebase can parse progress status detects REBASE_HEAD,0.434,git/rebase,7,4.054
git/rebase can parse progress is a detached HEAD state,0.435,git/rebase,7,4.054
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.907,git/rebase,7,4.054
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.894,git/rebase,7,4.054
git/rebase can parse progress for long rebase is a detached HEAD state,0.905,git/rebase,7,4.054
GitStore loadCommitBatch includes HEAD when loading commits,0.378,GitStore,11,2.718
GitStore can discard changes from a repository,0.176,GitStore,11,2.718
GitStore can discard a renamed file,0.155,GitStore,11,2.718
GitStore undo first commit reports the repository is unborn,0.195,GitStore,11,2.718
GitStore undo first commit pre-fills the commit message,0.134,GitStore,11,2.718
GitStore undo first commit clears the undo commit dialog,0.231,GitStore,11,2.718
GitStore undo first commit has no staged files,0.227,GitStore,11,2.718
GitStore repository with HEAD file can discard modified change cleanly,0.148,GitStore,11,2.718
git/status getStatus with conflicted repo parses conflicted files with markers,0.318,git/status,12,2.207
git/status getStatus with conflicted repo parses conflicted files without markers,0.367,git/status,12,2.207
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.429,git/status,12,2.207
git/status getStatus with conflicted repo parses resolved files,0.33,git/status,12,2.207
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.128,git/status,12,2.207
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.161,git/status,12,2.207
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.207
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.207
git/status getStatus with unconflicted repo reflects renames,0.115,git/status,12,2.207
git/status getStatus with unconflicted repo reflects copies,0.118,git/status,12,2.207
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.207
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.056,git/diff,19,1.917
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,1.917
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,1.917
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,1.917
git/diff imageDiff changes for images are set,0.125,git/diff,19,1.917
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.917
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,1.917
git/diff getWorkingDirectoryDiff counts lines for modified file,0.095,git/diff,19,1.917
git/diff getWorkingDirectoryDiff counts lines for staged file,0.089,git/diff,19,1.917
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,1.917
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.149,git/diff,19,1.917
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.152,git/diff,19,1.917
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.13,git/diff,19,1.917
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.123,git/diff,19,1.917
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.095,git/diff,19,1.917
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.066,git/diff,19,1.917
git/diff getBinaryPaths in repo with text only files returns an empty array,0.09,git/diff,19,1.917
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,1.917
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.114,git/diff,19,1.917
BranchPruner does nothing on non GitHub repositories,0.241,BranchPruner,6,1.754
BranchPruner prunes for GitHub repository,0.308,BranchPruner,6,1.754
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.238,BranchPruner,6,1.754
BranchPruner does not prune if there is no default branch,0.237,BranchPruner,6,1.754
BranchPruner does not prune reserved branches,0.31,BranchPruner,6,1.754
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.531
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.531
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,13,1.531
git/branch tip returns current branch when on a valid HEAD,0.076,git/branch,13,1.531
git/branch tip returns non-origin remote,0.087,git/branch,13,1.531
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.531
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.092,git/branch,13,1.531
git/branch deleteBranch deletes local branches,0.124,git/branch,13,1.531
git/branch deleteBranch deletes remote branches,0.333,git/branch,13,1.531
git/branch deleteBranch handles attempted delete of removed remote branch,0.389,git/branch,13,1.531
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.118,git/stash,14,1.436
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.15,git/stash,14,1.436
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.105,git/stash,14,1.436
git/reflog getRecentBranches returns the recently checked out branches,0.159,git/reflog,6,1.099
git/reflog getRecentBranches works after renaming a branch,0.203,git/reflog,6,1.099
git/reflog getRecentBranches returns a limited number of branches,0.27,git/reflog,6,1.099
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.16,git/reflog,6,1.099
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.196,git/reflog,6,1.099
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.099
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.406,formatPatch,5,1.114
git/checkout can checkout a valid branch name in an existing repository,0.133,git/checkout,6,1.081
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.081
git/checkout will fail when an existing branch matches the remote branch,0.133,git/checkout,6,1.081
git/checkout with submodules cleans up an submodule that no longer exists,0.323,git/checkout,6,1.081
git/checkout with submodules updates a changed submodule reference,0.281,git/checkout,6,1.081
git/config config looks up config values,0.057,git/config,12,0.86
git/config config returns null for undefined values,0.054,git/config,12,0.86
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.86
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.068,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.064,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.066,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.073,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.073,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.86
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.86
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,0.832
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.832
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.832
git/rev-parse isBareRepository returns true for initialized bare repository,0.071,git/rev-parse,10,0.832
git/rev-parse isBareRepository returns false for empty directory,0.064,git/rev-parse,10,0.832
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.832
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.832
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.059,git/rev-parse,10,0.832
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.832
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.223,git/rev-parse,10,0.832
git/submodule listSubmodules returns the submodule entry,0.128,git/submodule,3,0.72
git/submodule listSubmodules returns the expected tag,0.186,git/submodule,3,0.72
git/submodule resetSubmodulePaths update submodule to original commit,0.365,git/submodule,3,0.72
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.789
gitignore saveGitIgnore applies rule correctly to repository,0.113,gitignore,9,0.789
gitignore appendIgnoreRule appends one rule,0.14,gitignore,9,0.789
gitignore appendIgnoreRule appends multiple rules,0.148,gitignore,9,0.789
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.603
git-lfs isUsingLFS returns true if LFS is tracking a path,0.087,git-lfs,9,0.603
git/log getCommits loads history,0.07,git/log,7,0.689
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.689
git/log getCommits handles repository with signed commit and log.showSignature set,0.125,git/log,7,0.689
git/log getChangedFiles loads the files changed in the commit,0.064,git/log,7,0.689
git/log getChangedFiles detects renames,0.108,git/log,7,0.689
git/log getChangedFiles detect copies,0.115,git/log,7,0.689
git/log getChangedFiles handles commit when HEAD exists on disk,0.062,git/log,7,0.689
git/merge merge and is successful returns true,0.049,git/merge,7,0.699
git/merge merge and is a noop returns false,0.07,git/merge,7,0.699
git/merge getMergeBase returns the common ancestor of two branches,0.081,git/merge,7,0.699
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.667
git/remote findDefaultRemote returns origin when multiple remotes found,0.068,git/remote,11,0.667
git/remote findDefaultRemote returns something when origin removed,0.079,git/remote,11,0.667
Update remote url updates the repository's remote url when the github url changes,0.123,Update remote url,4,0.434
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.434
Update remote url doesn't update repository's remote url if protocols don't match,0.088,Update remote url,4,0.434
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.434
git/core error handling does not throw for errors that were expected,0.052,git/core,6,0.361
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.361
git/core exit code handling does not throw for exit codes that were expected,0.056,git/core,6,0.361
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.361
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.361
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.361
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.045,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.053,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.054,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.055,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.044,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.379
git/reset reset can hard reset a repository,0.085,git/reset,2,0.125
AppStore can select a repository,0.228,AppStore,5,0.286
git/for-each-ref getBranches fetches branches using for-each-ref,0.36,git/for-each-ref,3,0.544
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.544
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.063,git/for-each-ref,3,0.544
validatedRepositoryPath returns the path to the repository,0.054,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.132,git/git-attributes,1,0.175
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.333,git/rebase,21,8.051
git/rebase detect conflicts status detects REBASE_HEAD,0.281,git/rebase,21,8.051
git/rebase detect conflicts has conflicted files in working directory,0.285,git/rebase,21,8.051
git/rebase detect conflicts is a detached HEAD state,0.295,git/rebase,21,8.051
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.272,git/rebase,21,8.051
git/rebase abort after conflicts found no longer has working directory changes,0.273,git/rebase,21,8.051
git/rebase abort after conflicts found returns to the feature branch,0.272,git/rebase,21,8.051
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.354,git/rebase,21,8.051
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.342,git/rebase,21,8.051
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.341,git/rebase,21,8.051
git/rebase continue after resolving conflicts returns success,0.403,git/rebase,21,8.051
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.396,git/rebase,21,8.051
git/rebase continue after resolving conflicts no longer has working directory changes,0.404,git/rebase,21,8.051
git/rebase continue after resolving conflicts returns to the feature branch,0.407,git/rebase,21,8.051
git/rebase continue after resolving conflicts branch is now a different ref,0.409,git/rebase,21,8.051
git/rebase continue with additional changes unrelated to conflicted files returns success,0.413,git/rebase,21,8.051
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.408,git/rebase,21,8.051
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.411,git/rebase,21,8.051
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.423,git/rebase,21,8.051
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.425,git/rebase,21,8.051
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.403,git/rebase,21,8.051
git/commit createCommit normal commits the given files,0.129,git/commit,21,4.761
git/commit createCommit normal commit does not strip commentary by default,0.114,git/commit,21,4.761
git/commit createCommit normal can commit for empty repository,0.141,git/commit,21,4.761
git/commit createCommit normal can commit renames,0.166,git/commit,21,4.761
git/commit createCommit partials can commit some lines from new file,0.224,git/commit,21,4.761
git/commit createCommit partials can commit second hunk from modified file,0.204,git/commit,21,4.761
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.761
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.761
git/commit createCommit partials can commit some lines from deleted file,0.19,git/commit,21,4.761
git/commit createCommit partials can commit renames with modifications,0.193,git/commit,21,4.761
git/commit createCommit partials can commit renames with partially selected modifications,0.234,git/commit,21,4.761
git/commit createCommit with a merge conflict creates a merge commit,0.272,git/commit,21,4.761
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.252,git/commit,21,4.761
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.354,git/commit,21,4.761
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.344,git/commit,21,4.761
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.426,git/commit,21,4.761
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.431,git/commit,21,4.761
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.761
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.761
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.186,git/commit,21,4.761
git/commit index corner cases file is deleted in index,0.185,git/commit,21,4.761
git/rebase can parse progress returns a value indicating conflicts were encountered,0.417,git/rebase,7,3.988
git/rebase can parse progress status detects REBASE_HEAD,0.425,git/rebase,7,3.988
git/rebase can parse progress is a detached HEAD state,0.421,git/rebase,7,3.988
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.878,git/rebase,7,3.988
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.886,git/rebase,7,3.988
git/rebase can parse progress for long rebase is a detached HEAD state,0.908,git/rebase,7,3.988
GitStore loadCommitBatch includes HEAD when loading commits,0.435,GitStore,11,2.766
GitStore can discard changes from a repository,0.18,GitStore,11,2.766
GitStore can discard a renamed file,0.158,GitStore,11,2.766
GitStore undo first commit reports the repository is unborn,0.205,GitStore,11,2.766
GitStore undo first commit pre-fills the commit message,0.137,GitStore,11,2.766
GitStore undo first commit clears the undo commit dialog,0.232,GitStore,11,2.766
GitStore undo first commit has no staged files,0.225,GitStore,11,2.766
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.766
git/status getStatus with conflicted repo parses conflicted files with markers,0.372,git/status,12,2.188
git/status getStatus with conflicted repo parses conflicted files without markers,0.324,git/status,12,2.188
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.43,git/status,12,2.188
git/status getStatus with conflicted repo parses resolved files,0.317,git/status,12,2.188
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.128,git/status,12,2.188
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.156,git/status,12,2.188
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.188
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.064,git/status,12,2.188
git/status getStatus with unconflicted repo reflects renames,0.111,git/status,12,2.188
git/status getStatus with unconflicted repo reflects copies,0.114,git/status,12,2.188
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.054,git/status,12,2.188
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.051,git/diff,19,1.938
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.938
git/diff getBlobImage retrieves valid image for modified file,0.103,git/diff,19,1.938
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.938
git/diff imageDiff changes for images are set,0.08,git/diff,19,1.938
git/diff imageDiff changes for text are not set,0.092,git/diff,19,1.938
git/diff getWorkingDirectoryDiff counts lines for new file,0.094,git/diff,19,1.938
git/diff getWorkingDirectoryDiff counts lines for modified file,0.095,git/diff,19,1.938
git/diff getWorkingDirectoryDiff counts lines for staged file,0.089,git/diff,19,1.938
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.128,git/diff,19,1.938
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.153,git/diff,19,1.938
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.153,git/diff,19,1.938
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.129,git/diff,19,1.938
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.124,git/diff,19,1.938
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.086,git/diff,19,1.938
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.938
git/diff getBinaryPaths in repo with text only files returns an empty array,0.1,git/diff,19,1.938
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,1.938
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.126,git/diff,19,1.938
BranchPruner does nothing on non GitHub repositories,0.256,BranchPruner,6,1.831
BranchPruner prunes for GitHub repository,0.316,BranchPruner,6,1.831
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.256,BranchPruner,6,1.831
BranchPruner does not prune if there is no default branch,0.253,BranchPruner,6,1.831
BranchPruner does not prune reserved branches,0.308,BranchPruner,6,1.831
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.543
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,13,1.543
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.543
git/branch tip returns current branch when on a valid HEAD,0.076,git/branch,13,1.543
git/branch tip returns non-origin remote,0.085,git/branch,13,1.543
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo finds one branch name,0.072,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo finds no branch names,0.051,git/branch,13,1.543
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.048,git/branch,13,1.543
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,13,1.543
git/branch deleteBranch deletes local branches,0.133,git/branch,13,1.543
git/branch deleteBranch deletes remote branches,0.333,git/branch,13,1.543
git/branch deleteBranch handles attempted delete of removed remote branch,0.392,git/branch,13,1.543
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.114,git/stash,14,1.443
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.149,git/stash,14,1.443
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.107,git/stash,14,1.443
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.47,formatPatch,5,1.157
git/reflog getRecentBranches returns the recently checked out branches,0.167,git/reflog,6,1.19
git/reflog getRecentBranches works after renaming a branch,0.276,git/reflog,6,1.19
git/reflog getRecentBranches returns a limited number of branches,0.278,git/reflog,6,1.19
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.16,git/reflog,6,1.19
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.199,git/reflog,6,1.19
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.068,git/reflog,6,1.19
git/checkout can checkout a valid branch name in an existing repository,0.126,git/checkout,6,1.04
git/checkout can checkout a branch when it exists on multiple remotes,0.146,git/checkout,6,1.04
git/checkout will fail when an existing branch matches the remote branch,0.124,git/checkout,6,1.04
git/checkout with submodules cleans up an submodule that no longer exists,0.307,git/checkout,6,1.04
git/checkout with submodules updates a changed submodule reference,0.262,git/checkout,6,1.04
git/config config looks up config values,0.052,git/config,12,0.858
git/config config returns null for undefined values,0.053,git/config,12,0.858
git/config global config getGlobalConfigPath gets the config path,0.063,git/config,12,0.858
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.066,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.073,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.07,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.858
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.074,git/config,12,0.858
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.791
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.791
git/rev-parse isBareRepository returns false for default initialized repository,0.059,git/rev-parse,10,0.791
git/rev-parse isBareRepository returns true for initialized bare repository,0.065,git/rev-parse,10,0.791
git/rev-parse isBareRepository returns false for empty directory,0.069,git/rev-parse,10,0.791
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.791
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.791
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.058,git/rev-parse,10,0.791
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.791
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.198,git/rev-parse,10,0.791
gitignore readGitIgnoreAtRoot reads contents from disk,0.022,gitignore,9,0.697
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.697
gitignore appendIgnoreRule appends one rule,0.123,gitignore,9,0.697
gitignore appendIgnoreRule appends multiple rules,0.122,gitignore,9,0.697
git/submodule listSubmodules returns the submodule entry,0.131,git/submodule,3,0.733
git/submodule listSubmodules returns the expected tag,0.197,git/submodule,3,0.733
git/submodule resetSubmodulePaths update submodule to original commit,0.367,git/submodule,3,0.733
git/merge merge and is successful returns true,0.046,git/merge,7,0.594
git/merge merge and is a noop returns false,0.058,git/merge,7,0.594
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.594
git/log getCommits loads history,0.072,git/log,7,0.644
git/log getCommits handles repository with HEAD file on disk,0.102,git/log,7,0.644
git/log getCommits handles repository with signed commit and log.showSignature set,0.118,git/log,7,0.644
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.644
git/log getChangedFiles detects renames,0.097,git/log,7,0.644
git/log getChangedFiles detect copies,0.1,git/log,7,0.644
git/log getChangedFiles handles commit when HEAD exists on disk,0.054,git/log,7,0.644
git/remote getRemotes should return both remotes,0.055,git/remote,11,0.604
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.604
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.604
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.576
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.576
git/for-each-ref getBranches fetches branches using for-each-ref,0.159,git/for-each-ref,3,0.327
git/for-each-ref getBranches should return empty list for empty repo,0.071,git/for-each-ref,3,0.327
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.054,git/for-each-ref,3,0.327
Update remote url updates the repository's remote url when the github url changes,0.113,Update remote url,4,0.428
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.428
Update remote url doesn't update repository's remote url if protocols don't match,0.095,Update remote url,4,0.428
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.428
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.048,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.049,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.368
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.368
git/core error handling does not throw for errors that were expected,0.055,git/core,6,0.372
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.372
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,6,0.372
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.372
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.372
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.372
AppStore can select a repository,0.193,AppStore,5,0.247
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.237,git/git-attributes,1,0.28
git/reset reset can hard reset a repository,0.081,git/reset,2,0.123
validatedRepositoryPath returns the path to the repository,0.057,validatedRepositoryPath,2,0.113
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.324,git/rebase,21,8.098
git/rebase detect conflicts status detects REBASE_HEAD,0.281,git/rebase,21,8.098
git/rebase detect conflicts has conflicted files in working directory,0.292,git/rebase,21,8.098
git/rebase detect conflicts is a detached HEAD state,0.292,git/rebase,21,8.098
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.273,git/rebase,21,8.098
git/rebase abort after conflicts found no longer has working directory changes,0.276,git/rebase,21,8.098
git/rebase abort after conflicts found returns to the feature branch,0.275,git/rebase,21,8.098
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.357,git/rebase,21,8.098
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.344,git/rebase,21,8.098
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.348,git/rebase,21,8.098
git/rebase continue after resolving conflicts returns success,0.401,git/rebase,21,8.098
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.405,git/rebase,21,8.098
git/rebase continue after resolving conflicts no longer has working directory changes,0.405,git/rebase,21,8.098
git/rebase continue after resolving conflicts returns to the feature branch,0.414,git/rebase,21,8.098
git/rebase continue after resolving conflicts branch is now a different ref,0.412,git/rebase,21,8.098
git/rebase continue with additional changes unrelated to conflicted files returns success,0.408,git/rebase,21,8.098
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.408,git/rebase,21,8.098
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.42,git/rebase,21,8.098
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.431,git/rebase,21,8.098
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.422,git/rebase,21,8.098
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.406,git/rebase,21,8.098
git/commit createCommit normal commits the given files,0.136,git/commit,21,4.726
git/commit createCommit normal commit does not strip commentary by default,0.116,git/commit,21,4.726
git/commit createCommit normal can commit for empty repository,0.141,git/commit,21,4.726
git/commit createCommit normal can commit renames,0.167,git/commit,21,4.726
git/commit createCommit partials can commit some lines from new file,0.189,git/commit,21,4.726
git/commit createCommit partials can commit second hunk from modified file,0.207,git/commit,21,4.726
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.726
git/commit createCommit partials can commit multiple hunks from modified file,0.196,git/commit,21,4.726
git/commit createCommit partials can commit some lines from deleted file,0.185,git/commit,21,4.726
git/commit createCommit partials can commit renames with modifications,0.186,git/commit,21,4.726
git/commit createCommit partials can commit renames with partially selected modifications,0.229,git/commit,21,4.726
git/commit createCommit with a merge conflict creates a merge commit,0.267,git/commit,21,4.726
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.247,git/commit,21,4.726
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.356,git/commit,21,4.726
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.342,git/commit,21,4.726
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.434,git/commit,21,4.726
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.432,git/commit,21,4.726
git/commit createMergeCommit with no changes throws an error,0.112,git/commit,21,4.726
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.726
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.19,git/commit,21,4.726
git/commit index corner cases file is deleted in index,0.185,git/commit,21,4.726
git/rebase can parse progress returns a value indicating conflicts were encountered,0.428,git/rebase,7,4.035
git/rebase can parse progress status detects REBASE_HEAD,0.432,git/rebase,7,4.035
git/rebase can parse progress is a detached HEAD state,0.431,git/rebase,7,4.035
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.894,git/rebase,7,4.035
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.89,git/rebase,7,4.035
git/rebase can parse progress for long rebase is a detached HEAD state,0.907,git/rebase,7,4.035
GitStore loadCommitBatch includes HEAD when loading commits,0.41,GitStore,11,2.779
GitStore can discard changes from a repository,0.181,GitStore,11,2.779
GitStore can discard a renamed file,0.158,GitStore,11,2.779
GitStore undo first commit reports the repository is unborn,0.203,GitStore,11,2.779
GitStore undo first commit pre-fills the commit message,0.139,GitStore,11,2.779
GitStore undo first commit clears the undo commit dialog,0.236,GitStore,11,2.779
GitStore undo first commit has no staged files,0.225,GitStore,11,2.779
GitStore repository with HEAD file can discard modified change cleanly,0.123,GitStore,11,2.779
git/status getStatus with conflicted repo parses conflicted files with markers,0.38,git/status,12,2.23
git/status getStatus with conflicted repo parses conflicted files without markers,0.332,git/status,12,2.23
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.434,git/status,12,2.23
git/status getStatus with conflicted repo parses resolved files,0.329,git/status,12,2.23
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.23
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.155,git/status,12,2.23
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.23
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.064,git/status,12,2.23
git/status getStatus with unconflicted repo reflects renames,0.115,git/status,12,2.23
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.23
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.23
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.051,git/diff,19,1.903
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.903
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,1.903
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,1.903
git/diff imageDiff changes for images are set,0.123,git/diff,19,1.903
git/diff imageDiff changes for text are not set,0.092,git/diff,19,1.903
git/diff getWorkingDirectoryDiff counts lines for new file,0.09,git/diff,19,1.903
git/diff getWorkingDirectoryDiff counts lines for modified file,0.094,git/diff,19,1.903
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.903
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.125,git/diff,19,1.903
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.15,git/diff,19,1.903
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.903
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.13,git/diff,19,1.903
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.127,git/diff,19,1.903
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.086,git/diff,19,1.903
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.068,git/diff,19,1.903
git/diff getBinaryPaths in repo with text only files returns an empty array,0.091,git/diff,19,1.903
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.099,git/diff,19,1.903
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.115,git/diff,19,1.903
BranchPruner does nothing on non GitHub repositories,0.241,BranchPruner,6,1.785
BranchPruner prunes for GitHub repository,0.3,BranchPruner,6,1.785
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.252,BranchPruner,6,1.785
BranchPruner does not prune if there is no default branch,0.254,BranchPruner,6,1.785
BranchPruner does not prune reserved branches,0.305,BranchPruner,6,1.785
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.541
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,13,1.541
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.541
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,13,1.541
git/branch tip returns non-origin remote,0.086,git/branch,13,1.541
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,13,1.541
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.541
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.541
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.541
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.541
git/branch deleteBranch deletes local branches,0.124,git/branch,13,1.541
git/branch deleteBranch deletes remote branches,0.341,git/branch,13,1.541
git/branch deleteBranch handles attempted delete of removed remote branch,0.386,git/branch,13,1.541
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.113,git/stash,14,1.428
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.15,git/stash,14,1.428
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.104,git/stash,14,1.428
git/reflog getRecentBranches returns the recently checked out branches,0.163,git/reflog,6,1.146
git/reflog getRecentBranches works after renaming a branch,0.21,git/reflog,6,1.146
git/reflog getRecentBranches returns a limited number of branches,0.276,git/reflog,6,1.146
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.174,git/reflog,6,1.146
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.207,git/reflog,6,1.146
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.146
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.443,formatPatch,5,1.148
git/checkout can checkout a valid branch name in an existing repository,0.133,git/checkout,6,1.097
git/checkout can checkout a branch when it exists on multiple remotes,0.139,git/checkout,6,1.097
git/checkout will fail when an existing branch matches the remote branch,0.13,git/checkout,6,1.097
git/checkout with submodules cleans up an submodule that no longer exists,0.335,git/checkout,6,1.097
git/checkout with submodules updates a changed submodule reference,0.287,git/checkout,6,1.097
git/config config looks up config values,0.057,git/config,12,0.884
git/config config returns null for undefined values,0.05,git/config,12,0.884
git/config global config getGlobalConfigPath gets the config path,0.062,git/config,12,0.884
git/config global config setGlobalConfigValue will replace all entries for a global value,0.101,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.072,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.072,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.074,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.884
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.884
git/rev-parse isGitRepository should return true for a repository,0.054,git/rev-parse,10,0.823
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.823
git/rev-parse isBareRepository returns false for default initialized repository,0.069,git/rev-parse,10,0.823
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.823
git/rev-parse isBareRepository returns false for empty directory,0.066,git/rev-parse,10,0.823
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.823
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.073,git/rev-parse,10,0.823
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.823
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.823
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.221,git/rev-parse,10,0.823
git/submodule listSubmodules returns the submodule entry,0.143,git/submodule,3,0.759
git/submodule listSubmodules returns the expected tag,0.196,git/submodule,3,0.759
git/submodule resetSubmodulePaths update submodule to original commit,0.379,git/submodule,3,0.759
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.775
gitignore saveGitIgnore applies rule correctly to repository,0.112,gitignore,9,0.775
gitignore appendIgnoreRule appends one rule,0.136,gitignore,9,0.775
gitignore appendIgnoreRule appends multiple rules,0.138,gitignore,9,0.775
git/log getCommits loads history,0.067,git/log,7,0.645
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.645
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.645
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.645
git/log getChangedFiles detects renames,0.099,git/log,7,0.645
git/log getChangedFiles detect copies,0.108,git/log,7,0.645
git/log getChangedFiles handles commit when HEAD exists on disk,0.054,git/log,7,0.645
git/remote getRemotes should return both remotes,0.056,git/remote,11,0.631
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.631
git/remote findDefaultRemote returns something when origin removed,0.075,git/remote,11,0.631
git/merge merge and is successful returns true,0.046,git/merge,7,0.7
git/merge merge and is a noop returns false,0.066,git/merge,7,0.7
git/merge getMergeBase returns the common ancestor of two branches,0.09,git/merge,7,0.7
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.606
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.606
Update remote url updates the repository's remote url when the github url changes,0.119,Update remote url,4,0.432
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.432
Update remote url doesn't update repository's remote url if protocols don't match,0.094,Update remote url,4,0.432
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.432
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.379
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.379
git/core exit code handling does not throw for exit codes that were expected,0.061,git/core,6,0.379
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.379
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.379
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.379
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.04,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile includes empty context lines,0.027,patch formatting,8,0.379
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.379
git/for-each-ref getBranches fetches branches using for-each-ref,0.075,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.245
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.062
AppStore can select a repository,0.222,AppStore,5,0.279
git/reset reset can hard reset a repository,0.359,git/reset,2,0.399
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.114
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.332,git/rebase,21,8.102
git/rebase detect conflicts status detects REBASE_HEAD,0.284,git/rebase,21,8.102
git/rebase detect conflicts has conflicted files in working directory,0.286,git/rebase,21,8.102
git/rebase detect conflicts is a detached HEAD state,0.286,git/rebase,21,8.102
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.269,git/rebase,21,8.102
git/rebase abort after conflicts found no longer has working directory changes,0.278,git/rebase,21,8.102
git/rebase abort after conflicts found returns to the feature branch,0.277,git/rebase,21,8.102
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.367,git/rebase,21,8.102
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.343,git/rebase,21,8.102
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.343,git/rebase,21,8.102
git/rebase continue after resolving conflicts returns success,0.411,git/rebase,21,8.102
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.404,git/rebase,21,8.102
git/rebase continue after resolving conflicts no longer has working directory changes,0.405,git/rebase,21,8.102
git/rebase continue after resolving conflicts returns to the feature branch,0.412,git/rebase,21,8.102
git/rebase continue after resolving conflicts branch is now a different ref,0.411,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files returns success,0.407,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.405,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.424,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.421,git/rebase,21,8.102
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.426,git/rebase,21,8.102
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.394,git/rebase,21,8.102
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.664
git/commit createCommit normal commit does not strip commentary by default,0.107,git/commit,21,4.664
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.664
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.664
git/commit createCommit partials can commit some lines from new file,0.181,git/commit,21,4.664
git/commit createCommit partials can commit second hunk from modified file,0.198,git/commit,21,4.664
git/commit createCommit partials can commit single delete from modified file,0.177,git/commit,21,4.664
git/commit createCommit partials can commit multiple hunks from modified file,0.195,git/commit,21,4.664
git/commit createCommit partials can commit some lines from deleted file,0.182,git/commit,21,4.664
git/commit createCommit partials can commit renames with modifications,0.191,git/commit,21,4.664
git/commit createCommit partials can commit renames with partially selected modifications,0.237,git/commit,21,4.664
git/commit createCommit with a merge conflict creates a merge commit,0.27,git/commit,21,4.664
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.249,git/commit,21,4.664
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.353,git/commit,21,4.664
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.339,git/commit,21,4.664
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.428,git/commit,21,4.664
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.426,git/commit,21,4.664
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.664
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.664
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.185,git/commit,21,4.664
git/commit index corner cases file is deleted in index,0.189,git/commit,21,4.664
git/rebase can parse progress returns a value indicating conflicts were encountered,0.419,git/rebase,7,3.981
git/rebase can parse progress status detects REBASE_HEAD,0.423,git/rebase,7,3.981
git/rebase can parse progress is a detached HEAD state,0.423,git/rebase,7,3.981
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.872,git/rebase,7,3.981
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.894,git/rebase,7,3.981
git/rebase can parse progress for long rebase is a detached HEAD state,0.896,git/rebase,7,3.981
GitStore loadCommitBatch includes HEAD when loading commits,0.431,GitStore,11,2.749
GitStore can discard changes from a repository,0.176,GitStore,11,2.749
GitStore can discard a renamed file,0.159,GitStore,11,2.749
GitStore undo first commit reports the repository is unborn,0.207,GitStore,11,2.749
GitStore undo first commit pre-fills the commit message,0.133,GitStore,11,2.749
GitStore undo first commit clears the undo commit dialog,0.229,GitStore,11,2.749
GitStore undo first commit has no staged files,0.222,GitStore,11,2.749
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.749
git/status getStatus with conflicted repo parses conflicted files with markers,0.363,git/status,12,2.187
git/status getStatus with conflicted repo parses conflicted files without markers,0.316,git/status,12,2.187
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.421,git/status,12,2.187
git/status getStatus with conflicted repo parses resolved files,0.318,git/status,12,2.187
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.13,git/status,12,2.187
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.187
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.187
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.187
git/status getStatus with unconflicted repo reflects renames,0.118,git/status,12,2.187
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.187
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.063,git/status,12,2.187
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.048,git/diff,19,1.864
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.864
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,1.864
git/diff getBlobImage retrieves valid images for deleted file,0.115,git/diff,19,1.864
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.864
git/diff imageDiff changes for text are not set,0.084,git/diff,19,1.864
git/diff getWorkingDirectoryDiff counts lines for new file,0.09,git/diff,19,1.864
git/diff getWorkingDirectoryDiff counts lines for modified file,0.088,git/diff,19,1.864
git/diff getWorkingDirectoryDiff counts lines for staged file,0.084,git/diff,19,1.864
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.118,git/diff,19,1.864
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.141,git/diff,19,1.864
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.147,git/diff,19,1.864
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.126,git/diff,19,1.864
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.117,git/diff,19,1.864
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.082,git/diff,19,1.864
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.061,git/diff,19,1.864
git/diff getBinaryPaths in repo with text only files returns an empty array,0.093,git/diff,19,1.864
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.116,git/diff,19,1.864
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.133,git/diff,19,1.864
BranchPruner does nothing on non GitHub repositories,0.246,BranchPruner,6,1.836
BranchPruner prunes for GitHub repository,0.338,BranchPruner,6,1.836
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.259,BranchPruner,6,1.836
BranchPruner does not prune if there is no default branch,0.253,BranchPruner,6,1.836
BranchPruner does not prune reserved branches,0.305,BranchPruner,6,1.836
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.553
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.553
git/branch tip returns detached for arbitrary checkout,0.061,git/branch,13,1.553
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.553
git/branch tip returns non-origin remote,0.084,git/branch,13,1.553
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.553
git/branch getBranchesPointedAt in a local repo finds one branch name,0.062,git/branch,13,1.553
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.553
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.553
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.553
git/branch deleteBranch deletes local branches,0.125,git/branch,13,1.553
git/branch deleteBranch deletes remote branches,0.342,git/branch,13,1.553
git/branch deleteBranch handles attempted delete of removed remote branch,0.396,git/branch,13,1.553
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.115,git/stash,14,1.407
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.147,git/stash,14,1.407
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.109,git/stash,14,1.407
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.44,formatPatch,5,1.131
git/reflog getRecentBranches returns the recently checked out branches,0.162,git/reflog,6,1.168
git/reflog getRecentBranches works after renaming a branch,0.211,git/reflog,6,1.168
git/reflog getRecentBranches returns a limited number of branches,0.288,git/reflog,6,1.168
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.174,git/reflog,6,1.168
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.215,git/reflog,6,1.168
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.168
git/checkout can checkout a valid branch name in an existing repository,0.136,git/checkout,6,1.089
git/checkout can checkout a branch when it exists on multiple remotes,0.14,git/checkout,6,1.089
git/checkout will fail when an existing branch matches the remote branch,0.13,git/checkout,6,1.089
git/checkout with submodules cleans up an submodule that no longer exists,0.331,git/checkout,6,1.089
git/checkout with submodules updates a changed submodule reference,0.278,git/checkout,6,1.089
git/config config looks up config values,0.057,git/config,12,0.848
git/config config returns null for undefined values,0.053,git/config,12,0.848
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.848
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.072,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.065,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.065,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.066,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.065,git/config,12,0.848
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.066,git/config,12,0.848
git/rev-parse isGitRepository should return true for a repository,0.051,git/rev-parse,10,0.81
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.81
git/rev-parse isBareRepository returns false for default initialized repository,0.066,git/rev-parse,10,0.81
git/rev-parse isBareRepository returns true for initialized bare repository,0.066,git/rev-parse,10,0.81
git/rev-parse isBareRepository returns false for empty directory,0.058,git/rev-parse,10,0.81
git/rev-parse isBareRepository throws error for missing directory,0.051,git/rev-parse,10,0.81
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.81
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.072,git/rev-parse,10,0.81
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.069,git/rev-parse,10,0.81
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.209,git/rev-parse,10,0.81
gitignore readGitIgnoreAtRoot reads contents from disk,0.021,gitignore,9,0.76
gitignore saveGitIgnore applies rule correctly to repository,0.112,gitignore,9,0.76
gitignore appendIgnoreRule appends one rule,0.133,gitignore,9,0.76
gitignore appendIgnoreRule appends multiple rules,0.138,gitignore,9,0.76
git/submodule listSubmodules returns the submodule entry,0.13,git/submodule,3,0.806
git/submodule listSubmodules returns the expected tag,0.189,git/submodule,3,0.806
git/submodule resetSubmodulePaths update submodule to original commit,0.45,git/submodule,3,0.806
git/merge merge and is successful returns true,0.046,git/merge,7,0.655
git/merge merge and is a noop returns false,0.065,git/merge,7,0.655
git/merge getMergeBase returns the common ancestor of two branches,0.078,git/merge,7,0.655
git/log getCommits loads history,0.072,git/log,7,0.656
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.656
git/log getCommits handles repository with signed commit and log.showSignature set,0.118,git/log,7,0.656
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.656
git/log getChangedFiles detects renames,0.1,git/log,7,0.656
git/log getChangedFiles detect copies,0.105,git/log,7,0.656
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.656
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.655
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,11,0.655
git/remote findDefaultRemote returns something when origin removed,0.076,git/remote,11,0.655
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.613
git-lfs isUsingLFS returns true if LFS is tracking a path,0.085,git-lfs,9,0.613
Update remote url updates the repository's remote url when the github url changes,0.214,Update remote url,4,0.535
Update remote url doesn't update the repository's remote url when the github url is the same,0.096,Update remote url,4,0.535
Update remote url doesn't update repository's remote url if protocols don't match,0.088,Update remote url,4,0.535
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.087,Update remote url,4,0.535
git/reset reset can hard reset a repository,0.08,git/reset,2,0.123
git/core error handling does not throw for errors that were expected,0.066,git/core,6,0.399
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.399
git/core exit code handling does not throw for exit codes that were expected,0.06,git/core,6,0.399
git/core exit code handling throws for exit codes that were not expected,0.064,git/core,6,0.399
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.399
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.399
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.053,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.385
AppStore can select a repository,0.212,AppStore,5,0.267
git/for-each-ref getBranches fetches branches using for-each-ref,0.323,git/for-each-ref,3,0.503
git/for-each-ref getBranches should return empty list for empty repo,0.078,git/for-each-ref,3,0.503
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.503
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.338,git/rebase,21,8.08
git/rebase detect conflicts status detects REBASE_HEAD,0.279,git/rebase,21,8.08
git/rebase detect conflicts has conflicted files in working directory,0.281,git/rebase,21,8.08
git/rebase detect conflicts is a detached HEAD state,0.283,git/rebase,21,8.08
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.275,git/rebase,21,8.08
git/rebase abort after conflicts found no longer has working directory changes,0.274,git/rebase,21,8.08
git/rebase abort after conflicts found returns to the feature branch,0.288,git/rebase,21,8.08
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.361,git/rebase,21,8.08
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.348,git/rebase,21,8.08
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.351,git/rebase,21,8.08
git/rebase continue after resolving conflicts returns success,0.409,git/rebase,21,8.08
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.398,git/rebase,21,8.08
git/rebase continue after resolving conflicts no longer has working directory changes,0.408,git/rebase,21,8.08
git/rebase continue after resolving conflicts returns to the feature branch,0.415,git/rebase,21,8.08
git/rebase continue after resolving conflicts branch is now a different ref,0.409,git/rebase,21,8.08
git/rebase continue with additional changes unrelated to conflicted files returns success,0.406,git/rebase,21,8.08
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.41,git/rebase,21,8.08
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.413,git/rebase,21,8.08
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.416,git/rebase,21,8.08
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.416,git/rebase,21,8.08
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.398,git/rebase,21,8.08
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.692
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.692
git/commit createCommit normal can commit for empty repository,0.143,git/commit,21,4.692
git/commit createCommit normal can commit renames,0.164,git/commit,21,4.692
git/commit createCommit partials can commit some lines from new file,0.187,git/commit,21,4.692
git/commit createCommit partials can commit second hunk from modified file,0.211,git/commit,21,4.692
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.692
git/commit createCommit partials can commit multiple hunks from modified file,0.204,git/commit,21,4.692
git/commit createCommit partials can commit some lines from deleted file,0.195,git/commit,21,4.692
git/commit createCommit partials can commit renames with modifications,0.198,git/commit,21,4.692
git/commit createCommit partials can commit renames with partially selected modifications,0.233,git/commit,21,4.692
git/commit createCommit with a merge conflict creates a merge commit,0.268,git/commit,21,4.692
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.247,git/commit,21,4.692
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.354,git/commit,21,4.692
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.342,git/commit,21,4.692
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.432,git/commit,21,4.692
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.415,git/commit,21,4.692
git/commit createMergeCommit with no changes throws an error,0.104,git/commit,21,4.692
git/commit index corner cases can commit when staged new file is then deleted,0.156,git/commit,21,4.692
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.692
git/commit index corner cases file is deleted in index,0.182,git/commit,21,4.692
git/rebase can parse progress returns a value indicating conflicts were encountered,0.421,git/rebase,7,3.994
git/rebase can parse progress status detects REBASE_HEAD,0.422,git/rebase,7,3.994
git/rebase can parse progress is a detached HEAD state,0.421,git/rebase,7,3.994
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.876,git/rebase,7,3.994
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.895,git/rebase,7,3.994
git/rebase can parse progress for long rebase is a detached HEAD state,0.906,git/rebase,7,3.994
GitStore loadCommitBatch includes HEAD when loading commits,0.403,GitStore,11,2.713
GitStore can discard changes from a repository,0.179,GitStore,11,2.713
GitStore can discard a renamed file,0.159,GitStore,11,2.713
GitStore undo first commit reports the repository is unborn,0.202,GitStore,11,2.713
GitStore undo first commit pre-fills the commit message,0.136,GitStore,11,2.713
GitStore undo first commit clears the undo commit dialog,0.228,GitStore,11,2.713
GitStore undo first commit has no staged files,0.22,GitStore,11,2.713
GitStore repository with HEAD file can discard modified change cleanly,0.12,GitStore,11,2.713
git/status getStatus with conflicted repo parses conflicted files with markers,0.36,git/status,12,2.155
git/status getStatus with conflicted repo parses conflicted files without markers,0.311,git/status,12,2.155
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.415,git/status,12,2.155
git/status getStatus with conflicted repo parses resolved files,0.313,git/status,12,2.155
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,2.155
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.156,git/status,12,2.155
git/status getStatus with unconflicted repo parses changed files,0.064,git/status,12,2.155
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.155
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.155
git/status getStatus with unconflicted repo reflects copies,0.114,git/status,12,2.155
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,2.155
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.047,git/diff,19,1.929
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.092,git/diff,19,1.929
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,1.929
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.929
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.929
git/diff imageDiff changes for text are not set,0.09,git/diff,19,1.929
git/diff getWorkingDirectoryDiff counts lines for new file,0.09,git/diff,19,1.929
git/diff getWorkingDirectoryDiff counts lines for modified file,0.102,git/diff,19,1.929
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,1.929
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.125,git/diff,19,1.929
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.145,git/diff,19,1.929
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.155,git/diff,19,1.929
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.131,git/diff,19,1.929
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.125,git/diff,19,1.929
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.929
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.929
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,1.929
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,1.929
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.125,git/diff,19,1.929
BranchPruner does nothing on non GitHub repositories,0.246,BranchPruner,6,1.836
BranchPruner prunes for GitHub repository,0.296,BranchPruner,6,1.836
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.262,BranchPruner,6,1.836
BranchPruner does not prune if there is no default branch,0.261,BranchPruner,6,1.836
BranchPruner does not prune reserved branches,0.324,BranchPruner,6,1.836
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.504
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,13,1.504
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,13,1.504
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.504
git/branch tip returns non-origin remote,0.085,git/branch,13,1.504
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.504
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.504
git/branch getBranchesPointedAt in a local repo finds no branch names,0.048,git/branch,13,1.504
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.504
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.082,git/branch,13,1.504
git/branch deleteBranch deletes local branches,0.12,git/branch,13,1.504
git/branch deleteBranch deletes remote branches,0.33,git/branch,13,1.504
git/branch deleteBranch handles attempted delete of removed remote branch,0.388,git/branch,13,1.504
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.114,git/stash,14,1.426
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.148,git/stash,14,1.426
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.109,git/stash,14,1.426
git/reflog getRecentBranches returns the recently checked out branches,0.164,git/reflog,6,1.135
git/reflog getRecentBranches works after renaming a branch,0.204,git/reflog,6,1.135
git/reflog getRecentBranches returns a limited number of branches,0.272,git/reflog,6,1.135
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.167,git/reflog,6,1.135
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.212,git/reflog,6,1.135
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.135
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.47,formatPatch,5,1.183
git/checkout can checkout a valid branch name in an existing repository,0.136,git/checkout,6,1.096
git/checkout can checkout a branch when it exists on multiple remotes,0.143,git/checkout,6,1.096
git/checkout will fail when an existing branch matches the remote branch,0.136,git/checkout,6,1.096
git/checkout with submodules cleans up an submodule that no longer exists,0.33,git/checkout,6,1.096
git/checkout with submodules updates a changed submodule reference,0.277,git/checkout,6,1.096
git/config config looks up config values,0.055,git/config,12,0.902
git/config config returns null for undefined values,0.056,git/config,12,0.902
git/config global config getGlobalConfigPath gets the config path,0.07,git/config,12,0.902
git/config global config setGlobalConfigValue will replace all entries for a global value,0.098,git/config,12,0.902
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.902
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.073,git/config,12,0.902
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.902
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.072,git/config,12,0.902
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.077,git/config,12,0.902
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.902
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.072,git/config,12,0.902
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.073,git/config,12,0.902
git/rev-parse isGitRepository should return true for a repository,0.128,git/rev-parse,10,0.88
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.88
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.88
git/rev-parse isBareRepository returns true for initialized bare repository,0.071,git/rev-parse,10,0.88
git/rev-parse isBareRepository returns false for empty directory,0.062,git/rev-parse,10,0.88
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.88
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.88
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.88
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.06,git/rev-parse,10,0.88
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.209,git/rev-parse,10,0.88
git/submodule listSubmodules returns the submodule entry,0.13,git/submodule,3,0.704
git/submodule listSubmodules returns the expected tag,0.182,git/submodule,3,0.704
git/submodule resetSubmodulePaths update submodule to original commit,0.349,git/submodule,3,0.704
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.729
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.729
gitignore appendIgnoreRule appends one rule,0.127,gitignore,9,0.729
gitignore appendIgnoreRule appends multiple rules,0.132,gitignore,9,0.729
git/log getCommits loads history,0.068,git/log,7,0.656
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.656
git/log getCommits handles repository with signed commit and log.showSignature set,0.118,git/log,7,0.656
git/log getChangedFiles loads the files changed in the commit,0.056,git/log,7,0.656
git/log getChangedFiles detects renames,0.1,git/log,7,0.656
git/log getChangedFiles detect copies,0.11,git/log,7,0.656
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.656
git/merge merge and is successful returns true,0.046,git/merge,7,0.634
git/merge merge and is a noop returns false,0.061,git/merge,7,0.634
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.634
git/remote getRemotes should return both remotes,0.062,git/remote,11,0.609
git/remote findDefaultRemote returns origin when multiple remotes found,0.07,git/remote,11,0.609
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,11,0.609
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.566
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.566
Update remote url updates the repository's remote url when the github url changes,0.108,Update remote url,4,0.398
Update remote url doesn't update the repository's remote url when the github url is the same,0.082,Update remote url,4,0.398
Update remote url doesn't update repository's remote url if protocols don't match,0.077,Update remote url,4,0.398
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.079,Update remote url,4,0.398
git/for-each-ref getBranches fetches branches using for-each-ref,0.07,git/for-each-ref,3,0.232
git/for-each-ref getBranches should return empty list for empty repo,0.07,git/for-each-ref,3,0.232
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.053,git/for-each-ref,3,0.232
git/core error handling does not throw for errors that were expected,0.06,git/core,6,0.382
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.382
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.382
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.382
git/core config lock file error handling can parse lock file path from stderr,0.064,git/core,6,0.382
git/core config lock file error handling normalizes paths,0.04,git/core,6,0.382
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.049,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.371
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.033,patch formatting,8,0.371
AppStore can select a repository,0.202,AppStore,5,0.258
git/reset reset can hard reset a repository,0.415,git/reset,2,0.458
validatedRepositoryPath returns the path to the repository,0.057,validatedRepositoryPath,2,0.114
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.322,git/rebase,21,7.911
git/rebase detect conflicts status detects REBASE_HEAD,0.273,git/rebase,21,7.911
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,7.911
git/rebase detect conflicts is a detached HEAD state,0.282,git/rebase,21,7.911
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.267,git/rebase,21,7.911
git/rebase abort after conflicts found no longer has working directory changes,0.266,git/rebase,21,7.911
git/rebase abort after conflicts found returns to the feature branch,0.264,git/rebase,21,7.911
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.346,git/rebase,21,7.911
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.332,git/rebase,21,7.911
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.336,git/rebase,21,7.911
git/rebase continue after resolving conflicts returns success,0.403,git/rebase,21,7.911
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.395,git/rebase,21,7.911
git/rebase continue after resolving conflicts no longer has working directory changes,0.393,git/rebase,21,7.911
git/rebase continue after resolving conflicts returns to the feature branch,0.402,git/rebase,21,7.911
git/rebase continue after resolving conflicts branch is now a different ref,0.405,git/rebase,21,7.911
git/rebase continue with additional changes unrelated to conflicted files returns success,0.403,git/rebase,21,7.911
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.399,git/rebase,21,7.911
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.404,git/rebase,21,7.911
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.418,git/rebase,21,7.911
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.415,git/rebase,21,7.911
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.409,git/rebase,21,7.911
git/commit createCommit normal commits the given files,0.128,git/commit,21,4.734
git/commit createCommit normal commit does not strip commentary by default,0.113,git/commit,21,4.734
git/commit createCommit normal can commit for empty repository,0.141,git/commit,21,4.734
git/commit createCommit normal can commit renames,0.162,git/commit,21,4.734
git/commit createCommit partials can commit some lines from new file,0.205,git/commit,21,4.734
git/commit createCommit partials can commit second hunk from modified file,0.197,git/commit,21,4.734
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.734
git/commit createCommit partials can commit multiple hunks from modified file,0.201,git/commit,21,4.734
git/commit createCommit partials can commit some lines from deleted file,0.191,git/commit,21,4.734
git/commit createCommit partials can commit renames with modifications,0.203,git/commit,21,4.734
git/commit createCommit partials can commit renames with partially selected modifications,0.245,git/commit,21,4.734
git/commit createCommit with a merge conflict creates a merge commit,0.271,git/commit,21,4.734
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.25,git/commit,21,4.734
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.35,git/commit,21,4.734
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.333,git/commit,21,4.734
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.422,git/commit,21,4.734
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.43,git/commit,21,4.734
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.734
git/commit index corner cases can commit when staged new file is then deleted,0.162,git/commit,21,4.734
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.183,git/commit,21,4.734
git/commit index corner cases file is deleted in index,0.189,git/commit,21,4.734
git/rebase can parse progress returns a value indicating conflicts were encountered,0.417,git/rebase,7,4.051
git/rebase can parse progress status detects REBASE_HEAD,0.423,git/rebase,7,4.051
git/rebase can parse progress is a detached HEAD state,0.454,git/rebase,7,4.051
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.871,git/rebase,7,4.051
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.887,git/rebase,7,4.051
git/rebase can parse progress for long rebase is a detached HEAD state,0.947,git/rebase,7,4.051
GitStore loadCommitBatch includes HEAD when loading commits,0.369,GitStore,11,2.669
GitStore can discard changes from a repository,0.173,GitStore,11,2.669
GitStore can discard a renamed file,0.158,GitStore,11,2.669
GitStore undo first commit reports the repository is unborn,0.201,GitStore,11,2.669
GitStore undo first commit pre-fills the commit message,0.131,GitStore,11,2.669
GitStore undo first commit clears the undo commit dialog,0.228,GitStore,11,2.669
GitStore undo first commit has no staged files,0.22,GitStore,11,2.669
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.669
git/status getStatus with conflicted repo parses conflicted files with markers,0.319,git/status,12,2.111
git/status getStatus with conflicted repo parses conflicted files without markers,0.318,git/status,12,2.111
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.415,git/status,12,2.111
git/status getStatus with conflicted repo parses resolved files,0.327,git/status,12,2.111
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.111
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.152,git/status,12,2.111
git/status getStatus with unconflicted repo parses changed files,0.061,git/status,12,2.111
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.111
git/status getStatus with unconflicted repo reflects renames,0.113,git/status,12,2.111
git/status getStatus with unconflicted repo reflects copies,0.116,git/status,12,2.111
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.111
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.093,git/diff,19,2.073
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,2.073
git/diff getBlobImage retrieves valid image for modified file,0.057,git/diff,19,2.073
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,2.073
git/diff imageDiff changes for images are set,0.084,git/diff,19,2.073
git/diff imageDiff changes for text are not set,0.094,git/diff,19,2.073
git/diff getWorkingDirectoryDiff counts lines for new file,0.098,git/diff,19,2.073
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,2.073
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,2.073
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.129,git/diff,19,2.073
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.173,git/diff,19,2.073
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.187,git/diff,19,2.073
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.142,git/diff,19,2.073
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.144,git/diff,19,2.073
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.097,git/diff,19,2.073
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,2.073
git/diff getBinaryPaths in repo with text only files returns an empty array,0.103,git/diff,19,2.073
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.111,git/diff,19,2.073
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.14,git/diff,19,2.073
BranchPruner does nothing on non GitHub repositories,0.3,BranchPruner,6,1.809
BranchPruner prunes for GitHub repository,0.309,BranchPruner,6,1.809
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.23,BranchPruner,6,1.809
BranchPruner does not prune if there is no default branch,0.25,BranchPruner,6,1.809
BranchPruner does not prune reserved branches,0.297,BranchPruner,6,1.809
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.471
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,13,1.471
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.471
git/branch tip returns current branch when on a valid HEAD,0.076,git/branch,13,1.471
git/branch tip returns non-origin remote,0.079,git/branch,13,1.471
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.471
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.471
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.471
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.471
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.088,git/branch,13,1.471
git/branch deleteBranch deletes local branches,0.118,git/branch,13,1.471
git/branch deleteBranch deletes remote branches,0.313,git/branch,13,1.471
git/branch deleteBranch handles attempted delete of removed remote branch,0.369,git/branch,13,1.471
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.107,git/stash,14,1.334
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.136,git/stash,14,1.334
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.098,git/stash,14,1.334
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.429,formatPatch,5,1.068
git/reflog getRecentBranches returns the recently checked out branches,0.153,git/reflog,6,1.087
git/reflog getRecentBranches works after renaming a branch,0.201,git/reflog,6,1.087
git/reflog getRecentBranches returns a limited number of branches,0.265,git/reflog,6,1.087
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.158,git/reflog,6,1.087
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.198,git/reflog,6,1.087
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.087
git/checkout can checkout a valid branch name in an existing repository,0.127,git/checkout,6,1.053
git/checkout can checkout a branch when it exists on multiple remotes,0.132,git/checkout,6,1.053
git/checkout will fail when an existing branch matches the remote branch,0.133,git/checkout,6,1.053
git/checkout with submodules cleans up an submodule that no longer exists,0.314,git/checkout,6,1.053
git/checkout with submodules updates a changed submodule reference,0.275,git/checkout,6,1.053
git/config config looks up config values,0.052,git/config,12,0.873
git/config config returns null for undefined values,0.053,git/config,12,0.873
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.873
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.072,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.069,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.074,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.072,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.873
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.865
git/rev-parse isGitRepository should return false for a directory,0.058,git/rev-parse,10,0.865
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.865
git/rev-parse isBareRepository returns true for initialized bare repository,0.071,git/rev-parse,10,0.865
git/rev-parse isBareRepository returns false for empty directory,0.063,git/rev-parse,10,0.865
git/rev-parse isBareRepository throws error for missing directory,0.061,git/rev-parse,10,0.865
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.865
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.059,git/rev-parse,10,0.865
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.865
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.248,git/rev-parse,10,0.865
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.755
gitignore saveGitIgnore applies rule correctly to repository,0.112,gitignore,9,0.755
gitignore appendIgnoreRule appends one rule,0.129,gitignore,9,0.755
gitignore appendIgnoreRule appends multiple rules,0.136,gitignore,9,0.755
git/submodule listSubmodules returns the submodule entry,0.141,git/submodule,3,0.791
git/submodule listSubmodules returns the expected tag,0.2,git/submodule,3,0.791
git/submodule resetSubmodulePaths update submodule to original commit,0.412,git/submodule,3,0.791
git/log getCommits loads history,0.075,git/log,7,0.677
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.677
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.677
git/log getChangedFiles loads the files changed in the commit,0.061,git/log,7,0.677
git/log getChangedFiles detects renames,0.107,git/log,7,0.677
git/log getChangedFiles detect copies,0.109,git/log,7,0.677
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.677
git/merge merge and is successful returns true,0.048,git/merge,7,0.662
git/merge merge and is a noop returns false,0.063,git/merge,7,0.662
git/merge getMergeBase returns the common ancestor of two branches,0.081,git/merge,7,0.662
git/remote getRemotes should return both remotes,0.059,git/remote,11,0.639
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,11,0.639
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.639
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.61
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.61
git/reset reset can hard reset a repository,0.17,git/reset,2,0.212
Update remote url updates the repository's remote url when the github url changes,0.123,Update remote url,4,0.456
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.456
Update remote url doesn't update repository's remote url if protocols don't match,0.101,Update remote url,4,0.456
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.088,Update remote url,4,0.456
git/core error handling does not throw for errors that were expected,0.064,git/core,6,0.395
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.395
git/core exit code handling does not throw for exit codes that were expected,0.062,git/core,6,0.395
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.395
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.395
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.395
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.048,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.052,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.384
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.384
AppStore can select a repository,0.214,AppStore,5,0.267
git/for-each-ref getBranches fetches branches using for-each-ref,0.325,git/for-each-ref,3,0.501
git/for-each-ref getBranches should return empty list for empty repo,0.076,git/for-each-ref,3,0.501
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.501
validatedRepositoryPath returns the path to the repository,0.056,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.332,git/rebase,21,8.106
git/rebase detect conflicts status detects REBASE_HEAD,0.285,git/rebase,21,8.106
git/rebase detect conflicts has conflicted files in working directory,0.282,git/rebase,21,8.106
git/rebase detect conflicts is a detached HEAD state,0.285,git/rebase,21,8.106
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.277,git/rebase,21,8.106
git/rebase abort after conflicts found no longer has working directory changes,0.272,git/rebase,21,8.106
git/rebase abort after conflicts found returns to the feature branch,0.274,git/rebase,21,8.106
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.349,git/rebase,21,8.106
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.348,git/rebase,21,8.106
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.345,git/rebase,21,8.106
git/rebase continue after resolving conflicts returns success,0.407,git/rebase,21,8.106
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.405,git/rebase,21,8.106
git/rebase continue after resolving conflicts no longer has working directory changes,0.412,git/rebase,21,8.106
git/rebase continue after resolving conflicts returns to the feature branch,0.416,git/rebase,21,8.106
git/rebase continue after resolving conflicts branch is now a different ref,0.414,git/rebase,21,8.106
git/rebase continue with additional changes unrelated to conflicted files returns success,0.411,git/rebase,21,8.106
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.414,git/rebase,21,8.106
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.428,git/rebase,21,8.106
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.421,git/rebase,21,8.106
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.427,git/rebase,21,8.106
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.403,git/rebase,21,8.106
git/commit createCommit normal commits the given files,0.127,git/commit,21,4.76
git/commit createCommit normal commit does not strip commentary by default,0.118,git/commit,21,4.76
git/commit createCommit normal can commit for empty repository,0.139,git/commit,21,4.76
git/commit createCommit normal can commit renames,0.165,git/commit,21,4.76
git/commit createCommit partials can commit some lines from new file,0.188,git/commit,21,4.76
git/commit createCommit partials can commit second hunk from modified file,0.203,git/commit,21,4.76
git/commit createCommit partials can commit single delete from modified file,0.18,git/commit,21,4.76
git/commit createCommit partials can commit multiple hunks from modified file,0.201,git/commit,21,4.76
git/commit createCommit partials can commit some lines from deleted file,0.197,git/commit,21,4.76
git/commit createCommit partials can commit renames with modifications,0.199,git/commit,21,4.76
git/commit createCommit partials can commit renames with partially selected modifications,0.244,git/commit,21,4.76
git/commit createCommit with a merge conflict creates a merge commit,0.268,git/commit,21,4.76
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.254,git/commit,21,4.76
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.353,git/commit,21,4.76
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.341,git/commit,21,4.76
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.442,git/commit,21,4.76
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.425,git/commit,21,4.76
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.76
git/commit index corner cases can commit when staged new file is then deleted,0.162,git/commit,21,4.76
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.191,git/commit,21,4.76
git/commit index corner cases file is deleted in index,0.187,git/commit,21,4.76
git/rebase can parse progress returns a value indicating conflicts were encountered,0.424,git/rebase,7,4.076
git/rebase can parse progress status detects REBASE_HEAD,0.439,git/rebase,7,4.076
git/rebase can parse progress is a detached HEAD state,0.433,git/rebase,7,4.076
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.884,git/rebase,7,4.076
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.936,git/rebase,7,4.076
git/rebase can parse progress for long rebase is a detached HEAD state,0.909,git/rebase,7,4.076
GitStore loadCommitBatch includes HEAD when loading commits,0.399,GitStore,11,2.754
GitStore can discard changes from a repository,0.183,GitStore,11,2.754
GitStore can discard a renamed file,0.163,GitStore,11,2.754
GitStore undo first commit reports the repository is unborn,0.202,GitStore,11,2.754
GitStore undo first commit pre-fills the commit message,0.136,GitStore,11,2.754
GitStore undo first commit clears the undo commit dialog,0.233,GitStore,11,2.754
GitStore undo first commit has no staged files,0.228,GitStore,11,2.754
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.754
git/status getStatus with conflicted repo parses conflicted files with markers,0.362,git/status,12,2.169
git/status getStatus with conflicted repo parses conflicted files without markers,0.325,git/status,12,2.169
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.427,git/status,12,2.169
git/status getStatus with conflicted repo parses resolved files,0.319,git/status,12,2.169
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.122,git/status,12,2.169
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.151,git/status,12,2.169
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,2.169
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.169
git/status getStatus with unconflicted repo reflects renames,0.114,git/status,12,2.169
git/status getStatus with unconflicted repo reflects copies,0.117,git/status,12,2.169
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.169
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.05,git/diff,19,1.913
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.913
git/diff getBlobImage retrieves valid image for modified file,0.097,git/diff,19,1.913
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.913
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.913
git/diff imageDiff changes for text are not set,0.091,git/diff,19,1.913
git/diff getWorkingDirectoryDiff counts lines for new file,0.097,git/diff,19,1.913
git/diff getWorkingDirectoryDiff counts lines for modified file,0.095,git/diff,19,1.913
git/diff getWorkingDirectoryDiff counts lines for staged file,0.092,git/diff,19,1.913
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.131,git/diff,19,1.913
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.157,git/diff,19,1.913
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.148,git/diff,19,1.913
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.124,git/diff,19,1.913
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.121,git/diff,19,1.913
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.082,git/diff,19,1.913
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.066,git/diff,19,1.913
git/diff getBinaryPaths in repo with text only files returns an empty array,0.1,git/diff,19,1.913
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.104,git/diff,19,1.913
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.117,git/diff,19,1.913
BranchPruner does nothing on non GitHub repositories,0.255,BranchPruner,6,1.866
BranchPruner prunes for GitHub repository,0.332,BranchPruner,6,1.866
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.249,BranchPruner,6,1.866
BranchPruner does not prune if there is no default branch,0.257,BranchPruner,6,1.866
BranchPruner does not prune reserved branches,0.323,BranchPruner,6,1.866
git/branch tip returns unborn for new repository,0.027,git/branch,13,1.606
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.606
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.606
git/branch tip returns current branch when on a valid HEAD,0.082,git/branch,13,1.606
git/branch tip returns non-origin remote,0.087,git/branch,13,1.606
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.091,git/branch,13,1.606
git/branch getBranchesPointedAt in a local repo finds one branch name,0.063,git/branch,13,1.606
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.606
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.606
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.092,git/branch,13,1.606
git/branch deleteBranch deletes local branches,0.13,git/branch,13,1.606
git/branch deleteBranch deletes remote branches,0.353,git/branch,13,1.606
git/branch deleteBranch handles attempted delete of removed remote branch,0.417,git/branch,13,1.606
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.117,git/stash,14,1.451
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.15,git/stash,14,1.451
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.107,git/stash,14,1.451
git/reflog getRecentBranches returns the recently checked out branches,0.159,git/reflog,6,1.132
git/reflog getRecentBranches works after renaming a branch,0.202,git/reflog,6,1.132
git/reflog getRecentBranches returns a limited number of branches,0.279,git/reflog,6,1.132
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.132
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.209,git/reflog,6,1.132
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.075,git/reflog,6,1.132
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.434,formatPatch,5,1.149
git/checkout can checkout a valid branch name in an existing repository,0.133,git/checkout,6,1.134
git/checkout can checkout a branch when it exists on multiple remotes,0.139,git/checkout,6,1.134
git/checkout will fail when an existing branch matches the remote branch,0.129,git/checkout,6,1.134
git/checkout with submodules cleans up an submodule that no longer exists,0.385,git/checkout,6,1.134
git/checkout with submodules updates a changed submodule reference,0.273,git/checkout,6,1.134
git/config config looks up config values,0.059,git/config,12,0.894
git/config config returns null for undefined values,0.053,git/config,12,0.894
git/config global config getGlobalConfigPath gets the config path,0.07,git/config,12,0.894
git/config global config setGlobalConfigValue will replace all entries for a global value,0.098,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.074,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.074,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.074,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.071,git/config,12,0.894
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.071,git/config,12,0.894
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.775
git/rev-parse isGitRepository should return false for a directory,0.05,git/rev-parse,10,0.775
git/rev-parse isBareRepository returns false for default initialized repository,0.062,git/rev-parse,10,0.775
git/rev-parse isBareRepository returns true for initialized bare repository,0.066,git/rev-parse,10,0.775
git/rev-parse isBareRepository returns false for empty directory,0.06,git/rev-parse,10,0.775
git/rev-parse isBareRepository throws error for missing directory,0.05,git/rev-parse,10,0.775
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.063,git/rev-parse,10,0.775
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.052,git/rev-parse,10,0.775
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.058,git/rev-parse,10,0.775
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.215,git/rev-parse,10,0.775
git/submodule listSubmodules returns the submodule entry,0.141,git/submodule,3,0.747
git/submodule listSubmodules returns the expected tag,0.195,git/submodule,3,0.747
git/submodule resetSubmodulePaths update submodule to original commit,0.371,git/submodule,3,0.747
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.681
gitignore saveGitIgnore applies rule correctly to repository,0.096,gitignore,9,0.681
gitignore appendIgnoreRule appends one rule,0.122,gitignore,9,0.681
gitignore appendIgnoreRule appends multiple rules,0.116,gitignore,9,0.681
git/log getCommits loads history,0.065,git/log,7,0.636
git/log getCommits handles repository with HEAD file on disk,0.098,git/log,7,0.636
git/log getCommits handles repository with signed commit and log.showSignature set,0.119,git/log,7,0.636
git/log getChangedFiles loads the files changed in the commit,0.057,git/log,7,0.636
git/log getChangedFiles detects renames,0.097,git/log,7,0.636
git/log getChangedFiles detect copies,0.105,git/log,7,0.636
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.636
git/merge merge and is successful returns true,0.046,git/merge,7,0.618
git/merge merge and is a noop returns false,0.059,git/merge,7,0.618
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.618
git/remote getRemotes should return both remotes,0.06,git/remote,11,0.611
git/remote findDefaultRemote returns origin when multiple remotes found,0.071,git/remote,11,0.611
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.611
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.572
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.572
git/for-each-ref getBranches fetches branches using for-each-ref,0.169,git/for-each-ref,3,0.345
git/for-each-ref getBranches should return empty list for empty repo,0.079,git/for-each-ref,3,0.345
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.057,git/for-each-ref,3,0.345
Update remote url updates the repository's remote url when the github url changes,0.113,Update remote url,4,0.416
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.416
Update remote url doesn't update repository's remote url if protocols don't match,0.08,Update remote url,4,0.416
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.086,Update remote url,4,0.416
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.376
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.376
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.376
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.376
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.376
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.376
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.054,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.387
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.387
AppStore can select a repository,0.194,AppStore,5,0.249
git/reset reset can hard reset a repository,0.31,git/reset,2,0.352
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.325,git/rebase,21,7.923
git/rebase detect conflicts status detects REBASE_HEAD,0.277,git/rebase,21,7.923
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,7.923
git/rebase detect conflicts is a detached HEAD state,0.28,git/rebase,21,7.923
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.268,git/rebase,21,7.923
git/rebase abort after conflicts found no longer has working directory changes,0.267,git/rebase,21,7.923
git/rebase abort after conflicts found returns to the feature branch,0.266,git/rebase,21,7.923
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.356,git/rebase,21,7.923
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.336,git/rebase,21,7.923
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.333,git/rebase,21,7.923
git/rebase continue after resolving conflicts returns success,0.391,git/rebase,21,7.923
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.389,git/rebase,21,7.923
git/rebase continue after resolving conflicts no longer has working directory changes,0.395,git/rebase,21,7.923
git/rebase continue after resolving conflicts returns to the feature branch,0.403,git/rebase,21,7.923
git/rebase continue after resolving conflicts branch is now a different ref,0.411,git/rebase,21,7.923
git/rebase continue with additional changes unrelated to conflicted files returns success,0.404,git/rebase,21,7.923
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.401,git/rebase,21,7.923
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.418,git/rebase,21,7.923
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.417,git/rebase,21,7.923
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.408,git/rebase,21,7.923
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.397,git/rebase,21,7.923
git/commit createCommit normal commits the given files,0.125,git/commit,21,4.697
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.697
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.697
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.697
git/commit createCommit partials can commit some lines from new file,0.2,git/commit,21,4.697
git/commit createCommit partials can commit second hunk from modified file,0.205,git/commit,21,4.697
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.697
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.697
git/commit createCommit partials can commit some lines from deleted file,0.187,git/commit,21,4.697
git/commit createCommit partials can commit renames with modifications,0.197,git/commit,21,4.697
git/commit createCommit partials can commit renames with partially selected modifications,0.235,git/commit,21,4.697
git/commit createCommit with a merge conflict creates a merge commit,0.269,git/commit,21,4.697
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.243,git/commit,21,4.697
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.354,git/commit,21,4.697
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.338,git/commit,21,4.697
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.426,git/commit,21,4.697
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.431,git/commit,21,4.697
git/commit createMergeCommit with no changes throws an error,0.112,git/commit,21,4.697
git/commit index corner cases can commit when staged new file is then deleted,0.156,git/commit,21,4.697
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.183,git/commit,21,4.697
git/commit index corner cases file is deleted in index,0.184,git/commit,21,4.697
git/rebase can parse progress returns a value indicating conflicts were encountered,0.413,git/rebase,7,3.999
git/rebase can parse progress status detects REBASE_HEAD,0.426,git/rebase,7,3.999
git/rebase can parse progress is a detached HEAD state,0.43,git/rebase,7,3.999
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.906,git/rebase,7,3.999
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.887,git/rebase,7,3.999
git/rebase can parse progress for long rebase is a detached HEAD state,0.886,git/rebase,7,3.999
GitStore loadCommitBatch includes HEAD when loading commits,0.371,GitStore,11,2.673
GitStore can discard changes from a repository,0.175,GitStore,11,2.673
GitStore can discard a renamed file,0.155,GitStore,11,2.673
GitStore undo first commit reports the repository is unborn,0.206,GitStore,11,2.673
GitStore undo first commit pre-fills the commit message,0.132,GitStore,11,2.673
GitStore undo first commit clears the undo commit dialog,0.229,GitStore,11,2.673
GitStore undo first commit has no staged files,0.221,GitStore,11,2.673
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.673
git/status getStatus with conflicted repo parses conflicted files with markers,0.333,git/status,12,2.164
git/status getStatus with conflicted repo parses conflicted files without markers,0.331,git/status,12,2.164
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.431,git/status,12,2.164
git/status getStatus with conflicted repo parses resolved files,0.33,git/status,12,2.164
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.164
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.152,git/status,12,2.164
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,2.164
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,2.164
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.164
git/status getStatus with unconflicted repo reflects copies,0.119,git/status,12,2.164
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.164
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.087,git/diff,19,2.056
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,2.056
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,2.056
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,2.056
git/diff imageDiff changes for images are set,0.084,git/diff,19,2.056
git/diff imageDiff changes for text are not set,0.093,git/diff,19,2.056
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,2.056
git/diff getWorkingDirectoryDiff counts lines for modified file,0.099,git/diff,19,2.056
git/diff getWorkingDirectoryDiff counts lines for staged file,0.084,git/diff,19,2.056
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.127,git/diff,19,2.056
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.174,git/diff,19,2.056
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.183,git/diff,19,2.056
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.145,git/diff,19,2.056
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.145,git/diff,19,2.056
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.1,git/diff,19,2.056
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,2.056
git/diff getBinaryPaths in repo with text only files returns an empty array,0.102,git/diff,19,2.056
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.113,git/diff,19,2.056
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.137,git/diff,19,2.056
BranchPruner does nothing on non GitHub repositories,0.287,BranchPruner,6,1.808
BranchPruner prunes for GitHub repository,0.308,BranchPruner,6,1.808
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.257,BranchPruner,6,1.808
BranchPruner does not prune if there is no default branch,0.24,BranchPruner,6,1.808
BranchPruner does not prune reserved branches,0.29,BranchPruner,6,1.808
git/branch tip returns unborn for new repository,0.029,git/branch,13,1.432
git/branch tip returns correct ref if checkout occurs,0.041,git/branch,13,1.432
git/branch tip returns detached for arbitrary checkout,0.054,git/branch,13,1.432
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,13,1.432
git/branch tip returns non-origin remote,0.076,git/branch,13,1.432
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,13,1.432
git/branch getBranchesPointedAt in a local repo finds one branch name,0.052,git/branch,13,1.432
git/branch getBranchesPointedAt in a local repo finds no branch names,0.048,git/branch,13,1.432
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.047,git/branch,13,1.432
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,13,1.432
git/branch deleteBranch deletes local branches,0.118,git/branch,13,1.432
git/branch deleteBranch deletes remote branches,0.31,git/branch,13,1.432
git/branch deleteBranch handles attempted delete of removed remote branch,0.368,git/branch,13,1.432
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.107,git/stash,14,1.336
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.139,git/stash,14,1.336
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.096,git/stash,14,1.336
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.462,formatPatch,5,1.101
git/checkout can checkout a valid branch name in an existing repository,0.122,git/checkout,6,1.006
git/checkout can checkout a branch when it exists on multiple remotes,0.13,git/checkout,6,1.006
git/checkout will fail when an existing branch matches the remote branch,0.123,git/checkout,6,1.006
git/checkout with submodules cleans up an submodule that no longer exists,0.302,git/checkout,6,1.006
git/checkout with submodules updates a changed submodule reference,0.251,git/checkout,6,1.006
git/reflog getRecentBranches returns the recently checked out branches,0.158,git/reflog,6,1.141
git/reflog getRecentBranches works after renaming a branch,0.206,git/reflog,6,1.141
git/reflog getRecentBranches returns a limited number of branches,0.284,git/reflog,6,1.141
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.163,git/reflog,6,1.141
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.21,git/reflog,6,1.141
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.078,git/reflog,6,1.141
git/config config looks up config values,0.057,git/config,12,0.875
git/config config returns null for undefined values,0.056,git/config,12,0.875
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.875
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.072,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.875
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.073,git/config,12,0.875
git/rev-parse isGitRepository should return true for a repository,0.059,git/rev-parse,10,0.828
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.828
git/rev-parse isBareRepository returns false for default initialized repository,0.07,git/rev-parse,10,0.828
git/rev-parse isBareRepository returns true for initialized bare repository,0.072,git/rev-parse,10,0.828
git/rev-parse isBareRepository returns false for empty directory,0.067,git/rev-parse,10,0.828
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.828
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.828
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.828
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.828
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.22,git/rev-parse,10,0.828
git/submodule listSubmodules returns the submodule entry,0.138,git/submodule,3,0.725
git/submodule listSubmodules returns the expected tag,0.196,git/submodule,3,0.725
git/submodule resetSubmodulePaths update submodule to original commit,0.347,git/submodule,3,0.725
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.746
gitignore saveGitIgnore applies rule correctly to repository,0.109,gitignore,9,0.746
gitignore appendIgnoreRule appends one rule,0.127,gitignore,9,0.746
gitignore appendIgnoreRule appends multiple rules,0.136,gitignore,9,0.746
git/log getCommits loads history,0.072,git/log,7,0.675
git/log getCommits handles repository with HEAD file on disk,0.103,git/log,7,0.675
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.675
git/log getChangedFiles loads the files changed in the commit,0.064,git/log,7,0.675
git/log getChangedFiles detects renames,0.107,git/log,7,0.675
git/log getChangedFiles detect copies,0.11,git/log,7,0.675
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.675
git/merge merge and is successful returns true,0.043,git/merge,7,0.669
git/merge merge and is a noop returns false,0.061,git/merge,7,0.669
git/merge getMergeBase returns the common ancestor of two branches,0.078,git/merge,7,0.669
git/remote getRemotes should return both remotes,0.142,git/remote,11,0.721
git/remote findDefaultRemote returns origin when multiple remotes found,0.068,git/remote,11,0.721
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.721
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.594
git-lfs isUsingLFS returns true if LFS is tracking a path,0.083,git-lfs,9,0.594
Update remote url updates the repository's remote url when the github url changes,0.113,Update remote url,4,0.403
Update remote url doesn't update the repository's remote url when the github url is the same,0.08,Update remote url,4,0.403
Update remote url doesn't update repository's remote url if protocols don't match,0.081,Update remote url,4,0.403
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.077,Update remote url,4,0.403
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.051,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.048,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.034,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.032,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile includes empty context lines,0.027,patch formatting,8,0.358
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.358
git/core error handling does not throw for errors that were expected,0.049,git/core,6,0.374
git/core error handling throws for errors that were not expected,0.063,git/core,6,0.374
git/core exit code handling does not throw for exit codes that were expected,0.058,git/core,6,0.374
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.374
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.374
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.374
git/reset reset can hard reset a repository,0.081,git/reset,2,0.12
git/for-each-ref getBranches fetches branches using for-each-ref,0.084,git/for-each-ref,3,0.262
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.262
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.063,git/for-each-ref,3,0.262
AppStore can select a repository,0.201,AppStore,5,0.258
validatedRepositoryPath returns the path to the repository,0.294,validatedRepositoryPath,2,0.351
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.325,git/rebase,21,8.055
git/rebase detect conflicts status detects REBASE_HEAD,0.292,git/rebase,21,8.055
git/rebase detect conflicts has conflicted files in working directory,0.281,git/rebase,21,8.055
git/rebase detect conflicts is a detached HEAD state,0.285,git/rebase,21,8.055
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.276,git/rebase,21,8.055
git/rebase abort after conflicts found no longer has working directory changes,0.279,git/rebase,21,8.055
git/rebase abort after conflicts found returns to the feature branch,0.272,git/rebase,21,8.055
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.349,git/rebase,21,8.055
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.346,git/rebase,21,8.055
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.358,git/rebase,21,8.055
git/rebase continue after resolving conflicts returns success,0.408,git/rebase,21,8.055
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.4,git/rebase,21,8.055
git/rebase continue after resolving conflicts no longer has working directory changes,0.403,git/rebase,21,8.055
git/rebase continue after resolving conflicts returns to the feature branch,0.408,git/rebase,21,8.055
git/rebase continue after resolving conflicts branch is now a different ref,0.406,git/rebase,21,8.055
git/rebase continue with additional changes unrelated to conflicted files returns success,0.41,git/rebase,21,8.055
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.407,git/rebase,21,8.055
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.411,git/rebase,21,8.055
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.417,git/rebase,21,8.055
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.416,git/rebase,21,8.055
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.407,git/rebase,21,8.055
git/commit createCommit normal commits the given files,0.13,git/commit,21,4.719
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.719
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.719
git/commit createCommit normal can commit renames,0.163,git/commit,21,4.719
git/commit createCommit partials can commit some lines from new file,0.2,git/commit,21,4.719
git/commit createCommit partials can commit second hunk from modified file,0.2,git/commit,21,4.719
git/commit createCommit partials can commit single delete from modified file,0.18,git/commit,21,4.719
git/commit createCommit partials can commit multiple hunks from modified file,0.201,git/commit,21,4.719
git/commit createCommit partials can commit some lines from deleted file,0.182,git/commit,21,4.719
git/commit createCommit partials can commit renames with modifications,0.195,git/commit,21,4.719
git/commit createCommit partials can commit renames with partially selected modifications,0.243,git/commit,21,4.719
git/commit createCommit with a merge conflict creates a merge commit,0.269,git/commit,21,4.719
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.254,git/commit,21,4.719
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.357,git/commit,21,4.719
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.341,git/commit,21,4.719
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.438,git/commit,21,4.719
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.417,git/commit,21,4.719
git/commit createMergeCommit with no changes throws an error,0.105,git/commit,21,4.719
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.719
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.719
git/commit index corner cases file is deleted in index,0.192,git/commit,21,4.719
git/rebase can parse progress returns a value indicating conflicts were encountered,0.427,git/rebase,7,4.035
git/rebase can parse progress status detects REBASE_HEAD,0.436,git/rebase,7,4.035
git/rebase can parse progress is a detached HEAD state,0.435,git/rebase,7,4.035
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.879,git/rebase,7,4.035
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.911,git/rebase,7,4.035
git/rebase can parse progress for long rebase is a detached HEAD state,0.893,git/rebase,7,4.035
GitStore loadCommitBatch includes HEAD when loading commits,0.394,GitStore,11,2.781
GitStore can discard changes from a repository,0.2,GitStore,11,2.781
GitStore can discard a renamed file,0.191,GitStore,11,2.781
GitStore undo first commit reports the repository is unborn,0.205,GitStore,11,2.781
GitStore undo first commit pre-fills the commit message,0.135,GitStore,11,2.781
GitStore undo first commit clears the undo commit dialog,0.23,GitStore,11,2.781
GitStore undo first commit has no staged files,0.228,GitStore,11,2.781
GitStore repository with HEAD file can discard modified change cleanly,0.119,GitStore,11,2.781
git/status getStatus with conflicted repo parses conflicted files with markers,0.367,git/status,12,2.222
git/status getStatus with conflicted repo parses conflicted files without markers,0.331,git/status,12,2.222
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.439,git/status,12,2.222
git/status getStatus with conflicted repo parses resolved files,0.324,git/status,12,2.222
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.128,git/status,12,2.222
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.159,git/status,12,2.222
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.222
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.067,git/status,12,2.222
git/status getStatus with unconflicted repo reflects renames,0.115,git/status,12,2.222
git/status getStatus with unconflicted repo reflects copies,0.117,git/status,12,2.222
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.222
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.049,git/diff,19,1.789
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.789
git/diff getBlobImage retrieves valid image for modified file,0.099,git/diff,19,1.789
git/diff getBlobImage retrieves valid images for deleted file,0.068,git/diff,19,1.789
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.789
git/diff imageDiff changes for text are not set,0.084,git/diff,19,1.789
git/diff getWorkingDirectoryDiff counts lines for new file,0.083,git/diff,19,1.789
git/diff getWorkingDirectoryDiff counts lines for modified file,0.092,git/diff,19,1.789
git/diff getWorkingDirectoryDiff counts lines for staged file,0.081,git/diff,19,1.789
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.112,git/diff,19,1.789
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.14,git/diff,19,1.789
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.144,git/diff,19,1.789
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.12,git/diff,19,1.789
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.115,git/diff,19,1.789
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.079,git/diff,19,1.789
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.061,git/diff,19,1.789
git/diff getBinaryPaths in repo with text only files returns an empty array,0.088,git/diff,19,1.789
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.097,git/diff,19,1.789
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.11,git/diff,19,1.789
BranchPruner does nothing on non GitHub repositories,0.233,BranchPruner,6,1.79
BranchPruner prunes for GitHub repository,0.296,BranchPruner,6,1.79
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.26,BranchPruner,6,1.79
BranchPruner does not prune if there is no default branch,0.245,BranchPruner,6,1.79
BranchPruner does not prune reserved branches,0.322,BranchPruner,6,1.79
git/branch tip returns unborn for new repository,0.027,git/branch,13,1.568
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.568
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.568
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.568
git/branch tip returns non-origin remote,0.086,git/branch,13,1.568
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,13,1.568
git/branch getBranchesPointedAt in a local repo finds one branch name,0.061,git/branch,13,1.568
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.568
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.568
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,13,1.568
git/branch deleteBranch deletes local branches,0.129,git/branch,13,1.568
git/branch deleteBranch deletes remote branches,0.341,git/branch,13,1.568
git/branch deleteBranch handles attempted delete of removed remote branch,0.402,git/branch,13,1.568
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.116,git/stash,14,1.425
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.148,git/stash,14,1.425
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.108,git/stash,14,1.425
git/reflog getRecentBranches returns the recently checked out branches,0.162,git/reflog,6,1.136
git/reflog getRecentBranches works after renaming a branch,0.206,git/reflog,6,1.136
git/reflog getRecentBranches returns a limited number of branches,0.276,git/reflog,6,1.136
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.136
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.208,git/reflog,6,1.136
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.079,git/reflog,6,1.136
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.479,formatPatch,5,1.202
git/checkout can checkout a valid branch name in an existing repository,0.201,git/checkout,6,1.125
git/checkout can checkout a branch when it exists on multiple remotes,0.139,git/checkout,6,1.125
git/checkout will fail when an existing branch matches the remote branch,0.128,git/checkout,6,1.125
git/checkout with submodules cleans up an submodule that no longer exists,0.314,git/checkout,6,1.125
git/checkout with submodules updates a changed submodule reference,0.27,git/checkout,6,1.125
git/config config looks up config values,0.053,git/config,12,0.859
git/config config returns null for undefined values,0.051,git/config,12,0.859
git/config global config getGlobalConfigPath gets the config path,0.065,git/config,12,0.859
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,12,0.859
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.859
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.859
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.859
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.069,git/config,12,0.859
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.072,git/config,12,0.859
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.859
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.859
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.859
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.808
git/rev-parse isGitRepository should return false for a directory,0.066,git/rev-parse,10,0.808
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.808
git/rev-parse isBareRepository returns true for initialized bare repository,0.07,git/rev-parse,10,0.808
git/rev-parse isBareRepository returns false for empty directory,0.063,git/rev-parse,10,0.808
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.808
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.808
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.808
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.808
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.198,git/rev-parse,10,0.808
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.722
gitignore saveGitIgnore applies rule correctly to repository,0.104,gitignore,9,0.722
gitignore appendIgnoreRule appends one rule,0.124,gitignore,9,0.722
gitignore appendIgnoreRule appends multiple rules,0.128,gitignore,9,0.722
git/submodule listSubmodules returns the submodule entry,0.137,git/submodule,3,0.786
git/submodule listSubmodules returns the expected tag,0.199,git/submodule,3,0.786
git/submodule resetSubmodulePaths update submodule to original commit,0.409,git/submodule,3,0.786
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.581
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,11,0.581
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.581
git/log getCommits loads history,0.073,git/log,7,0.65
git/log getCommits handles repository with HEAD file on disk,0.107,git/log,7,0.65
git/log getCommits handles repository with signed commit and log.showSignature set,0.115,git/log,7,0.65
git/log getChangedFiles loads the files changed in the commit,0.057,git/log,7,0.65
git/log getChangedFiles detects renames,0.096,git/log,7,0.65
git/log getChangedFiles detect copies,0.101,git/log,7,0.65
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.65
git/merge merge and is successful returns true,0.042,git/merge,7,0.627
git/merge merge and is a noop returns false,0.06,git/merge,7,0.627
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.627
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.577
git-lfs isUsingLFS returns true if LFS is tracking a path,0.088,git-lfs,9,0.577
Update remote url updates the repository's remote url when the github url changes,0.116,Update remote url,4,0.414
Update remote url doesn't update the repository's remote url when the github url is the same,0.085,Update remote url,4,0.414
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.414
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.079,Update remote url,4,0.414
git/core error handling does not throw for errors that were expected,0.054,git/core,6,0.357
git/core error handling throws for errors that were not expected,0.054,git/core,6,0.357
git/core exit code handling does not throw for exit codes that were expected,0.054,git/core,6,0.357
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.357
git/core config lock file error handling can parse lock file path from stderr,0.056,git/core,6,0.357
git/core config lock file error handling normalizes paths,0.042,git/core,6,0.357
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.047,patch formatting,8,0.372
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.372
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.372
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.372
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.372
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.372
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.372
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.372
validatedRepositoryPath returns the path to the repository,0.053,validatedRepositoryPath,2,0.104
git/for-each-ref getBranches fetches branches using for-each-ref,0.075,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for empty repo,0.068,git/for-each-ref,3,0.242
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.242
AppStore can select a repository,0.303,AppStore,5,0.361
git/reset reset can hard reset a repository,0.343,git/reset,2,0.383
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.063
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.326,git/rebase,21,8.034
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.034
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.034
git/rebase detect conflicts is a detached HEAD state,0.284,git/rebase,21,8.034
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.273,git/rebase,21,8.034
git/rebase abort after conflicts found no longer has working directory changes,0.265,git/rebase,21,8.034
git/rebase abort after conflicts found returns to the feature branch,0.269,git/rebase,21,8.034
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.353,git/rebase,21,8.034
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.342,git/rebase,21,8.034
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.343,git/rebase,21,8.034
git/rebase continue after resolving conflicts returns success,0.402,git/rebase,21,8.034
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.395,git/rebase,21,8.034
git/rebase continue after resolving conflicts no longer has working directory changes,0.4,git/rebase,21,8.034
git/rebase continue after resolving conflicts returns to the feature branch,0.405,git/rebase,21,8.034
git/rebase continue after resolving conflicts branch is now a different ref,0.408,git/rebase,21,8.034
git/rebase continue with additional changes unrelated to conflicted files returns success,0.404,git/rebase,21,8.034
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.402,git/rebase,21,8.034
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.424,git/rebase,21,8.034
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.42,git/rebase,21,8.034
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.414,git/rebase,21,8.034
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.409,git/rebase,21,8.034
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.724
git/commit createCommit normal commit does not strip commentary by default,0.112,git/commit,21,4.724
git/commit createCommit normal can commit for empty repository,0.143,git/commit,21,4.724
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.724
git/commit createCommit partials can commit some lines from new file,0.205,git/commit,21,4.724
git/commit createCommit partials can commit second hunk from modified file,0.206,git/commit,21,4.724
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.724
git/commit createCommit partials can commit multiple hunks from modified file,0.205,git/commit,21,4.724
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.724
git/commit createCommit partials can commit renames with modifications,0.198,git/commit,21,4.724
git/commit createCommit partials can commit renames with partially selected modifications,0.237,git/commit,21,4.724
git/commit createCommit with a merge conflict creates a merge commit,0.265,git/commit,21,4.724
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.252,git/commit,21,4.724
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.35,git/commit,21,4.724
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.333,git/commit,21,4.724
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.425,git/commit,21,4.724
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.426,git/commit,21,4.724
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.724
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.724
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.184,git/commit,21,4.724
git/commit index corner cases file is deleted in index,0.194,git/commit,21,4.724
git/rebase can parse progress returns a value indicating conflicts were encountered,0.42,git/rebase,7,4.104
git/rebase can parse progress status detects REBASE_HEAD,0.434,git/rebase,7,4.104
git/rebase can parse progress is a detached HEAD state,0.439,git/rebase,7,4.104
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.884,git/rebase,7,4.104
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.96,git/rebase,7,4.104
git/rebase can parse progress for long rebase is a detached HEAD state,0.916,git/rebase,7,4.104
GitStore loadCommitBatch includes HEAD when loading commits,0.379,GitStore,11,2.678
GitStore can discard changes from a repository,0.178,GitStore,11,2.678
GitStore can discard a renamed file,0.155,GitStore,11,2.678
GitStore undo first commit reports the repository is unborn,0.197,GitStore,11,2.678
GitStore undo first commit pre-fills the commit message,0.132,GitStore,11,2.678
GitStore undo first commit clears the undo commit dialog,0.23,GitStore,11,2.678
GitStore undo first commit has no staged files,0.221,GitStore,11,2.678
GitStore repository with HEAD file can discard modified change cleanly,0.124,GitStore,11,2.678
git/status getStatus with conflicted repo parses conflicted files with markers,0.315,git/status,12,2.197
git/status getStatus with conflicted repo parses conflicted files without markers,0.33,git/status,12,2.197
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.44,git/status,12,2.197
git/status getStatus with conflicted repo parses resolved files,0.335,git/status,12,2.197
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.197
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.197
git/status getStatus with unconflicted repo parses changed files,0.078,git/status,12,2.197
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.197
git/status getStatus with unconflicted repo reflects renames,0.118,git/status,12,2.197
git/status getStatus with unconflicted repo reflects copies,0.129,git/status,12,2.197
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.197
BranchPruner does nothing on non GitHub repositories,0.33,BranchPruner,6,2.16
BranchPruner prunes for GitHub repository,0.369,BranchPruner,6,2.16
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.291,BranchPruner,6,2.16
BranchPruner does not prune if there is no default branch,0.276,BranchPruner,6,2.16
BranchPruner does not prune reserved branches,0.366,BranchPruner,6,2.16
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.051,git/diff,19,2.006
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,2.006
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,2.006
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,2.006
git/diff imageDiff changes for images are set,0.083,git/diff,19,2.006
git/diff imageDiff changes for text are not set,0.096,git/diff,19,2.006
git/diff getWorkingDirectoryDiff counts lines for new file,0.095,git/diff,19,2.006
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,2.006
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,2.006
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.134,git/diff,19,2.006
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.174,git/diff,19,2.006
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.175,git/diff,19,2.006
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.142,git/diff,19,2.006
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.141,git/diff,19,2.006
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.1,git/diff,19,2.006
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.072,git/diff,19,2.006
git/diff getBinaryPaths in repo with text only files returns an empty array,0.098,git/diff,19,2.006
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.112,git/diff,19,2.006
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.137,git/diff,19,2.006
git/branch tip returns unborn for new repository,0.032,git/branch,13,1.641
git/branch tip returns correct ref if checkout occurs,0.058,git/branch,13,1.641
git/branch tip returns detached for arbitrary checkout,0.062,git/branch,13,1.641
git/branch tip returns current branch when on a valid HEAD,0.094,git/branch,13,1.641
git/branch tip returns non-origin remote,0.147,git/branch,13,1.641
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.641
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.641
git/branch getBranchesPointedAt in a local repo finds no branch names,0.05,git/branch,13,1.641
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.641
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.089,git/branch,13,1.641
git/branch deleteBranch deletes local branches,0.125,git/branch,13,1.641
git/branch deleteBranch deletes remote branches,0.339,git/branch,13,1.641
git/branch deleteBranch handles attempted delete of removed remote branch,0.395,git/branch,13,1.641
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.112,git/stash,14,1.398
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.144,git/stash,14,1.398
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.101,git/stash,14,1.398
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.43,formatPatch,5,1.09
git/reflog getRecentBranches returns the recently checked out branches,0.155,git/reflog,6,1.071
git/reflog getRecentBranches works after renaming a branch,0.203,git/reflog,6,1.071
git/reflog getRecentBranches returns a limited number of branches,0.261,git/reflog,6,1.071
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.154,git/reflog,6,1.071
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.191,git/reflog,6,1.071
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.066,git/reflog,6,1.071
git/checkout can checkout a valid branch name in an existing repository,0.126,git/checkout,6,1.043
git/checkout can checkout a branch when it exists on multiple remotes,0.132,git/checkout,6,1.043
git/checkout will fail when an existing branch matches the remote branch,0.123,git/checkout,6,1.043
git/checkout with submodules cleans up an submodule that no longer exists,0.323,git/checkout,6,1.043
git/checkout with submodules updates a changed submodule reference,0.264,git/checkout,6,1.043
git/config config looks up config values,0.057,git/config,12,0.847
git/config config returns null for undefined values,0.053,git/config,12,0.847
git/config global config getGlobalConfigPath gets the config path,0.068,git/config,12,0.847
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.067,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.068,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.067,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.066,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.069,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.847
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.067,git/config,12,0.847
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.766
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.766
git/rev-parse isBareRepository returns false for default initialized repository,0.063,git/rev-parse,10,0.766
git/rev-parse isBareRepository returns true for initialized bare repository,0.067,git/rev-parse,10,0.766
git/rev-parse isBareRepository returns false for empty directory,0.055,git/rev-parse,10,0.766
git/rev-parse isBareRepository throws error for missing directory,0.051,git/rev-parse,10,0.766
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.766
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.054,git/rev-parse,10,0.766
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.766
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.195,git/rev-parse,10,0.766
git/submodule listSubmodules returns the submodule entry,0.13,git/submodule,3,0.716
git/submodule listSubmodules returns the expected tag,0.183,git/submodule,3,0.716
git/submodule resetSubmodulePaths update submodule to original commit,0.363,git/submodule,3,0.716
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.718
gitignore saveGitIgnore applies rule correctly to repository,0.107,gitignore,9,0.718
gitignore appendIgnoreRule appends one rule,0.125,gitignore,9,0.718
gitignore appendIgnoreRule appends multiple rules,0.128,gitignore,9,0.718
git/log getCommits loads history,0.069,git/log,7,0.675
git/log getCommits handles repository with HEAD file on disk,0.102,git/log,7,0.675
git/log getCommits handles repository with signed commit and log.showSignature set,0.124,git/log,7,0.675
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.675
git/log getChangedFiles detects renames,0.11,git/log,7,0.675
git/log getChangedFiles detect copies,0.113,git/log,7,0.675
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.675
git/merge merge and is successful returns true,0.048,git/merge,7,0.668
git/merge merge and is a noop returns false,0.065,git/merge,7,0.668
git/merge getMergeBase returns the common ancestor of two branches,0.08,git/merge,7,0.668
git/remote getRemotes should return both remotes,0.064,git/remote,11,0.649
git/remote findDefaultRemote returns origin when multiple remotes found,0.067,git/remote,11,0.649
git/remote findDefaultRemote returns something when origin removed,0.075,git/remote,11,0.649
git-lfs isUsingLFS returns false for repository not using LFS,0.063,git-lfs,9,0.599
git-lfs isUsingLFS returns true if LFS is tracking a path,0.086,git-lfs,9,0.599
Update remote url updates the repository's remote url when the github url changes,0.117,Update remote url,4,0.422
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.422
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.422
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.422
git/reset reset can hard reset a repository,0.079,git/reset,2,0.121
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.035,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.382
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.382
AppStore can select a repository,0.212,AppStore,5,0.264
git/core error handling does not throw for errors that were expected,0.31,git/core,6,0.628
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.628
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.628
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.628
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.628
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.628
git/for-each-ref getBranches fetches branches using for-each-ref,0.077,git/for-each-ref,3,0.255
git/for-each-ref getBranches should return empty list for empty repo,0.077,git/for-each-ref,3,0.255
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.255
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.116
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.063
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.328,git/rebase,21,8.052
git/rebase detect conflicts status detects REBASE_HEAD,0.276,git/rebase,21,8.052
git/rebase detect conflicts has conflicted files in working directory,0.278,git/rebase,21,8.052
git/rebase detect conflicts is a detached HEAD state,0.29,git/rebase,21,8.052
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.274,git/rebase,21,8.052
git/rebase abort after conflicts found no longer has working directory changes,0.273,git/rebase,21,8.052
git/rebase abort after conflicts found returns to the feature branch,0.273,git/rebase,21,8.052
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.362,git/rebase,21,8.052
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.345,git/rebase,21,8.052
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.351,git/rebase,21,8.052
git/rebase continue after resolving conflicts returns success,0.402,git/rebase,21,8.052
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.397,git/rebase,21,8.052
git/rebase continue after resolving conflicts no longer has working directory changes,0.403,git/rebase,21,8.052
git/rebase continue after resolving conflicts returns to the feature branch,0.405,git/rebase,21,8.052
git/rebase continue after resolving conflicts branch is now a different ref,0.409,git/rebase,21,8.052
git/rebase continue with additional changes unrelated to conflicted files returns success,0.415,git/rebase,21,8.052
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.407,git/rebase,21,8.052
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.414,git/rebase,21,8.052
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.42,git/rebase,21,8.052
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.423,git/rebase,21,8.052
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.052
git/commit createCommit normal commits the given files,0.127,git/commit,21,4.761
git/commit createCommit normal commit does not strip commentary by default,0.108,git/commit,21,4.761
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.761
git/commit createCommit normal can commit renames,0.164,git/commit,21,4.761
git/commit createCommit partials can commit some lines from new file,0.185,git/commit,21,4.761
git/commit createCommit partials can commit second hunk from modified file,0.205,git/commit,21,4.761
git/commit createCommit partials can commit single delete from modified file,0.185,git/commit,21,4.761
git/commit createCommit partials can commit multiple hunks from modified file,0.208,git/commit,21,4.761
git/commit createCommit partials can commit some lines from deleted file,0.203,git/commit,21,4.761
git/commit createCommit partials can commit renames with modifications,0.2,git/commit,21,4.761
git/commit createCommit partials can commit renames with partially selected modifications,0.244,git/commit,21,4.761
git/commit createCommit with a merge conflict creates a merge commit,0.277,git/commit,21,4.761
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.256,git/commit,21,4.761
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.352,git/commit,21,4.761
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.35,git/commit,21,4.761
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.426,git/commit,21,4.761
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.432,git/commit,21,4.761
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,4.761
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.761
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.184,git/commit,21,4.761
git/commit index corner cases file is deleted in index,0.186,git/commit,21,4.761
git/rebase can parse progress returns a value indicating conflicts were encountered,0.423,git/rebase,7,3.996
git/rebase can parse progress status detects REBASE_HEAD,0.428,git/rebase,7,3.996
git/rebase can parse progress is a detached HEAD state,0.425,git/rebase,7,3.996
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.877,git/rebase,7,3.996
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.885,git/rebase,7,3.996
git/rebase can parse progress for long rebase is a detached HEAD state,0.902,git/rebase,7,3.996
GitStore loadCommitBatch includes HEAD when loading commits,0.403,GitStore,11,2.737
GitStore can discard changes from a repository,0.18,GitStore,11,2.737
GitStore can discard a renamed file,0.158,GitStore,11,2.737
GitStore undo first commit reports the repository is unborn,0.212,GitStore,11,2.737
GitStore undo first commit pre-fills the commit message,0.133,GitStore,11,2.737
GitStore undo first commit clears the undo commit dialog,0.228,GitStore,11,2.737
GitStore undo first commit has no staged files,0.224,GitStore,11,2.737
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.737
git/status getStatus with conflicted repo parses conflicted files with markers,0.358,git/status,12,2.184
git/status getStatus with conflicted repo parses conflicted files without markers,0.319,git/status,12,2.184
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.423,git/status,12,2.184
git/status getStatus with conflicted repo parses resolved files,0.321,git/status,12,2.184
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.184
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.154,git/status,12,2.184
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.184
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.184
git/status getStatus with unconflicted repo reflects renames,0.122,git/status,12,2.184
git/status getStatus with unconflicted repo reflects copies,0.126,git/status,12,2.184
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.06,git/status,12,2.184
BranchPruner does nothing on non GitHub repositories,0.304,BranchPruner,6,1.83
BranchPruner prunes for GitHub repository,0.31,BranchPruner,6,1.83
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.237,BranchPruner,6,1.83
BranchPruner does not prune if there is no default branch,0.261,BranchPruner,6,1.83
BranchPruner does not prune reserved branches,0.301,BranchPruner,6,1.83
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.053,git/diff,19,1.865
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.865
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,1.865
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.865
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.865
git/diff imageDiff changes for text are not set,0.09,git/diff,19,1.865
git/diff getWorkingDirectoryDiff counts lines for new file,0.086,git/diff,19,1.865
git/diff getWorkingDirectoryDiff counts lines for modified file,0.091,git/diff,19,1.865
git/diff getWorkingDirectoryDiff counts lines for staged file,0.089,git/diff,19,1.865
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.119,git/diff,19,1.865
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.151,git/diff,19,1.865
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.152,git/diff,19,1.865
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.131,git/diff,19,1.865
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.124,git/diff,19,1.865
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.084,git/diff,19,1.865
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.071,git/diff,19,1.865
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.865
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.109,git/diff,19,1.865
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.13,git/diff,19,1.865
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.595
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.595
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,13,1.595
git/branch tip returns current branch when on a valid HEAD,0.085,git/branch,13,1.595
git/branch tip returns non-origin remote,0.085,git/branch,13,1.595
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.088,git/branch,13,1.595
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.595
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.595
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.595
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,13,1.595
git/branch deleteBranch deletes local branches,0.133,git/branch,13,1.595
git/branch deleteBranch deletes remote branches,0.354,git/branch,13,1.595
git/branch deleteBranch handles attempted delete of removed remote branch,0.408,git/branch,13,1.595
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.118,git/stash,14,1.48
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.154,git/stash,14,1.48
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.106,git/stash,14,1.48
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.418,formatPatch,5,1.118
git/reflog getRecentBranches returns the recently checked out branches,0.17,git/reflog,6,1.194
git/reflog getRecentBranches works after renaming a branch,0.212,git/reflog,6,1.194
git/reflog getRecentBranches returns a limited number of branches,0.335,git/reflog,6,1.194
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.194
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.201,git/reflog,6,1.194
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.194
git/checkout can checkout a valid branch name in an existing repository,0.127,git/checkout,6,1.024
git/checkout can checkout a branch when it exists on multiple remotes,0.133,git/checkout,6,1.024
git/checkout will fail when an existing branch matches the remote branch,0.124,git/checkout,6,1.024
git/checkout with submodules cleans up an submodule that no longer exists,0.303,git/checkout,6,1.024
git/checkout with submodules updates a changed submodule reference,0.257,git/checkout,6,1.024
git/config config looks up config values,0.057,git/config,12,0.882
git/config config returns null for undefined values,0.053,git/config,12,0.882
git/config global config getGlobalConfigPath gets the config path,0.072,git/config,12,0.882
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.072,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.072,git/config,12,0.882
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.882
git/rev-parse isGitRepository should return true for a repository,0.055,git/rev-parse,10,0.776
git/rev-parse isGitRepository should return false for a directory,0.053,git/rev-parse,10,0.776
git/rev-parse isBareRepository returns false for default initialized repository,0.066,git/rev-parse,10,0.776
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.776
git/rev-parse isBareRepository returns false for empty directory,0.055,git/rev-parse,10,0.776
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.776
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.776
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.776
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.065,git/rev-parse,10,0.776
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.19,git/rev-parse,10,0.776
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.682
gitignore saveGitIgnore applies rule correctly to repository,0.098,gitignore,9,0.682
gitignore appendIgnoreRule appends one rule,0.121,gitignore,9,0.682
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.682
git/submodule listSubmodules returns the submodule entry,0.131,git/submodule,3,0.748
git/submodule listSubmodules returns the expected tag,0.195,git/submodule,3,0.748
git/submodule resetSubmodulePaths update submodule to original commit,0.38,git/submodule,3,0.748
git/log getCommits loads history,0.071,git/log,7,0.665
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.665
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.665
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.665
git/log getChangedFiles detects renames,0.11,git/log,7,0.665
git/log getChangedFiles detect copies,0.11,git/log,7,0.665
git/log getChangedFiles handles commit when HEAD exists on disk,0.055,git/log,7,0.665
git/merge merge and is successful returns true,0.045,git/merge,7,0.629
git/merge merge and is a noop returns false,0.06,git/merge,7,0.629
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.629
git/remote getRemotes should return both remotes,0.062,git/remote,11,0.603
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.603
git/remote findDefaultRemote returns something when origin removed,0.068,git/remote,11,0.603
git/core error handling does not throw for errors that were expected,0.141,git/core,6,0.462
git/core error handling throws for errors that were not expected,0.056,git/core,6,0.462
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.462
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.462
git/core config lock file error handling can parse lock file path from stderr,0.06,git/core,6,0.462
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.462
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.583
git-lfs isUsingLFS returns true if LFS is tracking a path,0.083,git-lfs,9,0.583
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.425
Update remote url doesn't update the repository's remote url when the github url is the same,0.089,Update remote url,4,0.425
Update remote url doesn't update repository's remote url if protocols don't match,0.088,Update remote url,4,0.425
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.425
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.055,patch formatting,8,0.396
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.396
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.054,patch formatting,8,0.396
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.396
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.396
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.396
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.396
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.033,patch formatting,8,0.396
AppStore can select a repository,0.193,AppStore,5,0.248
git/for-each-ref getBranches fetches branches using for-each-ref,0.301,git/for-each-ref,3,0.477
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.477
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.477
git/reset reset can hard reset a repository,0.086,git/reset,2,0.124
validatedRepositoryPath returns the path to the repository,0.061,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.059
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.326,git/rebase,21,8.059
git/rebase detect conflicts status detects REBASE_HEAD,0.28,git/rebase,21,8.059
git/rebase detect conflicts has conflicted files in working directory,0.281,git/rebase,21,8.059
git/rebase detect conflicts is a detached HEAD state,0.285,git/rebase,21,8.059
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.269,git/rebase,21,8.059
git/rebase abort after conflicts found no longer has working directory changes,0.275,git/rebase,21,8.059
git/rebase abort after conflicts found returns to the feature branch,0.282,git/rebase,21,8.059
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.353,git/rebase,21,8.059
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.351,git/rebase,21,8.059
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.346,git/rebase,21,8.059
git/rebase continue after resolving conflicts returns success,0.407,git/rebase,21,8.059
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.402,git/rebase,21,8.059
git/rebase continue after resolving conflicts no longer has working directory changes,0.406,git/rebase,21,8.059
git/rebase continue after resolving conflicts returns to the feature branch,0.412,git/rebase,21,8.059
git/rebase continue after resolving conflicts branch is now a different ref,0.413,git/rebase,21,8.059
git/rebase continue with additional changes unrelated to conflicted files returns success,0.411,git/rebase,21,8.059
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.405,git/rebase,21,8.059
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.414,git/rebase,21,8.059
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.42,git/rebase,21,8.059
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.417,git/rebase,21,8.059
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.408,git/rebase,21,8.059
git/commit createCommit normal commits the given files,0.129,git/commit,21,4.781
git/commit createCommit normal commit does not strip commentary by default,0.116,git/commit,21,4.781
git/commit createCommit normal can commit for empty repository,0.145,git/commit,21,4.781
git/commit createCommit normal can commit renames,0.167,git/commit,21,4.781
git/commit createCommit partials can commit some lines from new file,0.191,git/commit,21,4.781
git/commit createCommit partials can commit second hunk from modified file,0.205,git/commit,21,4.781
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.781
git/commit createCommit partials can commit multiple hunks from modified file,0.204,git/commit,21,4.781
git/commit createCommit partials can commit some lines from deleted file,0.194,git/commit,21,4.781
git/commit createCommit partials can commit renames with modifications,0.22,git/commit,21,4.781
git/commit createCommit partials can commit renames with partially selected modifications,0.238,git/commit,21,4.781
git/commit createCommit with a merge conflict creates a merge commit,0.27,git/commit,21,4.781
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.254,git/commit,21,4.781
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.346,git/commit,21,4.781
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.342,git/commit,21,4.781
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.433,git/commit,21,4.781
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.434,git/commit,21,4.781
git/commit createMergeCommit with no changes throws an error,0.108,git/commit,21,4.781
git/commit index corner cases can commit when staged new file is then deleted,0.161,git/commit,21,4.781
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.187,git/commit,21,4.781
git/commit index corner cases file is deleted in index,0.186,git/commit,21,4.781
git/rebase can parse progress returns a value indicating conflicts were encountered,0.417,git/rebase,7,3.991
git/rebase can parse progress status detects REBASE_HEAD,0.44,git/rebase,7,3.991
git/rebase can parse progress is a detached HEAD state,0.421,git/rebase,7,3.991
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.871,git/rebase,7,3.991
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.89,git/rebase,7,3.991
git/rebase can parse progress for long rebase is a detached HEAD state,0.902,git/rebase,7,3.991
GitStore loadCommitBatch includes HEAD when loading commits,0.398,GitStore,11,2.747
GitStore can discard changes from a repository,0.205,GitStore,11,2.747
GitStore can discard a renamed file,0.163,GitStore,11,2.747
GitStore undo first commit reports the repository is unborn,0.207,GitStore,11,2.747
GitStore undo first commit pre-fills the commit message,0.136,GitStore,11,2.747
GitStore undo first commit clears the undo commit dialog,0.23,GitStore,11,2.747
GitStore undo first commit has no staged files,0.226,GitStore,11,2.747
GitStore repository with HEAD file can discard modified change cleanly,0.119,GitStore,11,2.747
git/status getStatus with conflicted repo parses conflicted files with markers,0.377,git/status,12,2.217
git/status getStatus with conflicted repo parses conflicted files without markers,0.326,git/status,12,2.217
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.431,git/status,12,2.217
git/status getStatus with conflicted repo parses resolved files,0.318,git/status,12,2.217
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,2.217
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.217
git/status getStatus with unconflicted repo parses changed files,0.074,git/status,12,2.217
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.069,git/status,12,2.217
git/status getStatus with unconflicted repo reflects renames,0.112,git/status,12,2.217
git/status getStatus with unconflicted repo reflects copies,0.114,git/status,12,2.217
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.217
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.098,git/diff,19,1.922
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.922
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,1.922
git/diff getBlobImage retrieves valid images for deleted file,0.065,git/diff,19,1.922
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.922
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.922
git/diff getWorkingDirectoryDiff counts lines for new file,0.094,git/diff,19,1.922
git/diff getWorkingDirectoryDiff counts lines for modified file,0.095,git/diff,19,1.922
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.922
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,1.922
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.15,git/diff,19,1.922
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.922
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.132,git/diff,19,1.922
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.122,git/diff,19,1.922
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.088,git/diff,19,1.922
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.922
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,1.922
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,1.922
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.125,git/diff,19,1.922
BranchPruner does nothing on non GitHub repositories,0.244,BranchPruner,6,1.823
BranchPruner prunes for GitHub repository,0.308,BranchPruner,6,1.823
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.256,BranchPruner,6,1.823
BranchPruner does not prune if there is no default branch,0.253,BranchPruner,6,1.823
BranchPruner does not prune reserved branches,0.317,BranchPruner,6,1.823
git/branch tip returns unborn for new repository,0.032,git/branch,13,1.574
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,13,1.574
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.574
git/branch tip returns current branch when on a valid HEAD,0.08,git/branch,13,1.574
git/branch tip returns non-origin remote,0.085,git/branch,13,1.574
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.574
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.574
git/branch getBranchesPointedAt in a local repo finds no branch names,0.055,git/branch,13,1.574
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.057,git/branch,13,1.574
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.088,git/branch,13,1.574
git/branch deleteBranch deletes local branches,0.131,git/branch,13,1.574
git/branch deleteBranch deletes remote branches,0.345,git/branch,13,1.574
git/branch deleteBranch handles attempted delete of removed remote branch,0.406,git/branch,13,1.574
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.119,git/stash,14,1.479
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.159,git/stash,14,1.479
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.107,git/stash,14,1.479
git/reflog getRecentBranches returns the recently checked out branches,0.164,git/reflog,6,1.115
git/reflog getRecentBranches works after renaming a branch,0.205,git/reflog,6,1.115
git/reflog getRecentBranches returns a limited number of branches,0.273,git/reflog,6,1.115
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.115
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.199,git/reflog,6,1.115
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.115
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.397,formatPatch,5,1.145
git/checkout can checkout a valid branch name in an existing repository,0.124,git/checkout,6,1.015
git/checkout can checkout a branch when it exists on multiple remotes,0.13,git/checkout,6,1.015
git/checkout will fail when an existing branch matches the remote branch,0.122,git/checkout,6,1.015
git/checkout with submodules cleans up an submodule that no longer exists,0.296,git/checkout,6,1.015
git/checkout with submodules updates a changed submodule reference,0.266,git/checkout,6,1.015
git/config config looks up config values,0.053,git/config,12,0.865
git/config config returns null for undefined values,0.05,git/config,12,0.865
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.865
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.07,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.067,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.069,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.072,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.073,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.865
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.865
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.762
git/rev-parse isGitRepository should return false for a directory,0.049,git/rev-parse,10,0.762
git/rev-parse isBareRepository returns false for default initialized repository,0.06,git/rev-parse,10,0.762
git/rev-parse isBareRepository returns true for initialized bare repository,0.064,git/rev-parse,10,0.762
git/rev-parse isBareRepository returns false for empty directory,0.056,git/rev-parse,10,0.762
git/rev-parse isBareRepository throws error for missing directory,0.051,git/rev-parse,10,0.762
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.065,git/rev-parse,10,0.762
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.053,git/rev-parse,10,0.762
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.055,git/rev-parse,10,0.762
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.21,git/rev-parse,10,0.762
git/submodule listSubmodules returns the submodule entry,0.131,git/submodule,3,0.725
git/submodule listSubmodules returns the expected tag,0.194,git/submodule,3,0.725
git/submodule resetSubmodulePaths update submodule to original commit,0.359,git/submodule,3,0.725
gitignore readGitIgnoreAtRoot reads contents from disk,0.019,gitignore,9,0.77
gitignore saveGitIgnore applies rule correctly to repository,0.103,gitignore,9,0.77
gitignore appendIgnoreRule appends one rule,0.12,gitignore,9,0.77
gitignore appendIgnoreRule appends multiple rules,0.128,gitignore,9,0.77
git/log getCommits loads history,0.069,git/log,7,0.626
git/log getCommits handles repository with HEAD file on disk,0.09,git/log,7,0.626
git/log getCommits handles repository with signed commit and log.showSignature set,0.13,git/log,7,0.626
git/log getChangedFiles loads the files changed in the commit,0.057,git/log,7,0.626
git/log getChangedFiles detects renames,0.092,git/log,7,0.626
git/log getChangedFiles detect copies,0.095,git/log,7,0.626
git/log getChangedFiles handles commit when HEAD exists on disk,0.052,git/log,7,0.626
git/merge merge and is successful returns true,0.048,git/merge,7,0.593
git/merge merge and is a noop returns false,0.06,git/merge,7,0.593
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.593
git/remote getRemotes should return both remotes,0.068,git/remote,11,0.575
git/remote findDefaultRemote returns origin when multiple remotes found,0.065,git/remote,11,0.575
git/remote findDefaultRemote returns something when origin removed,0.068,git/remote,11,0.575
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.534
git-lfs isUsingLFS returns true if LFS is tracking a path,0.079,git-lfs,9,0.534
git/for-each-ref getBranches fetches branches using for-each-ref,0.076,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for empty repo,0.071,git/for-each-ref,3,0.245
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.058,git/for-each-ref,3,0.245
git/core error handling does not throw for errors that were expected,0.056,git/core,6,0.365
git/core error handling throws for errors that were not expected,0.06,git/core,6,0.365
git/core exit code handling does not throw for exit codes that were expected,0.056,git/core,6,0.365
git/core exit code handling throws for exit codes that were not expected,0.053,git/core,6,0.365
git/core config lock file error handling can parse lock file path from stderr,0.055,git/core,6,0.365
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.365
Update remote url updates the repository's remote url when the github url changes,0.115,Update remote url,4,0.415
Update remote url doesn't update the repository's remote url when the github url is the same,0.086,Update remote url,4,0.415
Update remote url doesn't update repository's remote url if protocols don't match,0.083,Update remote url,4,0.415
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.083,Update remote url,4,0.415
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.054,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.049,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.38
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.38
AppStore can select a repository,0.2,AppStore,5,0.254
git/reset reset can hard reset a repository,0.317,git/reset,2,0.36
validatedRepositoryPath returns the path to the repository,0.157,validatedRepositoryPath,2,0.212
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.063
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.336,git/rebase,21,8.061
git/rebase detect conflicts status detects REBASE_HEAD,0.287,git/rebase,21,8.061
git/rebase detect conflicts has conflicted files in working directory,0.284,git/rebase,21,8.061
git/rebase detect conflicts is a detached HEAD state,0.291,git/rebase,21,8.061
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.275,git/rebase,21,8.061
git/rebase abort after conflicts found no longer has working directory changes,0.279,git/rebase,21,8.061
git/rebase abort after conflicts found returns to the feature branch,0.279,git/rebase,21,8.061
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.346,git/rebase,21,8.061
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.345,git/rebase,21,8.061
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.342,git/rebase,21,8.061
git/rebase continue after resolving conflicts returns success,0.401,git/rebase,21,8.061
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.395,git/rebase,21,8.061
git/rebase continue after resolving conflicts no longer has working directory changes,0.399,git/rebase,21,8.061
git/rebase continue after resolving conflicts returns to the feature branch,0.41,git/rebase,21,8.061
git/rebase continue after resolving conflicts branch is now a different ref,0.41,git/rebase,21,8.061
git/rebase continue with additional changes unrelated to conflicted files returns success,0.408,git/rebase,21,8.061
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.407,git/rebase,21,8.061
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.413,git/rebase,21,8.061
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.418,git/rebase,21,8.061
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.426,git/rebase,21,8.061
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,8.061
git/commit createCommit normal commits the given files,0.131,git/commit,21,4.724
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.724
git/commit createCommit normal can commit for empty repository,0.138,git/commit,21,4.724
git/commit createCommit normal can commit renames,0.162,git/commit,21,4.724
git/commit createCommit partials can commit some lines from new file,0.183,git/commit,21,4.724
git/commit createCommit partials can commit second hunk from modified file,0.208,git/commit,21,4.724
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.724
git/commit createCommit partials can commit multiple hunks from modified file,0.203,git/commit,21,4.724
git/commit createCommit partials can commit some lines from deleted file,0.189,git/commit,21,4.724
git/commit createCommit partials can commit renames with modifications,0.199,git/commit,21,4.724
git/commit createCommit partials can commit renames with partially selected modifications,0.238,git/commit,21,4.724
git/commit createCommit with a merge conflict creates a merge commit,0.266,git/commit,21,4.724
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.248,git/commit,21,4.724
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.359,git/commit,21,4.724
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.344,git/commit,21,4.724
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.428,git/commit,21,4.724
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.43,git/commit,21,4.724
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,4.724
git/commit index corner cases can commit when staged new file is then deleted,0.163,git/commit,21,4.724
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.183,git/commit,21,4.724
git/commit index corner cases file is deleted in index,0.184,git/commit,21,4.724
git/rebase can parse progress returns a value indicating conflicts were encountered,0.42,git/rebase,7,4.041
git/rebase can parse progress status detects REBASE_HEAD,0.436,git/rebase,7,4.041
git/rebase can parse progress is a detached HEAD state,0.432,git/rebase,7,4.041
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.902,git/rebase,7,4.041
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.892,git/rebase,7,4.041
git/rebase can parse progress for long rebase is a detached HEAD state,0.898,git/rebase,7,4.041
GitStore loadCommitBatch includes HEAD when loading commits,0.395,GitStore,11,2.728
GitStore can discard changes from a repository,0.178,GitStore,11,2.728
GitStore can discard a renamed file,0.166,GitStore,11,2.728
GitStore undo first commit reports the repository is unborn,0.198,GitStore,11,2.728
GitStore undo first commit pre-fills the commit message,0.136,GitStore,11,2.728
GitStore undo first commit clears the undo commit dialog,0.235,GitStore,11,2.728
GitStore undo first commit has no staged files,0.225,GitStore,11,2.728
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.728
git/status getStatus with conflicted repo parses conflicted files with markers,0.36,git/status,12,2.196
git/status getStatus with conflicted repo parses conflicted files without markers,0.323,git/status,12,2.196
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.431,git/status,12,2.196
git/status getStatus with conflicted repo parses resolved files,0.312,git/status,12,2.196
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.196
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.165,git/status,12,2.196
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.196
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.196
git/status getStatus with unconflicted repo reflects renames,0.121,git/status,12,2.196
git/status getStatus with unconflicted repo reflects copies,0.122,git/status,12,2.196
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.196
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.051,git/diff,19,1.899
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.899
git/diff getBlobImage retrieves valid image for modified file,0.056,git/diff,19,1.899
git/diff getBlobImage retrieves valid images for deleted file,0.113,git/diff,19,1.899
git/diff imageDiff changes for images are set,0.082,git/diff,19,1.899
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.899
git/diff getWorkingDirectoryDiff counts lines for new file,0.087,git/diff,19,1.899
git/diff getWorkingDirectoryDiff counts lines for modified file,0.095,git/diff,19,1.899
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.899
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.125,git/diff,19,1.899
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.15,git/diff,19,1.899
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.154,git/diff,19,1.899
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.129,git/diff,19,1.899
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.124,git/diff,19,1.899
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.899
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.066,git/diff,19,1.899
git/diff getBinaryPaths in repo with text only files returns an empty array,0.098,git/diff,19,1.899
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.1,git/diff,19,1.899
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.116,git/diff,19,1.899
BranchPruner does nothing on non GitHub repositories,0.24,BranchPruner,6,1.81
BranchPruner prunes for GitHub repository,0.303,BranchPruner,6,1.81
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.255,BranchPruner,6,1.81
BranchPruner does not prune if there is no default branch,0.254,BranchPruner,6,1.81
BranchPruner does not prune reserved branches,0.313,BranchPruner,6,1.81
git/branch tip returns unborn for new repository,0.027,git/branch,13,1.531
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,13,1.531
git/branch tip returns detached for arbitrary checkout,0.057,git/branch,13,1.531
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,13,1.531
git/branch tip returns non-origin remote,0.084,git/branch,13,1.531
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo finds one branch name,0.055,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo finds no branch names,0.054,git/branch,13,1.531
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.531
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.531
git/branch deleteBranch deletes local branches,0.125,git/branch,13,1.531
git/branch deleteBranch deletes remote branches,0.335,git/branch,13,1.531
git/branch deleteBranch handles attempted delete of removed remote branch,0.393,git/branch,13,1.531
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.117,git/stash,14,1.441
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.151,git/stash,14,1.441
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.105,git/stash,14,1.441
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.46,formatPatch,5,1.172
git/reflog getRecentBranches returns the recently checked out branches,0.166,git/reflog,6,1.166
git/reflog getRecentBranches works after renaming a branch,0.215,git/reflog,6,1.166
git/reflog getRecentBranches returns a limited number of branches,0.288,git/reflog,6,1.166
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.169,git/reflog,6,1.166
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.212,git/reflog,6,1.166
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.074,git/reflog,6,1.166
git/checkout can checkout a valid branch name in an existing repository,0.138,git/checkout,6,1.092
git/checkout can checkout a branch when it exists on multiple remotes,0.14,git/checkout,6,1.092
git/checkout will fail when an existing branch matches the remote branch,0.131,git/checkout,6,1.092
git/checkout with submodules cleans up an submodule that no longer exists,0.332,git/checkout,6,1.092
git/checkout with submodules updates a changed submodule reference,0.278,git/checkout,6,1.092
git/config config looks up config values,0.055,git/config,12,0.897
git/config config returns null for undefined values,0.055,git/config,12,0.897
git/config global config getGlobalConfigPath gets the config path,0.069,git/config,12,0.897
git/config global config setGlobalConfigValue will replace all entries for a global value,0.1,git/config,12,0.897
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.074,git/config,12,0.897
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.072,git/config,12,0.897
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.897
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.075,git/config,12,0.897
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,0.897
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.897
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.897
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.07,git/config,12,0.897
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.753
gitignore saveGitIgnore applies rule correctly to repository,0.107,gitignore,9,0.753
gitignore appendIgnoreRule appends one rule,0.131,gitignore,9,0.753
gitignore appendIgnoreRule appends multiple rules,0.13,gitignore,9,0.753
git/rev-parse isGitRepository should return true for a repository,0.054,git/rev-parse,10,0.784
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns false for default initialized repository,0.064,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns true for initialized bare repository,0.067,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns false for empty directory,0.059,git/rev-parse,10,0.784
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.068,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.06,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.203,git/rev-parse,10,0.784
git/submodule listSubmodules returns the submodule entry,0.142,git/submodule,3,0.743
git/submodule listSubmodules returns the expected tag,0.193,git/submodule,3,0.743
git/submodule resetSubmodulePaths update submodule to original commit,0.37,git/submodule,3,0.743
git/log getCommits loads history,0.071,git/log,7,0.67
git/log getCommits handles repository with HEAD file on disk,0.104,git/log,7,0.67
git/log getCommits handles repository with signed commit and log.showSignature set,0.121,git/log,7,0.67
git/log getChangedFiles loads the files changed in the commit,0.061,git/log,7,0.67
git/log getChangedFiles detects renames,0.103,git/log,7,0.67
git/log getChangedFiles detect copies,0.11,git/log,7,0.67
git/log getChangedFiles handles commit when HEAD exists on disk,0.059,git/log,7,0.67
git/merge merge and is successful returns true,0.05,git/merge,7,0.686
git/merge merge and is a noop returns false,0.064,git/merge,7,0.686
git/merge getMergeBase returns the common ancestor of two branches,0.083,git/merge,7,0.686
git/remote getRemotes should return both remotes,0.064,git/remote,11,0.654
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,11,0.654
git/remote findDefaultRemote returns something when origin removed,0.07,git/remote,11,0.654
git-lfs isUsingLFS returns false for repository not using LFS,0.06,git-lfs,9,0.622
git-lfs isUsingLFS returns true if LFS is tracking a path,0.082,git-lfs,9,0.622
Update remote url updates the repository's remote url when the github url changes,0.208,Update remote url,4,0.529
Update remote url doesn't update the repository's remote url when the github url is the same,0.093,Update remote url,4,0.529
Update remote url doesn't update repository's remote url if protocols don't match,0.087,Update remote url,4,0.529
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.09,Update remote url,4,0.529
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.05,patch formatting,8,0.386
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.063,patch formatting,8,0.386
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.052,patch formatting,8,0.386
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.386
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.386
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.033,patch formatting,8,0.386
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.386
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.386
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.376
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.376
git/core exit code handling does not throw for exit codes that were expected,0.061,git/core,6,0.376
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,6,0.376
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.376
git/core config lock file error handling normalizes paths,0.043,git/core,6,0.376
git/reset reset can hard reset a repository,0.086,git/reset,2,0.125
AppStore can select a repository,0.215,AppStore,5,0.276
git/for-each-ref getBranches fetches branches using for-each-ref,0.333,git/for-each-ref,3,0.514
git/for-each-ref getBranches should return empty list for empty repo,0.078,git/for-each-ref,3,0.514
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.514
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.06
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.328,git/rebase,21,7.946
git/rebase detect conflicts status detects REBASE_HEAD,0.275,git/rebase,21,7.946
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,7.946
git/rebase detect conflicts is a detached HEAD state,0.281,git/rebase,21,7.946
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.272,git/rebase,21,7.946
git/rebase abort after conflicts found no longer has working directory changes,0.27,git/rebase,21,7.946
git/rebase abort after conflicts found returns to the feature branch,0.271,git/rebase,21,7.946
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.348,git/rebase,21,7.946
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.341,git/rebase,21,7.946
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.342,git/rebase,21,7.946
git/rebase continue after resolving conflicts returns success,0.394,git/rebase,21,7.946
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.389,git/rebase,21,7.946
git/rebase continue after resolving conflicts no longer has working directory changes,0.396,git/rebase,21,7.946
git/rebase continue after resolving conflicts returns to the feature branch,0.407,git/rebase,21,7.946
git/rebase continue after resolving conflicts branch is now a different ref,0.407,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files returns success,0.399,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.4,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.41,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.416,git/rebase,21,7.946
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.415,git/rebase,21,7.946
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.404,git/rebase,21,7.946
git/commit createCommit normal commits the given files,0.127,git/commit,21,4.674
git/commit createCommit normal commit does not strip commentary by default,0.109,git/commit,21,4.674
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.674
git/commit createCommit normal can commit renames,0.159,git/commit,21,4.674
git/commit createCommit partials can commit some lines from new file,0.2,git/commit,21,4.674
git/commit createCommit partials can commit second hunk from modified file,0.206,git/commit,21,4.674
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,4.674
git/commit createCommit partials can commit multiple hunks from modified file,0.202,git/commit,21,4.674
git/commit createCommit partials can commit some lines from deleted file,0.187,git/commit,21,4.674
git/commit createCommit partials can commit renames with modifications,0.202,git/commit,21,4.674
git/commit createCommit partials can commit renames with partially selected modifications,0.241,git/commit,21,4.674
git/commit createCommit with a merge conflict creates a merge commit,0.272,git/commit,21,4.674
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.247,git/commit,21,4.674
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.357,git/commit,21,4.674
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.337,git/commit,21,4.674
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.431,git/commit,21,4.674
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.41,git/commit,21,4.674
git/commit createMergeCommit with no changes throws an error,0.1,git/commit,21,4.674
git/commit index corner cases can commit when staged new file is then deleted,0.153,git/commit,21,4.674
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.176,git/commit,21,4.674
git/commit index corner cases file is deleted in index,0.178,git/commit,21,4.674
git/rebase can parse progress returns a value indicating conflicts were encountered,0.421,git/rebase,7,4.016
git/rebase can parse progress status detects REBASE_HEAD,0.429,git/rebase,7,4.016
git/rebase can parse progress is a detached HEAD state,0.434,git/rebase,7,4.016
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.889,git/rebase,7,4.016
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.905,git/rebase,7,4.016
git/rebase can parse progress for long rebase is a detached HEAD state,0.887,git/rebase,7,4.016
GitStore loadCommitBatch includes HEAD when loading commits,0.383,GitStore,11,2.751
GitStore can discard changes from a repository,0.178,GitStore,11,2.751
GitStore can discard a renamed file,0.156,GitStore,11,2.751
GitStore undo first commit reports the repository is unborn,0.209,GitStore,11,2.751
GitStore undo first commit pre-fills the commit message,0.138,GitStore,11,2.751
GitStore undo first commit clears the undo commit dialog,0.235,GitStore,11,2.751
GitStore undo first commit has no staged files,0.223,GitStore,11,2.751
GitStore repository with HEAD file can discard modified change cleanly,0.15,GitStore,11,2.751
git/status getStatus with conflicted repo parses conflicted files with markers,0.322,git/status,12,2.154
git/status getStatus with conflicted repo parses conflicted files without markers,0.322,git/status,12,2.154
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.424,git/status,12,2.154
git/status getStatus with conflicted repo parses resolved files,0.324,git/status,12,2.154
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.123,git/status,12,2.154
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.157,git/status,12,2.154
git/status getStatus with unconflicted repo parses changed files,0.065,git/status,12,2.154
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.154
git/status getStatus with unconflicted repo reflects renames,0.12,git/status,12,2.154
git/status getStatus with unconflicted repo reflects copies,0.122,git/status,12,2.154
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.062,git/status,12,2.154
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.086,git/diff,19,2.027
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,2.027
git/diff getBlobImage retrieves valid image for modified file,0.05,git/diff,19,2.027
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,2.027
git/diff imageDiff changes for images are set,0.079,git/diff,19,2.027
git/diff imageDiff changes for text are not set,0.086,git/diff,19,2.027
git/diff getWorkingDirectoryDiff counts lines for new file,0.085,git/diff,19,2.027
git/diff getWorkingDirectoryDiff counts lines for modified file,0.099,git/diff,19,2.027
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,2.027
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.13,git/diff,19,2.027
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.174,git/diff,19,2.027
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.18,git/diff,19,2.027
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.145,git/diff,19,2.027
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.155,git/diff,19,2.027
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.097,git/diff,19,2.027
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,2.027
git/diff getBinaryPaths in repo with text only files returns an empty array,0.097,git/diff,19,2.027
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,2.027
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.136,git/diff,19,2.027
BranchPruner does nothing on non GitHub repositories,0.293,BranchPruner,6,1.997
BranchPruner prunes for GitHub repository,0.383,BranchPruner,6,1.997
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.268,BranchPruner,6,1.997
BranchPruner does not prune if there is no default branch,0.258,BranchPruner,6,1.997
BranchPruner does not prune reserved branches,0.317,BranchPruner,6,1.997
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.496
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,13,1.496
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.496
git/branch tip returns current branch when on a valid HEAD,0.077,git/branch,13,1.496
git/branch tip returns non-origin remote,0.088,git/branch,13,1.496
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.496
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,13,1.496
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.496
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,13,1.496
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,13,1.496
git/branch deleteBranch deletes local branches,0.12,git/branch,13,1.496
git/branch deleteBranch deletes remote branches,0.313,git/branch,13,1.496
git/branch deleteBranch handles attempted delete of removed remote branch,0.373,git/branch,13,1.496
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.357
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.141,git/stash,14,1.357
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.357
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.437,formatPatch,5,1.083
git/reflog getRecentBranches returns the recently checked out branches,0.151,git/reflog,6,1.082
git/reflog getRecentBranches works after renaming a branch,0.195,git/reflog,6,1.082
git/reflog getRecentBranches returns a limited number of branches,0.266,git/reflog,6,1.082
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.157,git/reflog,6,1.082
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.198,git/reflog,6,1.082
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.072,git/reflog,6,1.082
git/checkout can checkout a valid branch name in an existing repository,0.128,git/checkout,6,0.998
git/checkout can checkout a branch when it exists on multiple remotes,0.132,git/checkout,6,0.998
git/checkout will fail when an existing branch matches the remote branch,0.122,git/checkout,6,0.998
git/checkout with submodules cleans up an submodule that no longer exists,0.293,git/checkout,6,0.998
git/checkout with submodules updates a changed submodule reference,0.25,git/checkout,6,0.998
git/config config looks up config values,0.05,git/config,12,0.845
git/config config returns null for undefined values,0.054,git/config,12,0.845
git/config global config getGlobalConfigPath gets the config path,0.062,git/config,12,0.845
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,12,0.845
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.069,git/config,12,0.845
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.065,git/config,12,0.845
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.065,git/config,12,0.845
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.068,git/config,12,0.845
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.07,git/config,12,0.845
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.071,git/config,12,0.845
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.067,git/config,12,0.845
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.069,git/config,12,0.845
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.793
git/rev-parse isGitRepository should return false for a directory,0.057,git/rev-parse,10,0.793
git/rev-parse isBareRepository returns false for default initialized repository,0.066,git/rev-parse,10,0.793
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.793
git/rev-parse isBareRepository returns false for empty directory,0.062,git/rev-parse,10,0.793
git/rev-parse isBareRepository throws error for missing directory,0.054,git/rev-parse,10,0.793
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.793
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.793
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.061,git/rev-parse,10,0.793
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.2,git/rev-parse,10,0.793
gitignore readGitIgnoreAtRoot reads contents from disk,0.018,gitignore,9,0.725
gitignore saveGitIgnore applies rule correctly to repository,0.109,gitignore,9,0.725
gitignore appendIgnoreRule appends one rule,0.126,gitignore,9,0.725
gitignore appendIgnoreRule appends multiple rules,0.126,gitignore,9,0.725
git/submodule listSubmodules returns the submodule entry,0.133,git/submodule,3,0.723
git/submodule listSubmodules returns the expected tag,0.194,git/submodule,3,0.723
git/submodule resetSubmodulePaths update submodule to original commit,0.355,git/submodule,3,0.723
git/merge merge and is successful returns true,0.049,git/merge,7,0.644
git/merge merge and is a noop returns false,0.062,git/merge,7,0.644
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.644
git/log getCommits loads history,0.073,git/log,7,0.678
git/log getCommits handles repository with HEAD file on disk,0.11,git/log,7,0.678
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.678
git/log getChangedFiles loads the files changed in the commit,0.065,git/log,7,0.678
git/log getChangedFiles detects renames,0.104,git/log,7,0.678
git/log getChangedFiles detect copies,0.112,git/log,7,0.678
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.678
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.648
git/remote findDefaultRemote returns origin when multiple remotes found,0.07,git/remote,11,0.648
git/remote findDefaultRemote returns something when origin removed,0.076,git/remote,11,0.648
git-lfs isUsingLFS returns false for repository not using LFS,0.15,git-lfs,9,0.693
git-lfs isUsingLFS returns true if LFS is tracking a path,0.084,git-lfs,9,0.693
Update remote url updates the repository's remote url when the github url changes,0.121,Update remote url,4,0.441
Update remote url doesn't update the repository's remote url when the github url is the same,0.091,Update remote url,4,0.441
Update remote url doesn't update repository's remote url if protocols don't match,0.086,Update remote url,4,0.441
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.091,Update remote url,4,0.441
git/for-each-ref getBranches fetches branches using for-each-ref,0.077,git/for-each-ref,3,0.255
git/for-each-ref getBranches should return empty list for empty repo,0.078,git/for-each-ref,3,0.255
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.059,git/for-each-ref,3,0.255
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.048,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.052,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.034,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile includes empty context lines,0.029,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.381
git/core error handling does not throw for errors that were expected,0.064,git/core,6,0.39
git/core error handling throws for errors that were not expected,0.059,git/core,6,0.39
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.39
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.39
git/core config lock file error handling can parse lock file path from stderr,0.064,git/core,6,0.39
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.39
AppStore can select a repository,0.207,AppStore,5,0.261
git/reset reset can hard reset a repository,0.317,git/reset,2,0.361
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.326,git/rebase,21,8.047
git/rebase detect conflicts status detects REBASE_HEAD,0.284,git/rebase,21,8.047
git/rebase detect conflicts has conflicted files in working directory,0.282,git/rebase,21,8.047
git/rebase detect conflicts is a detached HEAD state,0.286,git/rebase,21,8.047
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.271,git/rebase,21,8.047
git/rebase abort after conflicts found no longer has working directory changes,0.274,git/rebase,21,8.047
git/rebase abort after conflicts found returns to the feature branch,0.283,git/rebase,21,8.047
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.36,git/rebase,21,8.047
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.347,git/rebase,21,8.047
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.344,git/rebase,21,8.047
git/rebase continue after resolving conflicts returns success,0.405,git/rebase,21,8.047
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.397,git/rebase,21,8.047
git/rebase continue after resolving conflicts no longer has working directory changes,0.407,git/rebase,21,8.047
git/rebase continue after resolving conflicts returns to the feature branch,0.407,git/rebase,21,8.047
git/rebase continue after resolving conflicts branch is now a different ref,0.409,git/rebase,21,8.047
git/rebase continue with additional changes unrelated to conflicted files returns success,0.407,git/rebase,21,8.047
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.405,git/rebase,21,8.047
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.415,git/rebase,21,8.047
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.418,git/rebase,21,8.047
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.421,git/rebase,21,8.047
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.047
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.679
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.679
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.679
git/commit createCommit normal can commit renames,0.166,git/commit,21,4.679
git/commit createCommit partials can commit some lines from new file,0.18,git/commit,21,4.679
git/commit createCommit partials can commit second hunk from modified file,0.189,git/commit,21,4.679
git/commit createCommit partials can commit single delete from modified file,0.176,git/commit,21,4.679
git/commit createCommit partials can commit multiple hunks from modified file,0.204,git/commit,21,4.679
git/commit createCommit partials can commit some lines from deleted file,0.188,git/commit,21,4.679
git/commit createCommit partials can commit renames with modifications,0.209,git/commit,21,4.679
git/commit createCommit partials can commit renames with partially selected modifications,0.234,git/commit,21,4.679
git/commit createCommit with a merge conflict creates a merge commit,0.267,git/commit,21,4.679
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.247,git/commit,21,4.679
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.348,git/commit,21,4.679
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.34,git/commit,21,4.679
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.426,git/commit,21,4.679
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.428,git/commit,21,4.679
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.679
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.679
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.182,git/commit,21,4.679
git/commit index corner cases file is deleted in index,0.188,git/commit,21,4.679
git/rebase can parse progress returns a value indicating conflicts were encountered,0.422,git/rebase,7,4.074
git/rebase can parse progress status detects REBASE_HEAD,0.446,git/rebase,7,4.074
git/rebase can parse progress is a detached HEAD state,0.431,git/rebase,7,4.074
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.899,git/rebase,7,4.074
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.904,git/rebase,7,4.074
git/rebase can parse progress for long rebase is a detached HEAD state,0.918,git/rebase,7,4.074
GitStore loadCommitBatch includes HEAD when loading commits,0.431,GitStore,11,2.767
GitStore can discard changes from a repository,0.186,GitStore,11,2.767
GitStore can discard a renamed file,0.159,GitStore,11,2.767
GitStore undo first commit reports the repository is unborn,0.2,GitStore,11,2.767
GitStore undo first commit pre-fills the commit message,0.133,GitStore,11,2.767
GitStore undo first commit clears the undo commit dialog,0.233,GitStore,11,2.767
GitStore undo first commit has no staged files,0.224,GitStore,11,2.767
GitStore repository with HEAD file can discard modified change cleanly,0.124,GitStore,11,2.767
git/status getStatus with conflicted repo parses conflicted files with markers,0.36,git/status,12,2.182
git/status getStatus with conflicted repo parses conflicted files without markers,0.328,git/status,12,2.182
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.429,git/status,12,2.182
git/status getStatus with conflicted repo parses resolved files,0.317,git/status,12,2.182
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.127,git/status,12,2.182
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.158,git/status,12,2.182
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.182
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.182
git/status getStatus with unconflicted repo reflects renames,0.112,git/status,12,2.182
git/status getStatus with unconflicted repo reflects copies,0.115,git/status,12,2.182
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.182
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.095,git/diff,19,1.898
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.898
git/diff getBlobImage retrieves valid image for modified file,0.049,git/diff,19,1.898
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.898
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.898
git/diff imageDiff changes for text are not set,0.089,git/diff,19,1.898
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,1.898
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,1.898
git/diff getWorkingDirectoryDiff counts lines for staged file,0.085,git/diff,19,1.898
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.119,git/diff,19,1.898
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.153,git/diff,19,1.898
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.159,git/diff,19,1.898
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.13,git/diff,19,1.898
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.121,git/diff,19,1.898
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.898
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.065,git/diff,19,1.898
git/diff getBinaryPaths in repo with text only files returns an empty array,0.1,git/diff,19,1.898
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.108,git/diff,19,1.898
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.122,git/diff,19,1.898
BranchPruner does nothing on non GitHub repositories,0.253,BranchPruner,6,1.771
BranchPruner prunes for GitHub repository,0.294,BranchPruner,6,1.771
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.251,BranchPruner,6,1.771
BranchPruner does not prune if there is no default branch,0.232,BranchPruner,6,1.771
BranchPruner does not prune reserved branches,0.303,BranchPruner,6,1.771
git/branch tip returns unborn for new repository,0.03,git/branch,13,1.519
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,13,1.519
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.519
git/branch tip returns current branch when on a valid HEAD,0.076,git/branch,13,1.519
git/branch tip returns non-origin remote,0.081,git/branch,13,1.519
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,13,1.519
git/branch getBranchesPointedAt in a local repo finds one branch name,0.054,git/branch,13,1.519
git/branch getBranchesPointedAt in a local repo finds no branch names,0.049,git/branch,13,1.519
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.054,git/branch,13,1.519
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.083,git/branch,13,1.519
git/branch deleteBranch deletes local branches,0.124,git/branch,13,1.519
git/branch deleteBranch deletes remote branches,0.334,git/branch,13,1.519
git/branch deleteBranch handles attempted delete of removed remote branch,0.398,git/branch,13,1.519
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.113,git/stash,14,1.417
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.147,git/stash,14,1.417
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.108,git/stash,14,1.417
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.423,formatPatch,5,1.114
git/reflog getRecentBranches returns the recently checked out branches,0.215,git/reflog,6,1.186
git/reflog getRecentBranches works after renaming a branch,0.204,git/reflog,6,1.186
git/reflog getRecentBranches returns a limited number of branches,0.275,git/reflog,6,1.186
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.177,git/reflog,6,1.186
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.201,git/reflog,6,1.186
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.075,git/reflog,6,1.186
git/checkout can checkout a valid branch name in an existing repository,0.128,git/checkout,6,1.088
git/checkout can checkout a branch when it exists on multiple remotes,0.135,git/checkout,6,1.088
git/checkout will fail when an existing branch matches the remote branch,0.136,git/checkout,6,1.088
git/checkout with submodules cleans up an submodule that no longer exists,0.331,git/checkout,6,1.088
git/checkout with submodules updates a changed submodule reference,0.279,git/checkout,6,1.088
git/config config looks up config values,0.06,git/config,12,0.873
git/config config returns null for undefined values,0.054,git/config,12,0.873
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,12,0.873
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.075,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.07,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.067,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.067,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.069,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.069,git/config,12,0.873
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.873
git/rev-parse isGitRepository should return true for a repository,0.061,git/rev-parse,10,0.789
git/rev-parse isGitRepository should return false for a directory,0.058,git/rev-parse,10,0.789
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.789
git/rev-parse isBareRepository returns true for initialized bare repository,0.073,git/rev-parse,10,0.789
git/rev-parse isBareRepository returns false for empty directory,0.062,git/rev-parse,10,0.789
git/rev-parse isBareRepository throws error for missing directory,0.057,git/rev-parse,10,0.789
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.789
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.056,git/rev-parse,10,0.789
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.056,git/rev-parse,10,0.789
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.191,git/rev-parse,10,0.789
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.686
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.686
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.686
gitignore appendIgnoreRule appends multiple rules,0.123,gitignore,9,0.686
git/submodule listSubmodules returns the submodule entry,0.133,git/submodule,3,0.743
git/submodule listSubmodules returns the expected tag,0.193,git/submodule,3,0.743
git/submodule resetSubmodulePaths update submodule to original commit,0.376,git/submodule,3,0.743
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.541
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.541
git/log getCommits loads history,0.071,git/log,7,0.657
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.657
git/log getCommits handles repository with signed commit and log.showSignature set,0.115,git/log,7,0.657
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.657
git/log getChangedFiles detects renames,0.106,git/log,7,0.657
git/log getChangedFiles detect copies,0.108,git/log,7,0.657
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.657
git/remote getRemotes should return both remotes,0.059,git/remote,11,0.61
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.61
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.61
git/merge merge and is successful returns true,0.048,git/merge,7,0.652
git/merge merge and is a noop returns false,0.062,git/merge,7,0.652
git/merge getMergeBase returns the common ancestor of two branches,0.08,git/merge,7,0.652
Update remote url updates the repository's remote url when the github url changes,0.115,Update remote url,4,0.429
Update remote url doesn't update the repository's remote url when the github url is the same,0.089,Update remote url,4,0.429
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.429
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.087,Update remote url,4,0.429
git/core error handling does not throw for errors that were expected,0.059,git/core,6,0.391
git/core error handling throws for errors that were not expected,0.067,git/core,6,0.391
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.391
git/core exit code handling throws for exit codes that were not expected,0.059,git/core,6,0.391
git/core config lock file error handling can parse lock file path from stderr,0.061,git/core,6,0.391
git/core config lock file error handling normalizes paths,0.045,git/core,6,0.391
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.049,patch formatting,8,0.366
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.053,patch formatting,8,0.366
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.366
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.05,patch formatting,8,0.366
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.366
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.032,patch formatting,8,0.366
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.366
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.366
git/reset reset can hard reset a repository,0.079,git/reset,2,0.117
AppStore can select a repository,0.215,AppStore,5,0.274
git/for-each-ref getBranches fetches branches using for-each-ref,0.327,git/for-each-ref,3,0.51
git/for-each-ref getBranches should return empty list for empty repo,0.08,git/for-each-ref,3,0.51
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.062,git/for-each-ref,3,0.51
validatedRepositoryPath returns the path to the repository,0.062,validatedRepositoryPath,2,0.117
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.327,git/rebase,21,7.964
git/rebase detect conflicts status detects REBASE_HEAD,0.27,git/rebase,21,7.964
git/rebase detect conflicts has conflicted files in working directory,0.274,git/rebase,21,7.964
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,7.964
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.271,git/rebase,21,7.964
git/rebase abort after conflicts found no longer has working directory changes,0.267,git/rebase,21,7.964
git/rebase abort after conflicts found returns to the feature branch,0.267,git/rebase,21,7.964
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.347,git/rebase,21,7.964
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.335,git/rebase,21,7.964
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.34,git/rebase,21,7.964
git/rebase continue after resolving conflicts returns success,0.397,git/rebase,21,7.964
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.393,git/rebase,21,7.964
git/rebase continue after resolving conflicts no longer has working directory changes,0.401,git/rebase,21,7.964
git/rebase continue after resolving conflicts returns to the feature branch,0.409,git/rebase,21,7.964
git/rebase continue after resolving conflicts branch is now a different ref,0.404,git/rebase,21,7.964
git/rebase continue with additional changes unrelated to conflicted files returns success,0.409,git/rebase,21,7.964
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.402,git/rebase,21,7.964
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.413,git/rebase,21,7.964
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.41,git/rebase,21,7.964
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.419,git/rebase,21,7.964
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.412,git/rebase,21,7.964
git/commit createCommit normal commits the given files,0.13,git/commit,21,4.704
git/commit createCommit normal commit does not strip commentary by default,0.114,git/commit,21,4.704
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.704
git/commit createCommit normal can commit renames,0.16,git/commit,21,4.704
git/commit createCommit partials can commit some lines from new file,0.203,git/commit,21,4.704
git/commit createCommit partials can commit second hunk from modified file,0.2,git/commit,21,4.704
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.704
git/commit createCommit partials can commit multiple hunks from modified file,0.206,git/commit,21,4.704
git/commit createCommit partials can commit some lines from deleted file,0.178,git/commit,21,4.704
git/commit createCommit partials can commit renames with modifications,0.191,git/commit,21,4.704
git/commit createCommit partials can commit renames with partially selected modifications,0.231,git/commit,21,4.704
git/commit createCommit with a merge conflict creates a merge commit,0.264,git/commit,21,4.704
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.244,git/commit,21,4.704
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.356,git/commit,21,4.704
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.343,git/commit,21,4.704
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.429,git/commit,21,4.704
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.428,git/commit,21,4.704
git/commit createMergeCommit with no changes throws an error,0.115,git/commit,21,4.704
git/commit index corner cases can commit when staged new file is then deleted,0.162,git/commit,21,4.704
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.183,git/commit,21,4.704
git/commit index corner cases file is deleted in index,0.185,git/commit,21,4.704
git/rebase can parse progress returns a value indicating conflicts were encountered,0.41,git/rebase,7,3.982
git/rebase can parse progress status detects REBASE_HEAD,0.416,git/rebase,7,3.982
git/rebase can parse progress is a detached HEAD state,0.424,git/rebase,7,3.982
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.914,git/rebase,7,3.982
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.875,git/rebase,7,3.982
git/rebase can parse progress for long rebase is a detached HEAD state,0.892,git/rebase,7,3.982
GitStore loadCommitBatch includes HEAD when loading commits,0.38,GitStore,11,2.711
GitStore can discard changes from a repository,0.2,GitStore,11,2.711
GitStore can discard a renamed file,0.156,GitStore,11,2.711
GitStore undo first commit reports the repository is unborn,0.197,GitStore,11,2.711
GitStore undo first commit pre-fills the commit message,0.129,GitStore,11,2.711
GitStore undo first commit clears the undo commit dialog,0.223,GitStore,11,2.711
GitStore undo first commit has no staged files,0.217,GitStore,11,2.711
GitStore repository with HEAD file can discard modified change cleanly,0.149,GitStore,11,2.711
git/status getStatus with conflicted repo parses conflicted files with markers,0.319,git/status,12,2.116
git/status getStatus with conflicted repo parses conflicted files without markers,0.313,git/status,12,2.116
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.416,git/status,12,2.116
git/status getStatus with conflicted repo parses resolved files,0.326,git/status,12,2.116
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.125,git/status,12,2.116
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.153,git/status,12,2.116
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,2.116
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,2.116
git/status getStatus with unconflicted repo reflects renames,0.117,git/status,12,2.116
git/status getStatus with unconflicted repo reflects copies,0.121,git/status,12,2.116
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.058,git/status,12,2.116
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.092,git/diff,19,1.978
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.978
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,1.978
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,1.978
git/diff imageDiff changes for images are set,0.085,git/diff,19,1.978
git/diff imageDiff changes for text are not set,0.094,git/diff,19,1.978
git/diff getWorkingDirectoryDiff counts lines for new file,0.098,git/diff,19,1.978
git/diff getWorkingDirectoryDiff counts lines for modified file,0.097,git/diff,19,1.978
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,1.978
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.118,git/diff,19,1.978
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.165,git/diff,19,1.978
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.17,git/diff,19,1.978
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.138,git/diff,19,1.978
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.139,git/diff,19,1.978
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.092,git/diff,19,1.978
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.07,git/diff,19,1.978
git/diff getBinaryPaths in repo with text only files returns an empty array,0.093,git/diff,19,1.978
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.102,git/diff,19,1.978
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.978
BranchPruner does nothing on non GitHub repositories,0.273,BranchPruner,6,1.943
BranchPruner prunes for GitHub repository,0.357,BranchPruner,6,1.943
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.334,BranchPruner,6,1.943
BranchPruner does not prune if there is no default branch,0.256,BranchPruner,6,1.943
BranchPruner does not prune reserved branches,0.3,BranchPruner,6,1.943
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.479
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,13,1.479
git/branch tip returns detached for arbitrary checkout,0.103,git/branch,13,1.479
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,13,1.479
git/branch tip returns non-origin remote,0.077,git/branch,13,1.479
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.079,git/branch,13,1.479
git/branch getBranchesPointedAt in a local repo finds one branch name,0.053,git/branch,13,1.479
git/branch getBranchesPointedAt in a local repo finds no branch names,0.048,git/branch,13,1.479
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.047,git/branch,13,1.479
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.079,git/branch,13,1.479
git/branch deleteBranch deletes local branches,0.116,git/branch,13,1.479
git/branch deleteBranch deletes remote branches,0.312,git/branch,13,1.479
git/branch deleteBranch handles attempted delete of removed remote branch,0.367,git/branch,13,1.479
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.107,git/stash,14,1.306
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.135,git/stash,14,1.306
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.096,git/stash,14,1.306
git/reflog getRecentBranches returns the recently checked out branches,0.149,git/reflog,6,1.021
git/reflog getRecentBranches works after renaming a branch,0.181,git/reflog,6,1.021
git/reflog getRecentBranches returns a limited number of branches,0.245,git/reflog,6,1.021
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.152,git/reflog,6,1.021
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.186,git/reflog,6,1.021
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.069,git/reflog,6,1.021
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.409,formatPatch,5,1.108
git/checkout can checkout a valid branch name in an existing repository,0.128,git/checkout,6,1.04
git/checkout can checkout a branch when it exists on multiple remotes,0.131,git/checkout,6,1.04
git/checkout will fail when an existing branch matches the remote branch,0.123,git/checkout,6,1.04
git/checkout with submodules cleans up an submodule that no longer exists,0.311,git/checkout,6,1.04
git/checkout with submodules updates a changed submodule reference,0.275,git/checkout,6,1.04
git/config config looks up config values,0.051,git/config,12,0.812
git/config config returns null for undefined values,0.054,git/config,12,0.812
git/config global config getGlobalConfigPath gets the config path,0.063,git/config,12,0.812
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,12,0.812
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.065,git/config,12,0.812
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.064,git/config,12,0.812
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.062,git/config,12,0.812
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.064,git/config,12,0.812
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.812
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.065,git/config,12,0.812
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.063,git/config,12,0.812
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.066,git/config,12,0.812
git/rev-parse isGitRepository should return true for a repository,0.053,git/rev-parse,10,0.862
git/rev-parse isGitRepository should return false for a directory,0.122,git/rev-parse,10,0.862
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.862
git/rev-parse isBareRepository returns true for initialized bare repository,0.068,git/rev-parse,10,0.862
git/rev-parse isBareRepository returns false for empty directory,0.065,git/rev-parse,10,0.862
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.862
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.068,git/rev-parse,10,0.862
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.057,git/rev-parse,10,0.862
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.862
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.199,git/rev-parse,10,0.862
git/submodule listSubmodules returns the submodule entry,0.132,git/submodule,3,0.743
git/submodule listSubmodules returns the expected tag,0.189,git/submodule,3,0.743
git/submodule resetSubmodulePaths update submodule to original commit,0.382,git/submodule,3,0.743
gitignore readGitIgnoreAtRoot reads contents from disk,0.015,gitignore,9,0.685
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.685
gitignore appendIgnoreRule appends one rule,0.117,gitignore,9,0.685
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.685
git/log getCommits loads history,0.072,git/log,7,0.663
git/log getCommits handles repository with HEAD file on disk,0.098,git/log,7,0.663
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.663
git/log getChangedFiles loads the files changed in the commit,0.059,git/log,7,0.663
git/log getChangedFiles detects renames,0.103,git/log,7,0.663
git/log getChangedFiles detect copies,0.109,git/log,7,0.663
git/log getChangedFiles handles commit when HEAD exists on disk,0.065,git/log,7,0.663
git/merge merge and is successful returns true,0.045,git/merge,7,0.606
git/merge merge and is a noop returns false,0.061,git/merge,7,0.606
git/merge getMergeBase returns the common ancestor of two branches,0.076,git/merge,7,0.606
git/remote getRemotes should return both remotes,0.065,git/remote,11,0.589
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,11,0.589
git/remote findDefaultRemote returns something when origin removed,0.067,git/remote,11,0.589
git-lfs isUsingLFS returns false for repository not using LFS,0.059,git-lfs,9,0.563
git-lfs isUsingLFS returns true if LFS is tracking a path,0.081,git-lfs,9,0.563
git/for-each-ref getBranches fetches branches using for-each-ref,0.071,git/for-each-ref,3,0.229
git/for-each-ref getBranches should return empty list for empty repo,0.066,git/for-each-ref,3,0.229
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.052,git/for-each-ref,3,0.229
Update remote url updates the repository's remote url when the github url changes,0.11,Update remote url,4,0.399
Update remote url doesn't update the repository's remote url when the github url is the same,0.082,Update remote url,4,0.399
Update remote url doesn't update repository's remote url if protocols don't match,0.077,Update remote url,4,0.399
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.079,Update remote url,4,0.399
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.357
git/core error handling throws for errors that were not expected,0.053,git/core,6,0.357
git/core exit code handling does not throw for exit codes that were expected,0.052,git/core,6,0.357
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.357
git/core config lock file error handling can parse lock file path from stderr,0.059,git/core,6,0.357
git/core config lock file error handling normalizes paths,0.044,git/core,6,0.357
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.056,patch formatting,8,0.377
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.377
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.377
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.377
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.377
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.377
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.377
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.377
AppStore can select a repository,0.205,AppStore,5,0.258
git/reset reset can hard reset a repository,0.323,git/reset,2,0.365
validatedRepositoryPath returns the path to the repository,0.164,validatedRepositoryPath,2,0.22
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.064
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.33,git/rebase,21,8.015
git/rebase detect conflicts status detects REBASE_HEAD,0.284,git/rebase,21,8.015
git/rebase detect conflicts has conflicted files in working directory,0.283,git/rebase,21,8.015
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,8.015
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.276,git/rebase,21,8.015
git/rebase abort after conflicts found no longer has working directory changes,0.273,git/rebase,21,8.015
git/rebase abort after conflicts found returns to the feature branch,0.283,git/rebase,21,8.015
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.351,git/rebase,21,8.015
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.344,git/rebase,21,8.015
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.34,git/rebase,21,8.015
git/rebase continue after resolving conflicts returns success,0.406,git/rebase,21,8.015
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.398,git/rebase,21,8.015
git/rebase continue after resolving conflicts no longer has working directory changes,0.401,git/rebase,21,8.015
git/rebase continue after resolving conflicts returns to the feature branch,0.404,git/rebase,21,8.015
git/rebase continue after resolving conflicts branch is now a different ref,0.403,git/rebase,21,8.015
git/rebase continue with additional changes unrelated to conflicted files returns success,0.41,git/rebase,21,8.015
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.401,git/rebase,21,8.015
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.407,git/rebase,21,8.015
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.416,git/rebase,21,8.015
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.414,git/rebase,21,8.015
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.399,git/rebase,21,8.015
git/commit createCommit normal commits the given files,0.13,git/commit,21,4.651
git/commit createCommit normal commit does not strip commentary by default,0.108,git/commit,21,4.651
git/commit createCommit normal can commit for empty repository,0.14,git/commit,21,4.651
git/commit createCommit normal can commit renames,0.159,git/commit,21,4.651
git/commit createCommit partials can commit some lines from new file,0.182,git/commit,21,4.651
git/commit createCommit partials can commit second hunk from modified file,0.197,git/commit,21,4.651
git/commit createCommit partials can commit single delete from modified file,0.173,git/commit,21,4.651
git/commit createCommit partials can commit multiple hunks from modified file,0.203,git/commit,21,4.651
git/commit createCommit partials can commit some lines from deleted file,0.186,git/commit,21,4.651
git/commit createCommit partials can commit renames with modifications,0.197,git/commit,21,4.651
git/commit createCommit partials can commit renames with partially selected modifications,0.24,git/commit,21,4.651
git/commit createCommit with a merge conflict creates a merge commit,0.264,git/commit,21,4.651
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.242,git/commit,21,4.651
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.354,git/commit,21,4.651
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.334,git/commit,21,4.651
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.427,git/commit,21,4.651
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.418,git/commit,21,4.651
git/commit createMergeCommit with no changes throws an error,0.108,git/commit,21,4.651
git/commit index corner cases can commit when staged new file is then deleted,0.156,git/commit,21,4.651
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.184,git/commit,21,4.651
git/commit index corner cases file is deleted in index,0.19,git/commit,21,4.651
git/rebase can parse progress returns a value indicating conflicts were encountered,0.409,git/rebase,7,3.914
git/rebase can parse progress status detects REBASE_HEAD,0.406,git/rebase,7,3.914
git/rebase can parse progress is a detached HEAD state,0.435,git/rebase,7,3.914
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.853,git/rebase,7,3.914
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.864,git/rebase,7,3.914
git/rebase can parse progress for long rebase is a detached HEAD state,0.894,git/rebase,7,3.914
GitStore loadCommitBatch includes HEAD when loading commits,0.431,GitStore,11,2.711
GitStore can discard changes from a repository,0.17,GitStore,11,2.711
GitStore can discard a renamed file,0.152,GitStore,11,2.711
GitStore undo first commit reports the repository is unborn,0.201,GitStore,11,2.711
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.711
GitStore undo first commit clears the undo commit dialog,0.23,GitStore,11,2.711
GitStore undo first commit has no staged files,0.215,GitStore,11,2.711
GitStore repository with HEAD file can discard modified change cleanly,0.12,GitStore,11,2.711
git/status getStatus with conflicted repo parses conflicted files with markers,0.32,git/status,12,2.182
git/status getStatus with conflicted repo parses conflicted files without markers,0.334,git/status,12,2.182
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.434,git/status,12,2.182
git/status getStatus with conflicted repo parses resolved files,0.327,git/status,12,2.182
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,2.182
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.157,git/status,12,2.182
git/status getStatus with unconflicted repo parses changed files,0.072,git/status,12,2.182
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.065,git/status,12,2.182
git/status getStatus with unconflicted repo reflects renames,0.117,git/status,12,2.182
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.182
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.062,git/status,12,2.182
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.091,git/diff,19,2.033
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,2.033
git/diff getBlobImage retrieves valid image for modified file,0.058,git/diff,19,2.033
git/diff getBlobImage retrieves valid images for deleted file,0.075,git/diff,19,2.033
git/diff imageDiff changes for images are set,0.091,git/diff,19,2.033
git/diff imageDiff changes for text are not set,0.098,git/diff,19,2.033
git/diff getWorkingDirectoryDiff counts lines for new file,0.095,git/diff,19,2.033
git/diff getWorkingDirectoryDiff counts lines for modified file,0.096,git/diff,19,2.033
git/diff getWorkingDirectoryDiff counts lines for staged file,0.083,git/diff,19,2.033
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.12,git/diff,19,2.033
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.17,git/diff,19,2.033
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.167,git/diff,19,2.033
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.135,git/diff,19,2.033
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.141,git/diff,19,2.033
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.095,git/diff,19,2.033
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,2.033
git/diff getBinaryPaths in repo with text only files returns an empty array,0.106,git/diff,19,2.033
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.112,git/diff,19,2.033
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.136,git/diff,19,2.033
BranchPruner does nothing on non GitHub repositories,0.298,BranchPruner,6,2.101
BranchPruner prunes for GitHub repository,0.369,BranchPruner,6,2.101
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.284,BranchPruner,6,2.101
BranchPruner does not prune if there is no default branch,0.287,BranchPruner,6,2.101
BranchPruner does not prune reserved branches,0.333,BranchPruner,6,2.101
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.587
git/branch tip returns correct ref if checkout occurs,0.058,git/branch,13,1.587
git/branch tip returns detached for arbitrary checkout,0.108,git/branch,13,1.587
git/branch tip returns current branch when on a valid HEAD,0.076,git/branch,13,1.587
git/branch tip returns non-origin remote,0.082,git/branch,13,1.587
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,13,1.587
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,13,1.587
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.587
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.057,git/branch,13,1.587
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.091,git/branch,13,1.587
git/branch deleteBranch deletes local branches,0.127,git/branch,13,1.587
git/branch deleteBranch deletes remote branches,0.326,git/branch,13,1.587
git/branch deleteBranch handles attempted delete of removed remote branch,0.384,git/branch,13,1.587
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.108,git/stash,14,1.354
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.142,git/stash,14,1.354
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.1,git/stash,14,1.354
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.477,formatPatch,5,1.112
git/checkout can checkout a valid branch name in an existing repository,0.125,git/checkout,6,1.011
git/checkout can checkout a branch when it exists on multiple remotes,0.126,git/checkout,6,1.011
git/checkout will fail when an existing branch matches the remote branch,0.121,git/checkout,6,1.011
git/checkout with submodules cleans up an submodule that no longer exists,0.323,git/checkout,6,1.011
git/checkout with submodules updates a changed submodule reference,0.244,git/checkout,6,1.011
git/reflog getRecentBranches returns the recently checked out branches,0.211,git/reflog,6,1.128
git/reflog getRecentBranches works after renaming a branch,0.193,git/reflog,6,1.128
git/reflog getRecentBranches returns a limited number of branches,0.266,git/reflog,6,1.128
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.155,git/reflog,6,1.128
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.192,git/reflog,6,1.128
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.068,git/reflog,6,1.128
git/rev-parse isGitRepository should return true for a repository,0.052,git/rev-parse,10,0.715
git/rev-parse isGitRepository should return false for a directory,0.049,git/rev-parse,10,0.715
git/rev-parse isBareRepository returns false for default initialized repository,0.058,git/rev-parse,10,0.715
git/rev-parse isBareRepository returns true for initialized bare repository,0.062,git/rev-parse,10,0.715
git/rev-parse isBareRepository returns false for empty directory,0.05,git/rev-parse,10,0.715
git/rev-parse isBareRepository throws error for missing directory,0.051,git/rev-parse,10,0.715
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.062,git/rev-parse,10,0.715
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.051,git/rev-parse,10,0.715
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.048,git/rev-parse,10,0.715
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.188,git/rev-parse,10,0.715
git/config config looks up config values,0.055,git/config,12,0.883
git/config config returns null for undefined values,0.056,git/config,12,0.883
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,12,0.883
git/config global config setGlobalConfigValue will replace all entries for a global value,0.096,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.071,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.068,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.076,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.07,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.068,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.067,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.072,git/config,12,0.883
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.074,git/config,12,0.883
git/submodule listSubmodules returns the submodule entry,0.14,git/submodule,3,0.725
git/submodule listSubmodules returns the expected tag,0.19,git/submodule,3,0.725
git/submodule resetSubmodulePaths update submodule to original commit,0.354,git/submodule,3,0.725
gitignore readGitIgnoreAtRoot reads contents from disk,0.016,gitignore,9,0.684
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.684
gitignore appendIgnoreRule appends one rule,0.117,gitignore,9,0.684
gitignore appendIgnoreRule appends multiple rules,0.121,gitignore,9,0.684
git/log getCommits loads history,0.067,git/log,7,0.647
git/log getCommits handles repository with HEAD file on disk,0.101,git/log,7,0.647
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.647
git/log getChangedFiles loads the files changed in the commit,0.057,git/log,7,0.647
git/log getChangedFiles detects renames,0.101,git/log,7,0.647
git/log getChangedFiles detect copies,0.105,git/log,7,0.647
git/log getChangedFiles handles commit when HEAD exists on disk,0.057,git/log,7,0.647
git/merge merge and is successful returns true,0.045,git/merge,7,0.625
git/merge merge and is a noop returns false,0.066,git/merge,7,0.625
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.625
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.602
git/remote findDefaultRemote returns origin when multiple remotes found,0.072,git/remote,11,0.602
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,11,0.602
git-lfs isUsingLFS returns false for repository not using LFS,0.058,git-lfs,9,0.569
git-lfs isUsingLFS returns true if LFS is tracking a path,0.08,git-lfs,9,0.569
Update remote url updates the repository's remote url when the github url changes,0.109,Update remote url,4,0.408
Update remote url doesn't update the repository's remote url when the github url is the same,0.084,Update remote url,4,0.408
Update remote url doesn't update repository's remote url if protocols don't match,0.084,Update remote url,4,0.408
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.081,Update remote url,4,0.408
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.052,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.055,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.049,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.051,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.385
git/reset reset can hard reset a repository,0.079,git/reset,2,0.119
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.373
git/core error handling throws for errors that were not expected,0.058,git/core,6,0.373
git/core exit code handling does not throw for exit codes that were expected,0.059,git/core,6,0.373
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.373
git/core config lock file error handling can parse lock file path from stderr,0.057,git/core,6,0.373
git/core config lock file error handling normalizes paths,0.042,git/core,6,0.373
AppStore can select a repository,0.304,AppStore,5,0.358
git/for-each-ref getBranches fetches branches using for-each-ref,0.311,git/for-each-ref,3,0.486
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.486
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.056,git/for-each-ref,3,0.486
validatedRepositoryPath returns the path to the repository,0.054,validatedRepositoryPath,2,0.111
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.321,git/rebase,21,7.951
git/rebase detect conflicts status detects REBASE_HEAD,0.274,git/rebase,21,7.951
git/rebase detect conflicts has conflicted files in working directory,0.273,git/rebase,21,7.951
git/rebase detect conflicts is a detached HEAD state,0.287,git/rebase,21,7.951
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.266,git/rebase,21,7.951
git/rebase abort after conflicts found no longer has working directory changes,0.269,git/rebase,21,7.951
git/rebase abort after conflicts found returns to the feature branch,0.273,git/rebase,21,7.951
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.352,git/rebase,21,7.951
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.333,git/rebase,21,7.951
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.343,git/rebase,21,7.951
git/rebase continue after resolving conflicts returns success,0.394,git/rebase,21,7.951
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.396,git/rebase,21,7.951
git/rebase continue after resolving conflicts no longer has working directory changes,0.4,git/rebase,21,7.951
git/rebase continue after resolving conflicts returns to the feature branch,0.407,git/rebase,21,7.951
git/rebase continue after resolving conflicts branch is now a different ref,0.404,git/rebase,21,7.951
git/rebase continue with additional changes unrelated to conflicted files returns success,0.404,git/rebase,21,7.951
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.399,git/rebase,21,7.951
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.413,git/rebase,21,7.951
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.413,git/rebase,21,7.951
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.413,git/rebase,21,7.951
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.412,git/rebase,21,7.951
git/commit createCommit normal commits the given files,0.128,git/commit,21,4.712
git/commit createCommit normal commit does not strip commentary by default,0.119,git/commit,21,4.712
git/commit createCommit normal can commit for empty repository,0.144,git/commit,21,4.712
git/commit createCommit normal can commit renames,0.167,git/commit,21,4.712
git/commit createCommit partials can commit some lines from new file,0.195,git/commit,21,4.712
git/commit createCommit partials can commit second hunk from modified file,0.206,git/commit,21,4.712
git/commit createCommit partials can commit single delete from modified file,0.182,git/commit,21,4.712
git/commit createCommit partials can commit multiple hunks from modified file,0.2,git/commit,21,4.712
git/commit createCommit partials can commit some lines from deleted file,0.19,git/commit,21,4.712
git/commit createCommit partials can commit renames with modifications,0.206,git/commit,21,4.712
git/commit createCommit partials can commit renames with partially selected modifications,0.237,git/commit,21,4.712
git/commit createCommit with a merge conflict creates a merge commit,0.266,git/commit,21,4.712
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.242,git/commit,21,4.712
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.354,git/commit,21,4.712
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.337,git/commit,21,4.712
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.416,git/commit,21,4.712
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.421,git/commit,21,4.712
git/commit createMergeCommit with no changes throws an error,0.107,git/commit,21,4.712
git/commit index corner cases can commit when staged new file is then deleted,0.159,git/commit,21,4.712
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.183,git/commit,21,4.712
git/commit index corner cases file is deleted in index,0.19,git/commit,21,4.712
git/rebase can parse progress returns a value indicating conflicts were encountered,0.426,git/rebase,7,4.025
git/rebase can parse progress status detects REBASE_HEAD,0.429,git/rebase,7,4.025
git/rebase can parse progress is a detached HEAD state,0.435,git/rebase,7,4.025
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.892,git/rebase,7,4.025
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.883,git/rebase,7,4.025
git/rebase can parse progress for long rebase is a detached HEAD state,0.908,git/rebase,7,4.025
GitStore loadCommitBatch includes HEAD when loading commits,0.443,GitStore,11,2.756
GitStore can discard changes from a repository,0.176,GitStore,11,2.756
GitStore can discard a renamed file,0.16,GitStore,11,2.756
GitStore undo first commit reports the repository is unborn,0.2,GitStore,11,2.756
GitStore undo first commit pre-fills the commit message,0.134,GitStore,11,2.756
GitStore undo first commit clears the undo commit dialog,0.231,GitStore,11,2.756
GitStore undo first commit has no staged files,0.22,GitStore,11,2.756
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.756
git/status getStatus with conflicted repo parses conflicted files with markers,0.316,git/status,12,2.154
git/status getStatus with conflicted repo parses conflicted files without markers,0.324,git/status,12,2.154
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.428,git/status,12,2.154
git/status getStatus with conflicted repo parses resolved files,0.319,git/status,12,2.154
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.129,git/status,12,2.154
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.155,git/status,12,2.154
git/status getStatus with unconflicted repo parses changed files,0.067,git/status,12,2.154
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.064,git/status,12,2.154
git/status getStatus with unconflicted repo reflects renames,0.116,git/status,12,2.154
git/status getStatus with unconflicted repo reflects copies,0.12,git/status,12,2.154
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.066,git/status,12,2.154
BranchPruner does nothing on non GitHub repositories,0.328,BranchPruner,6,2.103
BranchPruner prunes for GitHub repository,0.36,BranchPruner,6,2.103
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.284,BranchPruner,6,2.103
BranchPruner does not prune if there is no default branch,0.273,BranchPruner,6,2.103
BranchPruner does not prune reserved branches,0.348,BranchPruner,6,2.103
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.05,git/diff,19,1.937
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.937
git/diff getBlobImage retrieves valid image for modified file,0.05,git/diff,19,1.937
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.937
git/diff imageDiff changes for images are set,0.137,git/diff,19,1.937
git/diff imageDiff changes for text are not set,0.088,git/diff,19,1.937
git/diff getWorkingDirectoryDiff counts lines for new file,0.081,git/diff,19,1.937
git/diff getWorkingDirectoryDiff counts lines for modified file,0.085,git/diff,19,1.937
git/diff getWorkingDirectoryDiff counts lines for staged file,0.087,git/diff,19,1.937
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.131,git/diff,19,1.937
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.152,git/diff,19,1.937
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.163,git/diff,19,1.937
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.14,git/diff,19,1.937
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.126,git/diff,19,1.937
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.089,git/diff,19,1.937
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.069,git/diff,19,1.937
git/diff getBinaryPaths in repo with text only files returns an empty array,0.098,git/diff,19,1.937
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.112,git/diff,19,1.937
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.128,git/diff,19,1.937
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.529
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.529
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.529
git/branch tip returns current branch when on a valid HEAD,0.083,git/branch,13,1.529
git/branch tip returns non-origin remote,0.083,git/branch,13,1.529
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,13,1.529
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,13,1.529
git/branch getBranchesPointedAt in a local repo finds no branch names,0.053,git/branch,13,1.529
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.052,git/branch,13,1.529
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,13,1.529
git/branch deleteBranch deletes local branches,0.129,git/branch,13,1.529
git/branch deleteBranch deletes remote branches,0.334,git/branch,13,1.529
git/branch deleteBranch handles attempted delete of removed remote branch,0.381,git/branch,13,1.529
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.11,git/stash,14,1.396
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.143,git/stash,14,1.396
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.099,git/stash,14,1.396
git/reflog getRecentBranches returns the recently checked out branches,0.154,git/reflog,6,1.085
git/reflog getRecentBranches works after renaming a branch,0.197,git/reflog,6,1.085
git/reflog getRecentBranches returns a limited number of branches,0.258,git/reflog,6,1.085
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.164,git/reflog,6,1.085
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.195,git/reflog,6,1.085
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.075,git/reflog,6,1.085
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.44,formatPatch,5,1.113
git/checkout can checkout a valid branch name in an existing repository,0.132,git/checkout,6,1.102
git/checkout can checkout a branch when it exists on multiple remotes,0.137,git/checkout,6,1.102
git/checkout will fail when an existing branch matches the remote branch,0.142,git/checkout,6,1.102
git/checkout with submodules cleans up an submodule that no longer exists,0.343,git/checkout,6,1.102
git/checkout with submodules updates a changed submodule reference,0.277,git/checkout,6,1.102
git/config config looks up config values,0.056,git/config,12,0.907
git/config config returns null for undefined values,0.056,git/config,12,0.907
git/config global config getGlobalConfigPath gets the config path,0.072,git/config,12,0.907
git/config global config setGlobalConfigValue will replace all entries for a global value,0.099,git/config,12,0.907
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.077,git/config,12,0.907
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.071,git/config,12,0.907
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.071,git/config,12,0.907
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.072,git/config,12,0.907
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,0.907
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.078,git/config,12,0.907
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.07,git/config,12,0.907
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.072,git/config,12,0.907
git/submodule listSubmodules returns the submodule entry,0.132,git/submodule,3,0.723
git/submodule listSubmodules returns the expected tag,0.19,git/submodule,3,0.723
git/submodule resetSubmodulePaths update submodule to original commit,0.355,git/submodule,3,0.723
git/rev-parse isGitRepository should return true for a repository,0.052,git/rev-parse,10,0.784
git/rev-parse isGitRepository should return false for a directory,0.059,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns false for default initialized repository,0.068,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns true for initialized bare repository,0.069,git/rev-parse,10,0.784
git/rev-parse isBareRepository returns false for empty directory,0.056,git/rev-parse,10,0.784
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.068,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.055,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.059,git/rev-parse,10,0.784
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.203,git/rev-parse,10,0.784
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.753
gitignore saveGitIgnore applies rule correctly to repository,0.111,gitignore,9,0.753
gitignore appendIgnoreRule appends one rule,0.13,gitignore,9,0.753
gitignore appendIgnoreRule appends multiple rules,0.138,gitignore,9,0.753
git/log getCommits loads history,0.07,git/log,7,0.665
git/log getCommits handles repository with HEAD file on disk,0.098,git/log,7,0.665
git/log getCommits handles repository with signed commit and log.showSignature set,0.124,git/log,7,0.665
git/log getChangedFiles loads the files changed in the commit,0.062,git/log,7,0.665
git/log getChangedFiles detects renames,0.103,git/log,7,0.665
git/log getChangedFiles detect copies,0.108,git/log,7,0.665
git/log getChangedFiles handles commit when HEAD exists on disk,0.058,git/log,7,0.665
git/merge merge and is successful returns true,0.043,git/merge,7,0.661
git/merge merge and is a noop returns false,0.062,git/merge,7,0.661
git/merge getMergeBase returns the common ancestor of two branches,0.077,git/merge,7,0.661
git/remote getRemotes should return both remotes,0.065,git/remote,11,0.645
git/remote findDefaultRemote returns origin when multiple remotes found,0.069,git/remote,11,0.645
git/remote findDefaultRemote returns something when origin removed,0.074,git/remote,11,0.645
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.616
git-lfs isUsingLFS returns true if LFS is tracking a path,0.085,git-lfs,9,0.616
git/for-each-ref getBranches fetches branches using for-each-ref,0.078,git/for-each-ref,3,0.254
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.254
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.254
Update remote url updates the repository's remote url when the github url changes,0.121,Update remote url,4,0.434
Update remote url doesn't update the repository's remote url when the github url is the same,0.089,Update remote url,4,0.434
Update remote url doesn't update repository's remote url if protocols don't match,0.087,Update remote url,4,0.434
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.085,Update remote url,4,0.434
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.054,patch formatting,8,0.397
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.054,patch formatting,8,0.397
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.397
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.397
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.397
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.397
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.397
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.033,patch formatting,8,0.397
git/core error handling does not throw for errors that were expected,0.058,git/core,6,0.463
git/core error handling throws for errors that were not expected,0.056,git/core,6,0.463
git/core exit code handling does not throw for exit codes that were expected,0.054,git/core,6,0.463
git/core exit code handling throws for exit codes that were not expected,0.054,git/core,6,0.463
git/core config lock file error handling can parse lock file path from stderr,0.156,git/core,6,0.463
git/core config lock file error handling normalizes paths,0.046,git/core,6,0.463
AppStore can select a repository,0.224,AppStore,5,0.281
git/reset reset can hard reset a repository,0.335,git/reset,2,0.374
validatedRepositoryPath returns the path to the repository,0.06,validatedRepositoryPath,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.058
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.337,git/rebase,21,7.967
git/rebase detect conflicts status detects REBASE_HEAD,0.273,git/rebase,21,7.967
git/rebase detect conflicts has conflicted files in working directory,0.282,git/rebase,21,7.967
git/rebase detect conflicts is a detached HEAD state,0.281,git/rebase,21,7.967
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.273,git/rebase,21,7.967
git/rebase abort after conflicts found no longer has working directory changes,0.27,git/rebase,21,7.967
git/rebase abort after conflicts found returns to the feature branch,0.273,git/rebase,21,7.967
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.35,git/rebase,21,7.967
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.336,git/rebase,21,7.967
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.342,git/rebase,21,7.967
git/rebase continue after resolving conflicts returns success,0.395,git/rebase,21,7.967
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.394,git/rebase,21,7.967
git/rebase continue after resolving conflicts no longer has working directory changes,0.402,git/rebase,21,7.967
git/rebase continue after resolving conflicts returns to the feature branch,0.405,git/rebase,21,7.967
git/rebase continue after resolving conflicts branch is now a different ref,0.406,git/rebase,21,7.967
git/rebase continue with additional changes unrelated to conflicted files returns success,0.399,git/rebase,21,7.967
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.4,git/rebase,21,7.967
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.413,git/rebase,21,7.967
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.414,git/rebase,21,7.967
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.417,git/rebase,21,7.967
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.401,git/rebase,21,7.967
git/commit createCommit normal commits the given files,0.126,git/commit,21,4.694
git/commit createCommit normal commit does not strip commentary by default,0.11,git/commit,21,4.694
git/commit createCommit normal can commit for empty repository,0.139,git/commit,21,4.694
git/commit createCommit normal can commit renames,0.161,git/commit,21,4.694
git/commit createCommit partials can commit some lines from new file,0.196,git/commit,21,4.694
git/commit createCommit partials can commit second hunk from modified file,0.207,git/commit,21,4.694
git/commit createCommit partials can commit single delete from modified file,0.186,git/commit,21,4.694
git/commit createCommit partials can commit multiple hunks from modified file,0.198,git/commit,21,4.694
git/commit createCommit partials can commit some lines from deleted file,0.182,git/commit,21,4.694
git/commit createCommit partials can commit renames with modifications,0.193,git/commit,21,4.694
git/commit createCommit partials can commit renames with partially selected modifications,0.229,git/commit,21,4.694
git/commit createCommit with a merge conflict creates a merge commit,0.262,git/commit,21,4.694
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.241,git/commit,21,4.694
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.354,git/commit,21,4.694
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.34,git/commit,21,4.694
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.424,git/commit,21,4.694
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.428,git/commit,21,4.694
git/commit createMergeCommit with no changes throws an error,0.109,git/commit,21,4.694
git/commit index corner cases can commit when staged new file is then deleted,0.158,git/commit,21,4.694
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.199,git/commit,21,4.694
git/commit index corner cases file is deleted in index,0.186,git/commit,21,4.694
git/rebase can parse progress returns a value indicating conflicts were encountered,0.428,git/rebase,7,3.99
git/rebase can parse progress status detects REBASE_HEAD,0.432,git/rebase,7,3.99
git/rebase can parse progress is a detached HEAD state,0.424,git/rebase,7,3.99
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.867,git/rebase,7,3.99
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.892,git/rebase,7,3.99
git/rebase can parse progress for long rebase is a detached HEAD state,0.896,git/rebase,7,3.99
GitStore loadCommitBatch includes HEAD when loading commits,0.421,GitStore,11,2.83
GitStore can discard changes from a repository,0.176,GitStore,11,2.83
GitStore can discard a renamed file,0.162,GitStore,11,2.83
GitStore undo first commit reports the repository is unborn,0.221,GitStore,11,2.83
GitStore undo first commit pre-fills the commit message,0.134,GitStore,11,2.83
GitStore undo first commit clears the undo commit dialog,0.24,GitStore,11,2.83
GitStore undo first commit has no staged files,0.215,GitStore,11,2.83
GitStore repository with HEAD file can discard modified change cleanly,0.156,GitStore,11,2.83
git/status getStatus with conflicted repo parses conflicted files with markers,0.352,git/status,12,2.502
git/status getStatus with conflicted repo parses conflicted files without markers,0.412,git/status,12,2.502
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.446,git/status,12,2.502
git/status getStatus with conflicted repo parses resolved files,0.397,git/status,12,2.502
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.167,git/status,12,2.502
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.201,git/status,12,2.502
git/status getStatus with unconflicted repo parses changed files,0.083,git/status,12,2.502
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.077,git/status,12,2.502
git/status getStatus with unconflicted repo reflects renames,0.125,git/status,12,2.502
git/status getStatus with unconflicted repo reflects copies,0.122,git/status,12,2.502
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.063,git/status,12,2.502
BranchPruner does nothing on non GitHub repositories,0.314,BranchPruner,6,2.264
BranchPruner prunes for GitHub repository,0.379,BranchPruner,6,2.264
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.349,BranchPruner,6,2.264
BranchPruner does not prune if there is no default branch,0.273,BranchPruner,6,2.264
BranchPruner does not prune reserved branches,0.374,BranchPruner,6,2.264
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.098,git/diff,19,2.071
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,2.071
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,2.071
git/diff getBlobImage retrieves valid images for deleted file,0.077,git/diff,19,2.071
git/diff imageDiff changes for images are set,0.128,git/diff,19,2.071
git/diff imageDiff changes for text are not set,0.102,git/diff,19,2.071
git/diff getWorkingDirectoryDiff counts lines for new file,0.105,git/diff,19,2.071
git/diff getWorkingDirectoryDiff counts lines for modified file,0.094,git/diff,19,2.071
git/diff getWorkingDirectoryDiff counts lines for staged file,0.088,git/diff,19,2.071
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,2.071
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.148,git/diff,19,2.071
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.166,git/diff,19,2.071
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.151,git/diff,19,2.071
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.128,git/diff,19,2.071
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.094,git/diff,19,2.071
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.089,git/diff,19,2.071
git/diff getBinaryPaths in repo with text only files returns an empty array,0.1,git/diff,19,2.071
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.102,git/diff,19,2.071
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.116,git/diff,19,2.071
git/branch tip returns unborn for new repository,0.026,git/branch,13,1.647
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,13,1.647
git/branch tip returns detached for arbitrary checkout,0.065,git/branch,13,1.647
git/branch tip returns current branch when on a valid HEAD,0.083,git/branch,13,1.647
git/branch tip returns non-origin remote,0.088,git/branch,13,1.647
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.101,git/branch,13,1.647
git/branch getBranchesPointedAt in a local repo finds one branch name,0.06,git/branch,13,1.647
git/branch getBranchesPointedAt in a local repo finds no branch names,0.067,git/branch,13,1.647
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.06,git/branch,13,1.647
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.087,git/branch,13,1.647
git/branch deleteBranch deletes local branches,0.124,git/branch,13,1.647
git/branch deleteBranch deletes remote branches,0.363,git/branch,13,1.647
git/branch deleteBranch handles attempted delete of removed remote branch,0.424,git/branch,13,1.647
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.118,git/stash,14,1.559
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.154,git/stash,14,1.559
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.129,git/stash,14,1.559
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.536,formatPatch,5,1.396
git/checkout can checkout a valid branch name in an existing repository,0.155,git/checkout,6,1.225
git/checkout can checkout a branch when it exists on multiple remotes,0.162,git/checkout,6,1.225
git/checkout will fail when an existing branch matches the remote branch,0.142,git/checkout,6,1.225
git/checkout with submodules cleans up an submodule that no longer exists,0.376,git/checkout,6,1.225
git/checkout with submodules updates a changed submodule reference,0.299,git/checkout,6,1.225
git/reflog getRecentBranches returns the recently checked out branches,0.188,git/reflog,6,1.371
git/reflog getRecentBranches works after renaming a branch,0.242,git/reflog,6,1.371
git/reflog getRecentBranches returns a limited number of branches,0.332,git/reflog,6,1.371
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.219,git/reflog,6,1.371
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.248,git/reflog,6,1.371
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.097,git/reflog,6,1.371
git/config config looks up config values,0.064,git/config,12,1.019
git/config config returns null for undefined values,0.061,git/config,12,1.019
git/config global config getGlobalConfigPath gets the config path,0.08,git/config,12,1.019
git/config global config setGlobalConfigValue will replace all entries for a global value,0.114,git/config,12,1.019
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.097,git/config,12,1.019
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.086,git/config,12,1.019
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.088,git/config,12,1.019
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.076,git/config,12,1.019
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.071,git/config,12,1.019
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.078,git/config,12,1.019
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.077,git/config,12,1.019
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.083,git/config,12,1.019
git/rev-parse isGitRepository should return true for a repository,0.064,git/rev-parse,10,0.917
git/rev-parse isGitRepository should return false for a directory,0.062,git/rev-parse,10,0.917
git/rev-parse isBareRepository returns false for default initialized repository,0.076,git/rev-parse,10,0.917
git/rev-parse isBareRepository returns true for initialized bare repository,0.083,git/rev-parse,10,0.917
git/rev-parse isBareRepository returns false for empty directory,0.072,git/rev-parse,10,0.917
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.917
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.081,git/rev-parse,10,0.917
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.069,git/rev-parse,10,0.917
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.071,git/rev-parse,10,0.917
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.235,git/rev-parse,10,0.917
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.913
gitignore saveGitIgnore applies rule correctly to repository,0.133,gitignore,9,0.913
gitignore appendIgnoreRule appends one rule,0.15,gitignore,9,0.913
gitignore appendIgnoreRule appends multiple rules,0.147,gitignore,9,0.913
git/submodule listSubmodules returns the submodule entry,0.155,git/submodule,3,0.863
git/submodule listSubmodules returns the expected tag,0.234,git/submodule,3,0.863
git/submodule resetSubmodulePaths update submodule to original commit,0.425,git/submodule,3,0.863
git/log getCommits loads history,0.097,git/log,7,0.895
git/log getCommits handles repository with HEAD file on disk,0.125,git/log,7,0.895
git/log getCommits handles repository with signed commit and log.showSignature set,0.143,git/log,7,0.895
git/log getChangedFiles loads the files changed in the commit,0.086,git/log,7,0.895
git/log getChangedFiles detects renames,0.167,git/log,7,0.895
git/log getChangedFiles detect copies,0.148,git/log,7,0.895
git/log getChangedFiles handles commit when HEAD exists on disk,0.068,git/log,7,0.895
git/merge merge and is successful returns true,0.069,git/merge,7,0.825
git/merge merge and is a noop returns false,0.089,git/merge,7,0.825
git/merge getMergeBase returns the common ancestor of two branches,0.111,git/merge,7,0.825
git/remote getRemotes should return both remotes,0.201,git/remote,11,0.903
git/remote findDefaultRemote returns origin when multiple remotes found,0.081,git/remote,11,0.903
git/remote findDefaultRemote returns something when origin removed,0.089,git/remote,11,0.903
git-lfs isUsingLFS returns false for repository not using LFS,0.072,git-lfs,9,0.688
git-lfs isUsingLFS returns true if LFS is tracking a path,0.098,git-lfs,9,0.688
git/core error handling does not throw for errors that were expected,0.068,git/core,6,0.46
git/core error handling throws for errors that were not expected,0.069,git/core,6,0.46
git/core exit code handling does not throw for exit codes that were expected,0.077,git/core,6,0.46
git/core exit code handling throws for exit codes that were not expected,0.067,git/core,6,0.46
git/core config lock file error handling can parse lock file path from stderr,0.072,git/core,6,0.46
git/core config lock file error handling normalizes paths,0.057,git/core,6,0.46
Update remote url updates the repository's remote url when the github url changes,0.144,Update remote url,4,0.528
Update remote url doesn't update the repository's remote url when the github url is the same,0.114,Update remote url,4,0.528
Update remote url doesn't update repository's remote url if protocols don't match,0.101,Update remote url,4,0.528
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.109,Update remote url,4,0.528
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.064,patch formatting,8,0.457
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.059,patch formatting,8,0.457
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.061,patch formatting,8,0.457
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.063,patch formatting,8,0.457
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.05,patch formatting,8,0.457
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.043,patch formatting,8,0.457
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.457
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.034,patch formatting,8,0.457
git/reset reset can hard reset a repository,0.1,git/reset,2,0.141
AppStore can select a repository,0.28,AppStore,5,0.353
git/for-each-ref getBranches fetches branches using for-each-ref,0.507,git/for-each-ref,3,0.771
git/for-each-ref getBranches should return empty list for empty repo,0.141,git/for-each-ref,3,0.771
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.081,git/for-each-ref,3,0.771
validatedRepositoryPath returns the path to the repository,0.087,validatedRepositoryPath,2,0.158
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.075
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.479,git/rebase,21,11.08
git/rebase detect conflicts status detects REBASE_HEAD,0.404,git/rebase,21,11.08
git/rebase detect conflicts has conflicted files in working directory,0.379,git/rebase,21,11.08
git/rebase detect conflicts is a detached HEAD state,0.387,git/rebase,21,11.08
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.37,git/rebase,21,11.08
git/rebase abort after conflicts found no longer has working directory changes,0.392,git/rebase,21,11.08
git/rebase abort after conflicts found returns to the feature branch,0.392,git/rebase,21,11.08
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.594,git/rebase,21,11.08
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.548,git/rebase,21,11.08
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.512,git/rebase,21,11.08
git/rebase continue after resolving conflicts returns success,0.577,git/rebase,21,11.08
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.549,git/rebase,21,11.08
git/rebase continue after resolving conflicts no longer has working directory changes,0.547,git/rebase,21,11.08
git/rebase continue after resolving conflicts returns to the feature branch,0.549,git/rebase,21,11.08
git/rebase continue after resolving conflicts branch is now a different ref,0.534,git/rebase,21,11.08
git/rebase continue with additional changes unrelated to conflicted files returns success,0.52,git/rebase,21,11.08
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.547,git/rebase,21,11.08
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.544,git/rebase,21,11.08
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.541,git/rebase,21,11.08
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.56,git/rebase,21,11.08
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.528,git/rebase,21,11.08
git/commit createCommit normal commits the given files,0.167,git/commit,21,6.078
git/commit createCommit normal commit does not strip commentary by default,0.138,git/commit,21,6.078
git/commit createCommit normal can commit for empty repository,0.188,git/commit,21,6.078
git/commit createCommit normal can commit renames,0.209,git/commit,21,6.078
git/commit createCommit partials can commit some lines from new file,0.237,git/commit,21,6.078
git/commit createCommit partials can commit second hunk from modified file,0.257,git/commit,21,6.078
git/commit createCommit partials can commit single delete from modified file,0.226,git/commit,21,6.078
git/commit createCommit partials can commit multiple hunks from modified file,0.258,git/commit,21,6.078
git/commit createCommit partials can commit some lines from deleted file,0.233,git/commit,21,6.078
git/commit createCommit partials can commit renames with modifications,0.252,git/commit,21,6.078
git/commit createCommit partials can commit renames with partially selected modifications,0.3,git/commit,21,6.078
git/commit createCommit with a merge conflict creates a merge commit,0.363,git/commit,21,6.078
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.332,git/commit,21,6.078
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.461,git/commit,21,6.078
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.457,git/commit,21,6.078
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.563,git/commit,21,6.078
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.554,git/commit,21,6.078
git/commit createMergeCommit with no changes throws an error,0.126,git/commit,21,6.078
git/commit index corner cases can commit when staged new file is then deleted,0.207,git/commit,21,6.078
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.243,git/commit,21,6.078
git/commit index corner cases file is deleted in index,0.237,git/commit,21,6.078
git/rebase can parse progress returns a value indicating conflicts were encountered,0.527,git/rebase,7,4.963
git/rebase can parse progress status detects REBASE_HEAD,0.539,git/rebase,7,4.963
git/rebase can parse progress is a detached HEAD state,0.551,git/rebase,7,4.963
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.094,git/rebase,7,4.963
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.093,git/rebase,7,4.963
git/rebase can parse progress for long rebase is a detached HEAD state,1.093,git/rebase,7,4.963
GitStore loadCommitBatch includes HEAD when loading commits,0.45,GitStore,11,3.194
GitStore can discard changes from a repository,0.203,GitStore,11,3.194
GitStore can discard a renamed file,0.188,GitStore,11,3.194
GitStore undo first commit reports the repository is unborn,0.247,GitStore,11,3.194
GitStore undo first commit pre-fills the commit message,0.156,GitStore,11,3.194
GitStore undo first commit clears the undo commit dialog,0.273,GitStore,11,3.194
GitStore undo first commit has no staged files,0.271,GitStore,11,3.194
GitStore repository with HEAD file can discard modified change cleanly,0.144,GitStore,11,3.194
git/status getStatus with conflicted repo parses conflicted files with markers,0.381,git/status,12,2.613
git/status getStatus with conflicted repo parses conflicted files without markers,0.383,git/status,12,2.613
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.511,git/status,12,2.613
git/status getStatus with conflicted repo parses resolved files,0.394,git/status,12,2.613
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.163,git/status,12,2.613
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.2,git/status,12,2.613
git/status getStatus with unconflicted repo parses changed files,0.083,git/status,12,2.613
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.076,git/status,12,2.613
git/status getStatus with unconflicted repo reflects renames,0.139,git/status,12,2.613
git/status getStatus with unconflicted repo reflects copies,0.149,git/status,12,2.613
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.074,git/status,12,2.613
BranchPruner does nothing on non GitHub repositories,0.393,BranchPruner,6,2.538
BranchPruner prunes for GitHub repository,0.428,BranchPruner,6,2.538
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.349,BranchPruner,6,2.538
BranchPruner does not prune if there is no default branch,0.339,BranchPruner,6,2.538
BranchPruner does not prune reserved branches,0.412,BranchPruner,6,2.538
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.056,git/diff,19,2.334
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,2.334
git/diff getBlobImage retrieves valid image for modified file,0.061,git/diff,19,2.334
git/diff getBlobImage retrieves valid images for deleted file,0.085,git/diff,19,2.334
git/diff imageDiff changes for images are set,0.168,git/diff,19,2.334
git/diff imageDiff changes for text are not set,0.11,git/diff,19,2.334
git/diff getWorkingDirectoryDiff counts lines for new file,0.102,git/diff,19,2.334
git/diff getWorkingDirectoryDiff counts lines for modified file,0.104,git/diff,19,2.334
git/diff getWorkingDirectoryDiff counts lines for staged file,0.1,git/diff,19,2.334
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.142,git/diff,19,2.334
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.193,git/diff,19,2.334
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.198,git/diff,19,2.334
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.171,git/diff,19,2.334
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.155,git/diff,19,2.334
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.116,git/diff,19,2.334
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.082,git/diff,19,2.334
git/diff getBinaryPaths in repo with text only files returns an empty array,0.112,git/diff,19,2.334
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.123,git/diff,19,2.334
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.154,git/diff,19,2.334
git/branch tip returns unborn for new repository,0.044,git/branch,13,1.946
git/branch tip returns correct ref if checkout occurs,0.052,git/branch,13,1.946
git/branch tip returns detached for arbitrary checkout,0.074,git/branch,13,1.946
git/branch tip returns current branch when on a valid HEAD,0.11,git/branch,13,1.946
git/branch tip returns non-origin remote,0.108,git/branch,13,1.946
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.107,git/branch,13,1.946
git/branch getBranchesPointedAt in a local repo finds one branch name,0.071,git/branch,13,1.946
git/branch getBranchesPointedAt in a local repo finds no branch names,0.065,git/branch,13,1.946
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.063,git/branch,13,1.946
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.121,git/branch,13,1.946
git/branch deleteBranch deletes local branches,0.161,git/branch,13,1.946
git/branch deleteBranch deletes remote branches,0.42,git/branch,13,1.946
git/branch deleteBranch handles attempted delete of removed remote branch,0.485,git/branch,13,1.946
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.141,git/stash,14,1.718
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.176,git/stash,14,1.718
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.12,git/stash,14,1.718
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.491,formatPatch,5,1.302
git/reflog getRecentBranches returns the recently checked out branches,0.189,git/reflog,6,1.371
git/reflog getRecentBranches works after renaming a branch,0.243,git/reflog,6,1.371
git/reflog getRecentBranches returns a limited number of branches,0.35,git/reflog,6,1.371
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.203,git/reflog,6,1.371
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.253,git/reflog,6,1.371
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.088,git/reflog,6,1.371
git/checkout can checkout a valid branch name in an existing repository,0.159,git/checkout,6,1.292
git/checkout can checkout a branch when it exists on multiple remotes,0.177,git/checkout,6,1.292
git/checkout will fail when an existing branch matches the remote branch,0.167,git/checkout,6,1.292
git/checkout with submodules cleans up an submodule that no longer exists,0.385,git/checkout,6,1.292
git/checkout with submodules updates a changed submodule reference,0.311,git/checkout,6,1.292
git/config config looks up config values,0.066,git/config,12,1.103
git/config config returns null for undefined values,0.069,git/config,12,1.103
git/config global config getGlobalConfigPath gets the config path,0.099,git/config,12,1.103
git/config global config setGlobalConfigValue will replace all entries for a global value,0.121,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.093,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.085,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.09,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.086,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.083,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.09,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.093,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.08,git/config,12,1.103
git/rev-parse isGitRepository should return true for a repository,0.071,git/rev-parse,10,1.003
git/rev-parse isGitRepository should return false for a directory,0.063,git/rev-parse,10,1.003
git/rev-parse isBareRepository returns false for default initialized repository,0.086,git/rev-parse,10,1.003
git/rev-parse isBareRepository returns true for initialized bare repository,0.093,git/rev-parse,10,1.003
git/rev-parse isBareRepository returns false for empty directory,0.075,git/rev-parse,10,1.003
git/rev-parse isBareRepository throws error for missing directory,0.069,git/rev-parse,10,1.003
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.084,git/rev-parse,10,1.003
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.08,git/rev-parse,10,1.003
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.073,git/rev-parse,10,1.003
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.257,git/rev-parse,10,1.003
gitignore readGitIgnoreAtRoot reads contents from disk,0.022,gitignore,9,0.888
gitignore saveGitIgnore applies rule correctly to repository,0.134,gitignore,9,0.888
gitignore appendIgnoreRule appends one rule,0.163,gitignore,9,0.888
gitignore appendIgnoreRule appends multiple rules,0.154,gitignore,9,0.888
git/remote getRemotes should return both remotes,0.058,git/remote,11,0.719
git/remote findDefaultRemote returns origin when multiple remotes found,0.083,git/remote,11,0.719
git/remote findDefaultRemote returns something when origin removed,0.09,git/remote,11,0.719
git/log getCommits loads history,0.086,git/log,7,0.8
git/log getCommits handles repository with HEAD file on disk,0.126,git/log,7,0.8
git/log getCommits handles repository with signed commit and log.showSignature set,0.14,git/log,7,0.8
git/log getChangedFiles loads the files changed in the commit,0.073,git/log,7,0.8
git/log getChangedFiles detects renames,0.122,git/log,7,0.8
git/log getChangedFiles detect copies,0.131,git/log,7,0.8
git/log getChangedFiles handles commit when HEAD exists on disk,0.075,git/log,7,0.8
git/submodule listSubmodules returns the submodule entry,0.156,git/submodule,3,0.891
git/submodule listSubmodules returns the expected tag,0.244,git/submodule,3,0.891
git/submodule resetSubmodulePaths update submodule to original commit,0.442,git/submodule,3,0.891
git/merge merge and is successful returns true,0.052,git/merge,7,0.792
git/merge merge and is a noop returns false,0.076,git/merge,7,0.792
git/merge getMergeBase returns the common ancestor of two branches,0.105,git/merge,7,0.792
git/for-each-ref getBranches fetches branches using for-each-ref,0.092,git/for-each-ref,3,0.3
git/for-each-ref getBranches should return empty list for empty repo,0.084,git/for-each-ref,3,0.3
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.079,git/for-each-ref,3,0.3
git-lfs isUsingLFS returns false for repository not using LFS,0.075,git-lfs,9,0.74
git-lfs isUsingLFS returns true if LFS is tracking a path,0.11,git-lfs,9,0.74
Update remote url updates the repository's remote url when the github url changes,0.249,Update remote url,4,0.63
Update remote url doesn't update the repository's remote url when the github url is the same,0.116,Update remote url,4,0.63
Update remote url doesn't update repository's remote url if protocols don't match,0.106,Update remote url,4,0.63
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.104,Update remote url,4,0.63
git/core error handling does not throw for errors that were expected,0.073,git/core,6,0.46
git/core error handling throws for errors that were not expected,0.069,git/core,6,0.46
git/core exit code handling does not throw for exit codes that were expected,0.072,git/core,6,0.46
git/core exit code handling throws for exit codes that were not expected,0.07,git/core,6,0.46
git/core config lock file error handling can parse lock file path from stderr,0.077,git/core,6,0.46
git/core config lock file error handling normalizes paths,0.052,git/core,6,0.46
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.069,patch formatting,8,0.456
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.066,patch formatting,8,0.456
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.068,patch formatting,8,0.456
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.065,patch formatting,8,0.456
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.041,patch formatting,8,0.456
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.456
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.456
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.033,patch formatting,8,0.456
AppStore can select a repository,0.258,AppStore,5,0.32
validatedRepositoryPath returns the path to the repository,0.348,validatedRepositoryPath,2,0.419
git/reset reset can hard reset a repository,0.108,git/reset,2,0.154
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.073
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.443,git/rebase,21,10.655
git/rebase detect conflicts status detects REBASE_HEAD,0.386,git/rebase,21,10.655
git/rebase detect conflicts has conflicted files in working directory,0.399,git/rebase,21,10.655
git/rebase detect conflicts is a detached HEAD state,0.399,git/rebase,21,10.655
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.373,git/rebase,21,10.655
git/rebase abort after conflicts found no longer has working directory changes,0.39,git/rebase,21,10.655
git/rebase abort after conflicts found returns to the feature branch,0.386,git/rebase,21,10.655
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.47,git/rebase,21,10.655
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.475,git/rebase,21,10.655
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.47,git/rebase,21,10.655
git/rebase continue after resolving conflicts returns success,0.522,git/rebase,21,10.655
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.533,git/rebase,21,10.655
git/rebase continue after resolving conflicts no longer has working directory changes,0.541,git/rebase,21,10.655
git/rebase continue after resolving conflicts returns to the feature branch,0.562,git/rebase,21,10.655
git/rebase continue after resolving conflicts branch is now a different ref,0.55,git/rebase,21,10.655
git/rebase continue with additional changes unrelated to conflicted files returns success,0.525,git/rebase,21,10.655
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.524,git/rebase,21,10.655
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.529,git/rebase,21,10.655
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.549,git/rebase,21,10.655
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.549,git/rebase,21,10.655
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.505,git/rebase,21,10.655
git/commit createCommit normal commits the given files,0.152,git/commit,21,5.984
git/commit createCommit normal commit does not strip commentary by default,0.14,git/commit,21,5.984
git/commit createCommit normal can commit for empty repository,0.17,git/commit,21,5.984
git/commit createCommit normal can commit renames,0.197,git/commit,21,5.984
git/commit createCommit partials can commit some lines from new file,0.238,git/commit,21,5.984
git/commit createCommit partials can commit second hunk from modified file,0.258,git/commit,21,5.984
git/commit createCommit partials can commit single delete from modified file,0.22,git/commit,21,5.984
git/commit createCommit partials can commit multiple hunks from modified file,0.263,git/commit,21,5.984
git/commit createCommit partials can commit some lines from deleted file,0.237,git/commit,21,5.984
git/commit createCommit partials can commit renames with modifications,0.252,git/commit,21,5.984
git/commit createCommit partials can commit renames with partially selected modifications,0.317,git/commit,21,5.984
git/commit createCommit with a merge conflict creates a merge commit,0.352,git/commit,21,5.984
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.321,git/commit,21,5.984
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.449,git/commit,21,5.984
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.432,git/commit,21,5.984
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.542,git/commit,21,5.984
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.548,git/commit,21,5.984
git/commit createMergeCommit with no changes throws an error,0.145,git/commit,21,5.984
git/commit index corner cases can commit when staged new file is then deleted,0.196,git/commit,21,5.984
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.241,git/commit,21,5.984
git/commit index corner cases file is deleted in index,0.246,git/commit,21,5.984
git/rebase can parse progress returns a value indicating conflicts were encountered,0.537,git/rebase,7,4.954
git/rebase can parse progress status detects REBASE_HEAD,0.546,git/rebase,7,4.954
git/rebase can parse progress is a detached HEAD state,0.535,git/rebase,7,4.954
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.083,git/rebase,7,4.954
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.086,git/rebase,7,4.954
git/rebase can parse progress for long rebase is a detached HEAD state,1.097,git/rebase,7,4.954
GitStore loadCommitBatch includes HEAD when loading commits,0.479,GitStore,11,3.207
GitStore can discard changes from a repository,0.215,GitStore,11,3.207
GitStore can discard a renamed file,0.191,GitStore,11,3.207
GitStore undo first commit reports the repository is unborn,0.241,GitStore,11,3.207
GitStore undo first commit pre-fills the commit message,0.155,GitStore,11,3.207
GitStore undo first commit clears the undo commit dialog,0.274,GitStore,11,3.207
GitStore undo first commit has no staged files,0.262,GitStore,11,3.207
GitStore repository with HEAD file can discard modified change cleanly,0.145,GitStore,11,3.207
git/status getStatus with conflicted repo parses conflicted files with markers,0.379,git/status,12,2.551
git/status getStatus with conflicted repo parses conflicted files without markers,0.38,git/status,12,2.551
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.509,git/status,12,2.551
git/status getStatus with conflicted repo parses resolved files,0.38,git/status,12,2.551
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.154,git/status,12,2.551
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.18,git/status,12,2.551
git/status getStatus with unconflicted repo parses changed files,0.082,git/status,12,2.551
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.068,git/status,12,2.551
git/status getStatus with unconflicted repo reflects renames,0.148,git/status,12,2.551
git/status getStatus with unconflicted repo reflects copies,0.132,git/status,12,2.551
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.069,git/status,12,2.551
BranchPruner does nothing on non GitHub repositories,0.383,BranchPruner,6,2.454
BranchPruner prunes for GitHub repository,0.429,BranchPruner,6,2.454
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.32,BranchPruner,6,2.454
BranchPruner does not prune if there is no default branch,0.323,BranchPruner,6,2.454
BranchPruner does not prune reserved branches,0.401,BranchPruner,6,2.454
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.052,git/diff,19,2.335
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,2.335
git/diff getBlobImage retrieves valid image for modified file,0.059,git/diff,19,2.335
git/diff getBlobImage retrieves valid images for deleted file,0.079,git/diff,19,2.335
git/diff imageDiff changes for images are set,0.095,git/diff,19,2.335
git/diff imageDiff changes for text are not set,0.113,git/diff,19,2.335
git/diff getWorkingDirectoryDiff counts lines for new file,0.111,git/diff,19,2.335
git/diff getWorkingDirectoryDiff counts lines for modified file,0.112,git/diff,19,2.335
git/diff getWorkingDirectoryDiff counts lines for staged file,0.103,git/diff,19,2.335
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.145,git/diff,19,2.335
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.197,git/diff,19,2.335
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.216,git/diff,19,2.335
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.169,git/diff,19,2.335
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.171,git/diff,19,2.335
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.118,git/diff,19,2.335
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.094,git/diff,19,2.335
git/diff getBinaryPaths in repo with text only files returns an empty array,0.113,git/diff,19,2.335
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.124,git/diff,19,2.335
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.167,git/diff,19,2.335
git/branch tip returns unborn for new repository,0.041,git/branch,13,1.978
git/branch tip returns correct ref if checkout occurs,0.069,git/branch,13,1.978
git/branch tip returns detached for arbitrary checkout,0.133,git/branch,13,1.978
git/branch tip returns current branch when on a valid HEAD,0.106,git/branch,13,1.978
git/branch tip returns non-origin remote,0.103,git/branch,13,1.978
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.102,git/branch,13,1.978
git/branch getBranchesPointedAt in a local repo finds one branch name,0.064,git/branch,13,1.978
git/branch getBranchesPointedAt in a local repo finds no branch names,0.063,git/branch,13,1.978
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.062,git/branch,13,1.978
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.111,git/branch,13,1.978
git/branch deleteBranch deletes local branches,0.162,git/branch,13,1.978
git/branch deleteBranch deletes remote branches,0.419,git/branch,13,1.978
git/branch deleteBranch handles attempted delete of removed remote branch,0.488,git/branch,13,1.978
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.139,git/stash,14,1.716
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.176,git/stash,14,1.716
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.122,git/stash,14,1.716
git/reflog getRecentBranches returns the recently checked out branches,0.178,git/reflog,6,1.308
git/reflog getRecentBranches works after renaming a branch,0.229,git/reflog,6,1.308
git/reflog getRecentBranches returns a limited number of branches,0.326,git/reflog,6,1.308
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.19,git/reflog,6,1.308
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.248,git/reflog,6,1.308
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.092,git/reflog,6,1.308
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.51,formatPatch,5,1.323
git/checkout can checkout a valid branch name in an existing repository,0.162,git/checkout,6,1.264
git/checkout can checkout a branch when it exists on multiple remotes,0.167,git/checkout,6,1.264
git/checkout will fail when an existing branch matches the remote branch,0.153,git/checkout,6,1.264
git/checkout with submodules cleans up an submodule that no longer exists,0.388,git/checkout,6,1.264
git/checkout with submodules updates a changed submodule reference,0.309,git/checkout,6,1.264
git/config config looks up config values,0.065,git/config,12,1.079
git/config config returns null for undefined values,0.064,git/config,12,1.079
git/config global config getGlobalConfigPath gets the config path,0.089,git/config,12,1.079
git/config global config setGlobalConfigValue will replace all entries for a global value,0.129,git/config,12,1.079
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.086,git/config,12,1.079
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.084,git/config,12,1.079
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.081,git/config,12,1.079
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.081,git/config,12,1.079
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.088,git/config,12,1.079
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.086,git/config,12,1.079
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.095,git/config,12,1.079
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.085,git/config,12,1.079
git/rev-parse isGitRepository should return true for a repository,0.065,git/rev-parse,10,0.955
git/rev-parse isGitRepository should return false for a directory,0.062,git/rev-parse,10,0.955
git/rev-parse isBareRepository returns false for default initialized repository,0.083,git/rev-parse,10,0.955
git/rev-parse isBareRepository returns true for initialized bare repository,0.09,git/rev-parse,10,0.955
git/rev-parse isBareRepository returns false for empty directory,0.073,git/rev-parse,10,0.955
git/rev-parse isBareRepository throws error for missing directory,0.067,git/rev-parse,10,0.955
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.076,git/rev-parse,10,0.955
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.066,git/rev-parse,10,0.955
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.074,git/rev-parse,10,0.955
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.251,git/rev-parse,10,0.955
git/submodule listSubmodules returns the submodule entry,0.159,git/submodule,3,0.865
git/submodule listSubmodules returns the expected tag,0.233,git/submodule,3,0.865
git/submodule resetSubmodulePaths update submodule to original commit,0.422,git/submodule,3,0.865
gitignore readGitIgnoreAtRoot reads contents from disk,0.021,gitignore,9,0.871
gitignore saveGitIgnore applies rule correctly to repository,0.133,gitignore,9,0.871
gitignore appendIgnoreRule appends one rule,0.152,gitignore,9,0.871
gitignore appendIgnoreRule appends multiple rules,0.155,gitignore,9,0.871
git/log getCommits loads history,0.169,git/log,7,0.882
git/log getCommits handles repository with HEAD file on disk,0.129,git/log,7,0.882
git/log getCommits handles repository with signed commit and log.showSignature set,0.146,git/log,7,0.882
git/log getChangedFiles loads the files changed in the commit,0.075,git/log,7,0.882
git/log getChangedFiles detects renames,0.117,git/log,7,0.882
git/log getChangedFiles detect copies,0.132,git/log,7,0.882
git/log getChangedFiles handles commit when HEAD exists on disk,0.065,git/log,7,0.882
git/merge merge and is successful returns true,0.05,git/merge,7,0.739
git/merge merge and is a noop returns false,0.075,git/merge,7,0.739
git/merge getMergeBase returns the common ancestor of two branches,0.089,git/merge,7,0.739
git-lfs isUsingLFS returns false for repository not using LFS,0.074,git-lfs,9,0.675
git-lfs isUsingLFS returns true if LFS is tracking a path,0.102,git-lfs,9,0.675
git/remote getRemotes should return both remotes,0.07,git/remote,11,0.706
git/remote findDefaultRemote returns origin when multiple remotes found,0.075,git/remote,11,0.706
git/remote findDefaultRemote returns something when origin removed,0.081,git/remote,11,0.706
Update remote url updates the repository's remote url when the github url changes,0.129,Update remote url,4,0.487
Update remote url doesn't update the repository's remote url when the github url is the same,0.096,Update remote url,4,0.487
Update remote url doesn't update repository's remote url if protocols don't match,0.107,Update remote url,4,0.487
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.099,Update remote url,4,0.487
git/core error handling does not throw for errors that were expected,0.067,git/core,6,0.421
git/core error handling throws for errors that were not expected,0.065,git/core,6,0.421
git/core exit code handling does not throw for exit codes that were expected,0.068,git/core,6,0.421
git/core exit code handling throws for exit codes that were not expected,0.062,git/core,6,0.421
git/core config lock file error handling can parse lock file path from stderr,0.064,git/core,6,0.421
git/core config lock file error handling normalizes paths,0.05,git/core,6,0.421
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.067,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.062,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.059,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.066,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.041,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.031,patch formatting,8,0.435
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.114
AppStore can select a repository,0.226,AppStore,5,0.292
git/for-each-ref getBranches fetches branches using for-each-ref,0.379,git/for-each-ref,3,0.615
git/for-each-ref getBranches should return empty list for empty repo,0.089,git/for-each-ref,3,0.615
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.101,git/for-each-ref,3,0.615
git/reset reset can hard reset a repository,0.099,git/reset,2,0.147
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.028,git/git-attributes,1,0.076
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.419,git/rebase,21,10.521
git/rebase detect conflicts status detects REBASE_HEAD,0.377,git/rebase,21,10.521
git/rebase detect conflicts has conflicted files in working directory,0.393,git/rebase,21,10.521
git/rebase detect conflicts is a detached HEAD state,0.379,git/rebase,21,10.521
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.387,git/rebase,21,10.521
git/rebase abort after conflicts found no longer has working directory changes,0.385,git/rebase,21,10.521
git/rebase abort after conflicts found returns to the feature branch,0.373,git/rebase,21,10.521
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.483,git/rebase,21,10.521
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.473,git/rebase,21,10.521
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.45,git/rebase,21,10.521
git/rebase continue after resolving conflicts returns success,0.5,git/rebase,21,10.521
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.515,git/rebase,21,10.521
git/rebase continue after resolving conflicts no longer has working directory changes,0.529,git/rebase,21,10.521
git/rebase continue after resolving conflicts returns to the feature branch,0.517,git/rebase,21,10.521
git/rebase continue after resolving conflicts branch is now a different ref,0.538,git/rebase,21,10.521
git/rebase continue with additional changes unrelated to conflicted files returns success,0.536,git/rebase,21,10.521
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.54,git/rebase,21,10.521
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.555,git/rebase,21,10.521
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.539,git/rebase,21,10.521
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.559,git/rebase,21,10.521
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.52,git/rebase,21,10.521
git/commit createCommit normal commits the given files,0.167,git/commit,21,6.088
git/commit createCommit normal commit does not strip commentary by default,0.15,git/commit,21,6.088
git/commit createCommit normal can commit for empty repository,0.183,git/commit,21,6.088
git/commit createCommit normal can commit renames,0.209,git/commit,21,6.088
git/commit createCommit partials can commit some lines from new file,0.243,git/commit,21,6.088
git/commit createCommit partials can commit second hunk from modified file,0.276,git/commit,21,6.088
git/commit createCommit partials can commit single delete from modified file,0.228,git/commit,21,6.088
git/commit createCommit partials can commit multiple hunks from modified file,0.258,git/commit,21,6.088
git/commit createCommit partials can commit some lines from deleted file,0.244,git/commit,21,6.088
git/commit createCommit partials can commit renames with modifications,0.255,git/commit,21,6.088
git/commit createCommit partials can commit renames with partially selected modifications,0.31,git/commit,21,6.088
git/commit createCommit with a merge conflict creates a merge commit,0.352,git/commit,21,6.088
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.332,git/commit,21,6.088
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.459,git/commit,21,6.088
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.449,git/commit,21,6.088
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.548,git/commit,21,6.088
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.551,git/commit,21,6.088
git/commit createMergeCommit with no changes throws an error,0.136,git/commit,21,6.088
git/commit index corner cases can commit when staged new file is then deleted,0.196,git/commit,21,6.088
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.231,git/commit,21,6.088
git/commit index corner cases file is deleted in index,0.24,git/commit,21,6.088
git/rebase can parse progress returns a value indicating conflicts were encountered,0.525,git/rebase,7,5.062
git/rebase can parse progress status detects REBASE_HEAD,0.565,git/rebase,7,5.062
git/rebase can parse progress is a detached HEAD state,0.545,git/rebase,7,5.062
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.121,git/rebase,7,5.062
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.118,git/rebase,7,5.062
git/rebase can parse progress for long rebase is a detached HEAD state,1.131,git/rebase,7,5.062
GitStore loadCommitBatch includes HEAD when loading commits,0.454,GitStore,11,3.269
GitStore can discard changes from a repository,0.214,GitStore,11,3.269
GitStore can discard a renamed file,0.194,GitStore,11,3.269
GitStore undo first commit reports the repository is unborn,0.242,GitStore,11,3.269
GitStore undo first commit pre-fills the commit message,0.168,GitStore,11,3.269
GitStore undo first commit clears the undo commit dialog,0.284,GitStore,11,3.269
GitStore undo first commit has no staged files,0.278,GitStore,11,3.269
GitStore repository with HEAD file can discard modified change cleanly,0.144,GitStore,11,3.269
git/status getStatus with conflicted repo parses conflicted files with markers,0.432,git/status,12,2.6
git/status getStatus with conflicted repo parses conflicted files without markers,0.381,git/status,12,2.6
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.506,git/status,12,2.6
git/status getStatus with conflicted repo parses resolved files,0.379,git/status,12,2.6
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.148,git/status,12,2.6
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.186,git/status,12,2.6
git/status getStatus with unconflicted repo parses changed files,0.089,git/status,12,2.6
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.072,git/status,12,2.6
git/status getStatus with unconflicted repo reflects renames,0.143,git/status,12,2.6
git/status getStatus with unconflicted repo reflects copies,0.142,git/status,12,2.6
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.069,git/status,12,2.6
BranchPruner does nothing on non GitHub repositories,0.332,BranchPruner,6,2.182
BranchPruner prunes for GitHub repository,0.379,BranchPruner,6,2.182
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.289,BranchPruner,6,2.182
BranchPruner does not prune if there is no default branch,0.3,BranchPruner,6,2.182
BranchPruner does not prune reserved branches,0.368,BranchPruner,6,2.182
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.053,git/diff,19,2.208
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.048,git/diff,19,2.208
git/diff getBlobImage retrieves valid image for modified file,0.058,git/diff,19,2.208
git/diff getBlobImage retrieves valid images for deleted file,0.075,git/diff,19,2.208
git/diff imageDiff changes for images are set,0.085,git/diff,19,2.208
git/diff imageDiff changes for text are not set,0.11,git/diff,19,2.208
git/diff getWorkingDirectoryDiff counts lines for new file,0.104,git/diff,19,2.208
git/diff getWorkingDirectoryDiff counts lines for modified file,0.109,git/diff,19,2.208
git/diff getWorkingDirectoryDiff counts lines for staged file,0.104,git/diff,19,2.208
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.145,git/diff,19,2.208
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.188,git/diff,19,2.208
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.189,git/diff,19,2.208
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.166,git/diff,19,2.208
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.154,git/diff,19,2.208
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.104,git/diff,19,2.208
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.086,git/diff,19,2.208
git/diff getBinaryPaths in repo with text only files returns an empty array,0.111,git/diff,19,2.208
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.119,git/diff,19,2.208
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.147,git/diff,19,2.208
git/branch tip returns unborn for new repository,0.037,git/branch,13,1.931
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,13,1.931
git/branch tip returns detached for arbitrary checkout,0.081,git/branch,13,1.931
git/branch tip returns current branch when on a valid HEAD,0.109,git/branch,13,1.931
git/branch tip returns non-origin remote,0.105,git/branch,13,1.931
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.105,git/branch,13,1.931
git/branch getBranchesPointedAt in a local repo finds one branch name,0.068,git/branch,13,1.931
git/branch getBranchesPointedAt in a local repo finds no branch names,0.065,git/branch,13,1.931
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.063,git/branch,13,1.931
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.11,git/branch,13,1.931
git/branch deleteBranch deletes local branches,0.166,git/branch,13,1.931
git/branch deleteBranch deletes remote branches,0.417,git/branch,13,1.931
git/branch deleteBranch handles attempted delete of removed remote branch,0.494,git/branch,13,1.931
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.143,git/stash,14,1.76
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.181,git/stash,14,1.76
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.127,git/stash,14,1.76
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.487,formatPatch,5,1.304
git/reflog getRecentBranches returns the recently checked out branches,0.188,git/reflog,6,1.409
git/reflog getRecentBranches works after renaming a branch,0.255,git/reflog,6,1.409
git/reflog getRecentBranches returns a limited number of branches,0.352,git/reflog,6,1.409
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.216,git/reflog,6,1.409
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.261,git/reflog,6,1.409
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.091,git/reflog,6,1.409
git/checkout can checkout a valid branch name in an existing repository,0.165,git/checkout,6,1.317
git/checkout can checkout a branch when it exists on multiple remotes,0.175,git/checkout,6,1.317
git/checkout will fail when an existing branch matches the remote branch,0.168,git/checkout,6,1.317
git/checkout with submodules cleans up an submodule that no longer exists,0.401,git/checkout,6,1.317
git/checkout with submodules updates a changed submodule reference,0.319,git/checkout,6,1.317
git/config config looks up config values,0.061,git/config,12,1.111
git/config config returns null for undefined values,0.071,git/config,12,1.111
git/config global config getGlobalConfigPath gets the config path,0.082,git/config,12,1.111
git/config global config setGlobalConfigValue will replace all entries for a global value,0.122,git/config,12,1.111
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.088,git/config,12,1.111
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.088,git/config,12,1.111
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.092,git/config,12,1.111
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.092,git/config,12,1.111
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.087,git/config,12,1.111
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.094,git/config,12,1.111
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.095,git/config,12,1.111
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.087,git/config,12,1.111
git/rev-parse isGitRepository should return true for a repository,0.062,git/rev-parse,10,1.065
git/rev-parse isGitRepository should return false for a directory,0.07,git/rev-parse,10,1.065
git/rev-parse isBareRepository returns false for default initialized repository,0.086,git/rev-parse,10,1.065
git/rev-parse isBareRepository returns true for initialized bare repository,0.088,git/rev-parse,10,1.065
git/rev-parse isBareRepository returns false for empty directory,0.067,git/rev-parse,10,1.065
git/rev-parse isBareRepository throws error for missing directory,0.066,git/rev-parse,10,1.065
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.085,git/rev-parse,10,1.065
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.153,git/rev-parse,10,1.065
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.074,git/rev-parse,10,1.065
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.264,git/rev-parse,10,1.065
git/log getCommits loads history,0.082,git/log,7,0.796
git/log getCommits handles repository with HEAD file on disk,0.121,git/log,7,0.796
git/log getCommits handles repository with signed commit and log.showSignature set,0.135,git/log,7,0.796
git/log getChangedFiles loads the files changed in the commit,0.077,git/log,7,0.796
git/log getChangedFiles detects renames,0.133,git/log,7,0.796
git/log getChangedFiles detect copies,0.13,git/log,7,0.796
git/log getChangedFiles handles commit when HEAD exists on disk,0.069,git/log,7,0.796
gitignore readGitIgnoreAtRoot reads contents from disk,0.025,gitignore,9,0.89
gitignore saveGitIgnore applies rule correctly to repository,0.13,gitignore,9,0.89
gitignore appendIgnoreRule appends one rule,0.151,gitignore,9,0.89
gitignore appendIgnoreRule appends multiple rules,0.164,gitignore,9,0.89
git/submodule listSubmodules returns the submodule entry,0.16,git/submodule,3,0.862
git/submodule listSubmodules returns the expected tag,0.236,git/submodule,3,0.862
git/submodule resetSubmodulePaths update submodule to original commit,0.423,git/submodule,3,0.862
git/merge merge and is successful returns true,0.054,git/merge,7,0.739
git/merge merge and is a noop returns false,0.074,git/merge,7,0.739
git/merge getMergeBase returns the common ancestor of two branches,0.091,git/merge,7,0.739
git/remote getRemotes should return both remotes,0.075,git/remote,11,0.692
git/remote findDefaultRemote returns origin when multiple remotes found,0.076,git/remote,11,0.692
git/remote findDefaultRemote returns something when origin removed,0.082,git/remote,11,0.692
git-lfs isUsingLFS returns false for repository not using LFS,0.068,git-lfs,9,0.649
git-lfs isUsingLFS returns true if LFS is tracking a path,0.091,git-lfs,9,0.649
git/for-each-ref getBranches fetches branches using for-each-ref,0.086,git/for-each-ref,3,0.284
git/for-each-ref getBranches should return empty list for empty repo,0.082,git/for-each-ref,3,0.284
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.073,git/for-each-ref,3,0.284
Update remote url updates the repository's remote url when the github url changes,0.127,Update remote url,4,0.492
Update remote url doesn't update the repository's remote url when the github url is the same,0.104,Update remote url,4,0.492
Update remote url doesn't update repository's remote url if protocols don't match,0.1,Update remote url,4,0.492
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.106,Update remote url,4,0.492
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.06,patch formatting,8,0.432
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.058,patch formatting,8,0.432
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.059,patch formatting,8,0.432
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.058,patch formatting,8,0.432
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.046,patch formatting,8,0.432
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.432
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.432
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.432
git/core error handling does not throw for errors that were expected,0.063,git/core,6,0.437
git/core error handling throws for errors that were not expected,0.07,git/core,6,0.437
git/core exit code handling does not throw for exit codes that were expected,0.067,git/core,6,0.437
git/core exit code handling throws for exit codes that were not expected,0.07,git/core,6,0.437
git/core config lock file error handling can parse lock file path from stderr,0.069,git/core,6,0.437
git/core config lock file error handling normalizes paths,0.058,git/core,6,0.437
AppStore can select a repository,0.246,AppStore,5,0.311
git/reset reset can hard reset a repository,0.481,git/reset,2,0.526
validatedRepositoryPath returns the path to the repository,0.07,validatedRepositoryPath,2,0.142
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.025,git/git-attributes,1,0.073
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.447,git/rebase,21,10.761
git/rebase detect conflicts status detects REBASE_HEAD,0.381,git/rebase,21,10.761
git/rebase detect conflicts has conflicted files in working directory,0.382,git/rebase,21,10.761
git/rebase detect conflicts is a detached HEAD state,0.385,git/rebase,21,10.761
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.371,git/rebase,21,10.761
git/rebase abort after conflicts found no longer has working directory changes,0.384,git/rebase,21,10.761
git/rebase abort after conflicts found returns to the feature branch,0.371,git/rebase,21,10.761
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.477,git/rebase,21,10.761
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.453,git/rebase,21,10.761
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.452,git/rebase,21,10.761
git/rebase continue after resolving conflicts returns success,0.552,git/rebase,21,10.761
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.549,git/rebase,21,10.761
git/rebase continue after resolving conflicts no longer has working directory changes,0.547,git/rebase,21,10.761
git/rebase continue after resolving conflicts returns to the feature branch,0.572,git/rebase,21,10.761
git/rebase continue after resolving conflicts branch is now a different ref,0.565,git/rebase,21,10.761
git/rebase continue with additional changes unrelated to conflicted files returns success,0.55,git/rebase,21,10.761
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.535,git/rebase,21,10.761
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.557,git/rebase,21,10.761
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.563,git/rebase,21,10.761
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.57,git/rebase,21,10.761
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.523,git/rebase,21,10.761
git/commit createCommit normal commits the given files,0.146,git/commit,21,5.977
git/commit createCommit normal commit does not strip commentary by default,0.136,git/commit,21,5.977
git/commit createCommit normal can commit for empty repository,0.167,git/commit,21,5.977
git/commit createCommit normal can commit renames,0.212,git/commit,21,5.977
git/commit createCommit partials can commit some lines from new file,0.244,git/commit,21,5.977
git/commit createCommit partials can commit second hunk from modified file,0.252,git/commit,21,5.977
git/commit createCommit partials can commit single delete from modified file,0.227,git/commit,21,5.977
git/commit createCommit partials can commit multiple hunks from modified file,0.253,git/commit,21,5.977
git/commit createCommit partials can commit some lines from deleted file,0.225,git/commit,21,5.977
git/commit createCommit partials can commit renames with modifications,0.242,git/commit,21,5.977
git/commit createCommit partials can commit renames with partially selected modifications,0.288,git/commit,21,5.977
git/commit createCommit with a merge conflict creates a merge commit,0.335,git/commit,21,5.977
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.329,git/commit,21,5.977
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.46,git/commit,21,5.977
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.46,git/commit,21,5.977
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.551,git/commit,21,5.977
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.559,git/commit,21,5.977
git/commit createMergeCommit with no changes throws an error,0.127,git/commit,21,5.977
git/commit index corner cases can commit when staged new file is then deleted,0.205,git/commit,21,5.977
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.238,git/commit,21,5.977
git/commit index corner cases file is deleted in index,0.254,git/commit,21,5.977
git/rebase can parse progress returns a value indicating conflicts were encountered,0.55,git/rebase,7,4.992
git/rebase can parse progress status detects REBASE_HEAD,0.545,git/rebase,7,4.992
git/rebase can parse progress is a detached HEAD state,0.542,git/rebase,7,4.992
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.099,git/rebase,7,4.992
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.099,git/rebase,7,4.992
git/rebase can parse progress for long rebase is a detached HEAD state,1.1,git/rebase,7,4.992
GitStore loadCommitBatch includes HEAD when loading commits,0.459,GitStore,11,3.278
GitStore can discard changes from a repository,0.211,GitStore,11,3.278
GitStore can discard a renamed file,0.185,GitStore,11,3.278
GitStore undo first commit reports the repository is unborn,0.242,GitStore,11,3.278
GitStore undo first commit pre-fills the commit message,0.162,GitStore,11,3.278
GitStore undo first commit clears the undo commit dialog,0.274,GitStore,11,3.278
GitStore undo first commit has no staged files,0.274,GitStore,11,3.278
GitStore repository with HEAD file can discard modified change cleanly,0.187,GitStore,11,3.278
git/status getStatus with conflicted repo parses conflicted files with markers,0.395,git/status,12,2.648
git/status getStatus with conflicted repo parses conflicted files without markers,0.4,git/status,12,2.648
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.52,git/status,12,2.648
git/status getStatus with conflicted repo parses resolved files,0.399,git/status,12,2.648
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.157,git/status,12,2.648
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.188,git/status,12,2.648
git/status getStatus with unconflicted repo parses changed files,0.08,git/status,12,2.648
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.089,git/status,12,2.648
git/status getStatus with unconflicted repo reflects renames,0.141,git/status,12,2.648
git/status getStatus with unconflicted repo reflects copies,0.148,git/status,12,2.648
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.076,git/status,12,2.648
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.109,git/diff,19,2.326
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.052,git/diff,19,2.326
git/diff getBlobImage retrieves valid image for modified file,0.062,git/diff,19,2.326
git/diff getBlobImage retrieves valid images for deleted file,0.094,git/diff,19,2.326
git/diff imageDiff changes for images are set,0.144,git/diff,19,2.326
git/diff imageDiff changes for text are not set,0.11,git/diff,19,2.326
git/diff getWorkingDirectoryDiff counts lines for new file,0.104,git/diff,19,2.326
git/diff getWorkingDirectoryDiff counts lines for modified file,0.108,git/diff,19,2.326
git/diff getWorkingDirectoryDiff counts lines for staged file,0.106,git/diff,19,2.326
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.141,git/diff,19,2.326
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.183,git/diff,19,2.326
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.19,git/diff,19,2.326
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.15,git/diff,19,2.326
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.148,git/diff,19,2.326
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.113,git/diff,19,2.326
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.084,git/diff,19,2.326
git/diff getBinaryPaths in repo with text only files returns an empty array,0.114,git/diff,19,2.326
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.123,git/diff,19,2.326
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.141,git/diff,19,2.326
BranchPruner does nothing on non GitHub repositories,0.29,BranchPruner,6,2.195
BranchPruner prunes for GitHub repository,0.396,BranchPruner,6,2.195
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.296,BranchPruner,6,2.195
BranchPruner does not prune if there is no default branch,0.301,BranchPruner,6,2.195
BranchPruner does not prune reserved branches,0.388,BranchPruner,6,2.195
git/branch tip returns unborn for new repository,0.033,git/branch,13,1.911
git/branch tip returns correct ref if checkout occurs,0.058,git/branch,13,1.911
git/branch tip returns detached for arbitrary checkout,0.076,git/branch,13,1.911
git/branch tip returns current branch when on a valid HEAD,0.155,git/branch,13,1.911
git/branch tip returns non-origin remote,0.107,git/branch,13,1.911
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.103,git/branch,13,1.911
git/branch getBranchesPointedAt in a local repo finds one branch name,0.065,git/branch,13,1.911
git/branch getBranchesPointedAt in a local repo finds no branch names,0.061,git/branch,13,1.911
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.061,git/branch,13,1.911
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.103,git/branch,13,1.911
git/branch deleteBranch deletes local branches,0.148,git/branch,13,1.911
git/branch deleteBranch deletes remote branches,0.4,git/branch,13,1.911
git/branch deleteBranch handles attempted delete of removed remote branch,0.482,git/branch,13,1.911
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.139,git/stash,14,1.679
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.176,git/stash,14,1.679
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.118,git/stash,14,1.679
git/reflog getRecentBranches returns the recently checked out branches,0.182,git/reflog,6,1.388
git/reflog getRecentBranches works after renaming a branch,0.319,git/reflog,6,1.388
git/reflog getRecentBranches returns a limited number of branches,0.318,git/reflog,6,1.388
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.196,git/reflog,6,1.388
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.241,git/reflog,6,1.388
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.083,git/reflog,6,1.388
git/checkout can checkout a valid branch name in an existing repository,0.152,git/checkout,6,1.233
git/checkout can checkout a branch when it exists on multiple remotes,0.167,git/checkout,6,1.233
git/checkout will fail when an existing branch matches the remote branch,0.152,git/checkout,6,1.233
git/checkout with submodules cleans up an submodule that no longer exists,0.376,git/checkout,6,1.233
git/checkout with submodules updates a changed submodule reference,0.298,git/checkout,6,1.233
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.532,formatPatch,5,1.354
git/config config looks up config values,0.064,git/config,12,1.136
git/config config returns null for undefined values,0.146,git/config,12,1.136
git/config global config getGlobalConfigPath gets the config path,0.075,git/config,12,1.136
git/config global config setGlobalConfigValue will replace all entries for a global value,0.119,git/config,12,1.136
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.096,git/config,12,1.136
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.085,git/config,12,1.136
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.085,git/config,12,1.136
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.082,git/config,12,1.136
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.084,git/config,12,1.136
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.085,git/config,12,1.136
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.084,git/config,12,1.136
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.086,git/config,12,1.136
git/rev-parse isGitRepository should return true for a repository,0.068,git/rev-parse,10,0.963
git/rev-parse isGitRepository should return false for a directory,0.064,git/rev-parse,10,0.963
git/rev-parse isBareRepository returns false for default initialized repository,0.076,git/rev-parse,10,0.963
git/rev-parse isBareRepository returns true for initialized bare repository,0.082,git/rev-parse,10,0.963
git/rev-parse isBareRepository returns false for empty directory,0.088,git/rev-parse,10,0.963
git/rev-parse isBareRepository throws error for missing directory,0.067,git/rev-parse,10,0.963
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.079,git/rev-parse,10,0.963
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.069,git/rev-parse,10,0.963
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.075,git/rev-parse,10,0.963
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.242,git/rev-parse,10,0.963
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.812
gitignore saveGitIgnore applies rule correctly to repository,0.118,gitignore,9,0.812
gitignore appendIgnoreRule appends one rule,0.14,gitignore,9,0.812
gitignore appendIgnoreRule appends multiple rules,0.138,gitignore,9,0.812
git/submodule listSubmodules returns the submodule entry,0.153,git/submodule,3,0.854
git/submodule listSubmodules returns the expected tag,0.231,git/submodule,3,0.854
git/submodule resetSubmodulePaths update submodule to original commit,0.423,git/submodule,3,0.854
git/log getCommits loads history,0.079,git/log,7,0.78
git/log getCommits handles repository with HEAD file on disk,0.12,git/log,7,0.78
git/log getCommits handles repository with signed commit and log.showSignature set,0.145,git/log,7,0.78
git/log getChangedFiles loads the files changed in the commit,0.071,git/log,7,0.78
git/log getChangedFiles detects renames,0.118,git/log,7,0.78
git/log getChangedFiles detect copies,0.133,git/log,7,0.78
git/log getChangedFiles handles commit when HEAD exists on disk,0.067,git/log,7,0.78
git/merge merge and is successful returns true,0.054,git/merge,7,0.737
git/merge merge and is a noop returns false,0.074,git/merge,7,0.737
git/merge getMergeBase returns the common ancestor of two branches,0.094,git/merge,7,0.737
git/remote getRemotes should return both remotes,0.07,git/remote,11,0.717
git/remote findDefaultRemote returns origin when multiple remotes found,0.08,git/remote,11,0.717
git/remote findDefaultRemote returns something when origin removed,0.085,git/remote,11,0.717
git-lfs isUsingLFS returns false for repository not using LFS,0.072,git-lfs,9,0.678
git-lfs isUsingLFS returns true if LFS is tracking a path,0.1,git-lfs,9,0.678
git/reset reset can hard reset a repository,0.096,git/reset,2,0.15
Update remote url updates the repository's remote url when the github url changes,0.137,Update remote url,4,0.51
Update remote url doesn't update the repository's remote url when the github url is the same,0.11,Update remote url,4,0.51
Update remote url doesn't update repository's remote url if protocols don't match,0.1,Update remote url,4,0.51
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.111,Update remote url,4,0.51
git/core error handling does not throw for errors that were expected,0.069,git/core,6,0.457
git/core error handling throws for errors that were not expected,0.067,git/core,6,0.457
git/core exit code handling does not throw for exit codes that were expected,0.074,git/core,6,0.457
git/core exit code handling throws for exit codes that were not expected,0.069,git/core,6,0.457
git/core config lock file error handling can parse lock file path from stderr,0.072,git/core,6,0.457
git/core config lock file error handling normalizes paths,0.06,git/core,6,0.457
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.059,patch formatting,8,0.448
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.061,patch formatting,8,0.448
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.064,patch formatting,8,0.448
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.064,patch formatting,8,0.448
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.047,patch formatting,8,0.448
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.448
patch formatting formatPatchesForModifiedFile includes empty context lines,0.037,patch formatting,8,0.448
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.036,patch formatting,8,0.448
AppStore can select a repository,0.243,AppStore,5,0.302
git/for-each-ref getBranches fetches branches using for-each-ref,0.386,git/for-each-ref,3,0.604
git/for-each-ref getBranches should return empty list for empty repo,0.098,git/for-each-ref,3,0.604
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.069,git/for-each-ref,3,0.604
validatedRepositoryPath returns the path to the repository,0.07,validatedRepositoryPath,2,0.139
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.077
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.402,git/rebase,21,10.599
git/rebase detect conflicts status detects REBASE_HEAD,0.428,git/rebase,21,10.599
git/rebase detect conflicts has conflicted files in working directory,0.369,git/rebase,21,10.599
git/rebase detect conflicts is a detached HEAD state,0.354,git/rebase,21,10.599
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.368,git/rebase,21,10.599
git/rebase abort after conflicts found no longer has working directory changes,0.369,git/rebase,21,10.599
git/rebase abort after conflicts found returns to the feature branch,0.377,git/rebase,21,10.599
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.452,git/rebase,21,10.599
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.47,git/rebase,21,10.599
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.483,git/rebase,21,10.599
git/rebase continue after resolving conflicts returns success,0.544,git/rebase,21,10.599
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.553,git/rebase,21,10.599
git/rebase continue after resolving conflicts no longer has working directory changes,0.556,git/rebase,21,10.599
git/rebase continue after resolving conflicts returns to the feature branch,0.566,git/rebase,21,10.599
git/rebase continue after resolving conflicts branch is now a different ref,0.561,git/rebase,21,10.599
git/rebase continue with additional changes unrelated to conflicted files returns success,0.536,git/rebase,21,10.599
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.525,git/rebase,21,10.599
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.54,git/rebase,21,10.599
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.52,git/rebase,21,10.599
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.547,git/rebase,21,10.599
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.512,git/rebase,21,10.599
git/commit createCommit normal commits the given files,0.151,git/commit,21,6.071
git/commit createCommit normal commit does not strip commentary by default,0.145,git/commit,21,6.071
git/commit createCommit normal can commit for empty repository,0.176,git/commit,21,6.071
git/commit createCommit normal can commit renames,0.197,git/commit,21,6.071
git/commit createCommit partials can commit some lines from new file,0.233,git/commit,21,6.071
git/commit createCommit partials can commit second hunk from modified file,0.244,git/commit,21,6.071
git/commit createCommit partials can commit single delete from modified file,0.228,git/commit,21,6.071
git/commit createCommit partials can commit multiple hunks from modified file,0.254,git/commit,21,6.071
git/commit createCommit partials can commit some lines from deleted file,0.242,git/commit,21,6.071
git/commit createCommit partials can commit renames with modifications,0.255,git/commit,21,6.071
git/commit createCommit partials can commit renames with partially selected modifications,0.317,git/commit,21,6.071
git/commit createCommit with a merge conflict creates a merge commit,0.36,git/commit,21,6.071
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.338,git/commit,21,6.071
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.469,git/commit,21,6.071
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.449,git/commit,21,6.071
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.548,git/commit,21,6.071
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.556,git/commit,21,6.071
git/commit createMergeCommit with no changes throws an error,0.136,git/commit,21,6.071
git/commit index corner cases can commit when staged new file is then deleted,0.206,git/commit,21,6.071
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.246,git/commit,21,6.071
git/commit index corner cases file is deleted in index,0.257,git/commit,21,6.071
git/rebase can parse progress returns a value indicating conflicts were encountered,0.537,git/rebase,7,5.015
git/rebase can parse progress status detects REBASE_HEAD,0.543,git/rebase,7,5.015
git/rebase can parse progress is a detached HEAD state,0.54,git/rebase,7,5.015
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.119,git/rebase,7,5.015
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.107,git/rebase,7,5.015
git/rebase can parse progress for long rebase is a detached HEAD state,1.109,git/rebase,7,5.015
GitStore loadCommitBatch includes HEAD when loading commits,0.467,GitStore,11,3.321
GitStore can discard changes from a repository,0.248,GitStore,11,3.321
GitStore can discard a renamed file,0.187,GitStore,11,3.321
GitStore undo first commit reports the repository is unborn,0.249,GitStore,11,3.321
GitStore undo first commit pre-fills the commit message,0.166,GitStore,11,3.321
GitStore undo first commit clears the undo commit dialog,0.284,GitStore,11,3.321
GitStore undo first commit has no staged files,0.277,GitStore,11,3.321
GitStore repository with HEAD file can discard modified change cleanly,0.138,GitStore,11,3.321
git/status getStatus with conflicted repo parses conflicted files with markers,0.395,git/status,12,2.694
git/status getStatus with conflicted repo parses conflicted files without markers,0.453,git/status,12,2.694
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.521,git/status,12,2.694
git/status getStatus with conflicted repo parses resolved files,0.386,git/status,12,2.694
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.16,git/status,12,2.694
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.196,git/status,12,2.694
git/status getStatus with unconflicted repo parses changed files,0.089,git/status,12,2.694
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.077,git/status,12,2.694
git/status getStatus with unconflicted repo reflects renames,0.147,git/status,12,2.694
git/status getStatus with unconflicted repo reflects copies,0.14,git/status,12,2.694
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.075,git/status,12,2.694
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.059,git/diff,19,2.268
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.048,git/diff,19,2.268
git/diff getBlobImage retrieves valid image for modified file,0.063,git/diff,19,2.268
git/diff getBlobImage retrieves valid images for deleted file,0.089,git/diff,19,2.268
git/diff imageDiff changes for images are set,0.144,git/diff,19,2.268
git/diff imageDiff changes for text are not set,0.105,git/diff,19,2.268
git/diff getWorkingDirectoryDiff counts lines for new file,0.111,git/diff,19,2.268
git/diff getWorkingDirectoryDiff counts lines for modified file,0.11,git/diff,19,2.268
git/diff getWorkingDirectoryDiff counts lines for staged file,0.107,git/diff,19,2.268
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.139,git/diff,19,2.268
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.181,git/diff,19,2.268
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.19,git/diff,19,2.268
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.151,git/diff,19,2.268
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.147,git/diff,19,2.268
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.105,git/diff,19,2.268
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.088,git/diff,19,2.268
git/diff getBinaryPaths in repo with text only files returns an empty array,0.113,git/diff,19,2.268
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.127,git/diff,19,2.268
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.145,git/diff,19,2.268
BranchPruner does nothing on non GitHub repositories,0.299,BranchPruner,6,2.19
BranchPruner prunes for GitHub repository,0.376,BranchPruner,6,2.19
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.302,BranchPruner,6,2.19
BranchPruner does not prune if there is no default branch,0.298,BranchPruner,6,2.19
BranchPruner does not prune reserved branches,0.382,BranchPruner,6,2.19
git/branch tip returns unborn for new repository,0.032,git/branch,13,1.889
git/branch tip returns correct ref if checkout occurs,0.058,git/branch,13,1.889
git/branch tip returns detached for arbitrary checkout,0.07,git/branch,13,1.889
git/branch tip returns current branch when on a valid HEAD,0.096,git/branch,13,1.889
git/branch tip returns non-origin remote,0.106,git/branch,13,1.889
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.106,git/branch,13,1.889
git/branch getBranchesPointedAt in a local repo finds one branch name,0.075,git/branch,13,1.889
git/branch getBranchesPointedAt in a local repo finds no branch names,0.065,git/branch,13,1.889
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.065,git/branch,13,1.889
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.106,git/branch,13,1.889
git/branch deleteBranch deletes local branches,0.158,git/branch,13,1.889
git/branch deleteBranch deletes remote branches,0.409,git/branch,13,1.889
git/branch deleteBranch handles attempted delete of removed remote branch,0.489,git/branch,13,1.889
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.137,git/stash,14,1.726
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.174,git/stash,14,1.726
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.127,git/stash,14,1.726
git/reflog getRecentBranches returns the recently checked out branches,0.197,git/reflog,6,1.358
git/reflog getRecentBranches works after renaming a branch,0.247,git/reflog,6,1.358
git/reflog getRecentBranches returns a limited number of branches,0.329,git/reflog,6,1.358
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.2,git/reflog,6,1.358
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.249,git/reflog,6,1.358
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.089,git/reflog,6,1.358
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.507,formatPatch,5,1.362
git/checkout can checkout a valid branch name in an existing repository,0.171,git/checkout,6,1.297
git/checkout can checkout a branch when it exists on multiple remotes,0.169,git/checkout,6,1.297
git/checkout will fail when an existing branch matches the remote branch,0.16,git/checkout,6,1.297
git/checkout with submodules cleans up an submodule that no longer exists,0.394,git/checkout,6,1.297
git/checkout with submodules updates a changed submodule reference,0.317,git/checkout,6,1.297
git/config config looks up config values,0.068,git/config,12,1.103
git/config config returns null for undefined values,0.063,git/config,12,1.103
git/config global config getGlobalConfigPath gets the config path,0.078,git/config,12,1.103
git/config global config setGlobalConfigValue will replace all entries for a global value,0.126,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.089,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.089,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.093,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.091,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.092,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.096,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.085,git/config,12,1.103
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.089,git/config,12,1.103
git/rev-parse isGitRepository should return true for a repository,0.064,git/rev-parse,10,0.973
git/rev-parse isGitRepository should return false for a directory,0.075,git/rev-parse,10,0.973
git/rev-parse isBareRepository returns false for default initialized repository,0.091,git/rev-parse,10,0.973
git/rev-parse isBareRepository returns true for initialized bare repository,0.087,git/rev-parse,10,0.973
git/rev-parse isBareRepository returns false for empty directory,0.074,git/rev-parse,10,0.973
git/rev-parse isBareRepository throws error for missing directory,0.068,git/rev-parse,10,0.973
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.083,git/rev-parse,10,0.973
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.063,git/rev-parse,10,0.973
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.07,git/rev-parse,10,0.973
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.248,git/rev-parse,10,0.973
git/submodule listSubmodules returns the submodule entry,0.161,git/submodule,3,0.871
git/submodule listSubmodules returns the expected tag,0.237,git/submodule,3,0.871
git/submodule resetSubmodulePaths update submodule to original commit,0.427,git/submodule,3,0.871
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.909
gitignore saveGitIgnore applies rule correctly to repository,0.129,gitignore,9,0.909
gitignore appendIgnoreRule appends one rule,0.161,gitignore,9,0.909
gitignore appendIgnoreRule appends multiple rules,0.164,gitignore,9,0.909
git/log getCommits loads history,0.078,git/log,7,0.791
git/log getCommits handles repository with HEAD file on disk,0.121,git/log,7,0.791
git/log getCommits handles repository with signed commit and log.showSignature set,0.154,git/log,7,0.791
git/log getChangedFiles loads the files changed in the commit,0.072,git/log,7,0.791
git/log getChangedFiles detects renames,0.122,git/log,7,0.791
git/log getChangedFiles detect copies,0.126,git/log,7,0.791
git/log getChangedFiles handles commit when HEAD exists on disk,0.072,git/log,7,0.791
git/merge merge and is successful returns true,0.055,git/merge,7,0.799
git/merge merge and is a noop returns false,0.08,git/merge,7,0.799
git/merge getMergeBase returns the common ancestor of two branches,0.102,git/merge,7,0.799
git/remote getRemotes should return both remotes,0.075,git/remote,11,0.793
git/remote findDefaultRemote returns origin when multiple remotes found,0.091,git/remote,11,0.793
git/remote findDefaultRemote returns something when origin removed,0.091,git/remote,11,0.793
git-lfs isUsingLFS returns false for repository not using LFS,0.069,git-lfs,9,0.736
git-lfs isUsingLFS returns true if LFS is tracking a path,0.109,git-lfs,9,0.736
git/for-each-ref getBranches fetches branches using for-each-ref,0.094,git/for-each-ref,3,0.313
git/for-each-ref getBranches should return empty list for empty repo,0.092,git/for-each-ref,3,0.313
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.078,git/for-each-ref,3,0.313
Update remote url updates the repository's remote url when the github url changes,0.145,Update remote url,4,0.532
Update remote url doesn't update the repository's remote url when the github url is the same,0.115,Update remote url,4,0.532
Update remote url doesn't update repository's remote url if protocols don't match,0.106,Update remote url,4,0.532
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.106,Update remote url,4,0.532
git/core error handling does not throw for errors that were expected,0.071,git/core,6,0.469
git/core error handling throws for errors that were not expected,0.073,git/core,6,0.469
git/core exit code handling does not throw for exit codes that were expected,0.075,git/core,6,0.469
git/core exit code handling throws for exit codes that were not expected,0.071,git/core,6,0.469
git/core config lock file error handling can parse lock file path from stderr,0.074,git/core,6,0.469
git/core config lock file error handling normalizes paths,0.054,git/core,6,0.469
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.058,patch formatting,8,0.472
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.073,patch formatting,8,0.472
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.066,patch formatting,8,0.472
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.07,patch formatting,8,0.472
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.05,patch formatting,8,0.472
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.041,patch formatting,8,0.472
patch formatting formatPatchesForModifiedFile includes empty context lines,0.032,patch formatting,8,0.472
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.038,patch formatting,8,0.472
AppStore can select a repository,0.269,AppStore,5,0.331
git/reset reset can hard reset a repository,0.427,git/reset,2,0.474
validatedRepositoryPath returns the path to the repository,0.075,validatedRepositoryPath,2,0.146
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.024,git/git-attributes,1,0.077
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.429,git/rebase,21,10.58
git/rebase detect conflicts status detects REBASE_HEAD,0.387,git/rebase,21,10.58
git/rebase detect conflicts has conflicted files in working directory,0.395,git/rebase,21,10.58
git/rebase detect conflicts is a detached HEAD state,0.394,git/rebase,21,10.58
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.381,git/rebase,21,10.58
git/rebase abort after conflicts found no longer has working directory changes,0.384,git/rebase,21,10.58
git/rebase abort after conflicts found returns to the feature branch,0.367,git/rebase,21,10.58
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.478,git/rebase,21,10.58
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.463,git/rebase,21,10.58
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.465,git/rebase,21,10.58
git/rebase continue after resolving conflicts returns success,0.532,git/rebase,21,10.58
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.536,git/rebase,21,10.58
git/rebase continue after resolving conflicts no longer has working directory changes,0.507,git/rebase,21,10.58
git/rebase continue after resolving conflicts returns to the feature branch,0.514,git/rebase,21,10.58
git/rebase continue after resolving conflicts branch is now a different ref,0.54,git/rebase,21,10.58
git/rebase continue with additional changes unrelated to conflicted files returns success,0.524,git/rebase,21,10.58
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.54,git/rebase,21,10.58
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.542,git/rebase,21,10.58
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.547,git/rebase,21,10.58
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.569,git/rebase,21,10.58
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.521,git/rebase,21,10.58
git/commit createCommit normal commits the given files,0.154,git/commit,21,5.962
git/commit createCommit normal commit does not strip commentary by default,0.129,git/commit,21,5.962
git/commit createCommit normal can commit for empty repository,0.171,git/commit,21,5.962
git/commit createCommit normal can commit renames,0.202,git/commit,21,5.962
git/commit createCommit partials can commit some lines from new file,0.235,git/commit,21,5.962
git/commit createCommit partials can commit second hunk from modified file,0.26,git/commit,21,5.962
git/commit createCommit partials can commit single delete from modified file,0.218,git/commit,21,5.962
git/commit createCommit partials can commit multiple hunks from modified file,0.26,git/commit,21,5.962
git/commit createCommit partials can commit some lines from deleted file,0.232,git/commit,21,5.962
git/commit createCommit partials can commit renames with modifications,0.249,git/commit,21,5.962
git/commit createCommit partials can commit renames with partially selected modifications,0.294,git/commit,21,5.962
git/commit createCommit with a merge conflict creates a merge commit,0.35,git/commit,21,5.962
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.319,git/commit,21,5.962
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.463,git/commit,21,5.962
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.439,git/commit,21,5.962
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.539,git/commit,21,5.962
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.557,git/commit,21,5.962
git/commit createMergeCommit with no changes throws an error,0.144,git/commit,21,5.962
git/commit index corner cases can commit when staged new file is then deleted,0.207,git/commit,21,5.962
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.231,git/commit,21,5.962
git/commit index corner cases file is deleted in index,0.242,git/commit,21,5.962
git/rebase can parse progress returns a value indicating conflicts were encountered,0.543,git/rebase,7,4.963
git/rebase can parse progress status detects REBASE_HEAD,0.557,git/rebase,7,4.963
git/rebase can parse progress is a detached HEAD state,0.531,git/rebase,7,4.963
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.093,git/rebase,7,4.963
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.076,git/rebase,7,4.963
git/rebase can parse progress for long rebase is a detached HEAD state,1.102,git/rebase,7,4.963
GitStore loadCommitBatch includes HEAD when loading commits,0.447,GitStore,11,3.278
GitStore can discard changes from a repository,0.229,GitStore,11,3.278
GitStore can discard a renamed file,0.196,GitStore,11,3.278
GitStore undo first commit reports the repository is unborn,0.249,GitStore,11,3.278
GitStore undo first commit pre-fills the commit message,0.174,GitStore,11,3.278
GitStore undo first commit clears the undo commit dialog,0.272,GitStore,11,3.278
GitStore undo first commit has no staged files,0.276,GitStore,11,3.278
GitStore repository with HEAD file can discard modified change cleanly,0.149,GitStore,11,3.278
git/status getStatus with conflicted repo parses conflicted files with markers,0.394,git/status,12,2.677
git/status getStatus with conflicted repo parses conflicted files without markers,0.404,git/status,12,2.677
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.518,git/status,12,2.677
git/status getStatus with conflicted repo parses resolved files,0.397,git/status,12,2.677
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.152,git/status,12,2.677
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.199,git/status,12,2.677
git/status getStatus with unconflicted repo parses changed files,0.08,git/status,12,2.677
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.077,git/status,12,2.677
git/status getStatus with unconflicted repo reflects renames,0.137,git/status,12,2.677
git/status getStatus with unconflicted repo reflects copies,0.168,git/status,12,2.677
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.081,git/status,12,2.677
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.108,git/diff,19,2.465
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.058,git/diff,19,2.465
git/diff getBlobImage retrieves valid image for modified file,0.057,git/diff,19,2.465
git/diff getBlobImage retrieves valid images for deleted file,0.09,git/diff,19,2.465
git/diff imageDiff changes for images are set,0.097,git/diff,19,2.465
git/diff imageDiff changes for text are not set,0.114,git/diff,19,2.465
git/diff getWorkingDirectoryDiff counts lines for new file,0.112,git/diff,19,2.465
git/diff getWorkingDirectoryDiff counts lines for modified file,0.119,git/diff,19,2.465
git/diff getWorkingDirectoryDiff counts lines for staged file,0.111,git/diff,19,2.465
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.153,git/diff,19,2.465
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.203,git/diff,19,2.465
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.21,git/diff,19,2.465
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.183,git/diff,19,2.465
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.18,git/diff,19,2.465
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.127,git/diff,19,2.465
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.088,git/diff,19,2.465
git/diff getBinaryPaths in repo with text only files returns an empty array,0.111,git/diff,19,2.465
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.132,git/diff,19,2.465
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.165,git/diff,19,2.465
BranchPruner does nothing on non GitHub repositories,0.351,BranchPruner,6,2.262
BranchPruner prunes for GitHub repository,0.369,BranchPruner,6,2.262
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.308,BranchPruner,6,2.262
BranchPruner does not prune if there is no default branch,0.302,BranchPruner,6,2.262
BranchPruner does not prune reserved branches,0.383,BranchPruner,6,2.262
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.838
git/branch tip returns correct ref if checkout occurs,0.056,git/branch,13,1.838
git/branch tip returns detached for arbitrary checkout,0.065,git/branch,13,1.838
git/branch tip returns current branch when on a valid HEAD,0.1,git/branch,13,1.838
git/branch tip returns non-origin remote,0.1,git/branch,13,1.838
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.118,git/branch,13,1.838
git/branch getBranchesPointedAt in a local repo finds one branch name,0.072,git/branch,13,1.838
git/branch getBranchesPointedAt in a local repo finds no branch names,0.061,git/branch,13,1.838
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.061,git/branch,13,1.838
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.098,git/branch,13,1.838
git/branch deleteBranch deletes local branches,0.151,git/branch,13,1.838
git/branch deleteBranch deletes remote branches,0.399,git/branch,13,1.838
git/branch deleteBranch handles attempted delete of removed remote branch,0.466,git/branch,13,1.838
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.14,git/stash,14,1.692
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.174,git/stash,14,1.692
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.123,git/stash,14,1.692
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.503,formatPatch,5,1.307
git/reflog getRecentBranches returns the recently checked out branches,0.187,git/reflog,6,1.356
git/reflog getRecentBranches works after renaming a branch,0.26,git/reflog,6,1.356
git/reflog getRecentBranches returns a limited number of branches,0.324,git/reflog,6,1.356
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.205,git/reflog,6,1.356
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.242,git/reflog,6,1.356
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.088,git/reflog,6,1.356
git/checkout can checkout a valid branch name in an existing repository,0.166,git/checkout,6,1.288
git/checkout can checkout a branch when it exists on multiple remotes,0.167,git/checkout,6,1.288
git/checkout will fail when an existing branch matches the remote branch,0.157,git/checkout,6,1.288
git/checkout with submodules cleans up an submodule that no longer exists,0.363,git/checkout,6,1.288
git/checkout with submodules updates a changed submodule reference,0.347,git/checkout,6,1.288
git/config config looks up config values,0.067,git/config,12,1.07
git/config config returns null for undefined values,0.064,git/config,12,1.07
git/config global config getGlobalConfigPath gets the config path,0.085,git/config,12,1.07
git/config global config setGlobalConfigValue will replace all entries for a global value,0.123,git/config,12,1.07
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.091,git/config,12,1.07
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.081,git/config,12,1.07
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.084,git/config,12,1.07
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.083,git/config,12,1.07
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.085,git/config,12,1.07
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.089,git/config,12,1.07
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.086,git/config,12,1.07
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.088,git/config,12,1.07
git/rev-parse isGitRepository should return true for a repository,0.066,git/rev-parse,10,0.995
git/rev-parse isGitRepository should return false for a directory,0.075,git/rev-parse,10,0.995
git/rev-parse isBareRepository returns false for default initialized repository,0.082,git/rev-parse,10,0.995
git/rev-parse isBareRepository returns true for initialized bare repository,0.085,git/rev-parse,10,0.995
git/rev-parse isBareRepository returns false for empty directory,0.078,git/rev-parse,10,0.995
git/rev-parse isBareRepository throws error for missing directory,0.075,git/rev-parse,10,0.995
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.083,git/rev-parse,10,0.995
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.069,git/rev-parse,10,0.995
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.08,git/rev-parse,10,0.995
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.253,git/rev-parse,10,0.995
gitignore readGitIgnoreAtRoot reads contents from disk,0.021,gitignore,9,0.86
gitignore saveGitIgnore applies rule correctly to repository,0.128,gitignore,9,0.86
gitignore appendIgnoreRule appends one rule,0.151,gitignore,9,0.86
gitignore appendIgnoreRule appends multiple rules,0.152,gitignore,9,0.86
git/submodule listSubmodules returns the submodule entry,0.235,git/submodule,3,0.944
git/submodule listSubmodules returns the expected tag,0.236,git/submodule,3,0.944
git/submodule resetSubmodulePaths update submodule to original commit,0.426,git/submodule,3,0.944
git/merge merge and is successful returns true,0.066,git/merge,7,0.758
git/merge merge and is a noop returns false,0.078,git/merge,7,0.758
git/merge getMergeBase returns the common ancestor of two branches,0.093,git/merge,7,0.758
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.717
git/remote findDefaultRemote returns origin when multiple remotes found,0.089,git/remote,11,0.717
git/remote findDefaultRemote returns something when origin removed,0.086,git/remote,11,0.717
git/log getCommits loads history,0.089,git/log,7,0.797
git/log getCommits handles repository with HEAD file on disk,0.121,git/log,7,0.797
git/log getCommits handles repository with signed commit and log.showSignature set,0.14,git/log,7,0.797
git/log getChangedFiles loads the files changed in the commit,0.071,git/log,7,0.797
git/log getChangedFiles detects renames,0.123,git/log,7,0.797
git/log getChangedFiles detect copies,0.129,git/log,7,0.797
git/log getChangedFiles handles commit when HEAD exists on disk,0.075,git/log,7,0.797
git-lfs isUsingLFS returns false for repository not using LFS,0.074,git-lfs,9,0.667
git-lfs isUsingLFS returns true if LFS is tracking a path,0.097,git-lfs,9,0.667
Update remote url updates the repository's remote url when the github url changes,0.131,Update remote url,4,0.492
Update remote url doesn't update the repository's remote url when the github url is the same,0.101,Update remote url,4,0.492
Update remote url doesn't update repository's remote url if protocols don't match,0.1,Update remote url,4,0.492
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.1,Update remote url,4,0.492
git/reset reset can hard reset a repository,0.095,git/reset,2,0.139
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.068,patch formatting,8,0.473
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.073,patch formatting,8,0.473
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.06,patch formatting,8,0.473
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.07,patch formatting,8,0.473
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.045,patch formatting,8,0.473
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.04,patch formatting,8,0.473
patch formatting formatPatchesForModifiedFile includes empty context lines,0.036,patch formatting,8,0.473
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.035,patch formatting,8,0.473
git/core error handling does not throw for errors that were expected,0.067,git/core,6,0.456
git/core error handling throws for errors that were not expected,0.071,git/core,6,0.456
git/core exit code handling does not throw for exit codes that were expected,0.069,git/core,6,0.456
git/core exit code handling throws for exit codes that were not expected,0.075,git/core,6,0.456
git/core config lock file error handling can parse lock file path from stderr,0.078,git/core,6,0.456
git/core config lock file error handling normalizes paths,0.055,git/core,6,0.456
AppStore can select a repository,0.308,AppStore,5,0.375
git/for-each-ref getBranches fetches branches using for-each-ref,0.371,git/for-each-ref,3,0.599
git/for-each-ref getBranches should return empty list for empty repo,0.097,git/for-each-ref,3,0.599
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.081,git/for-each-ref,3,0.599
validatedRepositoryPath returns the path to the repository,0.069,validatedRepositoryPath,2,0.136
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.02,git/git-attributes,1,0.066
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.427,git/rebase,21,10.657
git/rebase detect conflicts status detects REBASE_HEAD,0.369,git/rebase,21,10.657
git/rebase detect conflicts has conflicted files in working directory,0.383,git/rebase,21,10.657
git/rebase detect conflicts is a detached HEAD state,0.391,git/rebase,21,10.657
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.371,git/rebase,21,10.657
git/rebase abort after conflicts found no longer has working directory changes,0.387,git/rebase,21,10.657
git/rebase abort after conflicts found returns to the feature branch,0.373,git/rebase,21,10.657
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.483,git/rebase,21,10.657
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.472,git/rebase,21,10.657
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.464,git/rebase,21,10.657
git/rebase continue after resolving conflicts returns success,0.557,git/rebase,21,10.657
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.543,git/rebase,21,10.657
git/rebase continue after resolving conflicts no longer has working directory changes,0.532,git/rebase,21,10.657
git/rebase continue after resolving conflicts returns to the feature branch,0.545,git/rebase,21,10.657
git/rebase continue after resolving conflicts branch is now a different ref,0.566,git/rebase,21,10.657
git/rebase continue with additional changes unrelated to conflicted files returns success,0.543,git/rebase,21,10.657
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.546,git/rebase,21,10.657
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.556,git/rebase,21,10.657
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.541,git/rebase,21,10.657
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.545,git/rebase,21,10.657
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.497,git/rebase,21,10.657
git/commit createCommit normal commits the given files,0.155,git/commit,21,6.029
git/commit createCommit normal commit does not strip commentary by default,0.137,git/commit,21,6.029
git/commit createCommit normal can commit for empty repository,0.164,git/commit,21,6.029
git/commit createCommit normal can commit renames,0.195,git/commit,21,6.029
git/commit createCommit partials can commit some lines from new file,0.236,git/commit,21,6.029
git/commit createCommit partials can commit second hunk from modified file,0.246,git/commit,21,6.029
git/commit createCommit partials can commit single delete from modified file,0.221,git/commit,21,6.029
git/commit createCommit partials can commit multiple hunks from modified file,0.254,git/commit,21,6.029
git/commit createCommit partials can commit some lines from deleted file,0.237,git/commit,21,6.029
git/commit createCommit partials can commit renames with modifications,0.258,git/commit,21,6.029
git/commit createCommit partials can commit renames with partially selected modifications,0.306,git/commit,21,6.029
git/commit createCommit with a merge conflict creates a merge commit,0.362,git/commit,21,6.029
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.342,git/commit,21,6.029
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.447,git/commit,21,6.029
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.439,git/commit,21,6.029
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.558,git/commit,21,6.029
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.569,git/commit,21,6.029
git/commit createMergeCommit with no changes throws an error,0.14,git/commit,21,6.029
git/commit index corner cases can commit when staged new file is then deleted,0.208,git/commit,21,6.029
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.242,git/commit,21,6.029
git/commit index corner cases file is deleted in index,0.251,git/commit,21,6.029
git/rebase can parse progress returns a value indicating conflicts were encountered,0.533,git/rebase,7,5.041
git/rebase can parse progress status detects REBASE_HEAD,0.544,git/rebase,7,5.041
git/rebase can parse progress is a detached HEAD state,0.544,git/rebase,7,5.041
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.124,git/rebase,7,5.041
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.114,git/rebase,7,5.041
git/rebase can parse progress for long rebase is a detached HEAD state,1.123,git/rebase,7,5.041
GitStore loadCommitBatch includes HEAD when loading commits,0.442,GitStore,11,3.192
GitStore can discard changes from a repository,0.241,GitStore,11,3.192
GitStore can discard a renamed file,0.183,GitStore,11,3.192
GitStore undo first commit reports the repository is unborn,0.245,GitStore,11,3.192
GitStore undo first commit pre-fills the commit message,0.161,GitStore,11,3.192
GitStore undo first commit clears the undo commit dialog,0.275,GitStore,11,3.192
GitStore undo first commit has no staged files,0.271,GitStore,11,3.192
GitStore repository with HEAD file can discard modified change cleanly,0.134,GitStore,11,3.192
git/status getStatus with conflicted repo parses conflicted files with markers,0.381,git/status,12,2.579
git/status getStatus with conflicted repo parses conflicted files without markers,0.385,git/status,12,2.579
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.519,git/status,12,2.579
git/status getStatus with conflicted repo parses resolved files,0.381,git/status,12,2.579
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.158,git/status,12,2.579
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.192,git/status,12,2.579
git/status getStatus with unconflicted repo parses changed files,0.077,git/status,12,2.579
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.074,git/status,12,2.579
git/status getStatus with unconflicted repo reflects renames,0.142,git/status,12,2.579
git/status getStatus with unconflicted repo reflects copies,0.15,git/status,12,2.579
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.068,git/status,12,2.579
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.102,git/diff,19,2.404
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.051,git/diff,19,2.404
git/diff getBlobImage retrieves valid image for modified file,0.059,git/diff,19,2.404
git/diff getBlobImage retrieves valid images for deleted file,0.082,git/diff,19,2.404
git/diff imageDiff changes for images are set,0.098,git/diff,19,2.404
git/diff imageDiff changes for text are not set,0.105,git/diff,19,2.404
git/diff getWorkingDirectoryDiff counts lines for new file,0.113,git/diff,19,2.404
git/diff getWorkingDirectoryDiff counts lines for modified file,0.108,git/diff,19,2.404
git/diff getWorkingDirectoryDiff counts lines for staged file,0.108,git/diff,19,2.404
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.157,git/diff,19,2.404
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.208,git/diff,19,2.404
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.213,git/diff,19,2.404
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.176,git/diff,19,2.404
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.169,git/diff,19,2.404
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.121,git/diff,19,2.404
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.09,git/diff,19,2.404
git/diff getBinaryPaths in repo with text only files returns an empty array,0.123,git/diff,19,2.404
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.121,git/diff,19,2.404
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.151,git/diff,19,2.404
BranchPruner does nothing on non GitHub repositories,0.371,BranchPruner,6,2.287
BranchPruner prunes for GitHub repository,0.391,BranchPruner,6,2.287
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.308,BranchPruner,6,2.287
BranchPruner does not prune if there is no default branch,0.303,BranchPruner,6,2.287
BranchPruner does not prune reserved branches,0.382,BranchPruner,6,2.287
git/branch tip returns unborn for new repository,0.038,git/branch,13,1.849
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,13,1.849
git/branch tip returns detached for arbitrary checkout,0.076,git/branch,13,1.849
git/branch tip returns current branch when on a valid HEAD,0.093,git/branch,13,1.849
git/branch tip returns non-origin remote,0.1,git/branch,13,1.849
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.102,git/branch,13,1.849
git/branch getBranchesPointedAt in a local repo finds one branch name,0.068,git/branch,13,1.849
git/branch getBranchesPointedAt in a local repo finds no branch names,0.061,git/branch,13,1.849
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.059,git/branch,13,1.849
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.116,git/branch,13,1.849
git/branch deleteBranch deletes local branches,0.148,git/branch,13,1.849
git/branch deleteBranch deletes remote branches,0.402,git/branch,13,1.849
git/branch deleteBranch handles attempted delete of removed remote branch,0.468,git/branch,13,1.849
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.14,git/stash,14,1.754
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.177,git/stash,14,1.754
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.12,git/stash,14,1.754
git/reflog getRecentBranches returns the recently checked out branches,0.181,git/reflog,6,1.269
git/reflog getRecentBranches works after renaming a branch,0.229,git/reflog,6,1.269
git/reflog getRecentBranches returns a limited number of branches,0.311,git/reflog,6,1.269
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.18,git/reflog,6,1.269
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.228,git/reflog,6,1.269
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.086,git/reflog,6,1.269
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.503,formatPatch,5,1.294
git/checkout can checkout a valid branch name in an existing repository,0.157,git/checkout,6,1.326
git/checkout can checkout a branch when it exists on multiple remotes,0.242,git/checkout,6,1.326
git/checkout will fail when an existing branch matches the remote branch,0.149,git/checkout,6,1.326
git/checkout with submodules cleans up an submodule that no longer exists,0.377,git/checkout,6,1.326
git/checkout with submodules updates a changed submodule reference,0.317,git/checkout,6,1.326
git/config config looks up config values,0.061,git/config,12,1.033
git/config config returns null for undefined values,0.061,git/config,12,1.033
git/config global config getGlobalConfigPath gets the config path,0.071,git/config,12,1.033
git/config global config setGlobalConfigValue will replace all entries for a global value,0.109,git/config,12,1.033
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.086,git/config,12,1.033
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.086,git/config,12,1.033
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.084,git/config,12,1.033
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.087,git/config,12,1.033
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.09,git/config,12,1.033
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.082,git/config,12,1.033
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.081,git/config,12,1.033
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.085,git/config,12,1.033
git/rev-parse isGitRepository should return true for a repository,0.069,git/rev-parse,10,0.959
git/rev-parse isGitRepository should return false for a directory,0.06,git/rev-parse,10,0.959
git/rev-parse isBareRepository returns false for default initialized repository,0.082,git/rev-parse,10,0.959
git/rev-parse isBareRepository returns true for initialized bare repository,0.088,git/rev-parse,10,0.959
git/rev-parse isBareRepository returns false for empty directory,0.075,git/rev-parse,10,0.959
git/rev-parse isBareRepository throws error for missing directory,0.068,git/rev-parse,10,0.959
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.078,git/rev-parse,10,0.959
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.071,git/rev-parse,10,0.959
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.071,git/rev-parse,10,0.959
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.249,git/rev-parse,10,0.959
git/submodule listSubmodules returns the submodule entry,0.149,git/submodule,3,0.83
git/submodule listSubmodules returns the expected tag,0.228,git/submodule,3,0.83
git/submodule resetSubmodulePaths update submodule to original commit,0.404,git/submodule,3,0.83
gitignore readGitIgnoreAtRoot reads contents from disk,0.022,gitignore,9,0.822
gitignore saveGitIgnore applies rule correctly to repository,0.125,gitignore,9,0.822
gitignore appendIgnoreRule appends one rule,0.142,gitignore,9,0.822
gitignore appendIgnoreRule appends multiple rules,0.152,gitignore,9,0.822
git/log getCommits loads history,0.083,git/log,7,0.793
git/log getCommits handles repository with HEAD file on disk,0.123,git/log,7,0.793
git/log getCommits handles repository with signed commit and log.showSignature set,0.137,git/log,7,0.793
git/log getChangedFiles loads the files changed in the commit,0.078,git/log,7,0.793
git/log getChangedFiles detects renames,0.119,git/log,7,0.793
git/log getChangedFiles detect copies,0.138,git/log,7,0.793
git/log getChangedFiles handles commit when HEAD exists on disk,0.071,git/log,7,0.793
git/merge merge and is successful returns true,0.057,git/merge,7,0.736
git/merge merge and is a noop returns false,0.071,git/merge,7,0.736
git/merge getMergeBase returns the common ancestor of two branches,0.095,git/merge,7,0.736
git/remote getRemotes should return both remotes,0.079,git/remote,11,0.735
git/remote findDefaultRemote returns origin when multiple remotes found,0.083,git/remote,11,0.735
git/remote findDefaultRemote returns something when origin removed,0.086,git/remote,11,0.735
git-lfs isUsingLFS returns false for repository not using LFS,0.075,git-lfs,9,0.668
git-lfs isUsingLFS returns true if LFS is tracking a path,0.097,git-lfs,9,0.668
git/for-each-ref getBranches fetches branches using for-each-ref,0.083,git/for-each-ref,3,0.287
git/for-each-ref getBranches should return empty list for empty repo,0.087,git/for-each-ref,3,0.287
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.069,git/for-each-ref,3,0.287
Update remote url updates the repository's remote url when the github url changes,0.137,Update remote url,4,0.511
Update remote url doesn't update the repository's remote url when the github url is the same,0.107,Update remote url,4,0.511
Update remote url doesn't update repository's remote url if protocols don't match,0.109,Update remote url,4,0.511
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.103,Update remote url,4,0.511
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.058,patch formatting,8,0.444
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.061,patch formatting,8,0.444
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.057,patch formatting,8,0.444
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.063,patch formatting,8,0.444
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.044,patch formatting,8,0.444
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.04,patch formatting,8,0.444
patch formatting formatPatchesForModifiedFile includes empty context lines,0.039,patch formatting,8,0.444
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.036,patch formatting,8,0.444
git/core error handling does not throw for errors that were expected,0.071,git/core,6,0.455
git/core error handling throws for errors that were not expected,0.067,git/core,6,0.455
git/core exit code handling does not throw for exit codes that were expected,0.069,git/core,6,0.455
git/core exit code handling throws for exit codes that were not expected,0.072,git/core,6,0.455
git/core config lock file error handling can parse lock file path from stderr,0.074,git/core,6,0.455
git/core config lock file error handling normalizes paths,0.056,git/core,6,0.455
AppStore can select a repository,0.249,AppStore,5,0.307
git/reset reset can hard reset a repository,0.392,git/reset,2,0.441
validatedRepositoryPath returns the path to the repository,0.07,validatedRepositoryPath,2,0.134
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.071
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.434,git/rebase,21,10.509
git/rebase detect conflicts status detects REBASE_HEAD,0.37,git/rebase,21,10.509
git/rebase detect conflicts has conflicted files in working directory,0.372,git/rebase,21,10.509
git/rebase detect conflicts is a detached HEAD state,0.372,git/rebase,21,10.509
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.375,git/rebase,21,10.509
git/rebase abort after conflicts found no longer has working directory changes,0.377,git/rebase,21,10.509
git/rebase abort after conflicts found returns to the feature branch,0.37,git/rebase,21,10.509
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.425,git/rebase,21,10.509
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.436,git/rebase,21,10.509
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.436,git/rebase,21,10.509
git/rebase continue after resolving conflicts returns success,0.519,git/rebase,21,10.509
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.532,git/rebase,21,10.509
git/rebase continue after resolving conflicts no longer has working directory changes,0.53,git/rebase,21,10.509
git/rebase continue after resolving conflicts returns to the feature branch,0.549,git/rebase,21,10.509
git/rebase continue after resolving conflicts branch is now a different ref,0.572,git/rebase,21,10.509
git/rebase continue with additional changes unrelated to conflicted files returns success,0.541,git/rebase,21,10.509
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.557,git/rebase,21,10.509
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.561,git/rebase,21,10.509
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.543,git/rebase,21,10.509
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.543,git/rebase,21,10.509
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.516,git/rebase,21,10.509
git/commit createCommit normal commits the given files,0.155,git/commit,21,5.982
git/commit createCommit normal commit does not strip commentary by default,0.14,git/commit,21,5.982
git/commit createCommit normal can commit for empty repository,0.178,git/commit,21,5.982
git/commit createCommit normal can commit renames,0.205,git/commit,21,5.982
git/commit createCommit partials can commit some lines from new file,0.231,git/commit,21,5.982
git/commit createCommit partials can commit second hunk from modified file,0.253,git/commit,21,5.982
git/commit createCommit partials can commit single delete from modified file,0.231,git/commit,21,5.982
git/commit createCommit partials can commit multiple hunks from modified file,0.258,git/commit,21,5.982
git/commit createCommit partials can commit some lines from deleted file,0.247,git/commit,21,5.982
git/commit createCommit partials can commit renames with modifications,0.242,git/commit,21,5.982
git/commit createCommit partials can commit renames with partially selected modifications,0.306,git/commit,21,5.982
git/commit createCommit with a merge conflict creates a merge commit,0.358,git/commit,21,5.982
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.32,git/commit,21,5.982
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.461,git/commit,21,5.982
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.438,git/commit,21,5.982
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.561,git/commit,21,5.982
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.542,git/commit,21,5.982
git/commit createMergeCommit with no changes throws an error,0.151,git/commit,21,5.982
git/commit index corner cases can commit when staged new file is then deleted,0.201,git/commit,21,5.982
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.219,git/commit,21,5.982
git/commit index corner cases file is deleted in index,0.223,git/commit,21,5.982
git/rebase can parse progress returns a value indicating conflicts were encountered,0.517,git/rebase,7,4.936
git/rebase can parse progress status detects REBASE_HEAD,0.524,git/rebase,7,4.936
git/rebase can parse progress is a detached HEAD state,0.53,git/rebase,7,4.936
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.095,git/rebase,7,4.936
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.099,git/rebase,7,4.936
git/rebase can parse progress for long rebase is a detached HEAD state,1.114,git/rebase,7,4.936
GitStore loadCommitBatch includes HEAD when loading commits,0.465,GitStore,11,3.253
GitStore can discard changes from a repository,0.243,GitStore,11,3.253
GitStore can discard a renamed file,0.183,GitStore,11,3.253
GitStore undo first commit reports the repository is unborn,0.244,GitStore,11,3.253
GitStore undo first commit pre-fills the commit message,0.172,GitStore,11,3.253
GitStore undo first commit clears the undo commit dialog,0.272,GitStore,11,3.253
GitStore undo first commit has no staged files,0.264,GitStore,11,3.253
GitStore repository with HEAD file can discard modified change cleanly,0.142,GitStore,11,3.253
git/status getStatus with conflicted repo parses conflicted files with markers,0.43,git/status,12,2.604
git/status getStatus with conflicted repo parses conflicted files without markers,0.381,git/status,12,2.604
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.505,git/status,12,2.604
git/status getStatus with conflicted repo parses resolved files,0.376,git/status,12,2.604
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.151,git/status,12,2.604
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.192,git/status,12,2.604
git/status getStatus with unconflicted repo parses changed files,0.081,git/status,12,2.604
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.078,git/status,12,2.604
git/status getStatus with unconflicted repo reflects renames,0.132,git/status,12,2.604
git/status getStatus with unconflicted repo reflects copies,0.145,git/status,12,2.604
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.074,git/status,12,2.604
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.06,git/diff,19,2.253
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,2.253
git/diff getBlobImage retrieves valid image for modified file,0.069,git/diff,19,2.253
git/diff getBlobImage retrieves valid images for deleted file,0.133,git/diff,19,2.253
git/diff imageDiff changes for images are set,0.098,git/diff,19,2.253
git/diff imageDiff changes for text are not set,0.1,git/diff,19,2.253
git/diff getWorkingDirectoryDiff counts lines for new file,0.108,git/diff,19,2.253
git/diff getWorkingDirectoryDiff counts lines for modified file,0.117,git/diff,19,2.253
git/diff getWorkingDirectoryDiff counts lines for staged file,0.099,git/diff,19,2.253
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.144,git/diff,19,2.253
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.176,git/diff,19,2.253
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.184,git/diff,19,2.253
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.163,git/diff,19,2.253
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.159,git/diff,19,2.253
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.104,git/diff,19,2.253
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.079,git/diff,19,2.253
git/diff getBinaryPaths in repo with text only files returns an empty array,0.107,git/diff,19,2.253
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.118,git/diff,19,2.253
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.14,git/diff,19,2.253
BranchPruner does nothing on non GitHub repositories,0.289,BranchPruner,6,2.179
BranchPruner prunes for GitHub repository,0.364,BranchPruner,6,2.179
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.298,BranchPruner,6,2.179
BranchPruner does not prune if there is no default branch,0.311,BranchPruner,6,2.179
BranchPruner does not prune reserved branches,0.38,BranchPruner,6,2.179
git/branch tip returns unborn for new repository,0.034,git/branch,13,1.903
git/branch tip returns correct ref if checkout occurs,0.062,git/branch,13,1.903
git/branch tip returns detached for arbitrary checkout,0.082,git/branch,13,1.903
git/branch tip returns current branch when on a valid HEAD,0.092,git/branch,13,1.903
git/branch tip returns non-origin remote,0.101,git/branch,13,1.903
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.104,git/branch,13,1.903
git/branch getBranchesPointedAt in a local repo finds one branch name,0.066,git/branch,13,1.903
git/branch getBranchesPointedAt in a local repo finds no branch names,0.066,git/branch,13,1.903
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.065,git/branch,13,1.903
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.111,git/branch,13,1.903
git/branch deleteBranch deletes local branches,0.162,git/branch,13,1.903
git/branch deleteBranch deletes remote branches,0.413,git/branch,13,1.903
git/branch deleteBranch handles attempted delete of removed remote branch,0.486,git/branch,13,1.903
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.155,git/stash,14,1.799
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.175,git/stash,14,1.799
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.126,git/stash,14,1.799
git/checkout can checkout a valid branch name in an existing repository,0.146,git/checkout,6,1.19
git/checkout can checkout a branch when it exists on multiple remotes,0.149,git/checkout,6,1.19
git/checkout will fail when an existing branch matches the remote branch,0.169,git/checkout,6,1.19
git/checkout with submodules cleans up an submodule that no longer exists,0.362,git/checkout,6,1.19
git/checkout with submodules updates a changed submodule reference,0.283,git/checkout,6,1.19
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.475,formatPatch,5,1.271
git/reflog getRecentBranches returns the recently checked out branches,0.182,git/reflog,6,1.329
git/reflog getRecentBranches works after renaming a branch,0.245,git/reflog,6,1.329
git/reflog getRecentBranches returns a limited number of branches,0.33,git/reflog,6,1.329
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.194,git/reflog,6,1.329
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.246,git/reflog,6,1.329
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.087,git/reflog,6,1.329
git/config config looks up config values,0.061,git/config,12,0.952
git/config config returns null for undefined values,0.058,git/config,12,0.952
git/config global config getGlobalConfigPath gets the config path,0.081,git/config,12,0.952
git/config global config setGlobalConfigValue will replace all entries for a global value,0.105,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.08,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.076,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.073,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.073,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.077,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.075,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.072,git/config,12,0.952
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.075,git/config,12,0.952
git/rev-parse isGitRepository should return true for a repository,0.063,git/rev-parse,10,0.879
git/rev-parse isGitRepository should return false for a directory,0.059,git/rev-parse,10,0.879
git/rev-parse isBareRepository returns false for default initialized repository,0.078,git/rev-parse,10,0.879
git/rev-parse isBareRepository returns true for initialized bare repository,0.077,git/rev-parse,10,0.879
git/rev-parse isBareRepository returns false for empty directory,0.072,git/rev-parse,10,0.879
git/rev-parse isBareRepository throws error for missing directory,0.061,git/rev-parse,10,0.879
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.069,git/rev-parse,10,0.879
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.061,git/rev-parse,10,0.879
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.879
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.228,git/rev-parse,10,0.879
git/submodule listSubmodules returns the submodule entry,0.155,git/submodule,3,0.794
git/submodule listSubmodules returns the expected tag,0.22,git/submodule,3,0.794
git/submodule resetSubmodulePaths update submodule to original commit,0.38,git/submodule,3,0.794
gitignore readGitIgnoreAtRoot reads contents from disk,0.019,gitignore,9,0.846
gitignore saveGitIgnore applies rule correctly to repository,0.123,gitignore,9,0.846
gitignore appendIgnoreRule appends one rule,0.148,gitignore,9,0.846
gitignore appendIgnoreRule appends multiple rules,0.148,gitignore,9,0.846
git/log getCommits loads history,0.074,git/log,7,0.741
git/log getCommits handles repository with HEAD file on disk,0.117,git/log,7,0.741
git/log getCommits handles repository with signed commit and log.showSignature set,0.135,git/log,7,0.741
git/log getChangedFiles loads the files changed in the commit,0.065,git/log,7,0.741
git/log getChangedFiles detects renames,0.12,git/log,7,0.741
git/log getChangedFiles detect copies,0.118,git/log,7,0.741
git/log getChangedFiles handles commit when HEAD exists on disk,0.07,git/log,7,0.741
git/merge merge and is successful returns true,0.053,git/merge,7,0.729
git/merge merge and is a noop returns false,0.067,git/merge,7,0.729
git/merge getMergeBase returns the common ancestor of two branches,0.094,git/merge,7,0.729
git/remote getRemotes should return both remotes,0.062,git/remote,11,0.713
git/remote findDefaultRemote returns origin when multiple remotes found,0.072,git/remote,11,0.713
git/remote findDefaultRemote returns something when origin removed,0.091,git/remote,11,0.713
git-lfs isUsingLFS returns false for repository not using LFS,0.068,git-lfs,9,0.666
git-lfs isUsingLFS returns true if LFS is tracking a path,0.086,git-lfs,9,0.666
Update remote url updates the repository's remote url when the github url changes,0.128,Update remote url,4,0.478
Update remote url doesn't update the repository's remote url when the github url is the same,0.098,Update remote url,4,0.478
Update remote url doesn't update repository's remote url if protocols don't match,0.1,Update remote url,4,0.478
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.101,Update remote url,4,0.478
git/core error handling does not throw for errors that were expected,0.066,git/core,6,0.409
git/core error handling throws for errors that were not expected,0.07,git/core,6,0.409
git/core exit code handling does not throw for exit codes that were expected,0.065,git/core,6,0.409
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,6,0.409
git/core config lock file error handling can parse lock file path from stderr,0.062,git/core,6,0.409
git/core config lock file error handling normalizes paths,0.05,git/core,6,0.409
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.163,patch formatting,8,0.522
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.059,patch formatting,8,0.522
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.057,patch formatting,8,0.522
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.055,patch formatting,8,0.522
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.049,patch formatting,8,0.522
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.039,patch formatting,8,0.522
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.522
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.029,patch formatting,8,0.522
git/reset reset can hard reset a repository,0.091,git/reset,2,0.134
AppStore can select a repository,0.232,AppStore,5,0.291
git/for-each-ref getBranches fetches branches using for-each-ref,0.354,git/for-each-ref,3,0.553
git/for-each-ref getBranches should return empty list for empty repo,0.087,git/for-each-ref,3,0.553
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.072,git/for-each-ref,3,0.553
validatedRepositoryPath returns the path to the repository,0.064,validatedRepositoryPath,2,0.124
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.066
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.361,git/rebase,21,9.277
git/rebase detect conflicts status detects REBASE_HEAD,0.31,git/rebase,21,9.277
git/rebase detect conflicts has conflicted files in working directory,0.314,git/rebase,21,9.277
git/rebase detect conflicts is a detached HEAD state,0.33,git/rebase,21,9.277
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.306,git/rebase,21,9.277
git/rebase abort after conflicts found no longer has working directory changes,0.318,git/rebase,21,9.277
git/rebase abort after conflicts found returns to the feature branch,0.331,git/rebase,21,9.277
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.404,git/rebase,21,9.277
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.42,git/rebase,21,9.277
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.412,git/rebase,21,9.277
git/rebase continue after resolving conflicts returns success,0.456,git/rebase,21,9.277
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.46,git/rebase,21,9.277
git/rebase continue after resolving conflicts no longer has working directory changes,0.462,git/rebase,21,9.277
git/rebase continue after resolving conflicts returns to the feature branch,0.483,git/rebase,21,9.277
git/rebase continue after resolving conflicts branch is now a different ref,0.476,git/rebase,21,9.277
git/rebase continue with additional changes unrelated to conflicted files returns success,0.472,git/rebase,21,9.277
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.487,git/rebase,21,9.277
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.502,git/rebase,21,9.277
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.486,git/rebase,21,9.277
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.493,git/rebase,21,9.277
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.462,git/rebase,21,9.277
git/commit createCommit normal commits the given files,0.14,git/commit,21,5.298
git/commit createCommit normal commit does not strip commentary by default,0.125,git/commit,21,5.298
git/commit createCommit normal can commit for empty repository,0.154,git/commit,21,5.298
git/commit createCommit normal can commit renames,0.173,git/commit,21,5.298
git/commit createCommit partials can commit some lines from new file,0.195,git/commit,21,5.298
git/commit createCommit partials can commit second hunk from modified file,0.22,git/commit,21,5.298
git/commit createCommit partials can commit single delete from modified file,0.204,git/commit,21,5.298
git/commit createCommit partials can commit multiple hunks from modified file,0.236,git/commit,21,5.298
git/commit createCommit partials can commit some lines from deleted file,0.209,git/commit,21,5.298
git/commit createCommit partials can commit renames with modifications,0.209,git/commit,21,5.298
git/commit createCommit partials can commit renames with partially selected modifications,0.268,git/commit,21,5.298
git/commit createCommit with a merge conflict creates a merge commit,0.307,git/commit,21,5.298
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.28,git/commit,21,5.298
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.398,git/commit,21,5.298
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.397,git/commit,21,5.298
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.491,git/commit,21,5.298
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.485,git/commit,21,5.298
git/commit createMergeCommit with no changes throws an error,0.126,git/commit,21,5.298
git/commit index corner cases can commit when staged new file is then deleted,0.19,git/commit,21,5.298
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.215,git/commit,21,5.298
git/commit index corner cases file is deleted in index,0.214,git/commit,21,5.298
git/rebase can parse progress returns a value indicating conflicts were encountered,0.472,git/rebase,7,4.614
git/rebase can parse progress status detects REBASE_HEAD,0.498,git/rebase,7,4.614
git/rebase can parse progress is a detached HEAD state,0.494,git/rebase,7,4.614
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.021,git/rebase,7,4.614
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.033,git/rebase,7,4.614
git/rebase can parse progress for long rebase is a detached HEAD state,1.044,git/rebase,7,4.614
GitStore loadCommitBatch includes HEAD when loading commits,0.416,GitStore,11,2.943
GitStore can discard changes from a repository,0.185,GitStore,11,2.943
GitStore can discard a renamed file,0.171,GitStore,11,2.943
GitStore undo first commit reports the repository is unborn,0.215,GitStore,11,2.943
GitStore undo first commit pre-fills the commit message,0.143,GitStore,11,2.943
GitStore undo first commit clears the undo commit dialog,0.254,GitStore,11,2.943
GitStore undo first commit has no staged files,0.236,GitStore,11,2.943
GitStore repository with HEAD file can discard modified change cleanly,0.149,GitStore,11,2.943
git/status getStatus with conflicted repo parses conflicted files with markers,0.394,git/status,12,2.429
git/status getStatus with conflicted repo parses conflicted files without markers,0.355,git/status,12,2.429
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.473,git/status,12,2.429
git/status getStatus with conflicted repo parses resolved files,0.364,git/status,12,2.429
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.139,git/status,12,2.429
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.17,git/status,12,2.429
git/status getStatus with unconflicted repo parses changed files,0.076,git/status,12,2.429
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.069,git/status,12,2.429
git/status getStatus with unconflicted repo reflects renames,0.124,git/status,12,2.429
git/status getStatus with unconflicted repo reflects copies,0.127,git/status,12,2.429
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.07,git/status,12,2.429
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.053,git/diff,19,2.009
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,2.009
git/diff getBlobImage retrieves valid image for modified file,0.098,git/diff,19,2.009
git/diff getBlobImage retrieves valid images for deleted file,0.073,git/diff,19,2.009
git/diff imageDiff changes for images are set,0.083,git/diff,19,2.009
git/diff imageDiff changes for text are not set,0.091,git/diff,19,2.009
git/diff getWorkingDirectoryDiff counts lines for new file,0.099,git/diff,19,2.009
git/diff getWorkingDirectoryDiff counts lines for modified file,0.098,git/diff,19,2.009
git/diff getWorkingDirectoryDiff counts lines for staged file,0.09,git/diff,19,2.009
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.126,git/diff,19,2.009
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.166,git/diff,19,2.009
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.167,git/diff,19,2.009
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.136,git/diff,19,2.009
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.132,git/diff,19,2.009
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.096,git/diff,19,2.009
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.07,git/diff,19,2.009
git/diff getBinaryPaths in repo with text only files returns an empty array,0.101,git/diff,19,2.009
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.11,git/diff,19,2.009
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,2.009
BranchPruner does nothing on non GitHub repositories,0.26,BranchPruner,6,1.965
BranchPruner prunes for GitHub repository,0.343,BranchPruner,6,1.965
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.285,BranchPruner,6,1.965
BranchPruner does not prune if there is no default branch,0.268,BranchPruner,6,1.965
BranchPruner does not prune reserved branches,0.325,BranchPruner,6,1.965
git/branch tip returns unborn for new repository,0.031,git/branch,13,1.679
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,13,1.679
git/branch tip returns detached for arbitrary checkout,0.06,git/branch,13,1.679
git/branch tip returns current branch when on a valid HEAD,0.081,git/branch,13,1.679
git/branch tip returns non-origin remote,0.094,git/branch,13,1.679
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.099,git/branch,13,1.679
git/branch getBranchesPointedAt in a local repo finds one branch name,0.062,git/branch,13,1.679
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,13,1.679
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.06,git/branch,13,1.679
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.092,git/branch,13,1.679
git/branch deleteBranch deletes local branches,0.141,git/branch,13,1.679
git/branch deleteBranch deletes remote branches,0.369,git/branch,13,1.679
git/branch deleteBranch handles attempted delete of removed remote branch,0.434,git/branch,13,1.679
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.131,git/stash,14,1.635
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.175,git/stash,14,1.635
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.121,git/stash,14,1.635
git/reflog getRecentBranches returns the recently checked out branches,0.18,git/reflog,6,1.243
git/reflog getRecentBranches works after renaming a branch,0.226,git/reflog,6,1.243
git/reflog getRecentBranches returns a limited number of branches,0.308,git/reflog,6,1.243
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.181,git/reflog,6,1.243
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.223,git/reflog,6,1.243
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.082,git/reflog,6,1.243
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.445,formatPatch,5,1.252
git/checkout can checkout a valid branch name in an existing repository,0.154,git/checkout,6,1.206
git/checkout can checkout a branch when it exists on multiple remotes,0.162,git/checkout,6,1.206
git/checkout will fail when an existing branch matches the remote branch,0.142,git/checkout,6,1.206
git/checkout with submodules cleans up an submodule that no longer exists,0.382,git/checkout,6,1.206
git/checkout with submodules updates a changed submodule reference,0.286,git/checkout,6,1.206
git/config config looks up config values,0.053,git/config,12,0.94
git/config config returns null for undefined values,0.055,git/config,12,0.94
git/config global config getGlobalConfigPath gets the config path,0.069,git/config,12,0.94
git/config global config setGlobalConfigValue will replace all entries for a global value,0.098,git/config,12,0.94
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.075,git/config,12,0.94
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.074,git/config,12,0.94
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.072,git/config,12,0.94
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.075,git/config,12,0.94
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.08,git/config,12,0.94
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.083,git/config,12,0.94
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.076,git/config,12,0.94
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.085,git/config,12,0.94
git/rev-parse isGitRepository should return true for a repository,0.062,git/rev-parse,10,0.881
git/rev-parse isGitRepository should return false for a directory,0.056,git/rev-parse,10,0.881
git/rev-parse isBareRepository returns false for default initialized repository,0.072,git/rev-parse,10,0.881
git/rev-parse isBareRepository returns true for initialized bare repository,0.077,git/rev-parse,10,0.881
git/rev-parse isBareRepository returns false for empty directory,0.071,git/rev-parse,10,0.881
git/rev-parse isBareRepository throws error for missing directory,0.061,git/rev-parse,10,0.881
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.075,git/rev-parse,10,0.881
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.063,git/rev-parse,10,0.881
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.066,git/rev-parse,10,0.881
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.23,git/rev-parse,10,0.881
gitignore readGitIgnoreAtRoot reads contents from disk,0.018,gitignore,9,0.913
gitignore saveGitIgnore applies rule correctly to repository,0.121,gitignore,9,0.913
gitignore appendIgnoreRule appends one rule,0.143,gitignore,9,0.913
gitignore appendIgnoreRule appends multiple rules,0.152,gitignore,9,0.913
git/submodule listSubmodules returns the submodule entry,0.138,git/submodule,3,0.835
git/submodule listSubmodules returns the expected tag,0.211,git/submodule,3,0.835
git/submodule resetSubmodulePaths update submodule to original commit,0.444,git/submodule,3,0.835
git/log getCommits loads history,0.076,git/log,7,0.706
git/log getCommits handles repository with HEAD file on disk,0.109,git/log,7,0.706
git/log getCommits handles repository with signed commit and log.showSignature set,0.12,git/log,7,0.706
git/log getChangedFiles loads the files changed in the commit,0.064,git/log,7,0.706
git/log getChangedFiles detects renames,0.104,git/log,7,0.706
git/log getChangedFiles detect copies,0.126,git/log,7,0.706
git/log getChangedFiles handles commit when HEAD exists on disk,0.066,git/log,7,0.706
git/merge merge and is successful returns true,0.054,git/merge,7,0.693
git/merge merge and is a noop returns false,0.068,git/merge,7,0.693
git/merge getMergeBase returns the common ancestor of two branches,0.085,git/merge,7,0.693
git/remote getRemotes should return both remotes,0.065,git/remote,11,0.668
git/remote findDefaultRemote returns origin when multiple remotes found,0.075,git/remote,11,0.668
git/remote findDefaultRemote returns something when origin removed,0.077,git/remote,11,0.668
git-lfs isUsingLFS returns false for repository not using LFS,0.066,git-lfs,9,0.615
git-lfs isUsingLFS returns true if LFS is tracking a path,0.087,git-lfs,9,0.615
git/for-each-ref getBranches fetches branches using for-each-ref,0.08,git/for-each-ref,3,0.263
git/for-each-ref getBranches should return empty list for empty repo,0.08,git/for-each-ref,3,0.263
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.263
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.057,patch formatting,8,0.406
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.057,patch formatting,8,0.406
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.406
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.057,patch formatting,8,0.406
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.406
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.04,patch formatting,8,0.406
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.406
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.032,patch formatting,8,0.406
Update remote url updates the repository's remote url when the github url changes,0.131,Update remote url,4,0.469
Update remote url doesn't update the repository's remote url when the github url is the same,0.095,Update remote url,4,0.469
Update remote url doesn't update repository's remote url if protocols don't match,0.095,Update remote url,4,0.469
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.095,Update remote url,4,0.469
git/core error handling does not throw for errors that were expected,0.178,git/core,6,0.529
git/core error handling throws for errors that were not expected,0.065,git/core,6,0.529
git/core exit code handling does not throw for exit codes that were expected,0.065,git/core,6,0.529
git/core exit code handling throws for exit codes that were not expected,0.062,git/core,6,0.529
git/core config lock file error handling can parse lock file path from stderr,0.065,git/core,6,0.529
git/core config lock file error handling normalizes paths,0.05,git/core,6,0.529
AppStore can select a repository,0.22,AppStore,5,0.28
git/reset reset can hard reset a repository,0.335,git/reset,2,0.379
validatedRepositoryPath returns the path to the repository,0.059,validatedRepositoryPath,2,0.119
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.061
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.369,git/rebase,21,9.236
git/rebase detect conflicts status detects REBASE_HEAD,0.307,git/rebase,21,9.236
git/rebase detect conflicts has conflicted files in working directory,0.315,git/rebase,21,9.236
git/rebase detect conflicts is a detached HEAD state,0.323,git/rebase,21,9.236
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.315,git/rebase,21,9.236
git/rebase abort after conflicts found no longer has working directory changes,0.32,git/rebase,21,9.236
git/rebase abort after conflicts found returns to the feature branch,0.324,git/rebase,21,9.236
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.391,git/rebase,21,9.236
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.383,git/rebase,21,9.236
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.413,git/rebase,21,9.236
git/rebase continue after resolving conflicts returns success,0.461,git/rebase,21,9.236
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.482,git/rebase,21,9.236
git/rebase continue after resolving conflicts no longer has working directory changes,0.472,git/rebase,21,9.236
git/rebase continue after resolving conflicts returns to the feature branch,0.489,git/rebase,21,9.236
git/rebase continue after resolving conflicts branch is now a different ref,0.47,git/rebase,21,9.236
git/rebase continue with additional changes unrelated to conflicted files returns success,0.466,git/rebase,21,9.236
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.48,git/rebase,21,9.236
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.492,git/rebase,21,9.236
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.47,git/rebase,21,9.236
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.497,git/rebase,21,9.236
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.462,git/rebase,21,9.236
git/commit createCommit normal commits the given files,0.139,git/commit,21,5.208
git/commit createCommit normal commit does not strip commentary by default,0.125,git/commit,21,5.208
git/commit createCommit normal can commit for empty repository,0.164,git/commit,21,5.208
git/commit createCommit normal can commit renames,0.185,git/commit,21,5.208
git/commit createCommit partials can commit some lines from new file,0.2,git/commit,21,5.208
git/commit createCommit partials can commit second hunk from modified file,0.216,git/commit,21,5.208
git/commit createCommit partials can commit single delete from modified file,0.198,git/commit,21,5.208
git/commit createCommit partials can commit multiple hunks from modified file,0.229,git/commit,21,5.208
git/commit createCommit partials can commit some lines from deleted file,0.207,git/commit,21,5.208
git/commit createCommit partials can commit renames with modifications,0.209,git/commit,21,5.208
git/commit createCommit partials can commit renames with partially selected modifications,0.265,git/commit,21,5.208
git/commit createCommit with a merge conflict creates a merge commit,0.301,git/commit,21,5.208
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.277,git/commit,21,5.208
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.401,git/commit,21,5.208
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.398,git/commit,21,5.208
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.469,git/commit,21,5.208
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.468,git/commit,21,5.208
git/commit createMergeCommit with no changes throws an error,0.118,git/commit,21,5.208
git/commit index corner cases can commit when staged new file is then deleted,0.176,git/commit,21,5.208
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.199,git/commit,21,5.208
git/commit index corner cases file is deleted in index,0.2,git/commit,21,5.208
git/rebase can parse progress returns a value indicating conflicts were encountered,0.468,git/rebase,7,4.493
git/rebase can parse progress status detects REBASE_HEAD,0.471,git/rebase,7,4.493
git/rebase can parse progress is a detached HEAD state,0.464,git/rebase,7,4.493
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.99,git/rebase,7,4.493
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.011,git/rebase,7,4.493
git/rebase can parse progress for long rebase is a detached HEAD state,1.032,git/rebase,7,4.493
GitStore loadCommitBatch includes HEAD when loading commits,0.45,GitStore,11,3.065
GitStore can discard changes from a repository,0.192,GitStore,11,3.065
GitStore can discard a renamed file,0.172,GitStore,11,3.065
GitStore undo first commit reports the repository is unborn,0.225,GitStore,11,3.065
GitStore undo first commit pre-fills the commit message,0.151,GitStore,11,3.065
GitStore undo first commit clears the undo commit dialog,0.26,GitStore,11,3.065
GitStore undo first commit has no staged files,0.253,GitStore,11,3.065
GitStore repository with HEAD file can discard modified change cleanly,0.162,GitStore,11,3.065
git/status getStatus with conflicted repo parses conflicted files with markers,0.398,git/status,12,2.414
git/status getStatus with conflicted repo parses conflicted files without markers,0.363,git/status,12,2.414
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.47,git/status,12,2.414
git/status getStatus with conflicted repo parses resolved files,0.369,git/status,12,2.414
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.135,git/status,12,2.414
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.171,git/status,12,2.414
git/status getStatus with unconflicted repo parses changed files,0.07,git/status,12,2.414
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.066,git/status,12,2.414
git/status getStatus with unconflicted repo reflects renames,0.124,git/status,12,2.414
git/status getStatus with unconflicted repo reflects copies,0.132,git/status,12,2.414
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.414
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.052,git/diff,19,2.048
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,2.048
git/diff getBlobImage retrieves valid image for modified file,0.111,git/diff,19,2.048
git/diff getBlobImage retrieves valid images for deleted file,0.071,git/diff,19,2.048
git/diff imageDiff changes for images are set,0.087,git/diff,19,2.048
git/diff imageDiff changes for text are not set,0.093,git/diff,19,2.048
git/diff getWorkingDirectoryDiff counts lines for new file,0.092,git/diff,19,2.048
git/diff getWorkingDirectoryDiff counts lines for modified file,0.098,git/diff,19,2.048
git/diff getWorkingDirectoryDiff counts lines for staged file,0.089,git/diff,19,2.048
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.133,git/diff,19,2.048
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.157,git/diff,19,2.048
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.182,git/diff,19,2.048
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.148,git/diff,19,2.048
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.139,git/diff,19,2.048
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.094,git/diff,19,2.048
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.072,git/diff,19,2.048
git/diff getBinaryPaths in repo with text only files returns an empty array,0.102,git/diff,19,2.048
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.112,git/diff,19,2.048
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,2.048
BranchPruner does nothing on non GitHub repositories,0.257,BranchPruner,6,1.999
BranchPruner prunes for GitHub repository,0.349,BranchPruner,6,1.999
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.276,BranchPruner,6,1.999
BranchPruner does not prune if there is no default branch,0.272,BranchPruner,6,1.999
BranchPruner does not prune reserved branches,0.348,BranchPruner,6,1.999
git/branch tip returns unborn for new repository,0.028,git/branch,13,1.722
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,13,1.722
git/branch tip returns detached for arbitrary checkout,0.064,git/branch,13,1.722
git/branch tip returns current branch when on a valid HEAD,0.086,git/branch,13,1.722
git/branch tip returns non-origin remote,0.093,git/branch,13,1.722
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.093,git/branch,13,1.722
git/branch getBranchesPointedAt in a local repo finds one branch name,0.069,git/branch,13,1.722
git/branch getBranchesPointedAt in a local repo finds no branch names,0.058,git/branch,13,1.722
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.059,git/branch,13,1.722
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.096,git/branch,13,1.722
git/branch deleteBranch deletes local branches,0.138,git/branch,13,1.722
git/branch deleteBranch deletes remote branches,0.377,git/branch,13,1.722
git/branch deleteBranch handles attempted delete of removed remote branch,0.453,git/branch,13,1.722
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.127,git/stash,14,1.637
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.174,git/stash,14,1.637
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.119,git/stash,14,1.637
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.486,formatPatch,5,1.265
git/reflog getRecentBranches returns the recently checked out branches,0.181,git/reflog,6,1.28
git/reflog getRecentBranches works after renaming a branch,0.236,git/reflog,6,1.28
git/reflog getRecentBranches returns a limited number of branches,0.31,git/reflog,6,1.28
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.188,git/reflog,6,1.28
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.239,git/reflog,6,1.28
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.083,git/reflog,6,1.28
git/checkout can checkout a valid branch name in an existing repository,0.217,git/checkout,6,1.207
git/checkout can checkout a branch when it exists on multiple remotes,0.149,git/checkout,6,1.207
git/checkout will fail when an existing branch matches the remote branch,0.138,git/checkout,6,1.207
git/checkout with submodules cleans up an submodule that no longer exists,0.348,git/checkout,6,1.207
git/checkout with submodules updates a changed submodule reference,0.278,git/checkout,6,1.207
git/config config looks up config values,0.061,git/config,12,0.904
git/config config returns null for undefined values,0.057,git/config,12,0.904
git/config global config getGlobalConfigPath gets the config path,0.073,git/config,12,0.904
git/config global config setGlobalConfigValue will replace all entries for a global value,0.102,git/config,12,0.904
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.075,git/config,12,0.904
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.076,git/config,12,0.904
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.072,git/config,12,0.904
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.071,git/config,12,0.904
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.069,git/config,12,0.904
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.07,git/config,12,0.904
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.068,git/config,12,0.904
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.068,git/config,12,0.904
gitignore readGitIgnoreAtRoot reads contents from disk,0.017,gitignore,9,0.738
gitignore saveGitIgnore applies rule correctly to repository,0.106,gitignore,9,0.738
gitignore appendIgnoreRule appends one rule,0.131,gitignore,9,0.738
gitignore appendIgnoreRule appends multiple rules,0.129,gitignore,9,0.738
git/rev-parse isGitRepository should return true for a repository,0.062,git/rev-parse,10,0.855
git/rev-parse isGitRepository should return false for a directory,0.064,git/rev-parse,10,0.855
git/rev-parse isBareRepository returns false for default initialized repository,0.071,git/rev-parse,10,0.855
git/rev-parse isBareRepository returns true for initialized bare repository,0.077,git/rev-parse,10,0.855
git/rev-parse isBareRepository returns false for empty directory,0.07,git/rev-parse,10,0.855
git/rev-parse isBareRepository throws error for missing directory,0.06,git/rev-parse,10,0.855
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.075,git/rev-parse,10,0.855
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.059,git/rev-parse,10,0.855
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.064,git/rev-parse,10,0.855
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.211,git/rev-parse,10,0.855
git/submodule listSubmodules returns the submodule entry,0.148,git/submodule,3,0.759
git/submodule listSubmodules returns the expected tag,0.199,git/submodule,3,0.759
git/submodule resetSubmodulePaths update submodule to original commit,0.371,git/submodule,3,0.759
git/log getCommits loads history,0.071,git/log,7,0.679
git/log getCommits handles repository with HEAD file on disk,0.102,git/log,7,0.679
git/log getCommits handles repository with signed commit and log.showSignature set,0.117,git/log,7,0.679
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.679
git/log getChangedFiles detects renames,0.099,git/log,7,0.679
git/log getChangedFiles detect copies,0.12,git/log,7,0.679
git/log getChangedFiles handles commit when HEAD exists on disk,0.065,git/log,7,0.679
git/merge merge and is successful returns true,0.049,git/merge,7,0.664
git/merge merge and is a noop returns false,0.066,git/merge,7,0.664
git/merge getMergeBase returns the common ancestor of two branches,0.079,git/merge,7,0.664
git/remote getRemotes should return both remotes,0.061,git/remote,11,0.651
git/remote findDefaultRemote returns origin when multiple remotes found,0.07,git/remote,11,0.651
git/remote findDefaultRemote returns something when origin removed,0.077,git/remote,11,0.651
git-lfs isUsingLFS returns false for repository not using LFS,0.067,git-lfs,9,0.704
git-lfs isUsingLFS returns true if LFS is tracking a path,0.182,git-lfs,9,0.704
git/core error handling does not throw for errors that were expected,0.062,git/core,6,0.389
git/core error handling throws for errors that were not expected,0.055,git/core,6,0.389
git/core exit code handling does not throw for exit codes that were expected,0.053,git/core,6,0.389
git/core exit code handling throws for exit codes that were not expected,0.057,git/core,6,0.389
git/core config lock file error handling can parse lock file path from stderr,0.069,git/core,6,0.389
git/core config lock file error handling normalizes paths,0.049,git/core,6,0.389
Update remote url updates the repository's remote url when the github url changes,0.114,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url when the github url is the same,0.087,Update remote url,4,0.421
Update remote url doesn't update repository's remote url if protocols don't match,0.085,Update remote url,4,0.421
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.084,Update remote url,4,0.421
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.057,patch formatting,8,0.41
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.056,patch formatting,8,0.41
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.41
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.41
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.41
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.039,patch formatting,8,0.41
patch formatting formatPatchesForModifiedFile includes empty context lines,0.035,patch formatting,8,0.41
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.034,patch formatting,8,0.41
git/reset reset can hard reset a repository,0.086,git/reset,2,0.125
AppStore can select a repository,0.216,AppStore,5,0.272
git/for-each-ref getBranches fetches branches using for-each-ref,0.323,git/for-each-ref,3,0.513
git/for-each-ref getBranches should return empty list for empty repo,0.082,git/for-each-ref,3,0.513
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.064,git/for-each-ref,3,0.513
validatedRepositoryPath returns the path to the repository,0.062,validatedRepositoryPath,2,0.119
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.064
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.363,git/rebase,21,9.062
git/rebase detect conflicts status detects REBASE_HEAD,0.317,git/rebase,21,9.062
git/rebase detect conflicts has conflicted files in working directory,0.316,git/rebase,21,9.062
git/rebase detect conflicts is a detached HEAD state,0.342,git/rebase,21,9.062
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.306,git/rebase,21,9.062
git/rebase abort after conflicts found no longer has working directory changes,0.314,git/rebase,21,9.062
git/rebase abort after conflicts found returns to the feature branch,0.318,git/rebase,21,9.062
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.395,git/rebase,21,9.062
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.399,git/rebase,21,9.062
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.397,git/rebase,21,9.062
git/rebase continue after resolving conflicts returns success,0.445,git/rebase,21,9.062
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.459,git/rebase,21,9.062
git/rebase continue after resolving conflicts no longer has working directory changes,0.443,git/rebase,21,9.062
git/rebase continue after resolving conflicts returns to the feature branch,0.467,git/rebase,21,9.062
git/rebase continue after resolving conflicts branch is now a different ref,0.458,git/rebase,21,9.062
git/rebase continue with additional changes unrelated to conflicted files returns success,0.448,git/rebase,21,9.062
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.451,git/rebase,21,9.062
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.471,git/rebase,21,9.062
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.479,git/rebase,21,9.062
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.479,git/rebase,21,9.062
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.446,git/rebase,21,9.062
git/commit createCommit normal commits the given files,0.14,git/commit,21,5.225
git/commit createCommit normal commit does not strip commentary by default,0.122,git/commit,21,5.225
git/commit createCommit normal can commit for empty repository,0.154,git/commit,21,5.225
git/commit createCommit normal can commit renames,0.18,git/commit,21,5.225
git/commit createCommit partials can commit some lines from new file,0.214,git/commit,21,5.225
git/commit createCommit partials can commit second hunk from modified file,0.215,git/commit,21,5.225
git/commit createCommit partials can commit single delete from modified file,0.189,git/commit,21,5.225
git/commit createCommit partials can commit multiple hunks from modified file,0.228,git/commit,21,5.225
git/commit createCommit partials can commit some lines from deleted file,0.202,git/commit,21,5.225
git/commit createCommit partials can commit renames with modifications,0.216,git/commit,21,5.225
git/commit createCommit partials can commit renames with partially selected modifications,0.266,git/commit,21,5.225
git/commit createCommit with a merge conflict creates a merge commit,0.305,git/commit,21,5.225
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.277,git/commit,21,5.225
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.396,git/commit,21,5.225
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.388,git/commit,21,5.225
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.481,git/commit,21,5.225
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.477,git/commit,21,5.225
git/commit createMergeCommit with no changes throws an error,0.124,git/commit,21,5.225
git/commit index corner cases can commit when staged new file is then deleted,0.176,git/commit,21,5.225
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.202,git/commit,21,5.225
git/commit index corner cases file is deleted in index,0.206,git/commit,21,5.225
git/rebase can parse progress returns a value indicating conflicts were encountered,0.477,git/rebase,7,4.556
git/rebase can parse progress status detects REBASE_HEAD,0.484,git/rebase,7,4.556
git/rebase can parse progress is a detached HEAD state,0.494,git/rebase,7,4.556
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.998,git/rebase,7,4.556
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.016,git/rebase,7,4.556
git/rebase can parse progress for long rebase is a detached HEAD state,1.031,git/rebase,7,4.556
GitStore loadCommitBatch includes HEAD when loading commits,0.432,GitStore,11,2.991
GitStore can discard changes from a repository,0.201,GitStore,11,2.991
GitStore can discard a renamed file,0.171,GitStore,11,2.991
GitStore undo first commit reports the repository is unborn,0.221,GitStore,11,2.991
GitStore undo first commit pre-fills the commit message,0.151,GitStore,11,2.991
GitStore undo first commit clears the undo commit dialog,0.255,GitStore,11,2.991
GitStore undo first commit has no staged files,0.249,GitStore,11,2.991
GitStore repository with HEAD file can discard modified change cleanly,0.127,GitStore,11,2.991
git/status getStatus with conflicted repo parses conflicted files with markers,0.35,git/status,12,2.411
git/status getStatus with conflicted repo parses conflicted files without markers,0.365,git/status,12,2.411
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.486,git/status,12,2.411
git/status getStatus with conflicted repo parses resolved files,0.365,git/status,12,2.411
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.151,git/status,12,2.411
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.173,git/status,12,2.411
git/status getStatus with unconflicted repo parses changed files,0.07,git/status,12,2.411
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.071,git/status,12,2.411
git/status getStatus with unconflicted repo reflects renames,0.127,git/status,12,2.411
git/status getStatus with unconflicted repo reflects copies,0.133,git/status,12,2.411
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.064,git/status,12,2.411
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.098,git/diff,19,2.166
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,2.166
git/diff getBlobImage retrieves valid image for modified file,0.055,git/diff,19,2.166
git/diff getBlobImage retrieves valid images for deleted file,0.08,git/diff,19,2.166
git/diff imageDiff changes for images are set,0.134,git/diff,19,2.166
git/diff imageDiff changes for text are not set,0.099,git/diff,19,2.166
git/diff getWorkingDirectoryDiff counts lines for new file,0.091,git/diff,19,2.166
git/diff getWorkingDirectoryDiff counts lines for modified file,0.103,git/diff,19,2.166
git/diff getWorkingDirectoryDiff counts lines for staged file,0.093,git/diff,19,2.166
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.132,git/diff,19,2.166
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.158,git/diff,19,2.166
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.185,git/diff,19,2.166
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.159,git/diff,19,2.166
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.15,git/diff,19,2.166
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.104,git/diff,19,2.166
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.073,git/diff,19,2.166
git/diff getBinaryPaths in repo with text only files returns an empty array,0.11,git/diff,19,2.166
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.118,git/diff,19,2.166
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.136,git/diff,19,2.166
BranchPruner does nothing on non GitHub repositories,0.289,BranchPruner,6,2.173
BranchPruner prunes for GitHub repository,0.372,BranchPruner,6,2.173
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.309,BranchPruner,6,2.173
BranchPruner does not prune if there is no default branch,0.299,BranchPruner,6,2.173
BranchPruner does not prune reserved branches,0.37,BranchPruner,6,2.173
git/branch tip returns unborn for new repository,0.109,git/branch,13,1.903
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,13,1.903
git/branch tip returns detached for arbitrary checkout,0.073,git/branch,13,1.903
git/branch tip returns current branch when on a valid HEAD,0.091,git/branch,13,1.903
git/branch tip returns non-origin remote,0.102,git/branch,13,1.903
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.098,git/branch,13,1.903
git/branch getBranchesPointedAt in a local repo finds one branch name,0.078,git/branch,13,1.903
git/branch getBranchesPointedAt in a local repo finds no branch names,0.057,git/branch,13,1.903
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.059,git/branch,13,1.903
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.114,git/branch,13,1.903
git/branch deleteBranch deletes local branches,0.15,git/branch,13,1.903
git/branch deleteBranch deletes remote branches,0.4,git/branch,13,1.903
git/branch deleteBranch handles attempted delete of removed remote branch,0.472,git/branch,13,1.903
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.137,git/stash,14,1.719
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.166,git/stash,14,1.719
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.121,git/stash,14,1.719
git/reflog getRecentBranches returns the recently checked out branches,0.179,git/reflog,6,1.28
git/reflog getRecentBranches works after renaming a branch,0.231,git/reflog,6,1.28
git/reflog getRecentBranches returns a limited number of branches,0.302,git/reflog,6,1.28
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.19,git/reflog,6,1.28
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.238,git/reflog,6,1.28
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.092,git/reflog,6,1.28
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.492,formatPatch,5,1.279
git/checkout can checkout a valid branch name in an existing repository,0.154,git/checkout,6,1.346
git/checkout can checkout a branch when it exists on multiple remotes,0.167,git/checkout,6,1.346
git/checkout will fail when an existing branch matches the remote branch,0.148,git/checkout,6,1.346
git/checkout with submodules cleans up an submodule that no longer exists,0.385,git/checkout,6,1.346
git/checkout with submodules updates a changed submodule reference,0.333,git/checkout,6,1.346
git/config config looks up config values,0.061,git/config,12,1.053
git/config config returns null for undefined values,0.062,git/config,12,1.053
git/config global config getGlobalConfigPath gets the config path,0.08,git/config,12,1.053
git/config global config setGlobalConfigValue will replace all entries for a global value,0.112,git/config,12,1.053
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.087,git/config,12,1.053
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.081,git/config,12,1.053
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.082,git/config,12,1.053
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.103,git/config,12,1.053
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.082,git/config,12,1.053
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.083,git/config,12,1.053
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.081,git/config,12,1.053
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.089,git/config,12,1.053
git/rev-parse isGitRepository should return true for a repository,0.077,git/rev-parse,10,0.942
git/rev-parse isGitRepository should return false for a directory,0.061,git/rev-parse,10,0.942
git/rev-parse isBareRepository returns false for default initialized repository,0.077,git/rev-parse,10,0.942
git/rev-parse isBareRepository returns true for initialized bare repository,0.084,git/rev-parse,10,0.942
git/rev-parse isBareRepository returns false for empty directory,0.074,git/rev-parse,10,0.942
git/rev-parse isBareRepository throws error for missing directory,0.058,git/rev-parse,10,0.942
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.075,git/rev-parse,10,0.942
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.068,git/rev-parse,10,0.942
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.072,git/rev-parse,10,0.942
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.249,git/rev-parse,10,0.942
git/submodule listSubmodules returns the submodule entry,0.234,git/submodule,3,0.95
git/submodule listSubmodules returns the expected tag,0.238,git/submodule,3,0.95
git/submodule resetSubmodulePaths update submodule to original commit,0.433,git/submodule,3,0.95
gitignore readGitIgnoreAtRoot reads contents from disk,0.025,gitignore,9,0.809
gitignore saveGitIgnore applies rule correctly to repository,0.119,gitignore,9,0.809
gitignore appendIgnoreRule appends one rule,0.138,gitignore,9,0.809
gitignore appendIgnoreRule appends multiple rules,0.146,gitignore,9,0.809
git-lfs isUsingLFS returns false for repository not using LFS,0.075,git-lfs,9,0.639
git-lfs isUsingLFS returns true if LFS is tracking a path,0.09,git-lfs,9,0.639
git/log getCommits loads history,0.089,git/log,7,0.766
git/log getCommits handles repository with HEAD file on disk,0.107,git/log,7,0.766
git/log getCommits handles repository with signed commit and log.showSignature set,0.135,git/log,7,0.766
git/log getChangedFiles loads the files changed in the commit,0.074,git/log,7,0.766
git/log getChangedFiles detects renames,0.119,git/log,7,0.766
git/log getChangedFiles detect copies,0.126,git/log,7,0.766
git/log getChangedFiles handles commit when HEAD exists on disk,0.065,git/log,7,0.766
git/merge merge and is successful returns true,0.054,git/merge,7,0.743
git/merge merge and is a noop returns false,0.086,git/merge,7,0.743
git/merge getMergeBase returns the common ancestor of two branches,0.086,git/merge,7,0.743
git/remote getRemotes should return both remotes,0.057,git/remote,11,0.694
git/remote findDefaultRemote returns origin when multiple remotes found,0.078,git/remote,11,0.694
git/remote findDefaultRemote returns something when origin removed,0.082,git/remote,11,0.694
git/for-each-ref getBranches fetches branches using for-each-ref,0.084,git/for-each-ref,3,0.296
git/for-each-ref getBranches should return empty list for empty repo,0.084,git/for-each-ref,3,0.296
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.081,git/for-each-ref,3,0.296
Update remote url updates the repository's remote url when the github url changes,0.138,Update remote url,4,0.514
Update remote url doesn't update the repository's remote url when the github url is the same,0.11,Update remote url,4,0.514
Update remote url doesn't update repository's remote url if protocols don't match,0.105,Update remote url,4,0.514
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.101,Update remote url,4,0.514
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.059,patch formatting,8,0.437
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.059,patch formatting,8,0.437
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.058,patch formatting,8,0.437
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.059,patch formatting,8,0.437
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.045,patch formatting,8,0.437
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.038,patch formatting,8,0.437
patch formatting formatPatchesForModifiedFile includes empty context lines,0.034,patch formatting,8,0.437
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.035,patch formatting,8,0.437
git/core error handling does not throw for errors that were expected,0.066,git/core,6,0.457
git/core error handling throws for errors that were not expected,0.072,git/core,6,0.457
git/core exit code handling does not throw for exit codes that were expected,0.066,git/core,6,0.457
git/core exit code handling throws for exit codes that were not expected,0.07,git/core,6,0.457
git/core config lock file error handling can parse lock file path from stderr,0.083,git/core,6,0.457
git/core config lock file error handling normalizes paths,0.056,git/core,6,0.457
AppStore can select a repository,0.363,AppStore,5,0.424
git/reset reset can hard reset a repository,0.379,git/reset,2,0.434
validatedRepositoryPath returns the path to the repository,0.062,validatedRepositoryPath,2,0.133
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.073
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.445,git/rebase,21,10.569
git/rebase detect conflicts status detects REBASE_HEAD,0.374,git/rebase,21,10.569
git/rebase detect conflicts has conflicted files in working directory,0.395,git/rebase,21,10.569
git/rebase detect conflicts is a detached HEAD state,0.395,git/rebase,21,10.569
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.375,git/rebase,21,10.569
git/rebase abort after conflicts found no longer has working directory changes,0.378,git/rebase,21,10.569
git/rebase abort after conflicts found returns to the feature branch,0.385,git/rebase,21,10.569
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.482,git/rebase,21,10.569
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.45,git/rebase,21,10.569
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.451,git/rebase,21,10.569
git/rebase continue after resolving conflicts returns success,0.527,git/rebase,21,10.569
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.536,git/rebase,21,10.569
git/rebase continue after resolving conflicts no longer has working directory changes,0.527,git/rebase,21,10.569
git/rebase continue after resolving conflicts returns to the feature branch,0.542,git/rebase,21,10.569
git/rebase continue after resolving conflicts branch is now a different ref,0.565,git/rebase,21,10.569
git/rebase continue with additional changes unrelated to conflicted files returns success,0.535,git/rebase,21,10.569
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.528,git/rebase,21,10.569
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.526,git/rebase,21,10.569
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.528,git/rebase,21,10.569
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.54,git/rebase,21,10.569
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.515,git/rebase,21,10.569
git/commit createCommit normal commits the given files,0.154,git/commit,21,6.029
git/commit createCommit normal commit does not strip commentary by default,0.144,git/commit,21,6.029
git/commit createCommit normal can commit for empty repository,0.168,git/commit,21,6.029
git/commit createCommit normal can commit renames,0.205,git/commit,21,6.029
git/commit createCommit partials can commit some lines from new file,0.238,git/commit,21,6.029
git/commit createCommit partials can commit second hunk from modified file,0.252,git/commit,21,6.029
git/commit createCommit partials can commit single delete from modified file,0.243,git/commit,21,6.029
git/commit createCommit partials can commit multiple hunks from modified file,0.26,git/commit,21,6.029
git/commit createCommit partials can commit some lines from deleted file,0.245,git/commit,21,6.029
git/commit createCommit partials can commit renames with modifications,0.263,git/commit,21,6.029
git/commit createCommit partials can commit renames with partially selected modifications,0.305,git/commit,21,6.029
git/commit createCommit with a merge conflict creates a merge commit,0.351,git/commit,21,6.029
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.325,git/commit,21,6.029
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.459,git/commit,21,6.029
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.438,git/commit,21,6.029
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.542,git/commit,21,6.029
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.541,git/commit,21,6.029
git/commit createMergeCommit with no changes throws an error,0.141,git/commit,21,6.029
git/commit index corner cases can commit when staged new file is then deleted,0.201,git/commit,21,6.029
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.241,git/commit,21,6.029
git/commit index corner cases file is deleted in index,0.241,git/commit,21,6.029
git/rebase can parse progress returns a value indicating conflicts were encountered,0.539,git/rebase,7,5.001
git/rebase can parse progress status detects REBASE_HEAD,0.541,git/rebase,7,5.001
git/rebase can parse progress is a detached HEAD state,0.552,git/rebase,7,5.001
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.091,git/rebase,7,5.001
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.114,git/rebase,7,5.001
git/rebase can parse progress for long rebase is a detached HEAD state,1.1,git/rebase,7,5.001
GitStore loadCommitBatch includes HEAD when loading commits,0.454,GitStore,11,3.231
GitStore can discard changes from a repository,0.216,GitStore,11,3.231
GitStore can discard a renamed file,0.191,GitStore,11,3.231
GitStore undo first commit reports the repository is unborn,0.244,GitStore,11,3.231
GitStore undo first commit pre-fills the commit message,0.168,GitStore,11,3.231
GitStore undo first commit clears the undo commit dialog,0.277,GitStore,11,3.231
GitStore undo first commit has no staged files,0.269,GitStore,11,3.231
GitStore repository with HEAD file can discard modified change cleanly,0.14,GitStore,11,3.231
git/status getStatus with conflicted repo parses conflicted files with markers,0.38,git/status,12,2.647
git/status getStatus with conflicted repo parses conflicted files without markers,0.39,git/status,12,2.647
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.517,git/status,12,2.647
git/status getStatus with conflicted repo parses resolved files,0.407,git/status,12,2.647
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.155,git/status,12,2.647
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.195,git/status,12,2.647
git/status getStatus with unconflicted repo parses changed files,0.082,git/status,12,2.647
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.082,git/status,12,2.647
git/status getStatus with unconflicted repo reflects renames,0.158,git/status,12,2.647
git/status getStatus with unconflicted repo reflects copies,0.144,git/status,12,2.647
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.075,git/status,12,2.647
BranchPruner does nothing on non GitHub repositories,0.382,BranchPruner,6,2.485
BranchPruner prunes for GitHub repository,0.437,BranchPruner,6,2.485
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.336,BranchPruner,6,2.485
BranchPruner does not prune if there is no default branch,0.322,BranchPruner,6,2.485
BranchPruner does not prune reserved branches,0.402,BranchPruner,6,2.485
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.054,git/diff,19,2.35
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.053,git/diff,19,2.35
git/diff getBlobImage retrieves valid image for modified file,0.067,git/diff,19,2.35
git/diff getBlobImage retrieves valid images for deleted file,0.09,git/diff,19,2.35
git/diff imageDiff changes for images are set,0.152,git/diff,19,2.35
git/diff imageDiff changes for text are not set,0.111,git/diff,19,2.35
git/diff getWorkingDirectoryDiff counts lines for new file,0.1,git/diff,19,2.35
git/diff getWorkingDirectoryDiff counts lines for modified file,0.109,git/diff,19,2.35
git/diff getWorkingDirectoryDiff counts lines for staged file,0.103,git/diff,19,2.35
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.155,git/diff,19,2.35
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.2,git/diff,19,2.35
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.197,git/diff,19,2.35
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.159,git/diff,19,2.35
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.159,git/diff,19,2.35
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.108,git/diff,19,2.35
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.097,git/diff,19,2.35
git/diff getBinaryPaths in repo with text only files returns an empty array,0.116,git/diff,19,2.35
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.129,git/diff,19,2.35
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.138,git/diff,19,2.35
git/branch tip returns unborn for new repository,0.033,git/branch,13,1.9
git/branch tip returns correct ref if checkout occurs,0.06,git/branch,13,1.9
git/branch tip returns detached for arbitrary checkout,0.069,git/branch,13,1.9
git/branch tip returns current branch when on a valid HEAD,0.098,git/branch,13,1.9
git/branch tip returns non-origin remote,0.104,git/branch,13,1.9
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.101,git/branch,13,1.9
git/branch getBranchesPointedAt in a local repo finds one branch name,0.076,git/branch,13,1.9
git/branch getBranchesPointedAt in a local repo finds no branch names,0.069,git/branch,13,1.9
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.07,git/branch,13,1.9
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.104,git/branch,13,1.9
git/branch deleteBranch deletes local branches,0.163,git/branch,13,1.9
git/branch deleteBranch deletes remote branches,0.41,git/branch,13,1.9
git/branch deleteBranch handles attempted delete of removed remote branch,0.483,git/branch,13,1.9
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.139,git/stash,14,1.703
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.176,git/stash,14,1.703
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.125,git/stash,14,1.703
git/checkout can checkout a valid branch name in an existing repository,0.161,git/checkout,6,1.225
git/checkout can checkout a branch when it exists on multiple remotes,0.15,git/checkout,6,1.225
git/checkout will fail when an existing branch matches the remote branch,0.155,git/checkout,6,1.225
git/checkout with submodules cleans up an submodule that no longer exists,0.369,git/checkout,6,1.225
git/checkout with submodules updates a changed submodule reference,0.31,git/checkout,6,1.225
git/reflog getRecentBranches returns the recently checked out branches,0.193,git/reflog,6,1.38
git/reflog getRecentBranches works after renaming a branch,0.246,git/reflog,6,1.38
git/reflog getRecentBranches returns a limited number of branches,0.345,git/reflog,6,1.38
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.202,git/reflog,6,1.38
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.256,git/reflog,6,1.38
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.089,git/reflog,6,1.38
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.504,formatPatch,5,1.434
git/config config looks up config values,0.063,git/config,12,1.054
git/config config returns null for undefined values,0.072,git/config,12,1.054
git/config global config getGlobalConfigPath gets the config path,0.084,git/config,12,1.054
git/config global config setGlobalConfigValue will replace all entries for a global value,0.114,git/config,12,1.054
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.087,git/config,12,1.054
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.08,git/config,12,1.054
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.084,git/config,12,1.054
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.086,git/config,12,1.054
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.093,git/config,12,1.054
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.078,git/config,12,1.054
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.083,git/config,12,1.054
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.083,git/config,12,1.054
git/submodule listSubmodules returns the submodule entry,0.155,git/submodule,3,0.854
git/submodule listSubmodules returns the expected tag,0.229,git/submodule,3,0.854
git/submodule resetSubmodulePaths update submodule to original commit,0.422,git/submodule,3,0.854
git/rev-parse isGitRepository should return true for a repository,0.063,git/rev-parse,10,0.945
git/rev-parse isGitRepository should return false for a directory,0.072,git/rev-parse,10,0.945
git/rev-parse isBareRepository returns false for default initialized repository,0.078,git/rev-parse,10,0.945
git/rev-parse isBareRepository returns true for initialized bare repository,0.086,git/rev-parse,10,0.945
git/rev-parse isBareRepository returns false for empty directory,0.072,git/rev-parse,10,0.945
git/rev-parse isBareRepository throws error for missing directory,0.062,git/rev-parse,10,0.945
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.081,git/rev-parse,10,0.945
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.075,git/rev-parse,10,0.945
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.067,git/rev-parse,10,0.945
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.244,git/rev-parse,10,0.945
gitignore readGitIgnoreAtRoot reads contents from disk,0.02,gitignore,9,0.92
gitignore saveGitIgnore applies rule correctly to repository,0.123,gitignore,9,0.92
gitignore appendIgnoreRule appends one rule,0.152,gitignore,9,0.92
gitignore appendIgnoreRule appends multiple rules,0.148,gitignore,9,0.92
git/log getCommits loads history,0.085,git/log,7,0.781
git/log getCommits handles repository with HEAD file on disk,0.124,git/log,7,0.781
git/log getCommits handles repository with signed commit and log.showSignature set,0.145,git/log,7,0.781
git/log getChangedFiles loads the files changed in the commit,0.066,git/log,7,0.781
git/log getChangedFiles detects renames,0.123,git/log,7,0.781
git/log getChangedFiles detect copies,0.122,git/log,7,0.781
git/log getChangedFiles handles commit when HEAD exists on disk,0.069,git/log,7,0.781
git/merge merge and is successful returns true,0.056,git/merge,7,0.712
git/merge merge and is a noop returns false,0.07,git/merge,7,0.712
git/merge getMergeBase returns the common ancestor of two branches,0.092,git/merge,7,0.712
git/remote getRemotes should return both remotes,0.071,git/remote,11,0.694
git/remote findDefaultRemote returns origin when multiple remotes found,0.077,git/remote,11,0.694
git/remote findDefaultRemote returns something when origin removed,0.08,git/remote,11,0.694
git-lfs isUsingLFS returns false for repository not using LFS,0.076,git-lfs,9,0.662
git-lfs isUsingLFS returns true if LFS is tracking a path,0.098,git-lfs,9,0.662
Update remote url updates the repository's remote url when the github url changes,0.13,Update remote url,4,0.487
Update remote url doesn't update the repository's remote url when the github url is the same,0.106,Update remote url,4,0.487
Update remote url doesn't update repository's remote url if protocols don't match,0.097,Update remote url,4,0.487
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.099,Update remote url,4,0.487
git/core error handling does not throw for errors that were expected,0.065,git/core,6,0.428
git/core error handling throws for errors that were not expected,0.069,git/core,6,0.428
git/core exit code handling does not throw for exit codes that were expected,0.063,git/core,6,0.428
git/core exit code handling throws for exit codes that were not expected,0.063,git/core,6,0.428
git/core config lock file error handling can parse lock file path from stderr,0.071,git/core,6,0.428
git/core config lock file error handling normalizes paths,0.051,git/core,6,0.428
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.057,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.058,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.06,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.06,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.043,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.039,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile includes empty context lines,0.038,patch formatting,8,0.435
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.036,patch formatting,8,0.435
git/reset reset can hard reset a repository,0.092,git/reset,2,0.132
AppStore can select a repository,0.237,AppStore,5,0.3
git/for-each-ref getBranches fetches branches using for-each-ref,0.378,git/for-each-ref,3,0.585
git/for-each-ref getBranches should return empty list for empty repo,0.09,git/for-each-ref,3,0.585
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.07,git/for-each-ref,3,0.585
validatedRepositoryPath returns the path to the repository,0.072,validatedRepositoryPath,2,0.149
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.07
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.394,git/rebase,21,10.441
git/rebase detect conflicts status detects REBASE_HEAD,0.347,git/rebase,21,10.441
git/rebase detect conflicts has conflicted files in working directory,0.36,git/rebase,21,10.441
git/rebase detect conflicts is a detached HEAD state,0.375,git/rebase,21,10.441
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.344,git/rebase,21,10.441
git/rebase abort after conflicts found no longer has working directory changes,0.359,git/rebase,21,10.441
git/rebase abort after conflicts found returns to the feature branch,0.349,git/rebase,21,10.441
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.458,git/rebase,21,10.441
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.458,git/rebase,21,10.441
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.456,git/rebase,21,10.441
git/rebase continue after resolving conflicts returns success,0.534,git/rebase,21,10.441
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.529,git/rebase,21,10.441
git/rebase continue after resolving conflicts no longer has working directory changes,0.551,git/rebase,21,10.441
git/rebase continue after resolving conflicts returns to the feature branch,0.545,git/rebase,21,10.441
git/rebase continue after resolving conflicts branch is now a different ref,0.548,git/rebase,21,10.441
git/rebase continue with additional changes unrelated to conflicted files returns success,0.528,git/rebase,21,10.441
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.538,git/rebase,21,10.441
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.549,git/rebase,21,10.441
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.554,git/rebase,21,10.441
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.56,git/rebase,21,10.441
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.533,git/rebase,21,10.441
git/commit createCommit normal commits the given files,0.163,git/commit,21,5.95
git/commit createCommit normal commit does not strip commentary by default,0.15,git/commit,21,5.95
git/commit createCommit normal can commit for empty repository,0.173,git/commit,21,5.95
git/commit createCommit normal can commit renames,0.208,git/commit,21,5.95
git/commit createCommit partials can commit some lines from new file,0.238,git/commit,21,5.95
git/commit createCommit partials can commit second hunk from modified file,0.263,git/commit,21,5.95
git/commit createCommit partials can commit single delete from modified file,0.233,git/commit,21,5.95
git/commit createCommit partials can commit multiple hunks from modified file,0.255,git/commit,21,5.95
git/commit createCommit partials can commit some lines from deleted file,0.226,git/commit,21,5.95
git/commit createCommit partials can commit renames with modifications,0.251,git/commit,21,5.95
git/commit createCommit partials can commit renames with partially selected modifications,0.305,git/commit,21,5.95
git/commit createCommit with a merge conflict creates a merge commit,0.359,git/commit,21,5.95
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.325,git/commit,21,5.95
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.464,git/commit,21,5.95
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.441,git/commit,21,5.95
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.538,git/commit,21,5.95
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.517,git/commit,21,5.95
git/commit createMergeCommit with no changes throws an error,0.137,git/commit,21,5.95
git/commit index corner cases can commit when staged new file is then deleted,0.192,git/commit,21,5.95
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.232,git/commit,21,5.95
git/commit index corner cases file is deleted in index,0.218,git/commit,21,5.95
git/rebase can parse progress returns a value indicating conflicts were encountered,0.518,git/rebase,7,4.965
git/rebase can parse progress status detects REBASE_HEAD,0.543,git/rebase,7,4.965
git/rebase can parse progress is a detached HEAD state,0.533,git/rebase,7,4.965
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.084,git/rebase,7,4.965
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.111,git/rebase,7,4.965
git/rebase can parse progress for long rebase is a detached HEAD state,1.12,git/rebase,7,4.965
GitStore loadCommitBatch includes HEAD when loading commits,0.47,GitStore,11,3.2
GitStore can discard changes from a repository,0.213,GitStore,11,3.2
GitStore can discard a renamed file,0.185,GitStore,11,3.2
GitStore undo first commit reports the repository is unborn,0.244,GitStore,11,3.2
GitStore undo first commit pre-fills the commit message,0.165,GitStore,11,3.2
GitStore undo first commit clears the undo commit dialog,0.275,GitStore,11,3.2
GitStore undo first commit has no staged files,0.262,GitStore,11,3.2
GitStore repository with HEAD file can discard modified change cleanly,0.144,GitStore,11,3.2
git/status getStatus with conflicted repo parses conflicted files with markers,0.403,git/status,12,2.596
git/status getStatus with conflicted repo parses conflicted files without markers,0.391,git/status,12,2.596
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.513,git/status,12,2.596
git/status getStatus with conflicted repo parses resolved files,0.397,git/status,12,2.596
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.16,git/status,12,2.596
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.183,git/status,12,2.596
git/status getStatus with unconflicted repo parses changed files,0.083,git/status,12,2.596
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.07,git/status,12,2.596
git/status getStatus with unconflicted repo reflects renames,0.14,git/status,12,2.596
git/status getStatus with unconflicted repo reflects copies,0.132,git/status,12,2.596
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.07,git/status,12,2.596
BranchPruner does nothing on non GitHub repositories,0.375,BranchPruner,6,2.438
BranchPruner prunes for GitHub repository,0.41,BranchPruner,6,2.438
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.329,BranchPruner,6,2.438
BranchPruner does not prune if there is no default branch,0.322,BranchPruner,6,2.438
BranchPruner does not prune reserved branches,0.395,BranchPruner,6,2.438
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.054,git/diff,19,2.289
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,2.289
git/diff getBlobImage retrieves valid image for modified file,0.057,git/diff,19,2.289
git/diff getBlobImage retrieves valid images for deleted file,0.088,git/diff,19,2.289
git/diff imageDiff changes for images are set,0.146,git/diff,19,2.289
git/diff imageDiff changes for text are not set,0.117,git/diff,19,2.289
git/diff getWorkingDirectoryDiff counts lines for new file,0.105,git/diff,19,2.289
git/diff getWorkingDirectoryDiff counts lines for modified file,0.099,git/diff,19,2.289
git/diff getWorkingDirectoryDiff counts lines for staged file,0.1,git/diff,19,2.289
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.136,git/diff,19,2.289
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.179,git/diff,19,2.289
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.206,git/diff,19,2.289
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.173,git/diff,19,2.289
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.161,git/diff,19,2.289
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.105,git/diff,19,2.289
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.079,git/diff,19,2.289
git/diff getBinaryPaths in repo with text only files returns an empty array,0.113,git/diff,19,2.289
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.118,git/diff,19,2.289
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.158,git/diff,19,2.289
git/branch tip returns unborn for new repository,0.038,git/branch,13,1.898
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,13,1.898
git/branch tip returns detached for arbitrary checkout,0.072,git/branch,13,1.898
git/branch tip returns current branch when on a valid HEAD,0.107,git/branch,13,1.898
git/branch tip returns non-origin remote,0.099,git/branch,13,1.898
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.113,git/branch,13,1.898
git/branch getBranchesPointedAt in a local repo finds one branch name,0.072,git/branch,13,1.898
git/branch getBranchesPointedAt in a local repo finds no branch names,0.063,git/branch,13,1.898
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.062,git/branch,13,1.898
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.102,git/branch,13,1.898
git/branch deleteBranch deletes local branches,0.159,git/branch,13,1.898
git/branch deleteBranch deletes remote branches,0.417,git/branch,13,1.898
git/branch deleteBranch handles attempted delete of removed remote branch,0.483,git/branch,13,1.898
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.14,git/stash,14,1.731
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.176,git/stash,14,1.731
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.121,git/stash,14,1.731
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.483,formatPatch,5,1.285
git/reflog getRecentBranches returns the recently checked out branches,0.198,git/reflog,6,1.4
git/reflog getRecentBranches works after renaming a branch,0.255,git/reflog,6,1.4
git/reflog getRecentBranches returns a limited number of branches,0.348,git/reflog,6,1.4
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.21,git/reflog,6,1.4
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.254,git/reflog,6,1.4
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.09,git/reflog,6,1.4
git/checkout can checkout a valid branch name in an existing repository,0.167,git/checkout,6,1.278
git/checkout can checkout a branch when it exists on multiple remotes,0.176,git/checkout,6,1.278
git/checkout will fail when an existing branch matches the remote branch,0.161,git/checkout,6,1.278
git/checkout with submodules cleans up an submodule that no longer exists,0.378,git/checkout,6,1.278
git/checkout with submodules updates a changed submodule reference,0.308,git/checkout,6,1.278
git/config config looks up config values,0.063,git/config,12,1.069
git/config config returns null for undefined values,0.058,git/config,12,1.069
git/config global config getGlobalConfigPath gets the config path,0.08,git/config,12,1.069
git/config global config setGlobalConfigValue will replace all entries for a global value,0.12,git/config,12,1.069
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false",0.095,git/config,12,1.069
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false",0.087,git/config,12,1.069
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false",0.085,git/config,12,1.069
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false",0.083,git/config,12,1.069
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true",0.075,git/config,12,1.069
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true",0.09,git/config,12,1.069
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true",0.091,git/config,12,1.069
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true",0.094,git/config,12,1.069
git/rev-parse isGitRepository should return true for a repository,0.068,git/rev-parse,10,0.967
git/rev-parse isGitRepository should return false for a directory,0.058,git/rev-parse,10,0.967
git/rev-parse isBareRepository returns false for default initialized repository,0.078,git/rev-parse,10,0.967
git/rev-parse isBareRepository returns true for initialized bare repository,0.088,git/rev-parse,10,0.967
git/rev-parse isBareRepository returns false for empty directory,0.074,git/rev-parse,10,0.967
git/rev-parse isBareRepository throws error for missing directory,0.066,git/rev-parse,10,0.967
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.085,git/rev-parse,10,0.967
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.077,git/rev-parse,10,0.967
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.077,git/rev-parse,10,0.967
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.245,git/rev-parse,10,0.967
gitignore readGitIgnoreAtRoot reads contents from disk,0.022,gitignore,9,0.873
gitignore saveGitIgnore applies rule correctly to repository,0.127,gitignore,9,0.873
gitignore appendIgnoreRule appends one rule,0.152,gitignore,9,0.873
gitignore appendIgnoreRule appends multiple rules,0.152,gitignore,9,0.873
git/submodule listSubmodules returns the submodule entry,0.159,git/submodule,3,0.852
git/submodule listSubmodules returns the expected tag,0.236,git/submodule,3,0.852
git/submodule resetSubmodulePaths update submodule to original commit,0.408,git/submodule,3,0.852
git/log getCommits loads history,0.083,git/log,7,0.799
git/log getCommits handles repository with HEAD file on disk,0.124,git/log,7,0.799
git/log getCommits handles repository with signed commit and log.showSignature set,0.14,git/log,7,0.799
git/log getChangedFiles loads the files changed in the commit,0.076,git/log,7,0.799
git/log getChangedFiles detects renames,0.132,git/log,7,0.799
git/log getChangedFiles detect copies,0.128,git/log,7,0.799
git/log getChangedFiles handles commit when HEAD exists on disk,0.073,git/log,7,0.799
git/merge merge and is successful returns true,0.053,git/merge,7,0.757
git/merge merge and is a noop returns false,0.08,git/merge,7,0.757
git/merge getMergeBase returns the common ancestor of two branches,0.093,git/merge,7,0.757
git/remote getRemotes should return both remotes,0.071,git/remote,11,0.755
git/remote findDefaultRemote returns origin when multiple remotes found,0.081,git/remote,11,0.755
git/remote findDefaultRemote returns something when origin removed,0.089,git/remote,11,0.755
git-lfs isUsingLFS returns false for repository not using LFS,0.074,git-lfs,9,0.715
git-lfs isUsingLFS returns true if LFS is tracking a path,0.106,git-lfs,9,0.715
git/for-each-ref getBranches fetches branches using for-each-ref,0.202,git/for-each-ref,3,0.411
git/for-each-ref getBranches should return empty list for empty repo,0.091,git/for-each-ref,3,0.411
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.072,git/for-each-ref,3,0.411
Update remote url updates the repository's remote url when the github url changes,0.146,Update remote url,4,0.552
Update remote url doesn't update the repository's remote url when the github url is the same,0.11,Update remote url,4,0.552
Update remote url doesn't update repository's remote url if protocols don't match,0.108,Update remote url,4,0.552
Update remote url doesn't update the repository's remote url if it differs from the default from the github API,0.126,Update remote url,4,0.552
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.066,patch formatting,8,0.439
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.064,patch formatting,8,0.439
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.059,patch formatting,8,0.439
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.067,patch formatting,8,0.439
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.044,patch formatting,8,0.439
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.037,patch formatting,8,0.439
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.439
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.439
git/core error handling does not throw for errors that were expected,0.057,git/core,6,0.468
git/core error handling throws for errors that were not expected,0.079,git/core,6,0.468
git/core exit code handling does not throw for exit codes that were expected,0.075,git/core,6,0.468
git/core exit code handling throws for exit codes that were not expected,0.071,git/core,6,0.468
git/core config lock file error handling can parse lock file path from stderr,0.082,git/core,6,0.468
git/core config lock file error handling normalizes paths,0.061,git/core,6,0.468
AppStore can select a repository,0.256,AppStore,5,0.315
validatedRepositoryPath returns the path to the repository,0.342,validatedRepositoryPath,2,0.41
git/reset reset can hard reset a repository,0.1,git/reset,2,0.149
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.075
