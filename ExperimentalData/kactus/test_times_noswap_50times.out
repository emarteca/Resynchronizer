git/rebase detect conflicts returns a value indicating conflicts were encountered,0.365,git/rebase,21,8.544
git/rebase detect conflicts status detects REBASE_HEAD,0.273,git/rebase,21,8.544
git/rebase detect conflicts has conflicted files in working directory,0.27,git/rebase,21,8.544
git/rebase detect conflicts is a detached HEAD state,0.299,git/rebase,21,8.544
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.318,git/rebase,21,8.544
git/rebase abort after conflicts found no longer has working directory changes,0.34,git/rebase,21,8.544
git/rebase abort after conflicts found returns to the feature branch,0.299,git/rebase,21,8.544
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.366,git/rebase,21,8.544
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.399,git/rebase,21,8.544
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.372,git/rebase,21,8.544
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.544
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.419,git/rebase,21,8.544
git/rebase continue after resolving conflicts no longer has working directory changes,0.485,git/rebase,21,8.544
git/rebase continue after resolving conflicts returns to the feature branch,0.418,git/rebase,21,8.544
git/rebase continue after resolving conflicts branch is now a different ref,0.448,git/rebase,21,8.544
git/rebase continue with additional changes unrelated to conflicted files returns success,0.41,git/rebase,21,8.544
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.424,git/rebase,21,8.544
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.432,git/rebase,21,8.544
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.447,git/rebase,21,8.544
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.483,git/rebase,21,8.544
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.399,git/rebase,21,8.544
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.801
git/commit createCommit normal commit does not strip commentary by default,0.09,git/commit,21,3.801
git/commit createCommit normal can commit for empty repository,0.117,git/commit,21,3.801
git/commit createCommit normal can commit renames,0.134,git/commit,21,3.801
git/commit createCommit partials can commit some lines from new file,0.152,git/commit,21,3.801
git/commit createCommit partials can commit second hunk from modified file,0.158,git/commit,21,3.801
git/commit createCommit partials can commit single delete from modified file,0.138,git/commit,21,3.801
git/commit createCommit partials can commit multiple hunks from modified file,0.159,git/commit,21,3.801
git/commit createCommit partials can commit some lines from deleted file,0.14,git/commit,21,3.801
git/commit createCommit partials can commit renames with modifications,0.15,git/commit,21,3.801
git/commit createCommit partials can commit renames with partially selected modifications,0.181,git/commit,21,3.801
git/commit createCommit with a merge conflict creates a merge commit,0.22,git/commit,21,3.801
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.199,git/commit,21,3.801
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.311,git/commit,21,3.801
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.276,git/commit,21,3.801
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.345,git/commit,21,3.801
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.345,git/commit,21,3.801
git/commit createMergeCommit with no changes throws an error,0.078,git/commit,21,3.801
git/commit index corner cases can commit when staged new file is then deleted,0.135,git/commit,21,3.801
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.149,git/commit,21,3.801
git/commit index corner cases file is deleted in index,0.16,git/commit,21,3.801
git/rebase can parse progress returns a value indicating conflicts were encountered,0.422,git/rebase,7,3.89
git/rebase can parse progress status detects REBASE_HEAD,0.459,git/rebase,7,3.89
git/rebase can parse progress is a detached HEAD state,0.436,git/rebase,7,3.89
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.827,git/rebase,7,3.89
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.825,git/rebase,7,3.89
git/rebase can parse progress for long rebase is a detached HEAD state,0.87,git/rebase,7,3.89
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.158,git/stash,14,2.521
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.252,git/stash,14,2.521
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.198,git/stash,14,2.521
GitStore loadCommitBatch includes HEAD when loading commits,0.322,GitStore,11,2.387
GitStore can discard changes from a repository,0.164,GitStore,11,2.387
GitStore can discard a renamed file,0.145,GitStore,11,2.387
GitStore undo first commit reports the repository is unborn,0.183,GitStore,11,2.387
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.387
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.387
GitStore undo first commit has no staged files,0.192,GitStore,11,2.387
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.387
git/status getStatus with conflicted repo parses conflicted files with markers,0.285,git/status,12,1.968
git/status getStatus with conflicted repo parses conflicted files without markers,0.278,git/status,12,1.968
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.488,git/status,12,1.968
git/status getStatus with conflicted repo parses resolved files,0.291,git/status,12,1.968
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.108,git/status,12,1.968
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.124,git/status,12,1.968
git/status getStatus with unconflicted repo parses changed files,0.052,git/status,12,1.968
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,1.968
git/status getStatus with unconflicted repo reflects renames,0.095,git/status,12,1.968
git/status getStatus with unconflicted repo reflects copies,0.093,git/status,12,1.968
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.045,git/status,12,1.968
BranchPruner does nothing on non GitHub repositories,0.29,BranchPruner,6,1.605
BranchPruner prunes for GitHub repository,0.256,BranchPruner,6,1.605
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.202,BranchPruner,6,1.605
BranchPruner does not prune if there is no default branch,0.22,BranchPruner,6,1.605
BranchPruner does not prune reserved branches,0.25,BranchPruner,6,1.605
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.033,git/diff,19,1.552
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.552
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.552
git/diff getBlobImage retrieves valid images for deleted file,0.057,git/diff,19,1.552
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.552
git/diff imageDiff changes for text are not set,0.073,git/diff,19,1.552
git/diff getWorkingDirectoryDiff counts lines for new file,0.067,git/diff,19,1.552
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.552
git/diff getWorkingDirectoryDiff counts lines for staged file,0.067,git/diff,19,1.552
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.099,git/diff,19,1.552
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.133,git/diff,19,1.552
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.134,git/diff,19,1.552
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.111,git/diff,19,1.552
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.552
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.089,git/diff,19,1.552
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.055,git/diff,19,1.552
git/diff getBinaryPaths in repo with text only files returns an empty array,0.075,git/diff,19,1.552
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.075,git/diff,19,1.552
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.095,git/diff,19,1.552
git/checkout can checkout a valid branch name in an existing repository,0.11,git/checkout,6,0.952
git/checkout can checkout a branch when it exists on multiple remotes,0.122,git/checkout,6,0.952
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.952
git/checkout with submodules cleans up an submodule that no longer exists,0.339,git/checkout,6,0.952
git/checkout with submodules updates a changed submodule reference,0.207,git/checkout,6,0.952
git/reflog getRecentBranches returns the recently checked out branches,0.126,git/reflog,6,0.93
git/reflog getRecentBranches works after renaming a branch,0.167,git/reflog,6,0.93
git/reflog getRecentBranches returns a limited number of branches,0.231,git/reflog,6,0.93
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.13,git/reflog,6,0.93
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.175,git/reflog,6,0.93
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.052,git/reflog,6,0.93
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.266,formatPatch,5,0.898
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.574
git/submodule listSubmodules returns the expected tag,0.148,git/submodule,3,0.574
git/submodule resetSubmodulePaths update submodule to original commit,0.285,git/submodule,3,0.574
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.095,gitignore,9,0.613
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.094,gitignore,9,0.613
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.613
gitignore appendIgnoreRule appends one rule,0.1,gitignore,9,0.613
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.613
git/branch tip returns unborn for new repository,0.027,git/branch,10,0.555
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,10,0.555
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.555
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.555
git/branch tip returns non-origin remote,0.066,git/branch,10,0.555
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.068,git/branch,10,0.555
git/branch getBranchesPointedAt in a local repo finds one branch name,0.041,git/branch,10,0.555
git/branch getBranchesPointedAt in a local repo finds no branch names,0.035,git/branch,10,0.555
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.036,git/branch,10,0.555
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.07,git/branch,10,0.555
git-lfs isUsingLFS returns false for repository not using LFS,0.042,git-lfs,9,0.476
git-lfs isUsingLFS returns true if LFS is tracking a path,0.064,git-lfs,9,0.476
git/rev-parse isGitRepository should return true for a repository,0.043,git/rev-parse,10,0.609
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns false for default initialized repository,0.049,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns false for empty directory,0.039,git/rev-parse,10,0.609
git/rev-parse isBareRepository throws error for missing directory,0.036,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.038,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.186,git/rev-parse,10,0.609
git/merge merge and is successful returns true,0.038,git/merge,7,0.55
git/merge merge and is a noop returns false,0.053,git/merge,7,0.55
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.55
git/log getCommits loads history,0.057,git/log,7,0.54
git/log getCommits handles repository with HEAD file on disk,0.082,git/log,7,0.54
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.54
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.54
git/log getChangedFiles detects renames,0.076,git/log,7,0.54
git/log getChangedFiles detect copies,0.095,git/log,7,0.54
git/log getChangedFiles handles commit when HEAD exists on disk,0.05,git/log,7,0.54
git/reset reset can hard reset a repository,0.064,git/reset,2,0.106
git/remote getRemotes should return both remotes,0.04,git/remote,9,0.419
git/remote findDefaultRemote returns origin when multiple remotes found,0.058,git/remote,9,0.419
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.419
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.3
AppStore can select a repository,0.126,AppStore,5,0.177
git/config config looks up config values,0.491,git/config,4,0.738
git/config config returns null for undefined values,0.046,git/config,4,0.738
git/config global config getGlobalConfigPath gets the config path,0.061,git/config,4,0.738
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,4,0.738
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.208
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.208
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.208
git/core error handling does not throw for errors that were expected,0.047,git/core,4,0.227
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.227
git/core exit code handling does not throw for exit codes that were expected,0.047,git/core,4,0.227
git/core exit code handling throws for exit codes that were not expected,0.048,git/core,4,0.227
validatedRepositoryPath returns the path to the repository,0.056,validatedRepositoryPath,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.378,git/rebase,21,8.731
git/rebase detect conflicts status detects REBASE_HEAD,0.288,git/rebase,21,8.731
git/rebase detect conflicts has conflicted files in working directory,0.286,git/rebase,21,8.731
git/rebase detect conflicts is a detached HEAD state,0.315,git/rebase,21,8.731
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.316,git/rebase,21,8.731
git/rebase abort after conflicts found no longer has working directory changes,0.306,git/rebase,21,8.731
git/rebase abort after conflicts found returns to the feature branch,0.333,git/rebase,21,8.731
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.368,git/rebase,21,8.731
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.399,git/rebase,21,8.731
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.392,git/rebase,21,8.731
git/rebase continue after resolving conflicts returns success,0.444,git/rebase,21,8.731
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.425,git/rebase,21,8.731
git/rebase continue after resolving conflicts no longer has working directory changes,0.437,git/rebase,21,8.731
git/rebase continue after resolving conflicts returns to the feature branch,0.444,git/rebase,21,8.731
git/rebase continue after resolving conflicts branch is now a different ref,0.451,git/rebase,21,8.731
git/rebase continue with additional changes unrelated to conflicted files returns success,0.442,git/rebase,21,8.731
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.462,git/rebase,21,8.731
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.456,git/rebase,21,8.731
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.454,git/rebase,21,8.731
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.445,git/rebase,21,8.731
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.434,git/rebase,21,8.731
git/rebase can parse progress returns a value indicating conflicts were encountered,0.399,git/rebase,7,3.501
git/rebase can parse progress status detects REBASE_HEAD,0.386,git/rebase,7,3.501
git/rebase can parse progress is a detached HEAD state,0.378,git/rebase,7,3.501
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.754,git/rebase,7,3.501
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.735,git/rebase,7,3.501
git/rebase can parse progress for long rebase is a detached HEAD state,0.794,git/rebase,7,3.501
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.25
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,4.25
git/commit createCommit normal can commit for empty repository,0.13,git/commit,21,4.25
git/commit createCommit normal can commit renames,0.141,git/commit,21,4.25
git/commit createCommit partials can commit some lines from new file,0.166,git/commit,21,4.25
git/commit createCommit partials can commit second hunk from modified file,0.174,git/commit,21,4.25
git/commit createCommit partials can commit single delete from modified file,0.156,git/commit,21,4.25
git/commit createCommit partials can commit multiple hunks from modified file,0.174,git/commit,21,4.25
git/commit createCommit partials can commit some lines from deleted file,0.169,git/commit,21,4.25
git/commit createCommit partials can commit renames with modifications,0.17,git/commit,21,4.25
git/commit createCommit partials can commit renames with partially selected modifications,0.214,git/commit,21,4.25
git/commit createCommit with a merge conflict creates a merge commit,0.254,git/commit,21,4.25
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.236,git/commit,21,4.25
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.338,git/commit,21,4.25
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.322,git/commit,21,4.25
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.379,git/commit,21,4.25
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.384,git/commit,21,4.25
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,4.25
git/commit index corner cases can commit when staged new file is then deleted,0.152,git/commit,21,4.25
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.168,git/commit,21,4.25
git/commit index corner cases file is deleted in index,0.167,git/commit,21,4.25
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.182,git/stash,14,2.708
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.263,git/stash,14,2.708
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.223,git/stash,14,2.708
GitStore loadCommitBatch includes HEAD when loading commits,0.339,GitStore,11,2.41
GitStore can discard changes from a repository,0.172,GitStore,11,2.41
GitStore can discard a renamed file,0.15,GitStore,11,2.41
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.41
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.41
GitStore undo first commit clears the undo commit dialog,0.217,GitStore,11,2.41
GitStore undo first commit has no staged files,0.197,GitStore,11,2.41
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.41
git/status getStatus with conflicted repo parses conflicted files with markers,0.286,git/status,12,2.031
git/status getStatus with conflicted repo parses conflicted files without markers,0.295,git/status,12,2.031
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.523,git/status,12,2.031
git/status getStatus with conflicted repo parses resolved files,0.309,git/status,12,2.031
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.155,git/status,12,2.031
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.123,git/status,12,2.031
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,2.031
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,2.031
git/status getStatus with unconflicted repo reflects renames,0.08,git/status,12,2.031
git/status getStatus with unconflicted repo reflects copies,0.082,git/status,12,2.031
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.04,git/status,12,2.031
BranchPruner does nothing on non GitHub repositories,0.189,BranchPruner,6,1.412
BranchPruner prunes for GitHub repository,0.224,BranchPruner,6,1.412
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.204,BranchPruner,6,1.412
BranchPruner does not prune if there is no default branch,0.185,BranchPruner,6,1.412
BranchPruner does not prune reserved branches,0.23,BranchPruner,6,1.412
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.031,git/diff,19,1.613
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.613
git/diff getBlobImage retrieves valid image for modified file,0.101,git/diff,19,1.613
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,1.613
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.613
git/diff imageDiff changes for text are not set,0.071,git/diff,19,1.613
git/diff getWorkingDirectoryDiff counts lines for new file,0.068,git/diff,19,1.613
git/diff getWorkingDirectoryDiff counts lines for modified file,0.066,git/diff,19,1.613
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.613
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.096,git/diff,19,1.613
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.136,git/diff,19,1.613
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.131,git/diff,19,1.613
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.111,git/diff,19,1.613
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.117,git/diff,19,1.613
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.078,git/diff,19,1.613
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.057,git/diff,19,1.613
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.613
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.08,git/diff,19,1.613
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.099,git/diff,19,1.613
git/checkout can checkout a valid branch name in an existing repository,0.107,git/checkout,6,0.863
git/checkout can checkout a branch when it exists on multiple remotes,0.114,git/checkout,6,0.863
git/checkout will fail when an existing branch matches the remote branch,0.102,git/checkout,6,0.863
git/checkout with submodules cleans up an submodule that no longer exists,0.254,git/checkout,6,0.863
git/checkout with submodules updates a changed submodule reference,0.209,git/checkout,6,0.863
git/reflog getRecentBranches returns the recently checked out branches,0.142,git/reflog,6,0.977
git/reflog getRecentBranches works after renaming a branch,0.171,git/reflog,6,0.977
git/reflog getRecentBranches returns a limited number of branches,0.236,git/reflog,6,0.977
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.149,git/reflog,6,0.977
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.176,git/reflog,6,0.977
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.058,git/reflog,6,0.977
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.272,formatPatch,5,0.951
git/config config looks up config values,0.04,git/config,4,0.253
git/config config returns null for undefined values,0.038,git/config,4,0.253
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.253
git/config global config setGlobalConfigValue will replace all entries for a global value,0.077,git/config,4,0.253
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.108,gitignore,9,0.674
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.102,gitignore,9,0.674
gitignore saveGitIgnore applies rule correctly to repository,0.098,gitignore,9,0.674
gitignore appendIgnoreRule appends one rule,0.118,gitignore,9,0.674
gitignore appendIgnoreRule appends multiple rules,0.118,gitignore,9,0.674
git/rev-parse isGitRepository should return true for a repository,0.046,git/rev-parse,10,0.672
git/rev-parse isGitRepository should return false for a directory,0.047,git/rev-parse,10,0.672
git/rev-parse isBareRepository returns false for default initialized repository,0.055,git/rev-parse,10,0.672
git/rev-parse isBareRepository returns true for initialized bare repository,0.057,git/rev-parse,10,0.672
git/rev-parse isBareRepository returns false for empty directory,0.06,git/rev-parse,10,0.672
git/rev-parse isBareRepository throws error for missing directory,0.047,git/rev-parse,10,0.672
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.057,git/rev-parse,10,0.672
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.044,git/rev-parse,10,0.672
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.046,git/rev-parse,10,0.672
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.182,git/rev-parse,10,0.672
git/submodule listSubmodules returns the submodule entry,0.102,git/submodule,3,0.621
git/submodule listSubmodules returns the expected tag,0.148,git/submodule,3,0.621
git/submodule resetSubmodulePaths update submodule to original commit,0.326,git/submodule,3,0.621
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.647
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,10,0.647
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.647
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,10,0.647
git/branch tip returns non-origin remote,0.081,git/branch,10,0.647
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,10,0.647
git/branch getBranchesPointedAt in a local repo finds one branch name,0.046,git/branch,10,0.647
git/branch getBranchesPointedAt in a local repo finds no branch names,0.043,git/branch,10,0.647
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.043,git/branch,10,0.647
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.089,git/branch,10,0.647
git/merge merge and is successful returns true,0.034,git/merge,7,0.599
git/merge merge and is a noop returns false,0.055,git/merge,7,0.599
git/merge getMergeBase returns the common ancestor of two branches,0.069,git/merge,7,0.599
git/log getCommits loads history,0.059,git/log,7,0.552
git/log getCommits handles repository with HEAD file on disk,0.081,git/log,7,0.552
git/log getCommits handles repository with signed commit and log.showSignature set,0.097,git/log,7,0.552
git/log getChangedFiles loads the files changed in the commit,0.052,git/log,7,0.552
git/log getChangedFiles detects renames,0.084,git/log,7,0.552
git/log getChangedFiles detect copies,0.087,git/log,7,0.552
git/log getChangedFiles handles commit when HEAD exists on disk,0.047,git/log,7,0.552
git-lfs isUsingLFS returns false for repository not using LFS,0.05,git-lfs,9,0.642
git-lfs isUsingLFS returns true if LFS is tracking a path,0.174,git-lfs,9,0.642
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.426
git/remote findDefaultRemote returns origin when multiple remotes found,0.061,git/remote,9,0.426
git/remote findDefaultRemote returns something when origin removed,0.053,git/remote,9,0.426
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.044,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.032,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.026,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.31
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.228
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.228
git/core exit code handling does not throw for exit codes that were expected,0.055,git/core,4,0.228
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.228
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.043,git/for-each-ref,3,0.201
AppStore can select a repository,0.125,AppStore,5,0.179
validatedRepositoryPath returns the path to the repository,0.365,validatedRepositoryPath,2,0.424
git/reset reset can hard reset a repository,0.067,git/reset,2,0.113
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.044
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.368,git/rebase,21,8.498
git/rebase detect conflicts status detects REBASE_HEAD,0.279,git/rebase,21,8.498
git/rebase detect conflicts has conflicted files in working directory,0.283,git/rebase,21,8.498
git/rebase detect conflicts is a detached HEAD state,0.291,git/rebase,21,8.498
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.289,git/rebase,21,8.498
git/rebase abort after conflicts found no longer has working directory changes,0.292,git/rebase,21,8.498
git/rebase abort after conflicts found returns to the feature branch,0.304,git/rebase,21,8.498
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.379,git/rebase,21,8.498
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.381,git/rebase,21,8.498
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.37,git/rebase,21,8.498
git/rebase continue after resolving conflicts returns success,0.414,git/rebase,21,8.498
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.431,git/rebase,21,8.498
git/rebase continue after resolving conflicts no longer has working directory changes,0.444,git/rebase,21,8.498
git/rebase continue after resolving conflicts returns to the feature branch,0.419,git/rebase,21,8.498
git/rebase continue after resolving conflicts branch is now a different ref,0.436,git/rebase,21,8.498
git/rebase continue with additional changes unrelated to conflicted files returns success,0.444,git/rebase,21,8.498
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.439,git/rebase,21,8.498
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.449,git/rebase,21,8.498
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.498
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.474,git/rebase,21,8.498
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.42,git/rebase,21,8.498
git/commit createCommit normal commits the given files,0.11,git/commit,21,3.963
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,3.963
git/commit createCommit normal can commit for empty repository,0.126,git/commit,21,3.963
git/commit createCommit normal can commit renames,0.147,git/commit,21,3.963
git/commit createCommit partials can commit some lines from new file,0.156,git/commit,21,3.963
git/commit createCommit partials can commit second hunk from modified file,0.161,git/commit,21,3.963
git/commit createCommit partials can commit single delete from modified file,0.148,git/commit,21,3.963
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,3.963
git/commit createCommit partials can commit some lines from deleted file,0.156,git/commit,21,3.963
git/commit createCommit partials can commit renames with modifications,0.16,git/commit,21,3.963
git/commit createCommit partials can commit renames with partially selected modifications,0.194,git/commit,21,3.963
git/commit createCommit with a merge conflict creates a merge commit,0.234,git/commit,21,3.963
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.215,git/commit,21,3.963
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.294,git/commit,21,3.963
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.293,git/commit,21,3.963
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.35,git/commit,21,3.963
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.354,git/commit,21,3.963
git/commit createMergeCommit with no changes throws an error,0.087,git/commit,21,3.963
git/commit index corner cases can commit when staged new file is then deleted,0.136,git/commit,21,3.963
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,3.963
git/commit index corner cases file is deleted in index,0.163,git/commit,21,3.963
git/rebase can parse progress returns a value indicating conflicts were encountered,0.433,git/rebase,7,3.85
git/rebase can parse progress status detects REBASE_HEAD,0.419,git/rebase,7,3.85
git/rebase can parse progress is a detached HEAD state,0.438,git/rebase,7,3.85
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.809,git/rebase,7,3.85
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.839,git/rebase,7,3.85
git/rebase can parse progress for long rebase is a detached HEAD state,0.86,git/rebase,7,3.85
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.155,git/stash,14,2.472
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.245,git/stash,14,2.472
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.195,git/stash,14,2.472
GitStore loadCommitBatch includes HEAD when loading commits,0.335,GitStore,11,2.493
GitStore can discard changes from a repository,0.208,GitStore,11,2.493
GitStore can discard a renamed file,0.159,GitStore,11,2.493
GitStore undo first commit reports the repository is unborn,0.188,GitStore,11,2.493
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.493
GitStore undo first commit clears the undo commit dialog,0.208,GitStore,11,2.493
GitStore undo first commit has no staged files,0.203,GitStore,11,2.493
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.493
git/status getStatus with conflicted repo parses conflicted files with markers,0.293,git/status,12,2.057
git/status getStatus with conflicted repo parses conflicted files without markers,0.294,git/status,12,2.057
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.483,git/status,12,2.057
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,2.057
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.115,git/status,12,2.057
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.126,git/status,12,2.057
git/status getStatus with unconflicted repo parses changed files,0.063,git/status,12,2.057
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.1,git/status,12,2.057
git/status getStatus with unconflicted repo reflects renames,0.096,git/status,12,2.057
git/status getStatus with unconflicted repo reflects copies,0.082,git/status,12,2.057
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.051,git/status,12,2.057
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.394
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.037,git/diff,19,1.394
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.394
git/diff getBlobImage retrieves valid images for deleted file,0.048,git/diff,19,1.394
git/diff imageDiff changes for images are set,0.124,git/diff,19,1.394
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.394
git/diff getWorkingDirectoryDiff counts lines for new file,0.059,git/diff,19,1.394
git/diff getWorkingDirectoryDiff counts lines for modified file,0.061,git/diff,19,1.394
git/diff getWorkingDirectoryDiff counts lines for staged file,0.055,git/diff,19,1.394
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.081,git/diff,19,1.394
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.11,git/diff,19,1.394
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.116,git/diff,19,1.394
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.093,git/diff,19,1.394
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.097,git/diff,19,1.394
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.067,git/diff,19,1.394
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.394
git/diff getBinaryPaths in repo with text only files returns an empty array,0.064,git/diff,19,1.394
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.071,git/diff,19,1.394
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.081,git/diff,19,1.394
BranchPruner does nothing on non GitHub repositories,0.183,BranchPruner,6,1.419
BranchPruner prunes for GitHub repository,0.231,BranchPruner,6,1.419
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.179,BranchPruner,6,1.419
BranchPruner does not prune if there is no default branch,0.193,BranchPruner,6,1.419
BranchPruner does not prune reserved branches,0.238,BranchPruner,6,1.419
git/reflog getRecentBranches returns the recently checked out branches,0.126,git/reflog,6,0.886
git/reflog getRecentBranches works after renaming a branch,0.162,git/reflog,6,0.886
git/reflog getRecentBranches returns a limited number of branches,0.215,git/reflog,6,0.886
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.13,git/reflog,6,0.886
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.155,git/reflog,6,0.886
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.886
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.274,formatPatch,5,0.886
git/checkout can checkout a valid branch name in an existing repository,0.108,git/checkout,6,0.841
git/checkout can checkout a branch when it exists on multiple remotes,0.111,git/checkout,6,0.841
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.841
git/checkout with submodules cleans up an submodule that no longer exists,0.242,git/checkout,6,0.841
git/checkout with submodules updates a changed submodule reference,0.21,git/checkout,6,0.841
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.62
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.098,gitignore,9,0.62
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.62
gitignore appendIgnoreRule appends one rule,0.101,gitignore,9,0.62
gitignore appendIgnoreRule appends multiple rules,0.11,gitignore,9,0.62
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.655
git/rev-parse isGitRepository should return false for a directory,0.042,git/rev-parse,10,0.655
git/rev-parse isBareRepository returns false for default initialized repository,0.057,git/rev-parse,10,0.655
git/rev-parse isBareRepository returns true for initialized bare repository,0.062,git/rev-parse,10,0.655
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.655
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.655
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.655
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.045,git/rev-parse,10,0.655
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.049,git/rev-parse,10,0.655
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.189,git/rev-parse,10,0.655
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.616
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.616
git/branch tip returns detached for arbitrary checkout,0.053,git/branch,10,0.616
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,10,0.616
git/branch tip returns non-origin remote,0.078,git/branch,10,0.616
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.079,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.616
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.616
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.511
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.511
git/submodule listSubmodules returns the submodule entry,0.104,git/submodule,3,0.674
git/submodule listSubmodules returns the expected tag,0.169,git/submodule,3,0.674
git/submodule resetSubmodulePaths update submodule to original commit,0.358,git/submodule,3,0.674
git/merge merge and is successful returns true,0.039,git/merge,7,0.595
git/merge merge and is a noop returns false,0.049,git/merge,7,0.595
git/merge getMergeBase returns the common ancestor of two branches,0.067,git/merge,7,0.595
git/log getCommits loads history,0.061,git/log,7,0.553
git/log getCommits handles repository with HEAD file on disk,0.082,git/log,7,0.553
git/log getCommits handles repository with signed commit and log.showSignature set,0.097,git/log,7,0.553
git/log getChangedFiles loads the files changed in the commit,0.049,git/log,7,0.553
git/log getChangedFiles detects renames,0.087,git/log,7,0.553
git/log getChangedFiles detect copies,0.084,git/log,7,0.553
git/log getChangedFiles handles commit when HEAD exists on disk,0.047,git/log,7,0.553
git/remote getRemotes should return both remotes,0.048,git/remote,9,0.437
git/remote findDefaultRemote returns origin when multiple remotes found,0.058,git/remote,9,0.437
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.437
validatedRepositoryPath returns the path to the repository,0.041,validatedRepositoryPath,2,0.1
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.316
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.316
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.316
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.043,patch formatting,8,0.316
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.031,patch formatting,8,0.316
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.316
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.316
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.316
git/config config looks up config values,0.044,git/config,4,0.283
git/config config returns null for undefined values,0.047,git/config,4,0.283
git/config global config getGlobalConfigPath gets the config path,0.06,git/config,4,0.283
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,4,0.283
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.224
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.224
git/core exit code handling does not throw for exit codes that were expected,0.047,git/core,4,0.224
git/core exit code handling throws for exit codes that were not expected,0.046,git/core,4,0.224
git/for-each-ref getBranches fetches branches using for-each-ref,0.068,git/for-each-ref,3,0.215
git/for-each-ref getBranches should return empty list for empty repo,0.067,git/for-each-ref,3,0.215
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.051,git/for-each-ref,3,0.215
AppStore can select a repository,0.138,AppStore,5,0.19
git/reset reset can hard reset a repository,0.441,git/reset,2,0.486
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.046
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.377,git/rebase,21,8.529
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.529
git/rebase detect conflicts has conflicted files in working directory,0.283,git/rebase,21,8.529
git/rebase detect conflicts is a detached HEAD state,0.294,git/rebase,21,8.529
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.304,git/rebase,21,8.529
git/rebase abort after conflicts found no longer has working directory changes,0.305,git/rebase,21,8.529
git/rebase abort after conflicts found returns to the feature branch,0.329,git/rebase,21,8.529
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.365,git/rebase,21,8.529
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.385,git/rebase,21,8.529
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.369,git/rebase,21,8.529
git/rebase continue after resolving conflicts returns success,0.425,git/rebase,21,8.529
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.421,git/rebase,21,8.529
git/rebase continue after resolving conflicts no longer has working directory changes,0.446,git/rebase,21,8.529
git/rebase continue after resolving conflicts returns to the feature branch,0.422,git/rebase,21,8.529
git/rebase continue after resolving conflicts branch is now a different ref,0.471,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files returns success,0.428,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.427,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.439,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.445,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.449,git/rebase,21,8.529
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,8.529
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.825
git/commit createCommit normal commit does not strip commentary by default,0.089,git/commit,21,3.825
git/commit createCommit normal can commit for empty repository,0.115,git/commit,21,3.825
git/commit createCommit normal can commit renames,0.137,git/commit,21,3.825
git/commit createCommit partials can commit some lines from new file,0.148,git/commit,21,3.825
git/commit createCommit partials can commit second hunk from modified file,0.155,git/commit,21,3.825
git/commit createCommit partials can commit single delete from modified file,0.137,git/commit,21,3.825
git/commit createCommit partials can commit multiple hunks from modified file,0.164,git/commit,21,3.825
git/commit createCommit partials can commit some lines from deleted file,0.146,git/commit,21,3.825
git/commit createCommit partials can commit renames with modifications,0.162,git/commit,21,3.825
git/commit createCommit partials can commit renames with partially selected modifications,0.195,git/commit,21,3.825
git/commit createCommit with a merge conflict creates a merge commit,0.228,git/commit,21,3.825
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.207,git/commit,21,3.825
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.291,git/commit,21,3.825
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.278,git/commit,21,3.825
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.343,git/commit,21,3.825
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.354,git/commit,21,3.825
git/commit createMergeCommit with no changes throws an error,0.085,git/commit,21,3.825
git/commit index corner cases can commit when staged new file is then deleted,0.131,git/commit,21,3.825
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.146,git/commit,21,3.825
git/commit index corner cases file is deleted in index,0.146,git/commit,21,3.825
git/rebase can parse progress returns a value indicating conflicts were encountered,0.422,git/rebase,7,3.856
git/rebase can parse progress status detects REBASE_HEAD,0.431,git/rebase,7,3.856
git/rebase can parse progress is a detached HEAD state,0.419,git/rebase,7,3.856
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.799,git/rebase,7,3.856
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.89,git/rebase,7,3.856
git/rebase can parse progress for long rebase is a detached HEAD state,0.845,git/rebase,7,3.856
GitStore loadCommitBatch includes HEAD when loading commits,0.239,GitStore,11,2.347
GitStore can discard changes from a repository,0.169,GitStore,11,2.347
GitStore can discard a renamed file,0.176,GitStore,11,2.347
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.347
GitStore undo first commit pre-fills the commit message,0.116,GitStore,11,2.347
GitStore undo first commit clears the undo commit dialog,0.205,GitStore,11,2.347
GitStore undo first commit has no staged files,0.195,GitStore,11,2.347
GitStore repository with HEAD file can discard modified change cleanly,0.101,GitStore,11,2.347
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.138,git/stash,14,2.332
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.204,git/stash,14,2.332
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.176,git/stash,14,2.332
git/status getStatus with conflicted repo parses conflicted files with markers,0.229,git/status,12,1.598
git/status getStatus with conflicted repo parses conflicted files without markers,0.215,git/status,12,1.598
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.39,git/status,12,1.598
git/status getStatus with conflicted repo parses resolved files,0.218,git/status,12,1.598
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.098,git/status,12,1.598
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.108,git/status,12,1.598
git/status getStatus with unconflicted repo parses changed files,0.054,git/status,12,1.598
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.04,git/status,12,1.598
git/status getStatus with unconflicted repo reflects renames,0.077,git/status,12,1.598
git/status getStatus with unconflicted repo reflects copies,0.08,git/status,12,1.598
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.04,git/status,12,1.598
BranchPruner does nothing on non GitHub repositories,0.172,BranchPruner,6,1.447
BranchPruner prunes for GitHub repository,0.22,BranchPruner,6,1.447
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.264,BranchPruner,6,1.447
BranchPruner does not prune if there is no default branch,0.185,BranchPruner,6,1.447
BranchPruner does not prune reserved branches,0.238,BranchPruner,6,1.447
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.471
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.039,git/diff,19,1.471
git/diff getBlobImage retrieves valid image for modified file,0.037,git/diff,19,1.471
git/diff getBlobImage retrieves valid images for deleted file,0.052,git/diff,19,1.471
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.471
git/diff imageDiff changes for text are not set,0.071,git/diff,19,1.471
git/diff getWorkingDirectoryDiff counts lines for new file,0.065,git/diff,19,1.471
git/diff getWorkingDirectoryDiff counts lines for modified file,0.061,git/diff,19,1.471
git/diff getWorkingDirectoryDiff counts lines for staged file,0.06,git/diff,19,1.471
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.089,git/diff,19,1.471
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.132,git/diff,19,1.471
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.12,git/diff,19,1.471
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.118,git/diff,19,1.471
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.11,git/diff,19,1.471
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.471
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.471
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.471
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.471
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.089,git/diff,19,1.471
git/reflog getRecentBranches returns the recently checked out branches,0.134,git/reflog,6,0.953
git/reflog getRecentBranches works after renaming a branch,0.178,git/reflog,6,0.953
git/reflog getRecentBranches returns a limited number of branches,0.238,git/reflog,6,0.953
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.133,git/reflog,6,0.953
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.167,git/reflog,6,0.953
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.058,git/reflog,6,0.953
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.255,formatPatch,5,0.88
git/checkout can checkout a valid branch name in an existing repository,0.118,git/checkout,6,0.864
git/checkout can checkout a branch when it exists on multiple remotes,0.116,git/checkout,6,0.864
git/checkout will fail when an existing branch matches the remote branch,0.106,git/checkout,6,0.864
git/checkout with submodules cleans up an submodule that no longer exists,0.259,git/checkout,6,0.864
git/checkout with submodules updates a changed submodule reference,0.193,git/checkout,6,0.864
git/submodule listSubmodules returns the submodule entry,0.093,git/submodule,3,0.58
git/submodule listSubmodules returns the expected tag,0.14,git/submodule,3,0.58
git/submodule resetSubmodulePaths update submodule to original commit,0.303,git/submodule,3,0.58
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.584
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.584
git/rev-parse isBareRepository returns false for default initialized repository,0.045,git/rev-parse,10,0.584
git/rev-parse isBareRepository returns true for initialized bare repository,0.05,git/rev-parse,10,0.584
git/rev-parse isBareRepository returns false for empty directory,0.039,git/rev-parse,10,0.584
git/rev-parse isBareRepository throws error for missing directory,0.036,git/rev-parse,10,0.584
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.584
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.584
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.039,git/rev-parse,10,0.584
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.174,git/rev-parse,10,0.584
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.103,gitignore,9,0.662
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.103,gitignore,9,0.662
gitignore saveGitIgnore applies rule correctly to repository,0.098,gitignore,9,0.662
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.662
gitignore appendIgnoreRule appends multiple rules,0.116,gitignore,9,0.662
git/branch tip returns unborn for new repository,0.032,git/branch,10,0.62
git/branch tip returns correct ref if checkout occurs,0.055,git/branch,10,0.62
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.62
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,10,0.62
git/branch tip returns non-origin remote,0.079,git/branch,10,0.62
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.077,git/branch,10,0.62
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.62
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.62
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.62
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.081,git/branch,10,0.62
git/merge merge and is successful returns true,0.035,git/merge,7,0.584
git/merge merge and is a noop returns false,0.057,git/merge,7,0.584
git/merge getMergeBase returns the common ancestor of two branches,0.064,git/merge,7,0.584
git/log getCommits loads history,0.061,git/log,7,0.552
git/log getCommits handles repository with HEAD file on disk,0.082,git/log,7,0.552
git/log getCommits handles repository with signed commit and log.showSignature set,0.101,git/log,7,0.552
git/log getChangedFiles loads the files changed in the commit,0.052,git/log,7,0.552
git/log getChangedFiles detects renames,0.08,git/log,7,0.552
git/log getChangedFiles detect copies,0.084,git/log,7,0.552
git/log getChangedFiles handles commit when HEAD exists on disk,0.047,git/log,7,0.552
git-lfs isUsingLFS returns false for repository not using LFS,0.049,git-lfs,9,0.548
git-lfs isUsingLFS returns true if LFS is tracking a path,0.073,git-lfs,9,0.548
git/reset reset can hard reset a repository,0.07,git/reset,2,0.111
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.443
git/remote findDefaultRemote returns origin when multiple remotes found,0.054,git/remote,9,0.443
git/remote findDefaultRemote returns something when origin removed,0.065,git/remote,9,0.443
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.302
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.045,patch formatting,8,0.302
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.302
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.302
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.302
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.02,patch formatting,8,0.302
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.302
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.302
git/config config looks up config values,0.042,git/config,4,0.297
git/config config returns null for undefined values,0.048,git/config,4,0.297
git/config global config getGlobalConfigPath gets the config path,0.064,git/config,4,0.297
git/config global config setGlobalConfigValue will replace all entries for a global value,0.101,git/config,4,0.297
git/core error handling does not throw for errors that were expected,0.051,git/core,4,0.232
git/core error handling throws for errors that were not expected,0.048,git/core,4,0.232
git/core exit code handling does not throw for exit codes that were expected,0.048,git/core,4,0.232
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.232
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.22
git/for-each-ref getBranches should return empty list for empty repo,0.073,git/for-each-ref,3,0.22
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.05,git/for-each-ref,3,0.22
AppStore can select a repository,0.142,AppStore,5,0.195
validatedRepositoryPath returns the path to the repository,0.425,validatedRepositoryPath,2,0.485
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.044
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.369,git/rebase,21,8.533
git/rebase detect conflicts status detects REBASE_HEAD,0.278,git/rebase,21,8.533
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,8.533
git/rebase detect conflicts is a detached HEAD state,0.309,git/rebase,21,8.533
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.323,git/rebase,21,8.533
git/rebase abort after conflicts found no longer has working directory changes,0.312,git/rebase,21,8.533
git/rebase abort after conflicts found returns to the feature branch,0.306,git/rebase,21,8.533
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.392,git/rebase,21,8.533
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.383,git/rebase,21,8.533
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.361,git/rebase,21,8.533
git/rebase continue after resolving conflicts returns success,0.411,git/rebase,21,8.533
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.421,git/rebase,21,8.533
git/rebase continue after resolving conflicts no longer has working directory changes,0.457,git/rebase,21,8.533
git/rebase continue after resolving conflicts returns to the feature branch,0.422,git/rebase,21,8.533
git/rebase continue after resolving conflicts branch is now a different ref,0.458,git/rebase,21,8.533
git/rebase continue with additional changes unrelated to conflicted files returns success,0.461,git/rebase,21,8.533
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.425,git/rebase,21,8.533
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.436,git/rebase,21,8.533
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.438,git/rebase,21,8.533
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.441,git/rebase,21,8.533
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.533
git/rebase can parse progress returns a value indicating conflicts were encountered,0.381,git/rebase,7,3.504
git/rebase can parse progress status detects REBASE_HEAD,0.379,git/rebase,7,3.504
git/rebase can parse progress is a detached HEAD state,0.396,git/rebase,7,3.504
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.735,git/rebase,7,3.504
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.8,git/rebase,7,3.504
git/rebase can parse progress for long rebase is a detached HEAD state,0.758,git/rebase,7,3.504
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.214
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,4.214
git/commit createCommit normal can commit for empty repository,0.131,git/commit,21,4.214
git/commit createCommit normal can commit renames,0.146,git/commit,21,4.214
git/commit createCommit partials can commit some lines from new file,0.155,git/commit,21,4.214
git/commit createCommit partials can commit second hunk from modified file,0.168,git/commit,21,4.214
git/commit createCommit partials can commit single delete from modified file,0.156,git/commit,21,4.214
git/commit createCommit partials can commit multiple hunks from modified file,0.174,git/commit,21,4.214
git/commit createCommit partials can commit some lines from deleted file,0.165,git/commit,21,4.214
git/commit createCommit partials can commit renames with modifications,0.18,git/commit,21,4.214
git/commit createCommit partials can commit renames with partially selected modifications,0.208,git/commit,21,4.214
git/commit createCommit with a merge conflict creates a merge commit,0.249,git/commit,21,4.214
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.226,git/commit,21,4.214
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.338,git/commit,21,4.214
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.317,git/commit,21,4.214
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.394,git/commit,21,4.214
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.39,git/commit,21,4.214
git/commit createMergeCommit with no changes throws an error,0.085,git/commit,21,4.214
git/commit index corner cases can commit when staged new file is then deleted,0.142,git/commit,21,4.214
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.161,git/commit,21,4.214
git/commit index corner cases file is deleted in index,0.158,git/commit,21,4.214
GitStore loadCommitBatch includes HEAD when loading commits,0.252,GitStore,11,2.324
GitStore can discard changes from a repository,0.161,GitStore,11,2.324
GitStore can discard a renamed file,0.143,GitStore,11,2.324
GitStore undo first commit reports the repository is unborn,0.178,GitStore,11,2.324
GitStore undo first commit pre-fills the commit message,0.113,GitStore,11,2.324
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.324
GitStore undo first commit has no staged files,0.204,GitStore,11,2.324
GitStore repository with HEAD file can discard modified change cleanly,0.106,GitStore,11,2.324
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.144,git/stash,14,2.412
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.213,git/stash,14,2.412
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.178,git/stash,14,2.412
git/status getStatus with conflicted repo parses conflicted files with markers,0.216,git/status,12,1.592
git/status getStatus with conflicted repo parses conflicted files without markers,0.215,git/status,12,1.592
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.391,git/status,12,1.592
git/status getStatus with conflicted repo parses resolved files,0.212,git/status,12,1.592
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.098,git/status,12,1.592
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.102,git/status,12,1.592
git/status getStatus with unconflicted repo parses changed files,0.047,git/status,12,1.592
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.592
git/status getStatus with unconflicted repo reflects renames,0.093,git/status,12,1.592
git/status getStatus with unconflicted repo reflects copies,0.08,git/status,12,1.592
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,1.592
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.542
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.542
git/diff getBlobImage retrieves valid image for modified file,0.039,git/diff,19,1.542
git/diff getBlobImage retrieves valid images for deleted file,0.05,git/diff,19,1.542
git/diff imageDiff changes for images are set,0.116,git/diff,19,1.542
git/diff imageDiff changes for text are not set,0.095,git/diff,19,1.542
git/diff getWorkingDirectoryDiff counts lines for new file,0.067,git/diff,19,1.542
git/diff getWorkingDirectoryDiff counts lines for modified file,0.074,git/diff,19,1.542
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.542
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.542
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.542
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.122,git/diff,19,1.542
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.1,git/diff,19,1.542
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.101,git/diff,19,1.542
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.542
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.542
git/diff getBinaryPaths in repo with text only files returns an empty array,0.073,git/diff,19,1.542
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.542
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.089,git/diff,19,1.542
BranchPruner does nothing on non GitHub repositories,0.207,BranchPruner,6,1.52
BranchPruner prunes for GitHub repository,0.268,BranchPruner,6,1.52
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.201,BranchPruner,6,1.52
BranchPruner does not prune if there is no default branch,0.191,BranchPruner,6,1.52
BranchPruner does not prune reserved branches,0.247,BranchPruner,6,1.52
git/reflog getRecentBranches returns the recently checked out branches,0.134,git/reflog,6,0.925
git/reflog getRecentBranches works after renaming a branch,0.163,git/reflog,6,0.925
git/reflog getRecentBranches returns a limited number of branches,0.218,git/reflog,6,0.925
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.131,git/reflog,6,0.925
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.179,git/reflog,6,0.925
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.925
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.298,formatPatch,5,0.918
git/checkout can checkout a valid branch name in an existing repository,0.112,git/checkout,6,0.885
git/checkout can checkout a branch when it exists on multiple remotes,0.116,git/checkout,6,0.885
git/checkout will fail when an existing branch matches the remote branch,0.105,git/checkout,6,0.885
git/checkout with submodules cleans up an submodule that no longer exists,0.261,git/checkout,6,0.885
git/checkout with submodules updates a changed submodule reference,0.218,git/checkout,6,0.885
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.107,gitignore,9,0.643
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.102,gitignore,9,0.643
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.643
gitignore appendIgnoreRule appends one rule,0.108,gitignore,9,0.643
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.643
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.607
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,10,0.607
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.607
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.607
git/branch tip returns non-origin remote,0.077,git/branch,10,0.607
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,10,0.607
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.607
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.607
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.607
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.079,git/branch,10,0.607
git/merge merge and is successful returns true,0.041,git/merge,7,0.575
git/merge merge and is a noop returns false,0.05,git/merge,7,0.575
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.575
git/rev-parse isGitRepository should return true for a repository,0.044,git/rev-parse,10,0.635
git/rev-parse isGitRepository should return false for a directory,0.045,git/rev-parse,10,0.635
git/rev-parse isBareRepository returns false for default initialized repository,0.055,git/rev-parse,10,0.635
git/rev-parse isBareRepository returns true for initialized bare repository,0.061,git/rev-parse,10,0.635
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.635
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.635
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.056,git/rev-parse,10,0.635
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.635
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.039,git/rev-parse,10,0.635
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.175,git/rev-parse,10,0.635
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.674
git/submodule listSubmodules returns the expected tag,0.168,git/submodule,3,0.674
git/submodule resetSubmodulePaths update submodule to original commit,0.366,git/submodule,3,0.674
git/log getCommits loads history,0.059,git/log,7,0.535
git/log getCommits handles repository with HEAD file on disk,0.081,git/log,7,0.535
git/log getCommits handles repository with signed commit and log.showSignature set,0.093,git/log,7,0.535
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.535
git/log getChangedFiles detects renames,0.079,git/log,7,0.535
git/log getChangedFiles detect copies,0.085,git/log,7,0.535
git/log getChangedFiles handles commit when HEAD exists on disk,0.049,git/log,7,0.535
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.534
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.534
validatedRepositoryPath returns the path to the repository,0.041,validatedRepositoryPath,2,0.099
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.43
git/remote findDefaultRemote returns origin when multiple remotes found,0.054,git/remote,9,0.43
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.43
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.292
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.038,patch formatting,8,0.292
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.292
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.292
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.292
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.292
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.292
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.292
git/config config looks up config values,0.041,git/config,4,0.286
git/config config returns null for undefined values,0.044,git/config,4,0.286
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.286
git/config global config setGlobalConfigValue will replace all entries for a global value,0.098,git/config,4,0.286
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.231
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.231
git/core exit code handling does not throw for exit codes that were expected,0.045,git/core,4,0.231
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.231
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.204
AppStore can select a repository,0.138,AppStore,5,0.189
git/reset reset can hard reset a repository,0.426,git/reset,2,0.471
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.051
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.373,git/rebase,21,8.449
git/rebase detect conflicts status detects REBASE_HEAD,0.275,git/rebase,21,8.449
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,8.449
git/rebase detect conflicts is a detached HEAD state,0.29,git/rebase,21,8.449
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.292,git/rebase,21,8.449
git/rebase abort after conflicts found no longer has working directory changes,0.297,git/rebase,21,8.449
git/rebase abort after conflicts found returns to the feature branch,0.291,git/rebase,21,8.449
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.372,git/rebase,21,8.449
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.404,git/rebase,21,8.449
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.366,git/rebase,21,8.449
git/rebase continue after resolving conflicts returns success,0.431,git/rebase,21,8.449
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.426,git/rebase,21,8.449
git/rebase continue after resolving conflicts no longer has working directory changes,0.45,git/rebase,21,8.449
git/rebase continue after resolving conflicts returns to the feature branch,0.418,git/rebase,21,8.449
git/rebase continue after resolving conflicts branch is now a different ref,0.439,git/rebase,21,8.449
git/rebase continue with additional changes unrelated to conflicted files returns success,0.437,git/rebase,21,8.449
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.427,git/rebase,21,8.449
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.428,git/rebase,21,8.449
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.437,git/rebase,21,8.449
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.461,git/rebase,21,8.449
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.401,git/rebase,21,8.449
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.864
git/commit createCommit normal commit does not strip commentary by default,0.091,git/commit,21,3.864
git/commit createCommit normal can commit for empty repository,0.119,git/commit,21,3.864
git/commit createCommit normal can commit renames,0.139,git/commit,21,3.864
git/commit createCommit partials can commit some lines from new file,0.154,git/commit,21,3.864
git/commit createCommit partials can commit second hunk from modified file,0.16,git/commit,21,3.864
git/commit createCommit partials can commit single delete from modified file,0.135,git/commit,21,3.864
git/commit createCommit partials can commit multiple hunks from modified file,0.157,git/commit,21,3.864
git/commit createCommit partials can commit some lines from deleted file,0.152,git/commit,21,3.864
git/commit createCommit partials can commit renames with modifications,0.148,git/commit,21,3.864
git/commit createCommit partials can commit renames with partially selected modifications,0.186,git/commit,21,3.864
git/commit createCommit with a merge conflict creates a merge commit,0.228,git/commit,21,3.864
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.211,git/commit,21,3.864
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.309,git/commit,21,3.864
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.28,git/commit,21,3.864
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.348,git/commit,21,3.864
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.348,git/commit,21,3.864
git/commit createMergeCommit with no changes throws an error,0.085,git/commit,21,3.864
git/commit index corner cases can commit when staged new file is then deleted,0.134,git/commit,21,3.864
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.162,git/commit,21,3.864
git/commit index corner cases file is deleted in index,0.15,git/commit,21,3.864
git/rebase can parse progress returns a value indicating conflicts were encountered,0.433,git/rebase,7,3.907
git/rebase can parse progress status detects REBASE_HEAD,0.425,git/rebase,7,3.907
git/rebase can parse progress is a detached HEAD state,0.425,git/rebase,7,3.907
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.797,git/rebase,7,3.907
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.912,git/rebase,7,3.907
git/rebase can parse progress for long rebase is a detached HEAD state,0.865,git/rebase,7,3.907
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.161,git/stash,14,2.484
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.239,git/stash,14,2.484
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.203,git/stash,14,2.484
GitStore loadCommitBatch includes HEAD when loading commits,0.343,GitStore,11,2.408
GitStore can discard changes from a repository,0.17,GitStore,11,2.408
GitStore can discard a renamed file,0.162,GitStore,11,2.408
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.408
GitStore undo first commit pre-fills the commit message,0.118,GitStore,11,2.408
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.408
GitStore undo first commit has no staged files,0.196,GitStore,11,2.408
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.408
git/status getStatus with conflicted repo parses conflicted files with markers,0.284,git/status,12,1.981
git/status getStatus with conflicted repo parses conflicted files without markers,0.293,git/status,12,1.981
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.506,git/status,12,1.981
git/status getStatus with conflicted repo parses resolved files,0.313,git/status,12,1.981
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.106,git/status,12,1.981
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.124,git/status,12,1.981
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,1.981
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.981
git/status getStatus with unconflicted repo reflects renames,0.089,git/status,12,1.981
git/status getStatus with unconflicted repo reflects copies,0.083,git/status,12,1.981
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.981
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.099,git/diff,19,1.558
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.053,git/diff,19,1.558
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.558
git/diff getBlobImage retrieves valid images for deleted file,0.056,git/diff,19,1.558
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.558
git/diff imageDiff changes for text are not set,0.066,git/diff,19,1.558
git/diff getWorkingDirectoryDiff counts lines for new file,0.082,git/diff,19,1.558
git/diff getWorkingDirectoryDiff counts lines for modified file,0.062,git/diff,19,1.558
git/diff getWorkingDirectoryDiff counts lines for staged file,0.067,git/diff,19,1.558
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.092,git/diff,19,1.558
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.119,git/diff,19,1.558
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.128,git/diff,19,1.558
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.558
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.558
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.558
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.558
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.558
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.079,git/diff,19,1.558
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.09,git/diff,19,1.558
BranchPruner does nothing on non GitHub repositories,0.291,BranchPruner,6,1.602
BranchPruner prunes for GitHub repository,0.255,BranchPruner,6,1.602
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.192,BranchPruner,6,1.602
BranchPruner does not prune if there is no default branch,0.219,BranchPruner,6,1.602
BranchPruner does not prune reserved branches,0.242,BranchPruner,6,1.602
git/reflog getRecentBranches returns the recently checked out branches,0.133,git/reflog,6,0.927
git/reflog getRecentBranches works after renaming a branch,0.164,git/reflog,6,0.927
git/reflog getRecentBranches returns a limited number of branches,0.226,git/reflog,6,0.927
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.138,git/reflog,6,0.927
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.163,git/reflog,6,0.927
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.057,git/reflog,6,0.927
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.298,formatPatch,5,0.924
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.837
git/checkout can checkout a branch when it exists on multiple remotes,0.119,git/checkout,6,0.837
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.837
git/checkout with submodules cleans up an submodule that no longer exists,0.229,git/checkout,6,0.837
git/checkout with submodules updates a changed submodule reference,0.212,git/checkout,6,0.837
git/submodule listSubmodules returns the submodule entry,0.199,git/submodule,3,0.705
git/submodule listSubmodules returns the expected tag,0.152,git/submodule,3,0.705
git/submodule resetSubmodulePaths update submodule to original commit,0.313,git/submodule,3,0.705
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.094,gitignore,9,0.59
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.087,gitignore,9,0.59
gitignore saveGitIgnore applies rule correctly to repository,0.082,gitignore,9,0.59
gitignore appendIgnoreRule appends one rule,0.103,gitignore,9,0.59
gitignore appendIgnoreRule appends multiple rules,0.102,gitignore,9,0.59
git/rev-parse isGitRepository should return true for a repository,0.049,git/rev-parse,10,0.595
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns false for default initialized repository,0.055,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.595
git/rev-parse isBareRepository throws error for missing directory,0.046,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.038,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.035,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.159,git/rev-parse,10,0.595
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.574
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,10,0.574
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.574
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.574
git/branch tip returns non-origin remote,0.068,git/branch,10,0.574
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,10,0.574
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.574
git/branch getBranchesPointedAt in a local repo finds no branch names,0.036,git/branch,10,0.574
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.574
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.072,git/branch,10,0.574
git/merge merge and is successful returns true,0.037,git/merge,7,0.515
git/merge merge and is a noop returns false,0.047,git/merge,7,0.515
git/merge getMergeBase returns the common ancestor of two branches,0.056,git/merge,7,0.515
git/log getCommits loads history,0.055,git/log,7,0.507
git/log getCommits handles repository with HEAD file on disk,0.077,git/log,7,0.507
git/log getCommits handles repository with signed commit and log.showSignature set,0.09,git/log,7,0.507
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.507
git/log getChangedFiles detects renames,0.075,git/log,7,0.507
git/log getChangedFiles detect copies,0.079,git/log,7,0.507
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.507
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.491
git-lfs isUsingLFS returns true if LFS is tracking a path,0.072,git-lfs,9,0.491
git/reset reset can hard reset a repository,0.067,git/reset,2,0.111
git/remote getRemotes should return both remotes,0.14,git/remote,9,0.534
git/remote findDefaultRemote returns origin when multiple remotes found,0.073,git/remote,9,0.534
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.534
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.312
git/config config looks up config values,0.041,git/config,4,0.272
git/config config returns null for undefined values,0.046,git/config,4,0.272
git/config global config getGlobalConfigPath gets the config path,0.056,git/config,4,0.272
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,4,0.272
git/core error handling does not throw for errors that were expected,0.052,git/core,4,0.23
git/core error handling throws for errors that were not expected,0.054,git/core,4,0.23
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.23
git/core exit code handling throws for exit codes that were not expected,0.039,git/core,4,0.23
git/for-each-ref getBranches fetches branches using for-each-ref,0.06,git/for-each-ref,3,0.189
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.189
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.041,git/for-each-ref,3,0.189
AppStore can select a repository,0.126,AppStore,5,0.179
validatedRepositoryPath returns the path to the repository,0.366,validatedRepositoryPath,2,0.426
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.373,git/rebase,21,8.458
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.458
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,8.458
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,8.458
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.306,git/rebase,21,8.458
git/rebase abort after conflicts found no longer has working directory changes,0.304,git/rebase,21,8.458
git/rebase abort after conflicts found returns to the feature branch,0.299,git/rebase,21,8.458
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.369,git/rebase,21,8.458
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.377,git/rebase,21,8.458
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.358,git/rebase,21,8.458
git/rebase continue after resolving conflicts returns success,0.415,git/rebase,21,8.458
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.425,git/rebase,21,8.458
git/rebase continue after resolving conflicts no longer has working directory changes,0.468,git/rebase,21,8.458
git/rebase continue after resolving conflicts returns to the feature branch,0.42,git/rebase,21,8.458
git/rebase continue after resolving conflicts branch is now a different ref,0.448,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files returns success,0.434,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.433,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.429,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.444,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.449,git/rebase,21,8.458
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.412,git/rebase,21,8.458
git/rebase can parse progress returns a value indicating conflicts were encountered,0.375,git/rebase,7,3.371
git/rebase can parse progress status detects REBASE_HEAD,0.366,git/rebase,7,3.371
git/rebase can parse progress is a detached HEAD state,0.365,git/rebase,7,3.371
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.727,git/rebase,7,3.371
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.745,git/rebase,7,3.371
git/rebase can parse progress for long rebase is a detached HEAD state,0.738,git/rebase,7,3.371
git/commit createCommit normal commits the given files,0.113,git/commit,21,4.095
git/commit createCommit normal commit does not strip commentary by default,0.095,git/commit,21,4.095
git/commit createCommit normal can commit for empty repository,0.122,git/commit,21,4.095
git/commit createCommit normal can commit renames,0.14,git/commit,21,4.095
git/commit createCommit partials can commit some lines from new file,0.152,git/commit,21,4.095
git/commit createCommit partials can commit second hunk from modified file,0.167,git/commit,21,4.095
git/commit createCommit partials can commit single delete from modified file,0.148,git/commit,21,4.095
git/commit createCommit partials can commit multiple hunks from modified file,0.164,git/commit,21,4.095
git/commit createCommit partials can commit some lines from deleted file,0.153,git/commit,21,4.095
git/commit createCommit partials can commit renames with modifications,0.165,git/commit,21,4.095
git/commit createCommit partials can commit renames with partially selected modifications,0.216,git/commit,21,4.095
git/commit createCommit with a merge conflict creates a merge commit,0.25,git/commit,21,4.095
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.225,git/commit,21,4.095
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.319,git/commit,21,4.095
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.308,git/commit,21,4.095
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.372,git/commit,21,4.095
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.378,git/commit,21,4.095
git/commit createMergeCommit with no changes throws an error,0.076,git/commit,21,4.095
git/commit index corner cases can commit when staged new file is then deleted,0.145,git/commit,21,4.095
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.168,git/commit,21,4.095
git/commit index corner cases file is deleted in index,0.164,git/commit,21,4.095
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.178,git/stash,14,2.747
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.244,git/stash,14,2.747
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.221,git/stash,14,2.747
GitStore loadCommitBatch includes HEAD when loading commits,0.332,GitStore,11,2.41
GitStore can discard changes from a repository,0.198,GitStore,11,2.41
GitStore can discard a renamed file,0.143,GitStore,11,2.41
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.41
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.41
GitStore undo first commit clears the undo commit dialog,0.202,GitStore,11,2.41
GitStore undo first commit has no staged files,0.197,GitStore,11,2.41
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.41
git/status getStatus with conflicted repo parses conflicted files with markers,0.277,git/status,12,2.008
git/status getStatus with conflicted repo parses conflicted files without markers,0.29,git/status,12,2.008
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.477,git/status,12,2.008
git/status getStatus with conflicted repo parses resolved files,0.3,git/status,12,2.008
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.108,git/status,12,2.008
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.13,git/status,12,2.008
git/status getStatus with unconflicted repo parses changed files,0.052,git/status,12,2.008
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.101,git/status,12,2.008
git/status getStatus with unconflicted repo reflects renames,0.093,git/status,12,2.008
git/status getStatus with unconflicted repo reflects copies,0.079,git/status,12,2.008
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.049,git/status,12,2.008
BranchPruner does nothing on non GitHub repositories,0.179,BranchPruner,6,1.407
BranchPruner prunes for GitHub repository,0.24,BranchPruner,6,1.407
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.204,BranchPruner,6,1.407
BranchPruner does not prune if there is no default branch,0.169,BranchPruner,6,1.407
BranchPruner does not prune reserved branches,0.229,BranchPruner,6,1.407
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.087,git/diff,19,1.626
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.061,git/diff,19,1.626
git/diff getBlobImage retrieves valid image for modified file,0.05,git/diff,19,1.626
git/diff getBlobImage retrieves valid images for deleted file,0.057,git/diff,19,1.626
git/diff imageDiff changes for images are set,0.085,git/diff,19,1.626
git/diff imageDiff changes for text are not set,0.071,git/diff,19,1.626
git/diff getWorkingDirectoryDiff counts lines for new file,0.072,git/diff,19,1.626
git/diff getWorkingDirectoryDiff counts lines for modified file,0.066,git/diff,19,1.626
git/diff getWorkingDirectoryDiff counts lines for staged file,0.067,git/diff,19,1.626
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.105,git/diff,19,1.626
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.138,git/diff,19,1.626
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.136,git/diff,19,1.626
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.112,git/diff,19,1.626
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.108,git/diff,19,1.626
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.081,git/diff,19,1.626
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.054,git/diff,19,1.626
git/diff getBinaryPaths in repo with text only files returns an empty array,0.07,git/diff,19,1.626
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.073,git/diff,19,1.626
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.086,git/diff,19,1.626
git/reflog getRecentBranches returns the recently checked out branches,0.134,git/reflog,6,0.955
git/reflog getRecentBranches works after renaming a branch,0.181,git/reflog,6,0.955
git/reflog getRecentBranches returns a limited number of branches,0.235,git/reflog,6,0.955
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.129,git/reflog,6,0.955
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.169,git/reflog,6,0.955
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.058,git/reflog,6,0.955
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.31,formatPatch,5,0.948
git/checkout can checkout a valid branch name in an existing repository,0.115,git/checkout,6,0.879
git/checkout can checkout a branch when it exists on multiple remotes,0.112,git/checkout,6,0.879
git/checkout will fail when an existing branch matches the remote branch,0.105,git/checkout,6,0.879
git/checkout with submodules cleans up an submodule that no longer exists,0.269,git/checkout,6,0.879
git/checkout with submodules updates a changed submodule reference,0.205,git/checkout,6,0.879
git/submodule listSubmodules returns the submodule entry,0.093,git/submodule,3,0.571
git/submodule listSubmodules returns the expected tag,0.141,git/submodule,3,0.571
git/submodule resetSubmodulePaths update submodule to original commit,0.293,git/submodule,3,0.571
git/rev-parse isGitRepository should return true for a repository,0.044,git/rev-parse,10,0.62
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.62
git/rev-parse isBareRepository returns false for default initialized repository,0.047,git/rev-parse,10,0.62
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.62
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.62
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.62
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.62
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.62
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.62
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.188,git/rev-parse,10,0.62
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.107,gitignore,9,0.666
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.099,gitignore,9,0.666
gitignore saveGitIgnore applies rule correctly to repository,0.097,gitignore,9,0.666
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.666
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.666
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.599
git/branch tip returns correct ref if checkout occurs,0.052,git/branch,10,0.599
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.599
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.599
git/branch tip returns non-origin remote,0.071,git/branch,10,0.599
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.599
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.599
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.599
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.599
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.079,git/branch,10,0.599
git/remote getRemotes should return both remotes,0.038,git/remote,9,0.395
git/remote findDefaultRemote returns origin when multiple remotes found,0.046,git/remote,9,0.395
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.395
git/merge merge and is successful returns true,0.035,git/merge,7,0.598
git/merge merge and is a noop returns false,0.053,git/merge,7,0.598
git/merge getMergeBase returns the common ancestor of two branches,0.068,git/merge,7,0.598
git/log getCommits loads history,0.059,git/log,7,0.551
git/log getCommits handles repository with HEAD file on disk,0.083,git/log,7,0.551
git/log getCommits handles repository with signed commit and log.showSignature set,0.097,git/log,7,0.551
git/log getChangedFiles loads the files changed in the commit,0.053,git/log,7,0.551
git/log getChangedFiles detects renames,0.086,git/log,7,0.551
git/log getChangedFiles detect copies,0.082,git/log,7,0.551
git/log getChangedFiles handles commit when HEAD exists on disk,0.047,git/log,7,0.551
git-lfs isUsingLFS returns false for repository not using LFS,0.049,git-lfs,9,0.65
git-lfs isUsingLFS returns true if LFS is tracking a path,0.178,git-lfs,9,0.65
validatedRepositoryPath returns the path to the repository,0.044,validatedRepositoryPath,2,0.103
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.044,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.025,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.317
git/config config looks up config values,0.038,git/config,4,0.259
git/config config returns null for undefined values,0.041,git/config,4,0.259
git/config global config getGlobalConfigPath gets the config path,0.055,git/config,4,0.259
git/config global config setGlobalConfigValue will replace all entries for a global value,0.085,git/config,4,0.259
git/core error handling does not throw for errors that were expected,0.041,git/core,4,0.22
git/core error handling throws for errors that were not expected,0.048,git/core,4,0.22
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.22
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.22
git/for-each-ref getBranches fetches branches using for-each-ref,0.068,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.204
AppStore can select a repository,0.127,AppStore,5,0.182
git/reset reset can hard reset a repository,0.395,git/reset,2,0.443
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.369,git/rebase,21,8.55
git/rebase detect conflicts status detects REBASE_HEAD,0.295,git/rebase,21,8.55
git/rebase detect conflicts has conflicted files in working directory,0.288,git/rebase,21,8.55
git/rebase detect conflicts is a detached HEAD state,0.287,git/rebase,21,8.55
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.303,git/rebase,21,8.55
git/rebase abort after conflicts found no longer has working directory changes,0.309,git/rebase,21,8.55
git/rebase abort after conflicts found returns to the feature branch,0.307,git/rebase,21,8.55
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.361,git/rebase,21,8.55
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.387,git/rebase,21,8.55
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.364,git/rebase,21,8.55
git/rebase continue after resolving conflicts returns success,0.423,git/rebase,21,8.55
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.424,git/rebase,21,8.55
git/rebase continue after resolving conflicts no longer has working directory changes,0.461,git/rebase,21,8.55
git/rebase continue after resolving conflicts returns to the feature branch,0.414,git/rebase,21,8.55
git/rebase continue after resolving conflicts branch is now a different ref,0.471,git/rebase,21,8.55
git/rebase continue with additional changes unrelated to conflicted files returns success,0.421,git/rebase,21,8.55
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.42,git/rebase,21,8.55
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.427,git/rebase,21,8.55
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.459,git/rebase,21,8.55
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.482,git/rebase,21,8.55
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.411,git/rebase,21,8.55
git/commit createCommit normal commits the given files,0.11,git/commit,21,3.882
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.882
git/commit createCommit normal can commit for empty repository,0.12,git/commit,21,3.882
git/commit createCommit normal can commit renames,0.137,git/commit,21,3.882
git/commit createCommit partials can commit some lines from new file,0.147,git/commit,21,3.882
git/commit createCommit partials can commit second hunk from modified file,0.153,git/commit,21,3.882
git/commit createCommit partials can commit single delete from modified file,0.142,git/commit,21,3.882
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,3.882
git/commit createCommit partials can commit some lines from deleted file,0.149,git/commit,21,3.882
git/commit createCommit partials can commit renames with modifications,0.157,git/commit,21,3.882
git/commit createCommit partials can commit renames with partially selected modifications,0.197,git/commit,21,3.882
git/commit createCommit with a merge conflict creates a merge commit,0.228,git/commit,21,3.882
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.212,git/commit,21,3.882
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.296,git/commit,21,3.882
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.283,git/commit,21,3.882
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.367,git/commit,21,3.882
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.347,git/commit,21,3.882
git/commit createMergeCommit with no changes throws an error,0.082,git/commit,21,3.882
git/commit index corner cases can commit when staged new file is then deleted,0.136,git/commit,21,3.882
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.151,git/commit,21,3.882
git/commit index corner cases file is deleted in index,0.155,git/commit,21,3.882
git/rebase can parse progress returns a value indicating conflicts were encountered,0.418,git/rebase,7,3.887
git/rebase can parse progress status detects REBASE_HEAD,0.437,git/rebase,7,3.887
git/rebase can parse progress is a detached HEAD state,0.494,git/rebase,7,3.887
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.806,git/rebase,7,3.887
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.833,git/rebase,7,3.887
git/rebase can parse progress for long rebase is a detached HEAD state,0.848,git/rebase,7,3.887
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.168,git/stash,14,2.644
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.257,git/stash,14,2.644
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.193,git/stash,14,2.644
GitStore loadCommitBatch includes HEAD when loading commits,0.36,GitStore,11,2.422
GitStore can discard changes from a repository,0.169,GitStore,11,2.422
GitStore can discard a renamed file,0.149,GitStore,11,2.422
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.422
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.422
GitStore undo first commit clears the undo commit dialog,0.21,GitStore,11,2.422
GitStore undo first commit has no staged files,0.201,GitStore,11,2.422
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.422
git/status getStatus with conflicted repo parses conflicted files with markers,0.283,git/status,12,2.078
git/status getStatus with conflicted repo parses conflicted files without markers,0.294,git/status,12,2.078
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.512,git/status,12,2.078
git/status getStatus with conflicted repo parses resolved files,0.31,git/status,12,2.078
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.104,git/status,12,2.078
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.128,git/status,12,2.078
git/status getStatus with unconflicted repo parses changed files,0.054,git/status,12,2.078
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.108,git/status,12,2.078
git/status getStatus with unconflicted repo reflects renames,0.097,git/status,12,2.078
git/status getStatus with unconflicted repo reflects copies,0.086,git/status,12,2.078
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.051,git/status,12,2.078
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.038,git/diff,19,1.594
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.594
git/diff getBlobImage retrieves valid image for modified file,0.045,git/diff,19,1.594
git/diff getBlobImage retrieves valid images for deleted file,0.054,git/diff,19,1.594
git/diff imageDiff changes for images are set,0.133,git/diff,19,1.594
git/diff imageDiff changes for text are not set,0.093,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for new file,0.079,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for modified file,0.072,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.594
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.089,git/diff,19,1.594
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.594
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.126,git/diff,19,1.594
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.108,git/diff,19,1.594
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.107,git/diff,19,1.594
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.594
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.054,git/diff,19,1.594
git/diff getBinaryPaths in repo with text only files returns an empty array,0.071,git/diff,19,1.594
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.088,git/diff,19,1.594
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.088,git/diff,19,1.594
BranchPruner does nothing on non GitHub repositories,0.189,BranchPruner,6,1.432
BranchPruner prunes for GitHub repository,0.249,BranchPruner,6,1.432
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.188,BranchPruner,6,1.432
BranchPruner does not prune if there is no default branch,0.181,BranchPruner,6,1.432
BranchPruner does not prune reserved branches,0.234,BranchPruner,6,1.432
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.884
git/reflog getRecentBranches works after renaming a branch,0.164,git/reflog,6,0.884
git/reflog getRecentBranches returns a limited number of branches,0.211,git/reflog,6,0.884
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.13,git/reflog,6,0.884
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.157,git/reflog,6,0.884
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.884
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.261,formatPatch,5,0.863
git/checkout can checkout a valid branch name in an existing repository,0.106,git/checkout,6,0.842
git/checkout can checkout a branch when it exists on multiple remotes,0.116,git/checkout,6,0.842
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.842
git/checkout with submodules cleans up an submodule that no longer exists,0.252,git/checkout,6,0.842
git/checkout with submodules updates a changed submodule reference,0.195,git/checkout,6,0.842
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.098,gitignore,9,0.648
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.101,gitignore,9,0.648
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.648
gitignore appendIgnoreRule appends one rule,0.107,gitignore,9,0.648
gitignore appendIgnoreRule appends multiple rules,0.112,gitignore,9,0.648
git-lfs isUsingLFS returns false for repository not using LFS,0.04,git-lfs,9,0.457
git-lfs isUsingLFS returns true if LFS is tracking a path,0.061,git-lfs,9,0.457
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.616
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.616
git/rev-parse isBareRepository returns false for default initialized repository,0.055,git/rev-parse,10,0.616
git/rev-parse isBareRepository returns true for initialized bare repository,0.054,git/rev-parse,10,0.616
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.616
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.616
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.059,git/rev-parse,10,0.616
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.616
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.616
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.172,git/rev-parse,10,0.616
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.605
git/branch tip returns correct ref if checkout occurs,0.057,git/branch,10,0.605
git/branch tip returns detached for arbitrary checkout,0.039,git/branch,10,0.605
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.605
git/branch tip returns non-origin remote,0.074,git/branch,10,0.605
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.605
git/branch getBranchesPointedAt in a local repo finds one branch name,0.05,git/branch,10,0.605
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.605
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.605
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.605
git/merge merge and is successful returns true,0.037,git/merge,7,0.572
git/merge merge and is a noop returns false,0.049,git/merge,7,0.572
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.572
git/submodule listSubmodules returns the submodule entry,0.103,git/submodule,3,0.629
git/submodule listSubmodules returns the expected tag,0.154,git/submodule,3,0.629
git/submodule resetSubmodulePaths update submodule to original commit,0.328,git/submodule,3,0.629
git/log getCommits loads history,0.062,git/log,7,0.517
git/log getCommits handles repository with HEAD file on disk,0.077,git/log,7,0.517
git/log getCommits handles repository with signed commit and log.showSignature set,0.089,git/log,7,0.517
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.517
git/log getChangedFiles detects renames,0.08,git/log,7,0.517
git/log getChangedFiles detect copies,0.078,git/log,7,0.517
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.517
git/reset reset can hard reset a repository,0.064,git/reset,2,0.107
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.43
git/remote findDefaultRemote returns origin when multiple remotes found,0.05,git/remote,9,0.43
git/remote findDefaultRemote returns something when origin removed,0.06,git/remote,9,0.43
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.047,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.303
git/config config looks up config values,0.042,git/config,4,0.275
git/config config returns null for undefined values,0.045,git/config,4,0.275
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.275
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,4,0.275
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.225
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.225
git/core exit code handling does not throw for exit codes that were expected,0.045,git/core,4,0.225
git/core exit code handling throws for exit codes that were not expected,0.047,git/core,4,0.225
git/for-each-ref getBranches fetches branches using for-each-ref,0.07,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for empty repo,0.065,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.211
AppStore can select a repository,0.136,AppStore,5,0.19
validatedRepositoryPath returns the path to the repository,0.536,validatedRepositoryPath,2,0.596
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.052
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.381,git/rebase,21,8.526
git/rebase detect conflicts status detects REBASE_HEAD,0.272,git/rebase,21,8.526
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.526
git/rebase detect conflicts is a detached HEAD state,0.309,git/rebase,21,8.526
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.299,git/rebase,21,8.526
git/rebase abort after conflicts found no longer has working directory changes,0.329,git/rebase,21,8.526
git/rebase abort after conflicts found returns to the feature branch,0.312,git/rebase,21,8.526
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.377,git/rebase,21,8.526
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.38,git/rebase,21,8.526
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.358,git/rebase,21,8.526
git/rebase continue after resolving conflicts returns success,0.413,git/rebase,21,8.526
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.414,git/rebase,21,8.526
git/rebase continue after resolving conflicts no longer has working directory changes,0.456,git/rebase,21,8.526
git/rebase continue after resolving conflicts returns to the feature branch,0.453,git/rebase,21,8.526
git/rebase continue after resolving conflicts branch is now a different ref,0.448,git/rebase,21,8.526
git/rebase continue with additional changes unrelated to conflicted files returns success,0.417,git/rebase,21,8.526
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.414,git/rebase,21,8.526
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.429,git/rebase,21,8.526
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.443,git/rebase,21,8.526
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.449,git/rebase,21,8.526
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.447,git/rebase,21,8.526
git/rebase can parse progress returns a value indicating conflicts were encountered,0.386,git/rebase,7,3.391
git/rebase can parse progress status detects REBASE_HEAD,0.363,git/rebase,7,3.391
git/rebase can parse progress is a detached HEAD state,0.387,git/rebase,7,3.391
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.704,git/rebase,7,3.391
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.731,git/rebase,7,3.391
git/rebase can parse progress for long rebase is a detached HEAD state,0.757,git/rebase,7,3.391
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.185
git/commit createCommit normal commit does not strip commentary by default,0.1,git/commit,21,4.185
git/commit createCommit normal can commit for empty repository,0.13,git/commit,21,4.185
git/commit createCommit normal can commit renames,0.14,git/commit,21,4.185
git/commit createCommit partials can commit some lines from new file,0.169,git/commit,21,4.185
git/commit createCommit partials can commit second hunk from modified file,0.168,git/commit,21,4.185
git/commit createCommit partials can commit single delete from modified file,0.153,git/commit,21,4.185
git/commit createCommit partials can commit multiple hunks from modified file,0.173,git/commit,21,4.185
git/commit createCommit partials can commit some lines from deleted file,0.164,git/commit,21,4.185
git/commit createCommit partials can commit renames with modifications,0.17,git/commit,21,4.185
git/commit createCommit partials can commit renames with partially selected modifications,0.216,git/commit,21,4.185
git/commit createCommit with a merge conflict creates a merge commit,0.245,git/commit,21,4.185
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.235,git/commit,21,4.185
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.328,git/commit,21,4.185
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.329,git/commit,21,4.185
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.366,git/commit,21,4.185
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.374,git/commit,21,4.185
git/commit createMergeCommit with no changes throws an error,0.082,git/commit,21,4.185
git/commit index corner cases can commit when staged new file is then deleted,0.143,git/commit,21,4.185
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.163,git/commit,21,4.185
git/commit index corner cases file is deleted in index,0.163,git/commit,21,4.185
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.161,git/stash,14,2.529
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.249,git/stash,14,2.529
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.208,git/stash,14,2.529
GitStore loadCommitBatch includes HEAD when loading commits,0.363,GitStore,11,2.4
GitStore can discard changes from a repository,0.166,GitStore,11,2.4
GitStore can discard a renamed file,0.146,GitStore,11,2.4
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.4
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.4
GitStore undo first commit clears the undo commit dialog,0.209,GitStore,11,2.4
GitStore undo first commit has no staged files,0.199,GitStore,11,2.4
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.4
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.958
git/status getStatus with conflicted repo parses conflicted files without markers,0.292,git/status,12,1.958
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.491,git/status,12,1.958
git/status getStatus with conflicted repo parses resolved files,0.334,git/status,12,1.958
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.095,git/status,12,1.958
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.11,git/status,12,1.958
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.958
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.958
git/status getStatus with unconflicted repo reflects renames,0.081,git/status,12,1.958
git/status getStatus with unconflicted repo reflects copies,0.097,git/status,12,1.958
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.039,git/status,12,1.958
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.033,git/diff,19,1.488
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.488
git/diff getBlobImage retrieves valid image for modified file,0.039,git/diff,19,1.488
git/diff getBlobImage retrieves valid images for deleted file,0.054,git/diff,19,1.488
git/diff imageDiff changes for images are set,0.129,git/diff,19,1.488
git/diff imageDiff changes for text are not set,0.092,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for new file,0.058,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for modified file,0.056,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for staged file,0.057,git/diff,19,1.488
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.091,git/diff,19,1.488
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.111,git/diff,19,1.488
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.114,git/diff,19,1.488
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.096,git/diff,19,1.488
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.1,git/diff,19,1.488
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.069,git/diff,19,1.488
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.488
git/diff getBinaryPaths in repo with text only files returns an empty array,0.073,git/diff,19,1.488
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.488
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.092,git/diff,19,1.488
BranchPruner does nothing on non GitHub repositories,0.197,BranchPruner,6,1.507
BranchPruner prunes for GitHub repository,0.25,BranchPruner,6,1.507
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.205,BranchPruner,6,1.507
BranchPruner does not prune if there is no default branch,0.21,BranchPruner,6,1.507
BranchPruner does not prune reserved branches,0.244,BranchPruner,6,1.507
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.894
git/reflog getRecentBranches works after renaming a branch,0.169,git/reflog,6,0.894
git/reflog getRecentBranches returns a limited number of branches,0.214,git/reflog,6,0.894
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.134,git/reflog,6,0.894
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.155,git/reflog,6,0.894
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.894
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.269,formatPatch,5,0.888
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.828
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.828
git/checkout will fail when an existing branch matches the remote branch,0.099,git/checkout,6,0.828
git/checkout with submodules cleans up an submodule that no longer exists,0.24,git/checkout,6,0.828
git/checkout with submodules updates a changed submodule reference,0.199,git/checkout,6,0.828
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.092,gitignore,9,0.597
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.093,gitignore,9,0.597
gitignore saveGitIgnore applies rule correctly to repository,0.088,gitignore,9,0.597
gitignore appendIgnoreRule appends one rule,0.097,gitignore,9,0.597
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.597
git/submodule listSubmodules returns the submodule entry,0.097,git/submodule,3,0.588
git/submodule listSubmodules returns the expected tag,0.14,git/submodule,3,0.588
git/submodule resetSubmodulePaths update submodule to original commit,0.311,git/submodule,3,0.588
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.606
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.606
git/rev-parse isBareRepository returns false for default initialized repository,0.046,git/rev-parse,10,0.606
git/rev-parse isBareRepository returns true for initialized bare repository,0.054,git/rev-parse,10,0.606
git/rev-parse isBareRepository returns false for empty directory,0.038,git/rev-parse,10,0.606
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.606
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.606
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.044,git/rev-parse,10,0.606
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.037,git/rev-parse,10,0.606
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.18,git/rev-parse,10,0.606
git/branch tip returns unborn for new repository,0.035,git/branch,10,0.591
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,10,0.591
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.591
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.591
git/branch tip returns non-origin remote,0.074,git/branch,10,0.591
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.077,git/branch,10,0.591
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.591
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.591
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.591
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.591
validatedRepositoryPath returns the path to the repository,0.039,validatedRepositoryPath,2,0.092
git/merge merge and is successful returns true,0.032,git/merge,7,0.573
git/merge merge and is a noop returns false,0.048,git/merge,7,0.573
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.573
git/log getCommits loads history,0.057,git/log,7,0.524
git/log getCommits handles repository with HEAD file on disk,0.081,git/log,7,0.524
git/log getCommits handles repository with signed commit and log.showSignature set,0.097,git/log,7,0.524
git/log getChangedFiles loads the files changed in the commit,0.048,git/log,7,0.524
git/log getChangedFiles detects renames,0.08,git/log,7,0.524
git/log getChangedFiles detect copies,0.079,git/log,7,0.524
git/log getChangedFiles handles commit when HEAD exists on disk,0.039,git/log,7,0.524
git-lfs isUsingLFS returns false for repository not using LFS,0.042,git-lfs,9,0.546
git-lfs isUsingLFS returns true if LFS is tracking a path,0.072,git-lfs,9,0.546
git/remote getRemotes should return both remotes,0.041,git/remote,9,0.428
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.428
git/remote findDefaultRemote returns something when origin removed,0.054,git/remote,9,0.428
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.037,patch formatting,8,0.291
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.291
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.291
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.044,patch formatting,8,0.291
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.291
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.02,patch formatting,8,0.291
patch formatting formatPatchesForModifiedFile includes empty context lines,0.02,patch formatting,8,0.291
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.018,patch formatting,8,0.291
git/config config looks up config values,0.041,git/config,4,0.281
git/config config returns null for undefined values,0.044,git/config,4,0.281
git/config global config getGlobalConfigPath gets the config path,0.063,git/config,4,0.281
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,4,0.281
git/core error handling does not throw for errors that were expected,0.046,git/core,4,0.217
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.217
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.217
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.217
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.205
git/for-each-ref getBranches should return empty list for empty repo,0.064,git/for-each-ref,3,0.205
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.205
AppStore can select a repository,0.138,AppStore,5,0.194
git/reset reset can hard reset a repository,0.437,git/reset,2,0.482
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.378,git/rebase,21,8.454
git/rebase detect conflicts status detects REBASE_HEAD,0.275,git/rebase,21,8.454
git/rebase detect conflicts has conflicted files in working directory,0.272,git/rebase,21,8.454
git/rebase detect conflicts is a detached HEAD state,0.294,git/rebase,21,8.454
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.306,git/rebase,21,8.454
git/rebase abort after conflicts found no longer has working directory changes,0.318,git/rebase,21,8.454
git/rebase abort after conflicts found returns to the feature branch,0.3,git/rebase,21,8.454
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.368,git/rebase,21,8.454
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.376,git/rebase,21,8.454
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.365,git/rebase,21,8.454
git/rebase continue after resolving conflicts returns success,0.407,git/rebase,21,8.454
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.42,git/rebase,21,8.454
git/rebase continue after resolving conflicts no longer has working directory changes,0.446,git/rebase,21,8.454
git/rebase continue after resolving conflicts returns to the feature branch,0.431,git/rebase,21,8.454
git/rebase continue after resolving conflicts branch is now a different ref,0.437,git/rebase,21,8.454
git/rebase continue with additional changes unrelated to conflicted files returns success,0.42,git/rebase,21,8.454
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.425,git/rebase,21,8.454
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.434,git/rebase,21,8.454
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.434,git/rebase,21,8.454
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.463,git/rebase,21,8.454
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.426,git/rebase,21,8.454
git/commit createCommit normal commits the given files,0.104,git/commit,21,3.811
git/commit createCommit normal commit does not strip commentary by default,0.088,git/commit,21,3.811
git/commit createCommit normal can commit for empty repository,0.115,git/commit,21,3.811
git/commit createCommit normal can commit renames,0.134,git/commit,21,3.811
git/commit createCommit partials can commit some lines from new file,0.143,git/commit,21,3.811
git/commit createCommit partials can commit second hunk from modified file,0.153,git/commit,21,3.811
git/commit createCommit partials can commit single delete from modified file,0.141,git/commit,21,3.811
git/commit createCommit partials can commit multiple hunks from modified file,0.156,git/commit,21,3.811
git/commit createCommit partials can commit some lines from deleted file,0.16,git/commit,21,3.811
git/commit createCommit partials can commit renames with modifications,0.156,git/commit,21,3.811
git/commit createCommit partials can commit renames with partially selected modifications,0.186,git/commit,21,3.811
git/commit createCommit with a merge conflict creates a merge commit,0.222,git/commit,21,3.811
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.201,git/commit,21,3.811
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.293,git/commit,21,3.811
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.274,git/commit,21,3.811
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.348,git/commit,21,3.811
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.346,git/commit,21,3.811
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,3.811
git/commit index corner cases can commit when staged new file is then deleted,0.136,git/commit,21,3.811
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.152,git/commit,21,3.811
git/commit index corner cases file is deleted in index,0.152,git/commit,21,3.811
git/rebase can parse progress returns a value indicating conflicts were encountered,0.42,git/rebase,7,3.865
git/rebase can parse progress status detects REBASE_HEAD,0.426,git/rebase,7,3.865
git/rebase can parse progress is a detached HEAD state,0.432,git/rebase,7,3.865
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.851,git/rebase,7,3.865
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.83,git/rebase,7,3.865
git/rebase can parse progress for long rebase is a detached HEAD state,0.856,git/rebase,7,3.865
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.158,git/stash,14,2.51
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.236,git/stash,14,2.51
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.201,git/stash,14,2.51
GitStore loadCommitBatch includes HEAD when loading commits,0.305,GitStore,11,2.411
GitStore can discard changes from a repository,0.2,GitStore,11,2.411
GitStore can discard a renamed file,0.158,GitStore,11,2.411
GitStore undo first commit reports the repository is unborn,0.186,GitStore,11,2.411
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.411
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.411
GitStore undo first commit has no staged files,0.199,GitStore,11,2.411
GitStore repository with HEAD file can discard modified change cleanly,0.114,GitStore,11,2.411
git/status getStatus with conflicted repo parses conflicted files with markers,0.283,git/status,12,1.972
git/status getStatus with conflicted repo parses conflicted files without markers,0.303,git/status,12,1.972
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.485,git/status,12,1.972
git/status getStatus with conflicted repo parses resolved files,0.287,git/status,12,1.972
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.105,git/status,12,1.972
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.128,git/status,12,1.972
git/status getStatus with unconflicted repo parses changed files,0.051,git/status,12,1.972
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.972
git/status getStatus with unconflicted repo reflects renames,0.093,git/status,12,1.972
git/status getStatus with unconflicted repo reflects copies,0.097,git/status,12,1.972
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.972
BranchPruner does nothing on non GitHub repositories,0.266,BranchPruner,6,1.442
BranchPruner prunes for GitHub repository,0.241,BranchPruner,6,1.442
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.166,BranchPruner,6,1.442
BranchPruner does not prune if there is no default branch,0.168,BranchPruner,6,1.442
BranchPruner does not prune reserved branches,0.222,BranchPruner,6,1.442
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.028,git/diff,19,1.449
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.037,git/diff,19,1.449
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.449
git/diff getBlobImage retrieves valid images for deleted file,0.05,git/diff,19,1.449
git/diff imageDiff changes for images are set,0.071,git/diff,19,1.449
git/diff imageDiff changes for text are not set,0.059,git/diff,19,1.449
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.449
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.449
git/diff getWorkingDirectoryDiff counts lines for staged file,0.067,git/diff,19,1.449
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.449
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.128,git/diff,19,1.449
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.127,git/diff,19,1.449
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.112,git/diff,19,1.449
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.115,git/diff,19,1.449
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.074,git/diff,19,1.449
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.047,git/diff,19,1.449
git/diff getBinaryPaths in repo with text only files returns an empty array,0.06,git/diff,19,1.449
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.072,git/diff,19,1.449
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.091,git/diff,19,1.449
git/reflog getRecentBranches returns the recently checked out branches,0.132,git/reflog,6,0.928
git/reflog getRecentBranches works after renaming a branch,0.171,git/reflog,6,0.928
git/reflog getRecentBranches returns a limited number of branches,0.234,git/reflog,6,0.928
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.134,git/reflog,6,0.928
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.161,git/reflog,6,0.928
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.051,git/reflog,6,0.928
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.256,formatPatch,5,0.889
git/checkout can checkout a valid branch name in an existing repository,0.117,git/checkout,6,0.833
git/checkout can checkout a branch when it exists on multiple remotes,0.11,git/checkout,6,0.833
git/checkout will fail when an existing branch matches the remote branch,0.099,git/checkout,6,0.833
git/checkout with submodules cleans up an submodule that no longer exists,0.24,git/checkout,6,0.833
git/checkout with submodules updates a changed submodule reference,0.196,git/checkout,6,0.833
git/rev-parse isGitRepository should return true for a repository,0.038,git/rev-parse,10,0.579
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.579
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.579
git/rev-parse isBareRepository returns true for initialized bare repository,0.049,git/rev-parse,10,0.579
git/rev-parse isBareRepository returns false for empty directory,0.038,git/rev-parse,10,0.579
git/rev-parse isBareRepository throws error for missing directory,0.036,git/rev-parse,10,0.579
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.047,git/rev-parse,10,0.579
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.039,git/rev-parse,10,0.579
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.044,git/rev-parse,10,0.579
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.164,git/rev-parse,10,0.579
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.104,gitignore,9,0.63
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.098,gitignore,9,0.63
gitignore saveGitIgnore applies rule correctly to repository,0.088,gitignore,9,0.63
gitignore appendIgnoreRule appends one rule,0.107,gitignore,9,0.63
gitignore appendIgnoreRule appends multiple rules,0.109,gitignore,9,0.63
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.617
git/branch tip returns correct ref if checkout occurs,0.052,git/branch,10,0.617
git/branch tip returns detached for arbitrary checkout,0.05,git/branch,10,0.617
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.617
git/branch tip returns non-origin remote,0.074,git/branch,10,0.617
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.085,git/branch,10,0.617
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.617
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.617
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.617
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.077,git/branch,10,0.617
git/submodule listSubmodules returns the submodule entry,0.11,git/submodule,3,0.636
git/submodule listSubmodules returns the expected tag,0.16,git/submodule,3,0.636
git/submodule resetSubmodulePaths update submodule to original commit,0.324,git/submodule,3,0.636
git/merge merge and is successful returns true,0.122,git/merge,7,0.682
git/merge merge and is a noop returns false,0.052,git/merge,7,0.682
git/merge getMergeBase returns the common ancestor of two branches,0.084,git/merge,7,0.682
git-lfs isUsingLFS returns false for repository not using LFS,0.049,git-lfs,9,0.499
git-lfs isUsingLFS returns true if LFS is tracking a path,0.065,git-lfs,9,0.499
git/log getCommits loads history,0.059,git/log,7,0.536
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.536
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.536
git/log getChangedFiles loads the files changed in the commit,0.056,git/log,7,0.536
git/log getChangedFiles detects renames,0.082,git/log,7,0.536
git/log getChangedFiles detect copies,0.081,git/log,7,0.536
git/log getChangedFiles handles commit when HEAD exists on disk,0.045,git/log,7,0.536
git/reset reset can hard reset a repository,0.067,git/reset,2,0.109
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.429
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,9,0.429
git/remote findDefaultRemote returns something when origin removed,0.062,git/remote,9,0.429
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.305
git/config config looks up config values,0.042,git/config,4,0.266
git/config config returns null for undefined values,0.043,git/config,4,0.266
git/config global config getGlobalConfigPath gets the config path,0.052,git/config,4,0.266
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,4,0.266
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.216
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.216
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.216
git/core exit code handling throws for exit codes that were not expected,0.039,git/core,4,0.216
git/for-each-ref getBranches fetches branches using for-each-ref,0.062,git/for-each-ref,3,0.206
git/for-each-ref getBranches should return empty list for empty repo,0.063,git/for-each-ref,3,0.206
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.206
AppStore can select a repository,0.13,AppStore,5,0.184
validatedRepositoryPath returns the path to the repository,0.376,validatedRepositoryPath,2,0.435
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.048
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.375,git/rebase,21,8.418
git/rebase detect conflicts status detects REBASE_HEAD,0.277,git/rebase,21,8.418
git/rebase detect conflicts has conflicted files in working directory,0.274,git/rebase,21,8.418
git/rebase detect conflicts is a detached HEAD state,0.283,git/rebase,21,8.418
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.298,git/rebase,21,8.418
git/rebase abort after conflicts found no longer has working directory changes,0.312,git/rebase,21,8.418
git/rebase abort after conflicts found returns to the feature branch,0.296,git/rebase,21,8.418
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.377,git/rebase,21,8.418
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.379,git/rebase,21,8.418
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.349,git/rebase,21,8.418
git/rebase continue after resolving conflicts returns success,0.411,git/rebase,21,8.418
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.42,git/rebase,21,8.418
git/rebase continue after resolving conflicts no longer has working directory changes,0.45,git/rebase,21,8.418
git/rebase continue after resolving conflicts returns to the feature branch,0.441,git/rebase,21,8.418
git/rebase continue after resolving conflicts branch is now a different ref,0.438,git/rebase,21,8.418
git/rebase continue with additional changes unrelated to conflicted files returns success,0.409,git/rebase,21,8.418
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.426,git/rebase,21,8.418
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.427,git/rebase,21,8.418
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.418
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.467,git/rebase,21,8.418
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.425,git/rebase,21,8.418
git/rebase can parse progress returns a value indicating conflicts were encountered,0.372,git/rebase,7,3.327
git/rebase can parse progress status detects REBASE_HEAD,0.37,git/rebase,7,3.327
git/rebase can parse progress is a detached HEAD state,0.368,git/rebase,7,3.327
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.7,git/rebase,7,3.327
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.716,git/rebase,7,3.327
git/rebase can parse progress for long rebase is a detached HEAD state,0.738,git/rebase,7,3.327
git/commit createCommit normal commits the given files,0.116,git/commit,21,4.136
git/commit createCommit normal commit does not strip commentary by default,0.095,git/commit,21,4.136
git/commit createCommit normal can commit for empty repository,0.132,git/commit,21,4.136
git/commit createCommit normal can commit renames,0.145,git/commit,21,4.136
git/commit createCommit partials can commit some lines from new file,0.163,git/commit,21,4.136
git/commit createCommit partials can commit second hunk from modified file,0.179,git/commit,21,4.136
git/commit createCommit partials can commit single delete from modified file,0.152,git/commit,21,4.136
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,4.136
git/commit createCommit partials can commit some lines from deleted file,0.153,git/commit,21,4.136
git/commit createCommit partials can commit renames with modifications,0.16,git/commit,21,4.136
git/commit createCommit partials can commit renames with partially selected modifications,0.201,git/commit,21,4.136
git/commit createCommit with a merge conflict creates a merge commit,0.246,git/commit,21,4.136
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.22,git/commit,21,4.136
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.329,git/commit,21,4.136
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.308,git/commit,21,4.136
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.37,git/commit,21,4.136
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.382,git/commit,21,4.136
git/commit createMergeCommit with no changes throws an error,0.084,git/commit,21,4.136
git/commit index corner cases can commit when staged new file is then deleted,0.149,git/commit,21,4.136
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.17,git/commit,21,4.136
git/commit index corner cases file is deleted in index,0.162,git/commit,21,4.136
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.175,git/stash,14,2.694
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.27,git/stash,14,2.694
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.206,git/stash,14,2.694
GitStore loadCommitBatch includes HEAD when loading commits,0.335,GitStore,11,2.393
GitStore can discard changes from a repository,0.164,GitStore,11,2.393
GitStore can discard a renamed file,0.146,GitStore,11,2.393
GitStore undo first commit reports the repository is unborn,0.187,GitStore,11,2.393
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.393
GitStore undo first commit clears the undo commit dialog,0.2,GitStore,11,2.393
GitStore undo first commit has no staged files,0.198,GitStore,11,2.393
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.393
git/status getStatus with conflicted repo parses conflicted files with markers,0.28,git/status,12,1.994
git/status getStatus with conflicted repo parses conflicted files without markers,0.3,git/status,12,1.994
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.475,git/status,12,1.994
git/status getStatus with conflicted repo parses resolved files,0.283,git/status,12,1.994
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.108,git/status,12,1.994
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.167,git/status,12,1.994
git/status getStatus with unconflicted repo parses changed files,0.063,git/status,12,1.994
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.052,git/status,12,1.994
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,1.994
git/status getStatus with unconflicted repo reflects copies,0.088,git/status,12,1.994
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.046,git/status,12,1.994
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.037,git/diff,19,1.467
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.039,git/diff,19,1.467
git/diff getBlobImage retrieves valid image for modified file,0.037,git/diff,19,1.467
git/diff getBlobImage retrieves valid images for deleted file,0.05,git/diff,19,1.467
git/diff imageDiff changes for images are set,0.07,git/diff,19,1.467
git/diff imageDiff changes for text are not set,0.072,git/diff,19,1.467
git/diff getWorkingDirectoryDiff counts lines for new file,0.069,git/diff,19,1.467
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.467
git/diff getWorkingDirectoryDiff counts lines for staged file,0.061,git/diff,19,1.467
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.088,git/diff,19,1.467
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.119,git/diff,19,1.467
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.135,git/diff,19,1.467
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.467
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.105,git/diff,19,1.467
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.467
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.467
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.467
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.079,git/diff,19,1.467
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.099,git/diff,19,1.467
BranchPruner does nothing on non GitHub repositories,0.285,BranchPruner,6,1.598
BranchPruner prunes for GitHub repository,0.247,BranchPruner,6,1.598
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.194,BranchPruner,6,1.598
BranchPruner does not prune if there is no default branch,0.212,BranchPruner,6,1.598
BranchPruner does not prune reserved branches,0.249,BranchPruner,6,1.598
git/reflog getRecentBranches returns the recently checked out branches,0.129,git/reflog,6,0.898
git/reflog getRecentBranches works after renaming a branch,0.164,git/reflog,6,0.898
git/reflog getRecentBranches returns a limited number of branches,0.214,git/reflog,6,0.898
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.136,git/reflog,6,0.898
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.154,git/reflog,6,0.898
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.052,git/reflog,6,0.898
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.266,formatPatch,5,0.878
git/checkout can checkout a valid branch name in an existing repository,0.122,git/checkout,6,0.989
git/checkout can checkout a branch when it exists on multiple remotes,0.121,git/checkout,6,0.989
git/checkout will fail when an existing branch matches the remote branch,0.105,git/checkout,6,0.989
git/checkout with submodules cleans up an submodule that no longer exists,0.262,git/checkout,6,0.989
git/checkout with submodules updates a changed submodule reference,0.238,git/checkout,6,0.989
git/merge merge and is successful returns true,0.033,git/merge,7,0.481
git/merge merge and is a noop returns false,0.046,git/merge,7,0.481
git/merge getMergeBase returns the common ancestor of two branches,0.055,git/merge,7,0.481
git/submodule listSubmodules returns the submodule entry,0.104,git/submodule,3,0.603
git/submodule listSubmodules returns the expected tag,0.148,git/submodule,3,0.603
git/submodule resetSubmodulePaths update submodule to original commit,0.303,git/submodule,3,0.603
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.1,gitignore,9,0.622
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.622
gitignore saveGitIgnore applies rule correctly to repository,0.094,gitignore,9,0.622
gitignore appendIgnoreRule appends one rule,0.102,gitignore,9,0.622
gitignore appendIgnoreRule appends multiple rules,0.1,gitignore,9,0.622
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.618
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,10,0.618
git/branch tip returns detached for arbitrary checkout,0.044,git/branch,10,0.618
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.618
git/branch tip returns non-origin remote,0.071,git/branch,10,0.618
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.073,git/branch,10,0.618
git/branch getBranchesPointedAt in a local repo finds one branch name,0.065,git/branch,10,0.618
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.618
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.618
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.618
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.647
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.647
git/rev-parse isBareRepository returns false for default initialized repository,0.049,git/rev-parse,10,0.647
git/rev-parse isBareRepository returns true for initialized bare repository,0.058,git/rev-parse,10,0.647
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.647
git/rev-parse isBareRepository throws error for missing directory,0.043,git/rev-parse,10,0.647
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.055,git/rev-parse,10,0.647
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.647
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.647
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.198,git/rev-parse,10,0.647
git/log getCommits loads history,0.056,git/log,7,0.482
git/log getCommits handles repository with HEAD file on disk,0.071,git/log,7,0.482
git/log getCommits handles repository with signed commit and log.showSignature set,0.082,git/log,7,0.482
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.482
git/log getChangedFiles detects renames,0.07,git/log,7,0.482
git/log getChangedFiles detect copies,0.074,git/log,7,0.482
git/log getChangedFiles handles commit when HEAD exists on disk,0.039,git/log,7,0.482
git-lfs isUsingLFS returns false for repository not using LFS,0.044,git-lfs,9,0.506
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.506
validatedRepositoryPath returns the path to the repository,0.039,validatedRepositoryPath,2,0.097
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.413
git/remote findDefaultRemote returns origin when multiple remotes found,0.049,git/remote,9,0.413
git/remote findDefaultRemote returns something when origin removed,0.055,git/remote,9,0.413
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.037,patch formatting,8,0.286
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.286
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.286
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.286
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.286
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.286
patch formatting formatPatchesForModifiedFile includes empty context lines,0.02,patch formatting,8,0.286
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.286
git/config config looks up config values,0.038,git/config,4,0.385
git/config config returns null for undefined values,0.041,git/config,4,0.385
git/config global config getGlobalConfigPath gets the config path,0.158,git/config,4,0.385
git/config global config setGlobalConfigValue will replace all entries for a global value,0.106,git/config,4,0.385
git/core error handling does not throw for errors that were expected,0.048,git/core,4,0.222
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.222
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.222
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.222
git/for-each-ref getBranches fetches branches using for-each-ref,0.061,git/for-each-ref,3,0.205
git/for-each-ref getBranches should return empty list for empty repo,0.065,git/for-each-ref,3,0.205
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.205
AppStore can select a repository,0.129,AppStore,5,0.184
git/reset reset can hard reset a repository,0.398,git/reset,2,0.443
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.374,git/rebase,21,8.513
git/rebase detect conflicts status detects REBASE_HEAD,0.287,git/rebase,21,8.513
git/rebase detect conflicts has conflicted files in working directory,0.283,git/rebase,21,8.513
git/rebase detect conflicts is a detached HEAD state,0.291,git/rebase,21,8.513
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.308,git/rebase,21,8.513
git/rebase abort after conflicts found no longer has working directory changes,0.31,git/rebase,21,8.513
git/rebase abort after conflicts found returns to the feature branch,0.299,git/rebase,21,8.513
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.366,git/rebase,21,8.513
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.404,git/rebase,21,8.513
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.386,git/rebase,21,8.513
git/rebase continue after resolving conflicts returns success,0.411,git/rebase,21,8.513
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.414,git/rebase,21,8.513
git/rebase continue after resolving conflicts no longer has working directory changes,0.471,git/rebase,21,8.513
git/rebase continue after resolving conflicts returns to the feature branch,0.413,git/rebase,21,8.513
git/rebase continue after resolving conflicts branch is now a different ref,0.443,git/rebase,21,8.513
git/rebase continue with additional changes unrelated to conflicted files returns success,0.421,git/rebase,21,8.513
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.453,git/rebase,21,8.513
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.428,git/rebase,21,8.513
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.435,git/rebase,21,8.513
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.45,git/rebase,21,8.513
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.405,git/rebase,21,8.513
git/commit createCommit normal commits the given files,0.108,git/commit,21,3.879
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.879
git/commit createCommit normal can commit for empty repository,0.119,git/commit,21,3.879
git/commit createCommit normal can commit renames,0.14,git/commit,21,3.879
git/commit createCommit partials can commit some lines from new file,0.147,git/commit,21,3.879
git/commit createCommit partials can commit second hunk from modified file,0.156,git/commit,21,3.879
git/commit createCommit partials can commit single delete from modified file,0.15,git/commit,21,3.879
git/commit createCommit partials can commit multiple hunks from modified file,0.168,git/commit,21,3.879
git/commit createCommit partials can commit some lines from deleted file,0.152,git/commit,21,3.879
git/commit createCommit partials can commit renames with modifications,0.158,git/commit,21,3.879
git/commit createCommit partials can commit renames with partially selected modifications,0.191,git/commit,21,3.879
git/commit createCommit with a merge conflict creates a merge commit,0.225,git/commit,21,3.879
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.21,git/commit,21,3.879
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.292,git/commit,21,3.879
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.281,git/commit,21,3.879
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.332,git/commit,21,3.879
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.365,git/commit,21,3.879
git/commit createMergeCommit with no changes throws an error,0.087,git/commit,21,3.879
git/commit index corner cases can commit when staged new file is then deleted,0.135,git/commit,21,3.879
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.159,git/commit,21,3.879
git/commit index corner cases file is deleted in index,0.155,git/commit,21,3.879
git/rebase can parse progress returns a value indicating conflicts were encountered,0.447,git/rebase,7,3.924
git/rebase can parse progress status detects REBASE_HEAD,0.495,git/rebase,7,3.924
git/rebase can parse progress is a detached HEAD state,0.434,git/rebase,7,3.924
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.826,git/rebase,7,3.924
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.819,git/rebase,7,3.924
git/rebase can parse progress for long rebase is a detached HEAD state,0.853,git/rebase,7,3.924
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.609
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.275,git/stash,14,2.609
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.609
GitStore loadCommitBatch includes HEAD when loading commits,0.373,GitStore,11,2.433
GitStore can discard changes from a repository,0.197,GitStore,11,2.433
GitStore can discard a renamed file,0.148,GitStore,11,2.433
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.433
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.433
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.433
GitStore undo first commit has no staged files,0.198,GitStore,11,2.433
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.433
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.963
git/status getStatus with conflicted repo parses conflicted files without markers,0.286,git/status,12,1.963
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.483,git/status,12,1.963
git/status getStatus with conflicted repo parses resolved files,0.295,git/status,12,1.963
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.157,git/status,12,1.963
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.115,git/status,12,1.963
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.963
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.049,git/status,12,1.963
git/status getStatus with unconflicted repo reflects renames,0.078,git/status,12,1.963
git/status getStatus with unconflicted repo reflects copies,0.081,git/status,12,1.963
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.963
BranchPruner does nothing on non GitHub repositories,0.184,BranchPruner,6,1.386
BranchPruner prunes for GitHub repository,0.245,BranchPruner,6,1.386
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.183,BranchPruner,6,1.386
BranchPruner does not prune if there is no default branch,0.163,BranchPruner,6,1.386
BranchPruner does not prune reserved branches,0.225,BranchPruner,6,1.386
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.036,git/diff,19,1.562
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.562
git/diff getBlobImage retrieves valid image for modified file,0.105,git/diff,19,1.562
git/diff getBlobImage retrieves valid images for deleted file,0.067,git/diff,19,1.562
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.562
git/diff imageDiff changes for text are not set,0.073,git/diff,19,1.562
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.562
git/diff getWorkingDirectoryDiff counts lines for modified file,0.06,git/diff,19,1.562
git/diff getWorkingDirectoryDiff counts lines for staged file,0.06,git/diff,19,1.562
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.086,git/diff,19,1.562
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.136,git/diff,19,1.562
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.126,git/diff,19,1.562
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.106,git/diff,19,1.562
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.109,git/diff,19,1.562
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.562
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.562
git/diff getBinaryPaths in repo with text only files returns an empty array,0.068,git/diff,19,1.562
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.078,git/diff,19,1.562
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.562
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.858
git/checkout can checkout a branch when it exists on multiple remotes,0.118,git/checkout,6,0.858
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.858
git/checkout with submodules cleans up an submodule that no longer exists,0.253,git/checkout,6,0.858
git/checkout with submodules updates a changed submodule reference,0.209,git/checkout,6,0.858
git/reflog getRecentBranches returns the recently checked out branches,0.135,git/reflog,6,0.951
git/reflog getRecentBranches works after renaming a branch,0.179,git/reflog,6,0.951
git/reflog getRecentBranches returns a limited number of branches,0.231,git/reflog,6,0.951
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.137,git/reflog,6,0.951
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.168,git/reflog,6,0.951
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.057,git/reflog,6,0.951
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.282,formatPatch,5,0.929
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.646
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.646
git/rev-parse isBareRepository returns false for default initialized repository,0.056,git/rev-parse,10,0.646
git/rev-parse isBareRepository returns true for initialized bare repository,0.056,git/rev-parse,10,0.646
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.646
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.646
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.056,git/rev-parse,10,0.646
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.045,git/rev-parse,10,0.646
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.049,git/rev-parse,10,0.646
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.189,git/rev-parse,10,0.646
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.103,gitignore,9,0.653
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.1,gitignore,9,0.653
gitignore saveGitIgnore applies rule correctly to repository,0.096,gitignore,9,0.653
gitignore appendIgnoreRule appends one rule,0.112,gitignore,9,0.653
gitignore appendIgnoreRule appends multiple rules,0.113,gitignore,9,0.653
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.59
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,10,0.59
git/branch tip returns detached for arbitrary checkout,0.044,git/branch,10,0.59
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.59
git/branch tip returns non-origin remote,0.072,git/branch,10,0.59
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.59
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.59
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.59
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.59
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.59
git/submodule listSubmodules returns the submodule entry,0.095,git/submodule,3,0.616
git/submodule listSubmodules returns the expected tag,0.159,git/submodule,3,0.616
git/submodule resetSubmodulePaths update submodule to original commit,0.318,git/submodule,3,0.616
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.515
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.515
git/log getCommits loads history,0.06,git/log,7,0.543
git/log getCommits handles repository with HEAD file on disk,0.08,git/log,7,0.543
git/log getCommits handles repository with signed commit and log.showSignature set,0.098,git/log,7,0.543
git/log getChangedFiles loads the files changed in the commit,0.048,git/log,7,0.543
git/log getChangedFiles detects renames,0.079,git/log,7,0.543
git/log getChangedFiles detect copies,0.086,git/log,7,0.543
git/log getChangedFiles handles commit when HEAD exists on disk,0.048,git/log,7,0.543
git/merge merge and is successful returns true,0.035,git/merge,7,0.609
git/merge merge and is a noop returns false,0.056,git/merge,7,0.609
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.609
git/reset reset can hard reset a repository,0.067,git/reset,2,0.111
git/remote getRemotes should return both remotes,0.048,git/remote,9,0.44
git/remote findDefaultRemote returns origin when multiple remotes found,0.054,git/remote,9,0.44
git/remote findDefaultRemote returns something when origin removed,0.061,git/remote,9,0.44
git/config config looks up config values,0.043,git/config,4,0.283
git/config config returns null for undefined values,0.044,git/config,4,0.283
git/config global config getGlobalConfigPath gets the config path,0.06,git/config,4,0.283
git/config global config setGlobalConfigValue will replace all entries for a global value,0.096,git/config,4,0.283
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.143,patch formatting,8,0.433
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.433
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.05,patch formatting,8,0.433
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.047,patch formatting,8,0.433
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.433
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.433
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.433
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.433
git/core error handling does not throw for errors that were expected,0.038,git/core,4,0.215
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.215
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.215
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.215
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.044,git/for-each-ref,3,0.201
AppStore can select a repository,0.13,AppStore,5,0.184
validatedRepositoryPath returns the path to the repository,0.385,validatedRepositoryPath,2,0.444
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.033,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.372,git/rebase,21,8.473
git/rebase detect conflicts status detects REBASE_HEAD,0.296,git/rebase,21,8.473
git/rebase detect conflicts has conflicted files in working directory,0.284,git/rebase,21,8.473
git/rebase detect conflicts is a detached HEAD state,0.325,git/rebase,21,8.473
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.318,git/rebase,21,8.473
git/rebase abort after conflicts found no longer has working directory changes,0.299,git/rebase,21,8.473
git/rebase abort after conflicts found returns to the feature branch,0.308,git/rebase,21,8.473
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.354,git/rebase,21,8.473
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.368,git/rebase,21,8.473
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.358,git/rebase,21,8.473
git/rebase continue after resolving conflicts returns success,0.41,git/rebase,21,8.473
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.431,git/rebase,21,8.473
git/rebase continue after resolving conflicts no longer has working directory changes,0.448,git/rebase,21,8.473
git/rebase continue after resolving conflicts returns to the feature branch,0.417,git/rebase,21,8.473
git/rebase continue after resolving conflicts branch is now a different ref,0.444,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files returns success,0.41,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.417,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.429,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.446,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.466,git/rebase,21,8.473
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.405,git/rebase,21,8.473
git/rebase can parse progress returns a value indicating conflicts were encountered,0.406,git/rebase,7,3.439
git/rebase can parse progress status detects REBASE_HEAD,0.367,git/rebase,7,3.439
git/rebase can parse progress is a detached HEAD state,0.365,git/rebase,7,3.439
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.752,git/rebase,7,3.439
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.755,git/rebase,7,3.439
git/rebase can parse progress for long rebase is a detached HEAD state,0.737,git/rebase,7,3.439
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.176
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.176
git/commit createCommit normal can commit for empty repository,0.129,git/commit,21,4.176
git/commit createCommit normal can commit renames,0.154,git/commit,21,4.176
git/commit createCommit partials can commit some lines from new file,0.159,git/commit,21,4.176
git/commit createCommit partials can commit second hunk from modified file,0.168,git/commit,21,4.176
git/commit createCommit partials can commit single delete from modified file,0.15,git/commit,21,4.176
git/commit createCommit partials can commit multiple hunks from modified file,0.174,git/commit,21,4.176
git/commit createCommit partials can commit some lines from deleted file,0.164,git/commit,21,4.176
git/commit createCommit partials can commit renames with modifications,0.164,git/commit,21,4.176
git/commit createCommit partials can commit renames with partially selected modifications,0.205,git/commit,21,4.176
git/commit createCommit with a merge conflict creates a merge commit,0.247,git/commit,21,4.176
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.226,git/commit,21,4.176
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.329,git/commit,21,4.176
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.323,git/commit,21,4.176
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.374,git/commit,21,4.176
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.379,git/commit,21,4.176
git/commit createMergeCommit with no changes throws an error,0.079,git/commit,21,4.176
git/commit index corner cases can commit when staged new file is then deleted,0.146,git/commit,21,4.176
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.169,git/commit,21,4.176
git/commit index corner cases file is deleted in index,0.167,git/commit,21,4.176
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.184,git/stash,14,2.617
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.259,git/stash,14,2.617
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.194,git/stash,14,2.617
GitStore loadCommitBatch includes HEAD when loading commits,0.339,GitStore,11,2.458
GitStore can discard changes from a repository,0.202,GitStore,11,2.458
GitStore can discard a renamed file,0.149,GitStore,11,2.458
GitStore undo first commit reports the repository is unborn,0.187,GitStore,11,2.458
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.458
GitStore undo first commit clears the undo commit dialog,0.206,GitStore,11,2.458
GitStore undo first commit has no staged files,0.201,GitStore,11,2.458
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.458
git/status getStatus with conflicted repo parses conflicted files with markers,0.299,git/status,12,2.002
git/status getStatus with conflicted repo parses conflicted files without markers,0.301,git/status,12,2.002
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.505,git/status,12,2.002
git/status getStatus with conflicted repo parses resolved files,0.289,git/status,12,2.002
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.106,git/status,12,2.002
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.133,git/status,12,2.002
git/status getStatus with unconflicted repo parses changed files,0.047,git/status,12,2.002
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.042,git/status,12,2.002
git/status getStatus with unconflicted repo reflects renames,0.088,git/status,12,2.002
git/status getStatus with unconflicted repo reflects copies,0.099,git/status,12,2.002
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.045,git/status,12,2.002
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.101,git/diff,19,1.572
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.059,git/diff,19,1.572
git/diff getBlobImage retrieves valid image for modified file,0.047,git/diff,19,1.572
git/diff getBlobImage retrieves valid images for deleted file,0.059,git/diff,19,1.572
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.572
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.572
git/diff getWorkingDirectoryDiff counts lines for new file,0.063,git/diff,19,1.572
git/diff getWorkingDirectoryDiff counts lines for modified file,0.061,git/diff,19,1.572
git/diff getWorkingDirectoryDiff counts lines for staged file,0.062,git/diff,19,1.572
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.093,git/diff,19,1.572
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.126,git/diff,19,1.572
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.141,git/diff,19,1.572
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.572
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.112,git/diff,19,1.572
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.074,git/diff,19,1.572
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.054,git/diff,19,1.572
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.572
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.078,git/diff,19,1.572
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.09,git/diff,19,1.572
BranchPruner does nothing on non GitHub repositories,0.204,BranchPruner,6,1.594
BranchPruner prunes for GitHub repository,0.264,BranchPruner,6,1.594
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.22,BranchPruner,6,1.594
BranchPruner does not prune if there is no default branch,0.21,BranchPruner,6,1.594
BranchPruner does not prune reserved branches,0.266,BranchPruner,6,1.594
git/reflog getRecentBranches returns the recently checked out branches,0.135,git/reflog,6,1.018
git/reflog getRecentBranches works after renaming a branch,0.253,git/reflog,6,1.018
git/reflog getRecentBranches returns a limited number of branches,0.239,git/reflog,6,1.018
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.133,git/reflog,6,1.018
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.158,git/reflog,6,1.018
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,1.018
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.281,formatPatch,5,0.898
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.848
git/checkout can checkout a branch when it exists on multiple remotes,0.11,git/checkout,6,0.848
git/checkout will fail when an existing branch matches the remote branch,0.099,git/checkout,6,0.848
git/checkout with submodules cleans up an submodule that no longer exists,0.26,git/checkout,6,0.848
git/checkout with submodules updates a changed submodule reference,0.197,git/checkout,6,0.848
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.606
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.088,gitignore,9,0.606
gitignore saveGitIgnore applies rule correctly to repository,0.089,gitignore,9,0.606
gitignore appendIgnoreRule appends one rule,0.1,gitignore,9,0.606
gitignore appendIgnoreRule appends multiple rules,0.112,gitignore,9,0.606
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.6
git/rev-parse isGitRepository should return false for a directory,0.042,git/rev-parse,10,0.6
git/rev-parse isBareRepository returns false for default initialized repository,0.056,git/rev-parse,10,0.6
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.6
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.6
git/rev-parse isBareRepository throws error for missing directory,0.038,git/rev-parse,10,0.6
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.05,git/rev-parse,10,0.6
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.04,git/rev-parse,10,0.6
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.045,git/rev-parse,10,0.6
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.165,git/rev-parse,10,0.6
git/submodule listSubmodules returns the submodule entry,0.104,git/submodule,3,0.662
git/submodule listSubmodules returns the expected tag,0.157,git/submodule,3,0.662
git/submodule resetSubmodulePaths update submodule to original commit,0.359,git/submodule,3,0.662
git/merge merge and is successful returns true,0.037,git/merge,7,0.55
git/merge merge and is a noop returns false,0.05,git/merge,7,0.55
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.55
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.734
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,10,0.734
git/branch tip returns detached for arbitrary checkout,0.147,git/branch,10,0.734
git/branch tip returns current branch when on a valid HEAD,0.082,git/branch,10,0.734
git/branch tip returns non-origin remote,0.081,git/branch,10,0.734
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.082,git/branch,10,0.734
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.734
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.734
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.734
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.077,git/branch,10,0.734
git/log getCommits loads history,0.051,git/log,7,0.533
git/log getCommits handles repository with HEAD file on disk,0.077,git/log,7,0.533
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.533
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.533
git/log getChangedFiles detects renames,0.088,git/log,7,0.533
git/log getChangedFiles detect copies,0.084,git/log,7,0.533
git/log getChangedFiles handles commit when HEAD exists on disk,0.045,git/log,7,0.533
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.503
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.503
validatedRepositoryPath returns the path to the repository,0.042,validatedRepositoryPath,2,0.099
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.408
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.408
git/remote findDefaultRemote returns something when origin removed,0.054,git/remote,9,0.408
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.299
git/config config looks up config values,0.038,git/config,4,0.261
git/config config returns null for undefined values,0.041,git/config,4,0.261
git/config global config getGlobalConfigPath gets the config path,0.055,git/config,4,0.261
git/config global config setGlobalConfigValue will replace all entries for a global value,0.084,git/config,4,0.261
git/core error handling does not throw for errors that were expected,0.04,git/core,4,0.211
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.211
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.211
git/core exit code handling throws for exit codes that were not expected,0.042,git/core,4,0.211
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.199
AppStore can select a repository,0.127,AppStore,5,0.179
git/reset reset can hard reset a repository,0.397,git/reset,2,0.442
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.375,git/rebase,21,8.645
git/rebase detect conflicts status detects REBASE_HEAD,0.281,git/rebase,21,8.645
git/rebase detect conflicts has conflicted files in working directory,0.286,git/rebase,21,8.645
git/rebase detect conflicts is a detached HEAD state,0.297,git/rebase,21,8.645
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.3,git/rebase,21,8.645
git/rebase abort after conflicts found no longer has working directory changes,0.337,git/rebase,21,8.645
git/rebase abort after conflicts found returns to the feature branch,0.349,git/rebase,21,8.645
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.382,git/rebase,21,8.645
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.383,git/rebase,21,8.645
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.385,git/rebase,21,8.645
git/rebase continue after resolving conflicts returns success,0.424,git/rebase,21,8.645
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.434,git/rebase,21,8.645
git/rebase continue after resolving conflicts no longer has working directory changes,0.436,git/rebase,21,8.645
git/rebase continue after resolving conflicts returns to the feature branch,0.462,git/rebase,21,8.645
git/rebase continue after resolving conflicts branch is now a different ref,0.46,git/rebase,21,8.645
git/rebase continue with additional changes unrelated to conflicted files returns success,0.429,git/rebase,21,8.645
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.452,git/rebase,21,8.645
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.447,git/rebase,21,8.645
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.428,git/rebase,21,8.645
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.438,git/rebase,21,8.645
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.403,git/rebase,21,8.645
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.86
git/commit createCommit normal commit does not strip commentary by default,0.095,git/commit,21,3.86
git/commit createCommit normal can commit for empty repository,0.122,git/commit,21,3.86
git/commit createCommit normal can commit renames,0.139,git/commit,21,3.86
git/commit createCommit partials can commit some lines from new file,0.142,git/commit,21,3.86
git/commit createCommit partials can commit second hunk from modified file,0.155,git/commit,21,3.86
git/commit createCommit partials can commit single delete from modified file,0.149,git/commit,21,3.86
git/commit createCommit partials can commit multiple hunks from modified file,0.162,git/commit,21,3.86
git/commit createCommit partials can commit some lines from deleted file,0.151,git/commit,21,3.86
git/commit createCommit partials can commit renames with modifications,0.159,git/commit,21,3.86
git/commit createCommit partials can commit renames with partially selected modifications,0.193,git/commit,21,3.86
git/commit createCommit with a merge conflict creates a merge commit,0.229,git/commit,21,3.86
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.215,git/commit,21,3.86
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.293,git/commit,21,3.86
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.294,git/commit,21,3.86
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.353,git/commit,21,3.86
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.338,git/commit,21,3.86
git/commit createMergeCommit with no changes throws an error,0.075,git/commit,21,3.86
git/commit index corner cases can commit when staged new file is then deleted,0.13,git/commit,21,3.86
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.147,git/commit,21,3.86
git/commit index corner cases file is deleted in index,0.149,git/commit,21,3.86
git/rebase can parse progress returns a value indicating conflicts were encountered,0.437,git/rebase,7,3.852
git/rebase can parse progress status detects REBASE_HEAD,0.415,git/rebase,7,3.852
git/rebase can parse progress is a detached HEAD state,0.444,git/rebase,7,3.852
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.814,git/rebase,7,3.852
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.831,git/rebase,7,3.852
git/rebase can parse progress for long rebase is a detached HEAD state,0.862,git/rebase,7,3.852
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.163,git/stash,14,2.607
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.277,git/stash,14,2.607
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.607
GitStore loadCommitBatch includes HEAD when loading commits,0.352,GitStore,11,2.515
GitStore can discard changes from a repository,0.212,GitStore,11,2.515
GitStore can discard a renamed file,0.152,GitStore,11,2.515
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.515
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.515
GitStore undo first commit clears the undo commit dialog,0.21,GitStore,11,2.515
GitStore undo first commit has no staged files,0.203,GitStore,11,2.515
GitStore repository with HEAD file can discard modified change cleanly,0.114,GitStore,11,2.515
git/status getStatus with conflicted repo parses conflicted files with markers,0.285,git/status,12,1.983
git/status getStatus with conflicted repo parses conflicted files without markers,0.293,git/status,12,1.983
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.491,git/status,12,1.983
git/status getStatus with conflicted repo parses resolved files,0.287,git/status,12,1.983
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.168,git/status,12,1.983
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.118,git/status,12,1.983
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,1.983
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,1.983
git/status getStatus with unconflicted repo reflects renames,0.081,git/status,12,1.983
git/status getStatus with unconflicted repo reflects copies,0.079,git/status,12,1.983
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.038,git/status,12,1.983
BranchPruner does nothing on non GitHub repositories,0.177,BranchPruner,6,1.429
BranchPruner prunes for GitHub repository,0.263,BranchPruner,6,1.429
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.188,BranchPruner,6,1.429
BranchPruner does not prune if there is no default branch,0.181,BranchPruner,6,1.429
BranchPruner does not prune reserved branches,0.243,BranchPruner,6,1.429
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.033,git/diff,19,1.533
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.533
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.533
git/diff getBlobImage retrieves valid images for deleted file,0.111,git/diff,19,1.533
git/diff imageDiff changes for images are set,0.098,git/diff,19,1.533
git/diff imageDiff changes for text are not set,0.062,git/diff,19,1.533
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.533
git/diff getWorkingDirectoryDiff counts lines for modified file,0.059,git/diff,19,1.533
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.533
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.082,git/diff,19,1.533
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.122,git/diff,19,1.533
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.135,git/diff,19,1.533
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.108,git/diff,19,1.533
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.115,git/diff,19,1.533
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.074,git/diff,19,1.533
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.533
git/diff getBinaryPaths in repo with text only files returns an empty array,0.064,git/diff,19,1.533
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.075,git/diff,19,1.533
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.09,git/diff,19,1.533
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.907
git/reflog getRecentBranches works after renaming a branch,0.162,git/reflog,6,0.907
git/reflog getRecentBranches returns a limited number of branches,0.219,git/reflog,6,0.907
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.134,git/reflog,6,0.907
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.166,git/reflog,6,0.907
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.051,git/reflog,6,0.907
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.287,formatPatch,5,0.907
git/checkout can checkout a valid branch name in an existing repository,0.111,git/checkout,6,0.855
git/checkout can checkout a branch when it exists on multiple remotes,0.111,git/checkout,6,0.855
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.855
git/checkout with submodules cleans up an submodule that no longer exists,0.251,git/checkout,6,0.855
git/checkout with submodules updates a changed submodule reference,0.208,git/checkout,6,0.855
git/branch tip returns unborn for new repository,0.027,git/branch,10,0.582
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,10,0.582
git/branch tip returns detached for arbitrary checkout,0.044,git/branch,10,0.582
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.582
git/branch tip returns non-origin remote,0.071,git/branch,10,0.582
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.07,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo finds one branch name,0.046,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.582
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,10,0.582
git/submodule listSubmodules returns the submodule entry,0.11,git/submodule,3,0.664
git/submodule listSubmodules returns the expected tag,0.155,git/submodule,3,0.664
git/submodule resetSubmodulePaths update submodule to original commit,0.355,git/submodule,3,0.664
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.105,gitignore,9,0.694
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.108,gitignore,9,0.694
gitignore saveGitIgnore applies rule correctly to repository,0.104,gitignore,9,0.694
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.694
gitignore appendIgnoreRule appends multiple rules,0.125,gitignore,9,0.694
git/rev-parse isGitRepository should return true for a repository,0.038,git/rev-parse,10,0.632
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns true for initialized bare repository,0.056,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.632
git/rev-parse isBareRepository throws error for missing directory,0.045,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.045,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.044,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.178,git/rev-parse,10,0.632
git/merge merge and is successful returns true,0.033,git/merge,7,0.582
git/merge merge and is a noop returns false,0.054,git/merge,7,0.582
git/merge getMergeBase returns the common ancestor of two branches,0.068,git/merge,7,0.582
git/log getCommits loads history,0.054,git/log,7,0.503
git/log getCommits handles repository with HEAD file on disk,0.073,git/log,7,0.503
git/log getCommits handles repository with signed commit and log.showSignature set,0.089,git/log,7,0.503
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.503
git/log getChangedFiles detects renames,0.076,git/log,7,0.503
git/log getChangedFiles detect copies,0.079,git/log,7,0.503
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.503
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.531
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.531
git/reset reset can hard reset a repository,0.065,git/reset,2,0.109
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.43
git/remote findDefaultRemote returns origin when multiple remotes found,0.052,git/remote,9,0.43
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.43
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.308
git/config config looks up config values,0.042,git/config,4,0.291
git/config config returns null for undefined values,0.046,git/config,4,0.291
git/config global config getGlobalConfigPath gets the config path,0.061,git/config,4,0.291
git/config global config setGlobalConfigValue will replace all entries for a global value,0.101,git/config,4,0.291
git/core error handling does not throw for errors that were expected,0.148,git/core,4,0.333
git/core error handling throws for errors that were not expected,0.051,git/core,4,0.333
git/core exit code handling does not throw for exit codes that were expected,0.049,git/core,4,0.333
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.333
git/for-each-ref getBranches fetches branches using for-each-ref,0.074,git/for-each-ref,3,0.22
git/for-each-ref getBranches should return empty list for empty repo,0.063,git/for-each-ref,3,0.22
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.049,git/for-each-ref,3,0.22
AppStore can select a repository,0.133,AppStore,5,0.188
validatedRepositoryPath returns the path to the repository,0.39,validatedRepositoryPath,2,0.444
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.048
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.365,git/rebase,21,8.496
git/rebase detect conflicts status detects REBASE_HEAD,0.285,git/rebase,21,8.496
git/rebase detect conflicts has conflicted files in working directory,0.292,git/rebase,21,8.496
git/rebase detect conflicts is a detached HEAD state,0.297,git/rebase,21,8.496
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.307,git/rebase,21,8.496
git/rebase abort after conflicts found no longer has working directory changes,0.304,git/rebase,21,8.496
git/rebase abort after conflicts found returns to the feature branch,0.317,git/rebase,21,8.496
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.379,git/rebase,21,8.496
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.394,git/rebase,21,8.496
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.359,git/rebase,21,8.496
git/rebase continue after resolving conflicts returns success,0.415,git/rebase,21,8.496
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.441,git/rebase,21,8.496
git/rebase continue after resolving conflicts no longer has working directory changes,0.438,git/rebase,21,8.496
git/rebase continue after resolving conflicts returns to the feature branch,0.412,git/rebase,21,8.496
git/rebase continue after resolving conflicts branch is now a different ref,0.458,git/rebase,21,8.496
git/rebase continue with additional changes unrelated to conflicted files returns success,0.426,git/rebase,21,8.496
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.424,git/rebase,21,8.496
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.421,git/rebase,21,8.496
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.447,git/rebase,21,8.496
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.454,git/rebase,21,8.496
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.405,git/rebase,21,8.496
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.856
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.856
git/commit createCommit normal can commit for empty repository,0.12,git/commit,21,3.856
git/commit createCommit normal can commit renames,0.137,git/commit,21,3.856
git/commit createCommit partials can commit some lines from new file,0.149,git/commit,21,3.856
git/commit createCommit partials can commit second hunk from modified file,0.161,git/commit,21,3.856
git/commit createCommit partials can commit single delete from modified file,0.144,git/commit,21,3.856
git/commit createCommit partials can commit multiple hunks from modified file,0.161,git/commit,21,3.856
git/commit createCommit partials can commit some lines from deleted file,0.154,git/commit,21,3.856
git/commit createCommit partials can commit renames with modifications,0.153,git/commit,21,3.856
git/commit createCommit partials can commit renames with partially selected modifications,0.189,git/commit,21,3.856
git/commit createCommit with a merge conflict creates a merge commit,0.233,git/commit,21,3.856
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.206,git/commit,21,3.856
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.299,git/commit,21,3.856
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.276,git/commit,21,3.856
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.349,git/commit,21,3.856
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.355,git/commit,21,3.856
git/commit createMergeCommit with no changes throws an error,0.079,git/commit,21,3.856
git/commit index corner cases can commit when staged new file is then deleted,0.13,git/commit,21,3.856
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.15,git/commit,21,3.856
git/commit index corner cases file is deleted in index,0.152,git/commit,21,3.856
git/rebase can parse progress returns a value indicating conflicts were encountered,0.425,git/rebase,7,4.015
git/rebase can parse progress status detects REBASE_HEAD,0.426,git/rebase,7,4.015
git/rebase can parse progress is a detached HEAD state,0.441,git/rebase,7,4.015
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.97,git/rebase,7,4.015
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.833,git/rebase,7,4.015
git/rebase can parse progress for long rebase is a detached HEAD state,0.87,git/rebase,7,4.015
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.148,git/stash,14,2.666
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.273,git/stash,14,2.666
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.207,git/stash,14,2.666
GitStore loadCommitBatch includes HEAD when loading commits,0.343,GitStore,11,2.436
GitStore can discard changes from a repository,0.209,GitStore,11,2.436
GitStore can discard a renamed file,0.146,GitStore,11,2.436
GitStore undo first commit reports the repository is unborn,0.178,GitStore,11,2.436
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.436
GitStore undo first commit clears the undo commit dialog,0.206,GitStore,11,2.436
GitStore undo first commit has no staged files,0.197,GitStore,11,2.436
GitStore repository with HEAD file can discard modified change cleanly,0.115,GitStore,11,2.436
git/status getStatus with conflicted repo parses conflicted files with markers,0.282,git/status,12,1.97
git/status getStatus with conflicted repo parses conflicted files without markers,0.277,git/status,12,1.97
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.503,git/status,12,1.97
git/status getStatus with conflicted repo parses resolved files,0.353,git/status,12,1.97
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.104,git/status,12,1.97
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.108,git/status,12,1.97
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.97
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.042,git/status,12,1.97
git/status getStatus with unconflicted repo reflects renames,0.078,git/status,12,1.97
git/status getStatus with unconflicted repo reflects copies,0.081,git/status,12,1.97
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,1.97
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.036,git/diff,19,1.548
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.548
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.548
git/diff getBlobImage retrieves valid images for deleted file,0.063,git/diff,19,1.548
git/diff imageDiff changes for images are set,0.124,git/diff,19,1.548
git/diff imageDiff changes for text are not set,0.091,git/diff,19,1.548
git/diff getWorkingDirectoryDiff counts lines for new file,0.067,git/diff,19,1.548
git/diff getWorkingDirectoryDiff counts lines for modified file,0.075,git/diff,19,1.548
git/diff getWorkingDirectoryDiff counts lines for staged file,0.062,git/diff,19,1.548
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.548
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.12,git/diff,19,1.548
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.123,git/diff,19,1.548
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.107,git/diff,19,1.548
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.109,git/diff,19,1.548
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.548
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.548
git/diff getBinaryPaths in repo with text only files returns an empty array,0.066,git/diff,19,1.548
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.068,git/diff,19,1.548
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.083,git/diff,19,1.548
BranchPruner does nothing on non GitHub repositories,0.192,BranchPruner,6,1.473
BranchPruner prunes for GitHub repository,0.273,BranchPruner,6,1.473
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.191,BranchPruner,6,1.473
BranchPruner does not prune if there is no default branch,0.189,BranchPruner,6,1.473
BranchPruner does not prune reserved branches,0.241,BranchPruner,6,1.473
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.885
git/reflog getRecentBranches works after renaming a branch,0.157,git/reflog,6,0.885
git/reflog getRecentBranches returns a limited number of branches,0.222,git/reflog,6,0.885
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.127,git/reflog,6,0.885
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.156,git/reflog,6,0.885
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.051,git/reflog,6,0.885
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.254,formatPatch,5,0.853
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.825
git/checkout can checkout a branch when it exists on multiple remotes,0.111,git/checkout,6,0.825
git/checkout will fail when an existing branch matches the remote branch,0.095,git/checkout,6,0.825
git/checkout with submodules cleans up an submodule that no longer exists,0.247,git/checkout,6,0.825
git/checkout with submodules updates a changed submodule reference,0.191,git/checkout,6,0.825
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.093,gitignore,9,0.617
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.099,gitignore,9,0.617
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.617
gitignore appendIgnoreRule appends one rule,0.104,gitignore,9,0.617
gitignore appendIgnoreRule appends multiple rules,0.107,gitignore,9,0.617
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.58
git/submodule listSubmodules returns the expected tag,0.15,git/submodule,3,0.58
git/submodule resetSubmodulePaths update submodule to original commit,0.29,git/submodule,3,0.58
git/rev-parse isGitRepository should return true for a repository,0.048,git/rev-parse,10,0.638
git/rev-parse isGitRepository should return false for a directory,0.043,git/rev-parse,10,0.638
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.638
git/rev-parse isBareRepository returns true for initialized bare repository,0.055,git/rev-parse,10,0.638
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.638
git/rev-parse isBareRepository throws error for missing directory,0.045,git/rev-parse,10,0.638
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.056,git/rev-parse,10,0.638
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.044,git/rev-parse,10,0.638
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.045,git/rev-parse,10,0.638
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.172,git/rev-parse,10,0.638
git/branch tip returns unborn for new repository,0.036,git/branch,10,0.623
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.623
git/branch tip returns detached for arbitrary checkout,0.049,git/branch,10,0.623
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,10,0.623
git/branch tip returns non-origin remote,0.077,git/branch,10,0.623
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.083,git/branch,10,0.623
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.623
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.623
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.623
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.623
git/merge merge and is successful returns true,0.037,git/merge,7,0.56
git/merge merge and is a noop returns false,0.051,git/merge,7,0.56
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.56
git-lfs isUsingLFS returns false for repository not using LFS,0.052,git-lfs,9,0.502
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.502
git/log getCommits loads history,0.059,git/log,7,0.544
git/log getCommits handles repository with HEAD file on disk,0.081,git/log,7,0.544
git/log getCommits handles repository with signed commit and log.showSignature set,0.093,git/log,7,0.544
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.544
git/log getChangedFiles detects renames,0.088,git/log,7,0.544
git/log getChangedFiles detect copies,0.086,git/log,7,0.544
git/log getChangedFiles handles commit when HEAD exists on disk,0.048,git/log,7,0.544
validatedRepositoryPath returns the path to the repository,0.042,validatedRepositoryPath,2,0.099
git/remote getRemotes should return both remotes,0.049,git/remote,9,0.448
git/remote findDefaultRemote returns origin when multiple remotes found,0.058,git/remote,9,0.448
git/remote findDefaultRemote returns something when origin removed,0.059,git/remote,9,0.448
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.217
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.217
git/core exit code handling does not throw for exit codes that were expected,0.042,git/core,4,0.217
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.217
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.308
git/config config looks up config values,0.045,git/config,4,0.282
git/config config returns null for undefined values,0.044,git/config,4,0.282
git/config global config getGlobalConfigPath gets the config path,0.061,git/config,4,0.282
git/config global config setGlobalConfigValue will replace all entries for a global value,0.096,git/config,4,0.282
git/for-each-ref getBranches fetches branches using for-each-ref,0.069,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for empty repo,0.066,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.211
AppStore can select a repository,0.138,AppStore,5,0.192
git/reset reset can hard reset a repository,0.445,git/reset,2,0.491
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.376,git/rebase,21,8.474
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.474
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,8.474
git/rebase detect conflicts is a detached HEAD state,0.293,git/rebase,21,8.474
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.3,git/rebase,21,8.474
git/rebase abort after conflicts found no longer has working directory changes,0.312,git/rebase,21,8.474
git/rebase abort after conflicts found returns to the feature branch,0.321,git/rebase,21,8.474
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.351,git/rebase,21,8.474
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.379,git/rebase,21,8.474
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.367,git/rebase,21,8.474
git/rebase continue after resolving conflicts returns success,0.449,git/rebase,21,8.474
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.444,git/rebase,21,8.474
git/rebase continue after resolving conflicts no longer has working directory changes,0.431,git/rebase,21,8.474
git/rebase continue after resolving conflicts returns to the feature branch,0.422,git/rebase,21,8.474
git/rebase continue after resolving conflicts branch is now a different ref,0.451,git/rebase,21,8.474
git/rebase continue with additional changes unrelated to conflicted files returns success,0.431,git/rebase,21,8.474
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.425,git/rebase,21,8.474
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.437,git/rebase,21,8.474
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.431,git/rebase,21,8.474
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.443,git/rebase,21,8.474
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.403,git/rebase,21,8.474
git/rebase can parse progress returns a value indicating conflicts were encountered,0.395,git/rebase,7,3.504
git/rebase can parse progress status detects REBASE_HEAD,0.384,git/rebase,7,3.504
git/rebase can parse progress is a detached HEAD state,0.378,git/rebase,7,3.504
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.761,git/rebase,7,3.504
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.757,git/rebase,7,3.504
git/rebase can parse progress for long rebase is a detached HEAD state,0.772,git/rebase,7,3.504
git/commit createCommit normal commits the given files,0.122,git/commit,21,4.207
git/commit createCommit normal commit does not strip commentary by default,0.097,git/commit,21,4.207
git/commit createCommit normal can commit for empty repository,0.129,git/commit,21,4.207
git/commit createCommit normal can commit renames,0.145,git/commit,21,4.207
git/commit createCommit partials can commit some lines from new file,0.173,git/commit,21,4.207
git/commit createCommit partials can commit second hunk from modified file,0.182,git/commit,21,4.207
git/commit createCommit partials can commit single delete from modified file,0.159,git/commit,21,4.207
git/commit createCommit partials can commit multiple hunks from modified file,0.174,git/commit,21,4.207
git/commit createCommit partials can commit some lines from deleted file,0.163,git/commit,21,4.207
git/commit createCommit partials can commit renames with modifications,0.169,git/commit,21,4.207
git/commit createCommit partials can commit renames with partially selected modifications,0.223,git/commit,21,4.207
git/commit createCommit with a merge conflict creates a merge commit,0.245,git/commit,21,4.207
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.227,git/commit,21,4.207
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.331,git/commit,21,4.207
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.317,git/commit,21,4.207
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.365,git/commit,21,4.207
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.377,git/commit,21,4.207
git/commit createMergeCommit with no changes throws an error,0.091,git/commit,21,4.207
git/commit index corner cases can commit when staged new file is then deleted,0.144,git/commit,21,4.207
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.158,git/commit,21,4.207
git/commit index corner cases file is deleted in index,0.164,git/commit,21,4.207
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.155,git/stash,14,2.774
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.321,git/stash,14,2.774
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.214,git/stash,14,2.774
GitStore loadCommitBatch includes HEAD when loading commits,0.314,GitStore,11,2.362
GitStore can discard changes from a repository,0.172,GitStore,11,2.362
GitStore can discard a renamed file,0.148,GitStore,11,2.362
GitStore undo first commit reports the repository is unborn,0.174,GitStore,11,2.362
GitStore undo first commit pre-fills the commit message,0.118,GitStore,11,2.362
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.362
GitStore undo first commit has no staged files,0.201,GitStore,11,2.362
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.362
git/status getStatus with conflicted repo parses conflicted files with markers,0.282,git/status,12,1.989
git/status getStatus with conflicted repo parses conflicted files without markers,0.288,git/status,12,1.989
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.467,git/status,12,1.989
git/status getStatus with conflicted repo parses resolved files,0.289,git/status,12,1.989
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.102,git/status,12,1.989
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.122,git/status,12,1.989
git/status getStatus with unconflicted repo parses changed files,0.05,git/status,12,1.989
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.042,git/status,12,1.989
git/status getStatus with unconflicted repo reflects renames,0.148,git/status,12,1.989
git/status getStatus with unconflicted repo reflects copies,0.108,git/status,12,1.989
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.989
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.041,git/diff,19,1.539
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.539
git/diff getBlobImage retrieves valid image for modified file,0.1,git/diff,19,1.539
git/diff getBlobImage retrieves valid images for deleted file,0.068,git/diff,19,1.539
git/diff imageDiff changes for images are set,0.07,git/diff,19,1.539
git/diff imageDiff changes for text are not set,0.063,git/diff,19,1.539
git/diff getWorkingDirectoryDiff counts lines for new file,0.064,git/diff,19,1.539
git/diff getWorkingDirectoryDiff counts lines for modified file,0.061,git/diff,19,1.539
git/diff getWorkingDirectoryDiff counts lines for staged file,0.061,git/diff,19,1.539
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.084,git/diff,19,1.539
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.539
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.117,git/diff,19,1.539
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.096,git/diff,19,1.539
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.1,git/diff,19,1.539
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.071,git/diff,19,1.539
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.056,git/diff,19,1.539
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.539
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.539
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.096,git/diff,19,1.539
BranchPruner does nothing on non GitHub repositories,0.19,BranchPruner,6,1.513
BranchPruner prunes for GitHub repository,0.253,BranchPruner,6,1.513
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.203,BranchPruner,6,1.513
BranchPruner does not prune if there is no default branch,0.196,BranchPruner,6,1.513
BranchPruner does not prune reserved branches,0.261,BranchPruner,6,1.513
git/reflog getRecentBranches returns the recently checked out branches,0.127,git/reflog,6,0.894
git/reflog getRecentBranches works after renaming a branch,0.162,git/reflog,6,0.894
git/reflog getRecentBranches returns a limited number of branches,0.217,git/reflog,6,0.894
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.128,git/reflog,6,0.894
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.163,git/reflog,6,0.894
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.894
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.277,formatPatch,5,0.896
git/checkout can checkout a valid branch name in an existing repository,0.114,git/checkout,6,0.906
git/checkout can checkout a branch when it exists on multiple remotes,0.118,git/checkout,6,0.906
git/checkout will fail when an existing branch matches the remote branch,0.103,git/checkout,6,0.906
git/checkout with submodules cleans up an submodule that no longer exists,0.267,git/checkout,6,0.906
git/checkout with submodules updates a changed submodule reference,0.232,git/checkout,6,0.906
git/rev-parse isGitRepository should return true for a repository,0.043,git/rev-parse,10,0.612
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.612
git/rev-parse isBareRepository returns false for default initialized repository,0.055,git/rev-parse,10,0.612
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.612
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.612
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.612
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.055,git/rev-parse,10,0.612
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.612
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.045,git/rev-parse,10,0.612
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.168,git/rev-parse,10,0.612
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.642
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,10,0.642
git/branch tip returns detached for arbitrary checkout,0.054,git/branch,10,0.642
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.642
git/branch tip returns non-origin remote,0.075,git/branch,10,0.642
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.089,git/branch,10,0.642
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.642
git/branch getBranchesPointedAt in a local repo finds no branch names,0.043,git/branch,10,0.642
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.044,git/branch,10,0.642
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.088,git/branch,10,0.642
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.117,gitignore,9,0.716
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.112,gitignore,9,0.716
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.716
gitignore appendIgnoreRule appends one rule,0.123,gitignore,9,0.716
gitignore appendIgnoreRule appends multiple rules,0.126,gitignore,9,0.716
git/submodule listSubmodules returns the submodule entry,0.102,git/submodule,3,0.593
git/submodule listSubmodules returns the expected tag,0.151,git/submodule,3,0.593
git/submodule resetSubmodulePaths update submodule to original commit,0.296,git/submodule,3,0.593
git/merge merge and is successful returns true,0.03,git/merge,7,0.585
git/merge merge and is a noop returns false,0.053,git/merge,7,0.585
git/merge getMergeBase returns the common ancestor of two branches,0.065,git/merge,7,0.585
git/log getCommits loads history,0.055,git/log,7,0.528
git/log getCommits handles repository with HEAD file on disk,0.079,git/log,7,0.528
git/log getCommits handles repository with signed commit and log.showSignature set,0.098,git/log,7,0.528
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.528
git/log getChangedFiles detects renames,0.078,git/log,7,0.528
git/log getChangedFiles detect copies,0.079,git/log,7,0.528
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.528
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.549
git-lfs isUsingLFS returns true if LFS is tracking a path,0.072,git-lfs,9,0.549
git/reset reset can hard reset a repository,0.068,git/reset,2,0.112
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.454
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.454
git/remote findDefaultRemote returns something when origin removed,0.065,git/remote,9,0.454
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.043,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.044,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.031,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.315
git/config config looks up config values,0.042,git/config,4,0.297
git/config config returns null for undefined values,0.051,git/config,4,0.297
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,4,0.297
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,4,0.297
git/core error handling does not throw for errors that were expected,0.049,git/core,4,0.233
git/core error handling throws for errors that were not expected,0.049,git/core,4,0.233
git/core exit code handling does not throw for exit codes that were expected,0.047,git/core,4,0.233
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.233
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.229
git/for-each-ref getBranches should return empty list for empty repo,0.068,git/for-each-ref,3,0.229
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.061,git/for-each-ref,3,0.229
AppStore can select a repository,0.145,AppStore,5,0.201
validatedRepositoryPath returns the path to the repository,0.423,validatedRepositoryPath,2,0.482
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.377,git/rebase,21,8.469
git/rebase detect conflicts status detects REBASE_HEAD,0.274,git/rebase,21,8.469
git/rebase detect conflicts has conflicted files in working directory,0.286,git/rebase,21,8.469
git/rebase detect conflicts is a detached HEAD state,0.294,git/rebase,21,8.469
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.295,git/rebase,21,8.469
git/rebase abort after conflicts found no longer has working directory changes,0.298,git/rebase,21,8.469
git/rebase abort after conflicts found returns to the feature branch,0.304,git/rebase,21,8.469
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.401,git/rebase,21,8.469
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.393,git/rebase,21,8.469
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.355,git/rebase,21,8.469
git/rebase continue after resolving conflicts returns success,0.42,git/rebase,21,8.469
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.419,git/rebase,21,8.469
git/rebase continue after resolving conflicts no longer has working directory changes,0.445,git/rebase,21,8.469
git/rebase continue after resolving conflicts returns to the feature branch,0.408,git/rebase,21,8.469
git/rebase continue after resolving conflicts branch is now a different ref,0.447,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files returns success,0.411,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.424,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.436,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.453,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.483,git/rebase,21,8.469
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.394,git/rebase,21,8.469
git/commit createCommit normal commits the given files,0.11,git/commit,21,3.894
git/commit createCommit normal commit does not strip commentary by default,0.093,git/commit,21,3.894
git/commit createCommit normal can commit for empty repository,0.119,git/commit,21,3.894
git/commit createCommit normal can commit renames,0.136,git/commit,21,3.894
git/commit createCommit partials can commit some lines from new file,0.147,git/commit,21,3.894
git/commit createCommit partials can commit second hunk from modified file,0.151,git/commit,21,3.894
git/commit createCommit partials can commit single delete from modified file,0.142,git/commit,21,3.894
git/commit createCommit partials can commit multiple hunks from modified file,0.161,git/commit,21,3.894
git/commit createCommit partials can commit some lines from deleted file,0.162,git/commit,21,3.894
git/commit createCommit partials can commit renames with modifications,0.159,git/commit,21,3.894
git/commit createCommit partials can commit renames with partially selected modifications,0.193,git/commit,21,3.894
git/commit createCommit with a merge conflict creates a merge commit,0.226,git/commit,21,3.894
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.205,git/commit,21,3.894
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.318,git/commit,21,3.894
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.283,git/commit,21,3.894
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.345,git/commit,21,3.894
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.359,git/commit,21,3.894
git/commit createMergeCommit with no changes throws an error,0.083,git/commit,21,3.894
git/commit index corner cases can commit when staged new file is then deleted,0.134,git/commit,21,3.894
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,3.894
git/commit index corner cases file is deleted in index,0.151,git/commit,21,3.894
git/rebase can parse progress returns a value indicating conflicts were encountered,0.432,git/rebase,7,3.859
git/rebase can parse progress status detects REBASE_HEAD,0.415,git/rebase,7,3.859
git/rebase can parse progress is a detached HEAD state,0.419,git/rebase,7,3.859
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.827,git/rebase,7,3.859
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.867,git/rebase,7,3.859
git/rebase can parse progress for long rebase is a detached HEAD state,0.845,git/rebase,7,3.859
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.154,git/stash,14,2.611
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.267,git/stash,14,2.611
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.219,git/stash,14,2.611
GitStore loadCommitBatch includes HEAD when loading commits,0.333,GitStore,11,2.434
GitStore can discard changes from a repository,0.195,GitStore,11,2.434
GitStore can discard a renamed file,0.158,GitStore,11,2.434
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.434
GitStore undo first commit pre-fills the commit message,0.117,GitStore,11,2.434
GitStore undo first commit clears the undo commit dialog,0.206,GitStore,11,2.434
GitStore undo first commit has no staged files,0.194,GitStore,11,2.434
GitStore repository with HEAD file can discard modified change cleanly,0.112,GitStore,11,2.434
git/status getStatus with conflicted repo parses conflicted files with markers,0.304,git/status,12,2.048
git/status getStatus with conflicted repo parses conflicted files without markers,0.286,git/status,12,2.048
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.485,git/status,12,2.048
git/status getStatus with conflicted repo parses resolved files,0.299,git/status,12,2.048
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.105,git/status,12,2.048
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.124,git/status,12,2.048
git/status getStatus with unconflicted repo parses changed files,0.069,git/status,12,2.048
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,2.048
git/status getStatus with unconflicted repo reflects renames,0.149,git/status,12,2.048
git/status getStatus with unconflicted repo reflects copies,0.09,git/status,12,2.048
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,2.048
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.041,git/diff,19,1.543
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.543
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.543
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.543
git/diff imageDiff changes for images are set,0.135,git/diff,19,1.543
git/diff imageDiff changes for text are not set,0.072,git/diff,19,1.543
git/diff getWorkingDirectoryDiff counts lines for new file,0.073,git/diff,19,1.543
git/diff getWorkingDirectoryDiff counts lines for modified file,0.076,git/diff,19,1.543
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.543
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.087,git/diff,19,1.543
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.117,git/diff,19,1.543
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.12,git/diff,19,1.543
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.107,git/diff,19,1.543
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.108,git/diff,19,1.543
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.081,git/diff,19,1.543
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.049,git/diff,19,1.543
git/diff getBinaryPaths in repo with text only files returns an empty array,0.064,git/diff,19,1.543
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.543
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.085,git/diff,19,1.543
BranchPruner does nothing on non GitHub repositories,0.189,BranchPruner,6,1.512
BranchPruner prunes for GitHub repository,0.25,BranchPruner,6,1.512
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.213,BranchPruner,6,1.512
BranchPruner does not prune if there is no default branch,0.201,BranchPruner,6,1.512
BranchPruner does not prune reserved branches,0.256,BranchPruner,6,1.512
git/checkout can checkout a valid branch name in an existing repository,0.103,git/checkout,6,0.815
git/checkout can checkout a branch when it exists on multiple remotes,0.109,git/checkout,6,0.815
git/checkout will fail when an existing branch matches the remote branch,0.093,git/checkout,6,0.815
git/checkout with submodules cleans up an submodule that no longer exists,0.248,git/checkout,6,0.815
git/checkout with submodules updates a changed submodule reference,0.19,git/checkout,6,0.815
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.268,formatPatch,5,0.89
git/reflog getRecentBranches returns the recently checked out branches,0.142,git/reflog,6,1.02
git/reflog getRecentBranches works after renaming a branch,0.19,git/reflog,6,1.02
git/reflog getRecentBranches returns a limited number of branches,0.246,git/reflog,6,1.02
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.155,git/reflog,6,1.02
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.178,git/reflog,6,1.02
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.063,git/reflog,6,1.02
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.095,gitignore,9,0.629
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.102,gitignore,9,0.629
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.629
gitignore appendIgnoreRule appends one rule,0.103,gitignore,9,0.629
gitignore appendIgnoreRule appends multiple rules,0.109,gitignore,9,0.629
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.585
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.585
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.585
git/branch tip returns current branch when on a valid HEAD,0.064,git/branch,10,0.585
git/branch tip returns non-origin remote,0.074,git/branch,10,0.585
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.071,git/branch,10,0.585
git/branch getBranchesPointedAt in a local repo finds one branch name,0.041,git/branch,10,0.585
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.585
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.585
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,10,0.585
git/rev-parse isGitRepository should return true for a repository,0.047,git/rev-parse,10,0.618
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.618
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.618
git/rev-parse isBareRepository returns true for initialized bare repository,0.061,git/rev-parse,10,0.618
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.618
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.618
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.618
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.618
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.618
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.162,git/rev-parse,10,0.618
git/submodule listSubmodules returns the submodule entry,0.108,git/submodule,3,0.633
git/submodule listSubmodules returns the expected tag,0.176,git/submodule,3,0.633
git/submodule resetSubmodulePaths update submodule to original commit,0.301,git/submodule,3,0.633
git/merge merge and is successful returns true,0.038,git/merge,7,0.603
git/merge merge and is a noop returns false,0.052,git/merge,7,0.603
git/merge getMergeBase returns the common ancestor of two branches,0.067,git/merge,7,0.603
git-lfs isUsingLFS returns false for repository not using LFS,0.051,git-lfs,9,0.535
git-lfs isUsingLFS returns true if LFS is tracking a path,0.07,git-lfs,9,0.535
git/log getCommits loads history,0.061,git/log,7,0.53
git/log getCommits handles repository with HEAD file on disk,0.08,git/log,7,0.53
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.53
git/log getChangedFiles loads the files changed in the commit,0.05,git/log,7,0.53
git/log getChangedFiles detects renames,0.083,git/log,7,0.53
git/log getChangedFiles detect copies,0.076,git/log,7,0.53
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.53
validatedRepositoryPath returns the path to the repository,0.038,validatedRepositoryPath,2,0.094
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.452
git/remote findDefaultRemote returns origin when multiple remotes found,0.061,git/remote,9,0.452
git/remote findDefaultRemote returns something when origin removed,0.062,git/remote,9,0.452
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.318
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.046,patch formatting,8,0.318
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.318
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.046,patch formatting,8,0.318
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.318
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.318
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.318
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.318
git/config config looks up config values,0.043,git/config,4,0.282
git/config config returns null for undefined values,0.046,git/config,4,0.282
git/config global config getGlobalConfigPath gets the config path,0.061,git/config,4,0.282
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,4,0.282
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.224
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.224
git/core exit code handling does not throw for exit codes that were expected,0.045,git/core,4,0.224
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.224
git/for-each-ref getBranches fetches branches using for-each-ref,0.064,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for empty repo,0.07,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.049,git/for-each-ref,3,0.213
AppStore can select a repository,0.14,AppStore,5,0.194
git/reset reset can hard reset a repository,0.44,git/reset,2,0.483
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.028,git/git-attributes,1,0.056
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.358,git/rebase,21,8.484
git/rebase detect conflicts status detects REBASE_HEAD,0.289,git/rebase,21,8.484
git/rebase detect conflicts has conflicted files in working directory,0.292,git/rebase,21,8.484
git/rebase detect conflicts is a detached HEAD state,0.298,git/rebase,21,8.484
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.308,git/rebase,21,8.484
git/rebase abort after conflicts found no longer has working directory changes,0.303,git/rebase,21,8.484
git/rebase abort after conflicts found returns to the feature branch,0.321,git/rebase,21,8.484
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.376,git/rebase,21,8.484
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.39,git/rebase,21,8.484
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.367,git/rebase,21,8.484
git/rebase continue after resolving conflicts returns success,0.404,git/rebase,21,8.484
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.417,git/rebase,21,8.484
git/rebase continue after resolving conflicts no longer has working directory changes,0.448,git/rebase,21,8.484
git/rebase continue after resolving conflicts returns to the feature branch,0.422,git/rebase,21,8.484
git/rebase continue after resolving conflicts branch is now a different ref,0.46,git/rebase,21,8.484
git/rebase continue with additional changes unrelated to conflicted files returns success,0.42,git/rebase,21,8.484
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.432,git/rebase,21,8.484
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.419,git/rebase,21,8.484
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.484
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.463,git/rebase,21,8.484
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.407,git/rebase,21,8.484
git/commit createCommit normal commits the given files,0.108,git/commit,21,3.851
git/commit createCommit normal commit does not strip commentary by default,0.089,git/commit,21,3.851
git/commit createCommit normal can commit for empty repository,0.114,git/commit,21,3.851
git/commit createCommit normal can commit renames,0.133,git/commit,21,3.851
git/commit createCommit partials can commit some lines from new file,0.14,git/commit,21,3.851
git/commit createCommit partials can commit second hunk from modified file,0.162,git/commit,21,3.851
git/commit createCommit partials can commit single delete from modified file,0.143,git/commit,21,3.851
git/commit createCommit partials can commit multiple hunks from modified file,0.159,git/commit,21,3.851
git/commit createCommit partials can commit some lines from deleted file,0.159,git/commit,21,3.851
git/commit createCommit partials can commit renames with modifications,0.157,git/commit,21,3.851
git/commit createCommit partials can commit renames with partially selected modifications,0.197,git/commit,21,3.851
git/commit createCommit with a merge conflict creates a merge commit,0.224,git/commit,21,3.851
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.205,git/commit,21,3.851
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.302,git/commit,21,3.851
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.28,git/commit,21,3.851
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.36,git/commit,21,3.851
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.349,git/commit,21,3.851
git/commit createMergeCommit with no changes throws an error,0.079,git/commit,21,3.851
git/commit index corner cases can commit when staged new file is then deleted,0.131,git/commit,21,3.851
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.148,git/commit,21,3.851
git/commit index corner cases file is deleted in index,0.147,git/commit,21,3.851
git/rebase can parse progress returns a value indicating conflicts were encountered,0.433,git/rebase,7,3.872
git/rebase can parse progress status detects REBASE_HEAD,0.451,git/rebase,7,3.872
git/rebase can parse progress is a detached HEAD state,0.429,git/rebase,7,3.872
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.815,git/rebase,7,3.872
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.817,git/rebase,7,3.872
git/rebase can parse progress for long rebase is a detached HEAD state,0.877,git/rebase,7,3.872
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.166,git/stash,14,2.687
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.284,git/stash,14,2.687
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.687
GitStore loadCommitBatch includes HEAD when loading commits,0.32,GitStore,11,2.357
GitStore can discard changes from a repository,0.161,GitStore,11,2.357
GitStore can discard a renamed file,0.145,GitStore,11,2.357
GitStore undo first commit reports the repository is unborn,0.178,GitStore,11,2.357
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.357
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.357
GitStore undo first commit has no staged files,0.192,GitStore,11,2.357
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.357
git/status getStatus with conflicted repo parses conflicted files with markers,0.28,git/status,12,1.986
git/status getStatus with conflicted repo parses conflicted files without markers,0.288,git/status,12,1.986
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.47,git/status,12,1.986
git/status getStatus with conflicted repo parses resolved files,0.3,git/status,12,1.986
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.166,git/status,12,1.986
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.123,git/status,12,1.986
git/status getStatus with unconflicted repo parses changed files,0.051,git/status,12,1.986
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.986
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,1.986
git/status getStatus with unconflicted repo reflects copies,0.086,git/status,12,1.986
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.045,git/status,12,1.986
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.038,git/diff,19,1.583
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.583
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.583
git/diff getBlobImage retrieves valid images for deleted file,0.057,git/diff,19,1.583
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.583
git/diff imageDiff changes for text are not set,0.118,git/diff,19,1.583
git/diff getWorkingDirectoryDiff counts lines for new file,0.082,git/diff,19,1.583
git/diff getWorkingDirectoryDiff counts lines for modified file,0.068,git/diff,19,1.583
git/diff getWorkingDirectoryDiff counts lines for staged file,0.073,git/diff,19,1.583
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.095,git/diff,19,1.583
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.124,git/diff,19,1.583
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.125,git/diff,19,1.583
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.104,git/diff,19,1.583
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.113,git/diff,19,1.583
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.583
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.583
git/diff getBinaryPaths in repo with text only files returns an empty array,0.071,git/diff,19,1.583
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.086,git/diff,19,1.583
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.099,git/diff,19,1.583
BranchPruner does nothing on non GitHub repositories,0.209,BranchPruner,6,1.516
BranchPruner prunes for GitHub repository,0.256,BranchPruner,6,1.516
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.201,BranchPruner,6,1.516
BranchPruner does not prune if there is no default branch,0.195,BranchPruner,6,1.516
BranchPruner does not prune reserved branches,0.25,BranchPruner,6,1.516
git/reflog getRecentBranches returns the recently checked out branches,0.131,git/reflog,6,0.916
git/reflog getRecentBranches works after renaming a branch,0.171,git/reflog,6,0.916
git/reflog getRecentBranches returns a limited number of branches,0.228,git/reflog,6,0.916
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.13,git/reflog,6,0.916
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.16,git/reflog,6,0.916
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.051,git/reflog,6,0.916
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.259,formatPatch,5,0.875
git/checkout can checkout a valid branch name in an existing repository,0.11,git/checkout,6,0.848
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.848
git/checkout will fail when an existing branch matches the remote branch,0.106,git/checkout,6,0.848
git/checkout with submodules cleans up an submodule that no longer exists,0.24,git/checkout,6,0.848
git/checkout with submodules updates a changed submodule reference,0.214,git/checkout,6,0.848
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.556
git/submodule listSubmodules returns the expected tag,0.139,git/submodule,3,0.556
git/submodule resetSubmodulePaths update submodule to original commit,0.275,git/submodule,3,0.556
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.1,gitignore,9,0.661
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.108,gitignore,9,0.661
gitignore saveGitIgnore applies rule correctly to repository,0.096,gitignore,9,0.661
gitignore appendIgnoreRule appends one rule,0.112,gitignore,9,0.661
gitignore appendIgnoreRule appends multiple rules,0.118,gitignore,9,0.661
git/rev-parse isGitRepository should return true for a repository,0.047,git/rev-parse,10,0.641
git/rev-parse isGitRepository should return false for a directory,0.043,git/rev-parse,10,0.641
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.641
git/rev-parse isBareRepository returns true for initialized bare repository,0.056,git/rev-parse,10,0.641
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.641
git/rev-parse isBareRepository throws error for missing directory,0.039,git/rev-parse,10,0.641
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.062,git/rev-parse,10,0.641
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.047,git/rev-parse,10,0.641
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.641
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.176,git/rev-parse,10,0.641
git/merge merge and is successful returns true,0.034,git/merge,7,0.556
git/merge merge and is a noop returns false,0.05,git/merge,7,0.556
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.556
git/branch tip returns unborn for new repository,0.032,git/branch,10,0.632
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,10,0.632
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.632
git/branch tip returns current branch when on a valid HEAD,0.073,git/branch,10,0.632
git/branch tip returns non-origin remote,0.079,git/branch,10,0.632
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.088,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo finds one branch name,0.055,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.632
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.632
git-lfs isUsingLFS returns false for repository not using LFS,0.049,git-lfs,9,0.514
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.514
git/log getCommits loads history,0.065,git/log,7,0.546
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.546
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.546
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.546
git/log getChangedFiles detects renames,0.091,git/log,7,0.546
git/log getChangedFiles detect copies,0.083,git/log,7,0.546
git/log getChangedFiles handles commit when HEAD exists on disk,0.046,git/log,7,0.546
git/reset reset can hard reset a repository,0.071,git/reset,2,0.114
git/remote getRemotes should return both remotes,0.049,git/remote,9,0.437
git/remote findDefaultRemote returns origin when multiple remotes found,0.054,git/remote,9,0.437
git/remote findDefaultRemote returns something when origin removed,0.063,git/remote,9,0.437
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.025,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.306
git/config config looks up config values,0.042,git/config,4,0.282
git/config config returns null for undefined values,0.045,git/config,4,0.282
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.282
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,4,0.282
git/core error handling does not throw for errors that were expected,0.046,git/core,4,0.229
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.229
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.229
git/core exit code handling throws for exit codes that were not expected,0.049,git/core,4,0.229
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.219
git/for-each-ref getBranches should return empty list for empty repo,0.071,git/for-each-ref,3,0.219
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.049,git/for-each-ref,3,0.219
AppStore can select a repository,0.137,AppStore,5,0.191
validatedRepositoryPath returns the path to the repository,0.403,validatedRepositoryPath,2,0.464
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.051
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.377,git/rebase,21,8.447
git/rebase detect conflicts status detects REBASE_HEAD,0.268,git/rebase,21,8.447
git/rebase detect conflicts has conflicted files in working directory,0.272,git/rebase,21,8.447
git/rebase detect conflicts is a detached HEAD state,0.297,git/rebase,21,8.447
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.309,git/rebase,21,8.447
git/rebase abort after conflicts found no longer has working directory changes,0.321,git/rebase,21,8.447
git/rebase abort after conflicts found returns to the feature branch,0.317,git/rebase,21,8.447
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.399,git/rebase,21,8.447
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.37,git/rebase,21,8.447
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.38,git/rebase,21,8.447
git/rebase continue after resolving conflicts returns success,0.403,git/rebase,21,8.447
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.438,git/rebase,21,8.447
git/rebase continue after resolving conflicts no longer has working directory changes,0.433,git/rebase,21,8.447
git/rebase continue after resolving conflicts returns to the feature branch,0.41,git/rebase,21,8.447
git/rebase continue after resolving conflicts branch is now a different ref,0.442,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files returns success,0.412,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.423,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.443,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.43,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.448,git/rebase,21,8.447
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.447
git/rebase can parse progress returns a value indicating conflicts were encountered,0.385,git/rebase,7,3.373
git/rebase can parse progress status detects REBASE_HEAD,0.365,git/rebase,7,3.373
git/rebase can parse progress is a detached HEAD state,0.389,git/rebase,7,3.373
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.699,git/rebase,7,3.373
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.746,git/rebase,7,3.373
git/rebase can parse progress for long rebase is a detached HEAD state,0.731,git/rebase,7,3.373
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.242
git/commit createCommit normal commit does not strip commentary by default,0.101,git/commit,21,4.242
git/commit createCommit normal can commit for empty repository,0.131,git/commit,21,4.242
git/commit createCommit normal can commit renames,0.139,git/commit,21,4.242
git/commit createCommit partials can commit some lines from new file,0.165,git/commit,21,4.242
git/commit createCommit partials can commit second hunk from modified file,0.18,git/commit,21,4.242
git/commit createCommit partials can commit single delete from modified file,0.154,git/commit,21,4.242
git/commit createCommit partials can commit multiple hunks from modified file,0.168,git/commit,21,4.242
git/commit createCommit partials can commit some lines from deleted file,0.169,git/commit,21,4.242
git/commit createCommit partials can commit renames with modifications,0.164,git/commit,21,4.242
git/commit createCommit partials can commit renames with partially selected modifications,0.209,git/commit,21,4.242
git/commit createCommit with a merge conflict creates a merge commit,0.27,git/commit,21,4.242
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.228,git/commit,21,4.242
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.322,git/commit,21,4.242
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.335,git/commit,21,4.242
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.388,git/commit,21,4.242
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.392,git/commit,21,4.242
git/commit createMergeCommit with no changes throws an error,0.085,git/commit,21,4.242
git/commit index corner cases can commit when staged new file is then deleted,0.147,git/commit,21,4.242
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.159,git/commit,21,4.242
git/commit index corner cases file is deleted in index,0.163,git/commit,21,4.242
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.159,git/stash,14,2.614
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.25,git/stash,14,2.614
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.246,git/stash,14,2.614
GitStore loadCommitBatch includes HEAD when loading commits,0.354,GitStore,11,2.414
GitStore can discard changes from a repository,0.167,GitStore,11,2.414
GitStore can discard a renamed file,0.146,GitStore,11,2.414
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.414
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.414
GitStore undo first commit clears the undo commit dialog,0.215,GitStore,11,2.414
GitStore undo first commit has no staged files,0.195,GitStore,11,2.414
GitStore repository with HEAD file can discard modified change cleanly,0.11,GitStore,11,2.414
git/status getStatus with conflicted repo parses conflicted files with markers,0.285,git/status,12,1.937
git/status getStatus with conflicted repo parses conflicted files without markers,0.292,git/status,12,1.937
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.481,git/status,12,1.937
git/status getStatus with conflicted repo parses resolved files,0.282,git/status,12,1.937
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.105,git/status,12,1.937
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.126,git/status,12,1.937
git/status getStatus with unconflicted repo parses changed files,0.05,git/status,12,1.937
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,1.937
git/status getStatus with unconflicted repo reflects renames,0.097,git/status,12,1.937
git/status getStatus with unconflicted repo reflects copies,0.085,git/status,12,1.937
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.04,git/status,12,1.937
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.108,git/diff,19,1.598
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.061,git/diff,19,1.598
git/diff getBlobImage retrieves valid image for modified file,0.043,git/diff,19,1.598
git/diff getBlobImage retrieves valid images for deleted file,0.057,git/diff,19,1.598
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.598
git/diff imageDiff changes for text are not set,0.073,git/diff,19,1.598
git/diff getWorkingDirectoryDiff counts lines for new file,0.076,git/diff,19,1.598
git/diff getWorkingDirectoryDiff counts lines for modified file,0.066,git/diff,19,1.598
git/diff getWorkingDirectoryDiff counts lines for staged file,0.061,git/diff,19,1.598
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.09,git/diff,19,1.598
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.127,git/diff,19,1.598
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.127,git/diff,19,1.598
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.107,git/diff,19,1.598
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.106,git/diff,19,1.598
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.598
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.055,git/diff,19,1.598
git/diff getBinaryPaths in repo with text only files returns an empty array,0.073,git/diff,19,1.598
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.083,git/diff,19,1.598
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.09,git/diff,19,1.598
BranchPruner does nothing on non GitHub repositories,0.272,BranchPruner,6,1.551
BranchPruner prunes for GitHub repository,0.236,BranchPruner,6,1.551
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.192,BranchPruner,6,1.551
BranchPruner does not prune if there is no default branch,0.203,BranchPruner,6,1.551
BranchPruner does not prune reserved branches,0.252,BranchPruner,6,1.551
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.894
git/reflog getRecentBranches works after renaming a branch,0.16,git/reflog,6,0.894
git/reflog getRecentBranches returns a limited number of branches,0.215,git/reflog,6,0.894
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.13,git/reflog,6,0.894
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.159,git/reflog,6,0.894
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.894
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.269,formatPatch,5,0.899
git/checkout can checkout a valid branch name in an existing repository,0.102,git/checkout,6,0.919
git/checkout can checkout a branch when it exists on multiple remotes,0.11,git/checkout,6,0.919
git/checkout will fail when an existing branch matches the remote branch,0.165,git/checkout,6,0.919
git/checkout with submodules cleans up an submodule that no longer exists,0.266,git/checkout,6,0.919
git/checkout with submodules updates a changed submodule reference,0.206,git/checkout,6,0.919
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.088,gitignore,9,0.586
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.088,gitignore,9,0.586
gitignore saveGitIgnore applies rule correctly to repository,0.089,gitignore,9,0.586
gitignore appendIgnoreRule appends one rule,0.096,gitignore,9,0.586
gitignore appendIgnoreRule appends multiple rules,0.103,gitignore,9,0.586
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.599
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns true for initialized bare repository,0.052,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns false for empty directory,0.05,git/rev-parse,10,0.599
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.154,git/rev-parse,10,0.599
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.592
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,10,0.592
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.592
git/branch tip returns current branch when on a valid HEAD,0.066,git/branch,10,0.592
git/branch tip returns non-origin remote,0.075,git/branch,10,0.592
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo finds one branch name,0.05,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.592
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.072,git/branch,10,0.592
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.618
git/submodule listSubmodules returns the expected tag,0.155,git/submodule,3,0.618
git/submodule resetSubmodulePaths update submodule to original commit,0.325,git/submodule,3,0.618
git/merge merge and is successful returns true,0.034,git/merge,7,0.548
git/merge merge and is a noop returns false,0.051,git/merge,7,0.548
git/merge getMergeBase returns the common ancestor of two branches,0.064,git/merge,7,0.548
git/log getCommits loads history,0.058,git/log,7,0.529
git/log getCommits handles repository with HEAD file on disk,0.081,git/log,7,0.529
git/log getCommits handles repository with signed commit and log.showSignature set,0.097,git/log,7,0.529
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.529
git/log getChangedFiles detects renames,0.074,git/log,7,0.529
git/log getChangedFiles detect copies,0.089,git/log,7,0.529
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.529
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.504
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.504
validatedRepositoryPath returns the path to the repository,0.04,validatedRepositoryPath,2,0.093
git/remote getRemotes should return both remotes,0.039,git/remote,9,0.407
git/remote findDefaultRemote returns origin when multiple remotes found,0.051,git/remote,9,0.407
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.407
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.047,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.317
git/config config looks up config values,0.043,git/config,4,0.288
git/config config returns null for undefined values,0.049,git/config,4,0.288
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.288
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,4,0.288
git/core error handling does not throw for errors that were expected,0.055,git/core,4,0.228
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.228
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.228
git/core exit code handling throws for exit codes that were not expected,0.047,git/core,4,0.228
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for empty repo,0.064,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.203
AppStore can select a repository,0.131,AppStore,5,0.185
git/reset reset can hard reset a repository,0.411,git/reset,2,0.454
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.043
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.383,git/rebase,21,8.477
git/rebase detect conflicts status detects REBASE_HEAD,0.279,git/rebase,21,8.477
git/rebase detect conflicts has conflicted files in working directory,0.282,git/rebase,21,8.477
git/rebase detect conflicts is a detached HEAD state,0.291,git/rebase,21,8.477
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.32,git/rebase,21,8.477
git/rebase abort after conflicts found no longer has working directory changes,0.298,git/rebase,21,8.477
git/rebase abort after conflicts found returns to the feature branch,0.301,git/rebase,21,8.477
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.365,git/rebase,21,8.477
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.383,git/rebase,21,8.477
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.367,git/rebase,21,8.477
git/rebase continue after resolving conflicts returns success,0.411,git/rebase,21,8.477
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.425,git/rebase,21,8.477
git/rebase continue after resolving conflicts no longer has working directory changes,0.449,git/rebase,21,8.477
git/rebase continue after resolving conflicts returns to the feature branch,0.426,git/rebase,21,8.477
git/rebase continue after resolving conflicts branch is now a different ref,0.441,git/rebase,21,8.477
git/rebase continue with additional changes unrelated to conflicted files returns success,0.418,git/rebase,21,8.477
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.453,git/rebase,21,8.477
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.427,git/rebase,21,8.477
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.431,git/rebase,21,8.477
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.463,git/rebase,21,8.477
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,8.477
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.86
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.86
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.86
git/commit createCommit normal can commit renames,0.14,git/commit,21,3.86
git/commit createCommit partials can commit some lines from new file,0.148,git/commit,21,3.86
git/commit createCommit partials can commit second hunk from modified file,0.164,git/commit,21,3.86
git/commit createCommit partials can commit single delete from modified file,0.147,git/commit,21,3.86
git/commit createCommit partials can commit multiple hunks from modified file,0.157,git/commit,21,3.86
git/commit createCommit partials can commit some lines from deleted file,0.148,git/commit,21,3.86
git/commit createCommit partials can commit renames with modifications,0.156,git/commit,21,3.86
git/commit createCommit partials can commit renames with partially selected modifications,0.188,git/commit,21,3.86
git/commit createCommit with a merge conflict creates a merge commit,0.225,git/commit,21,3.86
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.204,git/commit,21,3.86
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.301,git/commit,21,3.86
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.277,git/commit,21,3.86
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.344,git/commit,21,3.86
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.356,git/commit,21,3.86
git/commit createMergeCommit with no changes throws an error,0.088,git/commit,21,3.86
git/commit index corner cases can commit when staged new file is then deleted,0.134,git/commit,21,3.86
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.149,git/commit,21,3.86
git/commit index corner cases file is deleted in index,0.16,git/commit,21,3.86
git/rebase can parse progress returns a value indicating conflicts were encountered,0.444,git/rebase,7,3.991
git/rebase can parse progress status detects REBASE_HEAD,0.452,git/rebase,7,3.991
git/rebase can parse progress is a detached HEAD state,0.459,git/rebase,7,3.991
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.841,git/rebase,7,3.991
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.835,git/rebase,7,3.991
git/rebase can parse progress for long rebase is a detached HEAD state,0.909,git/rebase,7,3.991
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.167,git/stash,14,2.639
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.266,git/stash,14,2.639
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.221,git/stash,14,2.639
GitStore loadCommitBatch includes HEAD when loading commits,0.347,GitStore,11,2.521
GitStore can discard changes from a repository,0.214,GitStore,11,2.521
GitStore can discard a renamed file,0.157,GitStore,11,2.521
GitStore undo first commit reports the repository is unborn,0.186,GitStore,11,2.521
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.521
GitStore undo first commit clears the undo commit dialog,0.218,GitStore,11,2.521
GitStore undo first commit has no staged files,0.213,GitStore,11,2.521
GitStore repository with HEAD file can discard modified change cleanly,0.117,GitStore,11,2.521
git/status getStatus with conflicted repo parses conflicted files with markers,0.282,git/status,12,2.012
git/status getStatus with conflicted repo parses conflicted files without markers,0.287,git/status,12,2.012
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.485,git/status,12,2.012
git/status getStatus with conflicted repo parses resolved files,0.3,git/status,12,2.012
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.103,git/status,12,2.012
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.124,git/status,12,2.012
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,2.012
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.045,git/status,12,2.012
git/status getStatus with unconflicted repo reflects renames,0.091,git/status,12,2.012
git/status getStatus with unconflicted repo reflects copies,0.138,git/status,12,2.012
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,2.012
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.031,git/diff,19,1.554
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.039,git/diff,19,1.554
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.554
git/diff getBlobImage retrieves valid images for deleted file,0.103,git/diff,19,1.554
git/diff imageDiff changes for images are set,0.105,git/diff,19,1.554
git/diff imageDiff changes for text are not set,0.07,git/diff,19,1.554
git/diff getWorkingDirectoryDiff counts lines for new file,0.08,git/diff,19,1.554
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.554
git/diff getWorkingDirectoryDiff counts lines for staged file,0.064,git/diff,19,1.554
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.093,git/diff,19,1.554
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.12,git/diff,19,1.554
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.126,git/diff,19,1.554
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.099,git/diff,19,1.554
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.554
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.554
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.554
git/diff getBinaryPaths in repo with text only files returns an empty array,0.071,git/diff,19,1.554
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.079,git/diff,19,1.554
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.554
BranchPruner does nothing on non GitHub repositories,0.191,BranchPruner,6,1.478
BranchPruner prunes for GitHub repository,0.263,BranchPruner,6,1.478
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.196,BranchPruner,6,1.478
BranchPruner does not prune if there is no default branch,0.177,BranchPruner,6,1.478
BranchPruner does not prune reserved branches,0.239,BranchPruner,6,1.478
git/checkout can checkout a valid branch name in an existing repository,0.1,git/checkout,6,0.812
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.812
git/checkout will fail when an existing branch matches the remote branch,0.099,git/checkout,6,0.812
git/checkout with submodules cleans up an submodule that no longer exists,0.247,git/checkout,6,0.812
git/checkout with submodules updates a changed submodule reference,0.185,git/checkout,6,0.812
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.27,formatPatch,5,0.878
git/reflog getRecentBranches returns the recently checked out branches,0.137,git/reflog,6,0.996
git/reflog getRecentBranches works after renaming a branch,0.188,git/reflog,6,0.996
git/reflog getRecentBranches returns a limited number of branches,0.249,git/reflog,6,0.996
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.143,git/reflog,6,0.996
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.176,git/reflog,6,0.996
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.061,git/reflog,6,0.996
git/submodule listSubmodules returns the submodule entry,0.101,git/submodule,3,0.605
git/submodule listSubmodules returns the expected tag,0.157,git/submodule,3,0.605
git/submodule resetSubmodulePaths update submodule to original commit,0.304,git/submodule,3,0.605
git/rev-parse isGitRepository should return true for a repository,0.047,git/rev-parse,10,0.642
git/rev-parse isGitRepository should return false for a directory,0.047,git/rev-parse,10,0.642
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.642
git/rev-parse isBareRepository returns true for initialized bare repository,0.055,git/rev-parse,10,0.642
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.642
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.642
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.642
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.642
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.046,git/rev-parse,10,0.642
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.189,git/rev-parse,10,0.642
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.597
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.597
git/branch tip returns detached for arbitrary checkout,0.05,git/branch,10,0.597
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,10,0.597
git/branch tip returns non-origin remote,0.075,git/branch,10,0.597
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.597
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.597
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.597
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.597
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.597
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.111,gitignore,9,0.697
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.111,gitignore,9,0.697
gitignore saveGitIgnore applies rule correctly to repository,0.104,gitignore,9,0.697
gitignore appendIgnoreRule appends one rule,0.118,gitignore,9,0.697
gitignore appendIgnoreRule appends multiple rules,0.116,gitignore,9,0.697
git/merge merge and is successful returns true,0.036,git/merge,7,0.566
git/merge merge and is a noop returns false,0.053,git/merge,7,0.566
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.566
git/log getCommits loads history,0.055,git/log,7,0.511
git/log getCommits handles repository with HEAD file on disk,0.075,git/log,7,0.511
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.511
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.511
git/log getChangedFiles detects renames,0.077,git/log,7,0.511
git/log getChangedFiles detect copies,0.078,git/log,7,0.511
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.511
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.514
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.514
git/reset reset can hard reset a repository,0.064,git/reset,2,0.108
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.442
git/remote findDefaultRemote returns origin when multiple remotes found,0.052,git/remote,9,0.442
git/remote findDefaultRemote returns something when origin removed,0.068,git/remote,9,0.442
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.046,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.043,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.312
git/config config looks up config values,0.04,git/config,4,0.293
git/config config returns null for undefined values,0.045,git/config,4,0.293
git/config global config getGlobalConfigPath gets the config path,0.067,git/config,4,0.293
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,4,0.293
git/core error handling does not throw for errors that were expected,0.041,git/core,4,0.225
git/core error handling throws for errors that were not expected,0.048,git/core,4,0.225
git/core exit code handling does not throw for exit codes that were expected,0.047,git/core,4,0.225
git/core exit code handling throws for exit codes that were not expected,0.046,git/core,4,0.225
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for empty repo,0.058,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.202
AppStore can select a repository,0.139,AppStore,5,0.192
validatedRepositoryPath returns the path to the repository,0.409,validatedRepositoryPath,2,0.467
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.369,git/rebase,21,8.482
git/rebase detect conflicts status detects REBASE_HEAD,0.279,git/rebase,21,8.482
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.482
git/rebase detect conflicts is a detached HEAD state,0.288,git/rebase,21,8.482
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.303,git/rebase,21,8.482
git/rebase abort after conflicts found no longer has working directory changes,0.304,git/rebase,21,8.482
git/rebase abort after conflicts found returns to the feature branch,0.308,git/rebase,21,8.482
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.379,git/rebase,21,8.482
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.381,git/rebase,21,8.482
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.362,git/rebase,21,8.482
git/rebase continue after resolving conflicts returns success,0.424,git/rebase,21,8.482
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.439,git/rebase,21,8.482
git/rebase continue after resolving conflicts no longer has working directory changes,0.447,git/rebase,21,8.482
git/rebase continue after resolving conflicts returns to the feature branch,0.414,git/rebase,21,8.482
git/rebase continue after resolving conflicts branch is now a different ref,0.45,git/rebase,21,8.482
git/rebase continue with additional changes unrelated to conflicted files returns success,0.421,git/rebase,21,8.482
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.444,git/rebase,21,8.482
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.45,git/rebase,21,8.482
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.443,git/rebase,21,8.482
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.444,git/rebase,21,8.482
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.403,git/rebase,21,8.482
git/rebase can parse progress returns a value indicating conflicts were encountered,0.376,git/rebase,7,3.403
git/rebase can parse progress status detects REBASE_HEAD,0.37,git/rebase,7,3.403
git/rebase can parse progress is a detached HEAD state,0.364,git/rebase,7,3.403
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.716,git/rebase,7,3.403
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.75,git/rebase,7,3.403
git/rebase can parse progress for long rebase is a detached HEAD state,0.771,git/rebase,7,3.403
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.268
git/commit createCommit normal commit does not strip commentary by default,0.101,git/commit,21,4.268
git/commit createCommit normal can commit for empty repository,0.126,git/commit,21,4.268
git/commit createCommit normal can commit renames,0.145,git/commit,21,4.268
git/commit createCommit partials can commit some lines from new file,0.166,git/commit,21,4.268
git/commit createCommit partials can commit second hunk from modified file,0.176,git/commit,21,4.268
git/commit createCommit partials can commit single delete from modified file,0.157,git/commit,21,4.268
git/commit createCommit partials can commit multiple hunks from modified file,0.182,git/commit,21,4.268
git/commit createCommit partials can commit some lines from deleted file,0.164,git/commit,21,4.268
git/commit createCommit partials can commit renames with modifications,0.171,git/commit,21,4.268
git/commit createCommit partials can commit renames with partially selected modifications,0.217,git/commit,21,4.268
git/commit createCommit with a merge conflict creates a merge commit,0.257,git/commit,21,4.268
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.239,git/commit,21,4.268
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.325,git/commit,21,4.268
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.336,git/commit,21,4.268
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.373,git/commit,21,4.268
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.394,git/commit,21,4.268
git/commit createMergeCommit with no changes throws an error,0.088,git/commit,21,4.268
git/commit index corner cases can commit when staged new file is then deleted,0.145,git/commit,21,4.268
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.166,git/commit,21,4.268
git/commit index corner cases file is deleted in index,0.168,git/commit,21,4.268
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.161,git/stash,14,2.624
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.257,git/stash,14,2.624
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.624
GitStore loadCommitBatch includes HEAD when loading commits,0.329,GitStore,11,2.413
GitStore can discard changes from a repository,0.165,GitStore,11,2.413
GitStore can discard a renamed file,0.156,GitStore,11,2.413
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.413
GitStore undo first commit pre-fills the commit message,0.122,GitStore,11,2.413
GitStore undo first commit clears the undo commit dialog,0.213,GitStore,11,2.413
GitStore undo first commit has no staged files,0.201,GitStore,11,2.413
GitStore repository with HEAD file can discard modified change cleanly,0.105,GitStore,11,2.413
git/status getStatus with conflicted repo parses conflicted files with markers,0.289,git/status,12,2.001
git/status getStatus with conflicted repo parses conflicted files without markers,0.291,git/status,12,2.001
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.477,git/status,12,2.001
git/status getStatus with conflicted repo parses resolved files,0.301,git/status,12,2.001
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.159,git/status,12,2.001
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.129,git/status,12,2.001
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,2.001
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.045,git/status,12,2.001
git/status getStatus with unconflicted repo reflects renames,0.084,git/status,12,2.001
git/status getStatus with unconflicted repo reflects copies,0.085,git/status,12,2.001
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,2.001
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.038,git/diff,19,1.547
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.037,git/diff,19,1.547
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.547
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.547
git/diff imageDiff changes for images are set,0.07,git/diff,19,1.547
git/diff imageDiff changes for text are not set,0.064,git/diff,19,1.547
git/diff getWorkingDirectoryDiff counts lines for new file,0.068,git/diff,19,1.547
git/diff getWorkingDirectoryDiff counts lines for modified file,0.065,git/diff,19,1.547
git/diff getWorkingDirectoryDiff counts lines for staged file,0.066,git/diff,19,1.547
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.547
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.125,git/diff,19,1.547
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.129,git/diff,19,1.547
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.547
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.547
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.547
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.055,git/diff,19,1.547
git/diff getBinaryPaths in repo with text only files returns an empty array,0.12,git/diff,19,1.547
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.114,git/diff,19,1.547
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.087,git/diff,19,1.547
BranchPruner does nothing on non GitHub repositories,0.19,BranchPruner,6,1.527
BranchPruner prunes for GitHub repository,0.324,BranchPruner,6,1.527
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.209,BranchPruner,6,1.527
BranchPruner does not prune if there is no default branch,0.191,BranchPruner,6,1.527
BranchPruner does not prune reserved branches,0.228,BranchPruner,6,1.527
git/reflog getRecentBranches returns the recently checked out branches,0.121,git/reflog,6,0.851
git/reflog getRecentBranches works after renaming a branch,0.158,git/reflog,6,0.851
git/reflog getRecentBranches returns a limited number of branches,0.207,git/reflog,6,0.851
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.119,git/reflog,6,0.851
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.15,git/reflog,6,0.851
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.046,git/reflog,6,0.851
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.27,formatPatch,5,0.843
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.839
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.839
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.839
git/checkout with submodules cleans up an submodule that no longer exists,0.255,git/checkout,6,0.839
git/checkout with submodules updates a changed submodule reference,0.199,git/checkout,6,0.839
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.093,gitignore,9,0.593
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.09,gitignore,9,0.593
gitignore saveGitIgnore applies rule correctly to repository,0.087,gitignore,9,0.593
gitignore appendIgnoreRule appends one rule,0.104,gitignore,9,0.593
gitignore appendIgnoreRule appends multiple rules,0.103,gitignore,9,0.593
git/rev-parse isGitRepository should return true for a repository,0.037,git/rev-parse,10,0.576
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns false for default initialized repository,0.049,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns false for empty directory,0.038,git/rev-parse,10,0.576
git/rev-parse isBareRepository throws error for missing directory,0.035,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.048,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.037,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.172,git/rev-parse,10,0.576
git/submodule listSubmodules returns the submodule entry,0.097,git/submodule,3,0.567
git/submodule listSubmodules returns the expected tag,0.145,git/submodule,3,0.567
git/submodule resetSubmodulePaths update submodule to original commit,0.282,git/submodule,3,0.567
git/branch tip returns unborn for new repository,0.034,git/branch,10,0.623
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,10,0.623
git/branch tip returns detached for arbitrary checkout,0.051,git/branch,10,0.623
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.623
git/branch tip returns non-origin remote,0.075,git/branch,10,0.623
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.079,git/branch,10,0.623
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.623
git/branch getBranchesPointedAt in a local repo finds no branch names,0.046,git/branch,10,0.623
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.043,git/branch,10,0.623
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.623
git/merge merge and is successful returns true,0.033,git/merge,7,0.559
git/merge merge and is a noop returns false,0.054,git/merge,7,0.559
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.559
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.502
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.502
git/log getCommits loads history,0.054,git/log,7,0.531
git/log getCommits handles repository with HEAD file on disk,0.083,git/log,7,0.531
git/log getCommits handles repository with signed commit and log.showSignature set,0.09,git/log,7,0.531
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.531
git/log getChangedFiles detects renames,0.084,git/log,7,0.531
git/log getChangedFiles detect copies,0.087,git/log,7,0.531
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.531
validatedRepositoryPath returns the path to the repository,0.043,validatedRepositoryPath,2,0.096
git/remote getRemotes should return both remotes,0.049,git/remote,9,0.432
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,9,0.432
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.432
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.327
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.327
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.327
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.045,patch formatting,8,0.327
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.037,patch formatting,8,0.327
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.026,patch formatting,8,0.327
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.327
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.025,patch formatting,8,0.327
git/config config looks up config values,0.042,git/config,4,0.282
git/config config returns null for undefined values,0.045,git/config,4,0.282
git/config global config getGlobalConfigPath gets the config path,0.062,git/config,4,0.282
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,4,0.282
git/core error handling does not throw for errors that were expected,0.043,git/core,4,0.215
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.215
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.215
git/core exit code handling throws for exit codes that were not expected,0.047,git/core,4,0.215
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for empty repo,0.062,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.202
AppStore can select a repository,0.115,AppStore,5,0.169
git/reset reset can hard reset a repository,0.457,git/reset,2,0.504
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.387,git/rebase,21,8.46
git/rebase detect conflicts status detects REBASE_HEAD,0.292,git/rebase,21,8.46
git/rebase detect conflicts has conflicted files in working directory,0.273,git/rebase,21,8.46
git/rebase detect conflicts is a detached HEAD state,0.282,git/rebase,21,8.46
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.309,git/rebase,21,8.46
git/rebase abort after conflicts found no longer has working directory changes,0.337,git/rebase,21,8.46
git/rebase abort after conflicts found returns to the feature branch,0.333,git/rebase,21,8.46
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.363,git/rebase,21,8.46
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.381,git/rebase,21,8.46
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.39,git/rebase,21,8.46
git/rebase continue after resolving conflicts returns success,0.439,git/rebase,21,8.46
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.415,git/rebase,21,8.46
git/rebase continue after resolving conflicts no longer has working directory changes,0.428,git/rebase,21,8.46
git/rebase continue after resolving conflicts returns to the feature branch,0.415,git/rebase,21,8.46
git/rebase continue after resolving conflicts branch is now a different ref,0.463,git/rebase,21,8.46
git/rebase continue with additional changes unrelated to conflicted files returns success,0.404,git/rebase,21,8.46
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.411,git/rebase,21,8.46
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.42,git/rebase,21,8.46
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.414,git/rebase,21,8.46
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.457,git/rebase,21,8.46
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.394,git/rebase,21,8.46
git/commit createCommit normal commits the given files,0.106,git/commit,21,3.785
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.785
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.785
git/commit createCommit normal can commit renames,0.136,git/commit,21,3.785
git/commit createCommit partials can commit some lines from new file,0.142,git/commit,21,3.785
git/commit createCommit partials can commit second hunk from modified file,0.148,git/commit,21,3.785
git/commit createCommit partials can commit single delete from modified file,0.133,git/commit,21,3.785
git/commit createCommit partials can commit multiple hunks from modified file,0.152,git/commit,21,3.785
git/commit createCommit partials can commit some lines from deleted file,0.153,git/commit,21,3.785
git/commit createCommit partials can commit renames with modifications,0.156,git/commit,21,3.785
git/commit createCommit partials can commit renames with partially selected modifications,0.203,git/commit,21,3.785
git/commit createCommit with a merge conflict creates a merge commit,0.224,git/commit,21,3.785
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.2,git/commit,21,3.785
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.292,git/commit,21,3.785
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.276,git/commit,21,3.785
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.333,git/commit,21,3.785
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.341,git/commit,21,3.785
git/commit createMergeCommit with no changes throws an error,0.083,git/commit,21,3.785
git/commit index corner cases can commit when staged new file is then deleted,0.135,git/commit,21,3.785
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.15,git/commit,21,3.785
git/commit index corner cases file is deleted in index,0.151,git/commit,21,3.785
git/rebase can parse progress returns a value indicating conflicts were encountered,0.418,git/rebase,7,3.923
git/rebase can parse progress status detects REBASE_HEAD,0.457,git/rebase,7,3.923
git/rebase can parse progress is a detached HEAD state,0.416,git/rebase,7,3.923
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.829,git/rebase,7,3.923
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.853,git/rebase,7,3.923
git/rebase can parse progress for long rebase is a detached HEAD state,0.899,git/rebase,7,3.923
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.579
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.241,git/stash,14,2.579
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.207,git/stash,14,2.579
GitStore loadCommitBatch includes HEAD when loading commits,0.246,GitStore,11,2.804
GitStore can discard changes from a repository,0.169,GitStore,11,2.804
GitStore can discard a renamed file,0.146,GitStore,11,2.804
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.804
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.804
GitStore undo first commit clears the undo commit dialog,0.321,GitStore,11,2.804
GitStore undo first commit has no staged files,0.268,GitStore,11,2.804
GitStore repository with HEAD file can discard modified change cleanly,0.148,GitStore,11,2.804
git/status getStatus with conflicted repo parses conflicted files with markers,0.424,git/status,12,2.182
git/status getStatus with conflicted repo parses conflicted files without markers,0.265,git/status,12,2.182
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.526,git/status,12,2.182
git/status getStatus with conflicted repo parses resolved files,0.352,git/status,12,2.182
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.109,git/status,12,2.182
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.115,git/status,12,2.182
git/status getStatus with unconflicted repo parses changed files,0.047,git/status,12,2.182
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.182
git/status getStatus with unconflicted repo reflects renames,0.085,git/status,12,2.182
git/status getStatus with unconflicted repo reflects copies,0.075,git/status,12,2.182
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.04,git/status,12,2.182
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.617
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.617
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.617
git/diff getBlobImage retrieves valid images for deleted file,0.075,git/diff,19,1.617
git/diff imageDiff changes for images are set,0.106,git/diff,19,1.617
git/diff imageDiff changes for text are not set,0.102,git/diff,19,1.617
git/diff getWorkingDirectoryDiff counts lines for new file,0.073,git/diff,19,1.617
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.617
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.617
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.095,git/diff,19,1.617
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.138,git/diff,19,1.617
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.142,git/diff,19,1.617
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.617
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.121,git/diff,19,1.617
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.617
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.049,git/diff,19,1.617
git/diff getBinaryPaths in repo with text only files returns an empty array,0.066,git/diff,19,1.617
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.089,git/diff,19,1.617
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.085,git/diff,19,1.617
BranchPruner does nothing on non GitHub repositories,0.325,BranchPruner,6,1.736
BranchPruner prunes for GitHub repository,0.267,BranchPruner,6,1.736
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.204,BranchPruner,6,1.736
BranchPruner does not prune if there is no default branch,0.233,BranchPruner,6,1.736
BranchPruner does not prune reserved branches,0.267,BranchPruner,6,1.736
git/reflog getRecentBranches returns the recently checked out branches,0.139,git/reflog,6,1.033
git/reflog getRecentBranches works after renaming a branch,0.187,git/reflog,6,1.033
git/reflog getRecentBranches returns a limited number of branches,0.267,git/reflog,6,1.033
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.148,git/reflog,6,1.033
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.183,git/reflog,6,1.033
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.06,git/reflog,6,1.033
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.461,formatPatch,5,1.205
git/checkout can checkout a valid branch name in an existing repository,0.166,git/checkout,6,1.184
git/checkout can checkout a branch when it exists on multiple remotes,0.157,git/checkout,6,1.184
git/checkout will fail when an existing branch matches the remote branch,0.142,git/checkout,6,1.184
git/checkout with submodules cleans up an submodule that no longer exists,0.292,git/checkout,6,1.184
git/checkout with submodules updates a changed submodule reference,0.292,git/checkout,6,1.184
git/branch tip returns unborn for new repository,0.057,git/branch,10,0.675
git/branch tip returns correct ref if checkout occurs,0.057,git/branch,10,0.675
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.675
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.675
git/branch tip returns non-origin remote,0.073,git/branch,10,0.675
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.066,git/branch,10,0.675
git/branch getBranchesPointedAt in a local repo finds one branch name,0.066,git/branch,10,0.675
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.675
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.035,git/branch,10,0.675
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.07,git/branch,10,0.675
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.094,gitignore,9,0.655
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.1,gitignore,9,0.655
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.655
gitignore appendIgnoreRule appends one rule,0.111,gitignore,9,0.655
gitignore appendIgnoreRule appends multiple rules,0.115,gitignore,9,0.655
git/rev-parse isGitRepository should return true for a repository,0.048,git/rev-parse,10,0.663
git/rev-parse isGitRepository should return false for a directory,0.053,git/rev-parse,10,0.663
git/rev-parse isBareRepository returns false for default initialized repository,0.055,git/rev-parse,10,0.663
git/rev-parse isBareRepository returns true for initialized bare repository,0.061,git/rev-parse,10,0.663
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.663
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.663
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.057,git/rev-parse,10,0.663
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.052,git/rev-parse,10,0.663
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.663
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.177,git/rev-parse,10,0.663
git/submodule listSubmodules returns the submodule entry,0.121,git/submodule,3,0.673
git/submodule listSubmodules returns the expected tag,0.17,git/submodule,3,0.673
git/submodule resetSubmodulePaths update submodule to original commit,0.33,git/submodule,3,0.673
git/merge merge and is successful returns true,0.236,git/merge,7,0.919
git/merge merge and is a noop returns false,0.072,git/merge,7,0.919
git/merge getMergeBase returns the common ancestor of two branches,0.073,git/merge,7,0.919
git/log getCommits loads history,0.07,git/log,7,0.751
git/log getCommits handles repository with HEAD file on disk,0.097,git/log,7,0.751
git/log getCommits handles repository with signed commit and log.showSignature set,0.143,git/log,7,0.751
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.751
git/log getChangedFiles detects renames,0.121,git/log,7,0.751
git/log getChangedFiles detect copies,0.137,git/log,7,0.751
git/log getChangedFiles handles commit when HEAD exists on disk,0.047,git/log,7,0.751
git/reset reset can hard reset a repository,0.065,git/reset,2,0.11
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.472
git-lfs isUsingLFS returns true if LFS is tracking a path,0.077,git-lfs,9,0.472
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.437
git/remote findDefaultRemote returns origin when multiple remotes found,0.057,git/remote,9,0.437
git/remote findDefaultRemote returns something when origin removed,0.063,git/remote,9,0.437
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.043,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.046,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.039,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.312
git/config config looks up config values,0.039,git/config,4,0.281
git/config config returns null for undefined values,0.047,git/config,4,0.281
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.281
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,4,0.281
git/core error handling does not throw for errors that were expected,0.047,git/core,4,0.226
git/core error handling throws for errors that were not expected,0.041,git/core,4,0.226
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.226
git/core exit code handling throws for exit codes that were not expected,0.046,git/core,4,0.226
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.222
git/for-each-ref getBranches should return empty list for empty repo,0.07,git/for-each-ref,3,0.222
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.052,git/for-each-ref,3,0.222
AppStore can select a repository,0.133,AppStore,5,0.189
validatedRepositoryPath returns the path to the repository,0.388,validatedRepositoryPath,2,0.443
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.051
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.416,git/rebase,21,13.075
git/rebase detect conflicts status detects REBASE_HEAD,0.312,git/rebase,21,13.075
git/rebase detect conflicts has conflicted files in working directory,0.329,git/rebase,21,13.075
git/rebase detect conflicts is a detached HEAD state,0.512,git/rebase,21,13.075
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.456,git/rebase,21,13.075
git/rebase abort after conflicts found no longer has working directory changes,0.508,git/rebase,21,13.075
git/rebase abort after conflicts found returns to the feature branch,0.51,git/rebase,21,13.075
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.597,git/rebase,21,13.075
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.661,git/rebase,21,13.075
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.657,git/rebase,21,13.075
git/rebase continue after resolving conflicts returns success,0.727,git/rebase,21,13.075
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.772,git/rebase,21,13.075
git/rebase continue after resolving conflicts no longer has working directory changes,0.673,git/rebase,21,13.075
git/rebase continue after resolving conflicts returns to the feature branch,0.723,git/rebase,21,13.075
git/rebase continue after resolving conflicts branch is now a different ref,0.676,git/rebase,21,13.075
git/rebase continue with additional changes unrelated to conflicted files returns success,0.826,git/rebase,21,13.075
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.673,git/rebase,21,13.075
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.661,git/rebase,21,13.075
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.599,git/rebase,21,13.075
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.659,git/rebase,21,13.075
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.659,git/rebase,21,13.075
git/rebase can parse progress returns a value indicating conflicts were encountered,0.622,git/rebase,7,4.771
git/rebase can parse progress status detects REBASE_HEAD,0.591,git/rebase,7,4.771
git/rebase can parse progress is a detached HEAD state,0.461,git/rebase,7,4.771
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.932,git/rebase,7,4.771
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.946,git/rebase,7,4.771
git/rebase can parse progress for long rebase is a detached HEAD state,1.112,git/rebase,7,4.771
git/commit createCommit normal commits the given files,0.158,git/commit,21,6.417
git/commit createCommit normal commit does not strip commentary by default,0.138,git/commit,21,6.417
git/commit createCommit normal can commit for empty repository,0.185,git/commit,21,6.417
git/commit createCommit normal can commit renames,0.227,git/commit,21,6.417
git/commit createCommit partials can commit some lines from new file,0.287,git/commit,21,6.417
git/commit createCommit partials can commit second hunk from modified file,0.317,git/commit,21,6.417
git/commit createCommit partials can commit single delete from modified file,0.229,git/commit,21,6.417
git/commit createCommit partials can commit multiple hunks from modified file,0.292,git/commit,21,6.417
git/commit createCommit partials can commit some lines from deleted file,0.229,git/commit,21,6.417
git/commit createCommit partials can commit renames with modifications,0.245,git/commit,21,6.417
git/commit createCommit partials can commit renames with partially selected modifications,0.298,git/commit,21,6.417
git/commit createCommit with a merge conflict creates a merge commit,0.357,git/commit,21,6.417
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.338,git/commit,21,6.417
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.498,git/commit,21,6.417
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.478,git/commit,21,6.417
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.639,git/commit,21,6.417
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.562,git/commit,21,6.417
git/commit createMergeCommit with no changes throws an error,0.116,git/commit,21,6.417
git/commit index corner cases can commit when staged new file is then deleted,0.205,git/commit,21,6.417
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.258,git/commit,21,6.417
git/commit index corner cases file is deleted in index,0.273,git/commit,21,6.417
GitStore loadCommitBatch includes HEAD when loading commits,0.383,GitStore,11,3.478
GitStore can discard changes from a repository,0.231,GitStore,11,3.478
GitStore can discard a renamed file,0.2,GitStore,11,3.478
GitStore undo first commit reports the repository is unborn,0.233,GitStore,11,3.478
GitStore undo first commit pre-fills the commit message,0.169,GitStore,11,3.478
GitStore undo first commit clears the undo commit dialog,0.285,GitStore,11,3.478
GitStore undo first commit has no staged files,0.369,GitStore,11,3.478
GitStore repository with HEAD file can discard modified change cleanly,0.177,GitStore,11,3.478
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.267,git/stash,14,3.366
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.323,git/stash,14,3.366
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.241,git/stash,14,3.366
git/status getStatus with conflicted repo parses conflicted files with markers,0.326,git/status,12,2.387
git/status getStatus with conflicted repo parses conflicted files without markers,0.325,git/status,12,2.387
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.588,git/status,12,2.387
git/status getStatus with conflicted repo parses resolved files,0.363,git/status,12,2.387
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.144,git/status,12,2.387
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.144,git/status,12,2.387
git/status getStatus with unconflicted repo parses changed files,0.057,git/status,12,2.387
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.082,git/status,12,2.387
git/status getStatus with unconflicted repo reflects renames,0.107,git/status,12,2.387
git/status getStatus with unconflicted repo reflects copies,0.105,git/status,12,2.387
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.061,git/status,12,2.387
BranchPruner does nothing on non GitHub repositories,0.38,BranchPruner,6,2.32
BranchPruner prunes for GitHub repository,0.339,BranchPruner,6,2.32
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.274,BranchPruner,6,2.32
BranchPruner does not prune if there is no default branch,0.339,BranchPruner,6,2.32
BranchPruner does not prune reserved branches,0.42,BranchPruner,6,2.32
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.054,git/diff,19,2.218
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.054,git/diff,19,2.218
git/diff getBlobImage retrieves valid image for modified file,0.047,git/diff,19,2.218
git/diff getBlobImage retrieves valid images for deleted file,0.074,git/diff,19,2.218
git/diff imageDiff changes for images are set,0.1,git/diff,19,2.218
git/diff imageDiff changes for text are not set,0.093,git/diff,19,2.218
git/diff getWorkingDirectoryDiff counts lines for new file,0.102,git/diff,19,2.218
git/diff getWorkingDirectoryDiff counts lines for modified file,0.082,git/diff,19,2.218
git/diff getWorkingDirectoryDiff counts lines for staged file,0.105,git/diff,19,2.218
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.178,git/diff,19,2.218
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.213,git/diff,19,2.218
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.217,git/diff,19,2.218
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.182,git/diff,19,2.218
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.155,git/diff,19,2.218
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.105,git/diff,19,2.218
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.074,git/diff,19,2.218
git/diff getBinaryPaths in repo with text only files returns an empty array,0.099,git/diff,19,2.218
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.098,git/diff,19,2.218
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.12,git/diff,19,2.218
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.369,formatPatch,5,1.265
git/checkout can checkout a valid branch name in an existing repository,0.154,git/checkout,6,1.234
git/checkout can checkout a branch when it exists on multiple remotes,0.156,git/checkout,6,1.234
git/checkout will fail when an existing branch matches the remote branch,0.141,git/checkout,6,1.234
git/checkout with submodules cleans up an submodule that no longer exists,0.31,git/checkout,6,1.234
git/checkout with submodules updates a changed submodule reference,0.364,git/checkout,6,1.234
git/reflog getRecentBranches returns the recently checked out branches,0.208,git/reflog,6,1.235
git/reflog getRecentBranches works after renaming a branch,0.219,git/reflog,6,1.235
git/reflog getRecentBranches returns a limited number of branches,0.278,git/reflog,6,1.235
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.171,git/reflog,6,1.235
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.225,git/reflog,6,1.235
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.057,git/reflog,6,1.235
git/merge merge and is successful returns true,0.053,git/merge,7,0.687
git/merge merge and is a noop returns false,0.074,git/merge,7,0.687
git/merge getMergeBase returns the common ancestor of two branches,0.088,git/merge,7,0.687
git/log getCommits loads history,0.095,git/log,7,0.797
git/log getCommits handles repository with HEAD file on disk,0.137,git/log,7,0.797
git/log getCommits handles repository with signed commit and log.showSignature set,0.158,git/log,7,0.797
git/log getChangedFiles loads the files changed in the commit,0.069,git/log,7,0.797
git/log getChangedFiles detects renames,0.155,git/log,7,0.797
git/log getChangedFiles detect copies,0.085,git/log,7,0.797
git/log getChangedFiles handles commit when HEAD exists on disk,0.04,git/log,7,0.797
git/branch tip returns unborn for new repository,0.036,git/branch,10,0.755
git/branch tip returns correct ref if checkout occurs,0.081,git/branch,10,0.755
git/branch tip returns detached for arbitrary checkout,0.05,git/branch,10,0.755
git/branch tip returns current branch when on a valid HEAD,0.116,git/branch,10,0.755
git/branch tip returns non-origin remote,0.092,git/branch,10,0.755
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.098,git/branch,10,0.755
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.755
git/branch getBranchesPointedAt in a local repo finds no branch names,0.045,git/branch,10,0.755
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.05,git/branch,10,0.755
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,10,0.755
git/submodule listSubmodules returns the submodule entry,0.102,git/submodule,3,0.721
git/submodule listSubmodules returns the expected tag,0.191,git/submodule,3,0.721
git/submodule resetSubmodulePaths update submodule to original commit,0.381,git/submodule,3,0.721
git/rev-parse isGitRepository should return true for a repository,0.057,git/rev-parse,10,1.016
git/rev-parse isGitRepository should return false for a directory,0.067,git/rev-parse,10,1.016
git/rev-parse isBareRepository returns false for default initialized repository,0.097,git/rev-parse,10,1.016
git/rev-parse isBareRepository returns true for initialized bare repository,0.098,git/rev-parse,10,1.016
git/rev-parse isBareRepository returns false for empty directory,0.077,git/rev-parse,10,1.016
git/rev-parse isBareRepository throws error for missing directory,0.07,git/rev-parse,10,1.016
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.096,git/rev-parse,10,1.016
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.08,git/rev-parse,10,1.016
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.076,git/rev-parse,10,1.016
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.248,git/rev-parse,10,1.016
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.153,gitignore,9,0.957
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.14,gitignore,9,0.957
gitignore saveGitIgnore applies rule correctly to repository,0.155,gitignore,9,0.957
gitignore appendIgnoreRule appends one rule,0.161,gitignore,9,0.957
gitignore appendIgnoreRule appends multiple rules,0.154,gitignore,9,0.957
git-lfs isUsingLFS returns false for repository not using LFS,0.092,git-lfs,9,0.79
git-lfs isUsingLFS returns true if LFS is tracking a path,0.111,git-lfs,9,0.79
validatedRepositoryPath returns the path to the repository,0.2,validatedRepositoryPath,2,0.279
git/remote getRemotes should return both remotes,0.068,git/remote,9,0.558
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,9,0.558
git/remote findDefaultRemote returns something when origin removed,0.089,git/remote,9,0.558
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.067,patch formatting,8,0.466
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.067,patch formatting,8,0.466
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.065,patch formatting,8,0.466
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.06,patch formatting,8,0.466
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.466
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.028,patch formatting,8,0.466
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.466
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.025,patch formatting,8,0.466
git/config config looks up config values,0.049,git/config,4,0.388
git/config config returns null for undefined values,0.069,git/config,4,0.388
git/config global config getGlobalConfigPath gets the config path,0.09,git/config,4,0.388
git/config global config setGlobalConfigValue will replace all entries for a global value,0.127,git/config,4,0.388
git/core error handling does not throw for errors that were expected,0.055,git/core,4,0.265
git/core error handling throws for errors that were not expected,0.051,git/core,4,0.265
git/core exit code handling does not throw for exit codes that were expected,0.051,git/core,4,0.265
git/core exit code handling throws for exit codes that were not expected,0.056,git/core,4,0.265
git/for-each-ref getBranches fetches branches using for-each-ref,0.092,git/for-each-ref,3,0.265
git/for-each-ref getBranches should return empty list for empty repo,0.078,git/for-each-ref,3,0.265
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.055,git/for-each-ref,3,0.265
AppStore can select a repository,0.13,AppStore,5,0.203
git/reset reset can hard reset a repository,0.452,git/reset,2,0.509
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.055
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.614,git/rebase,21,13.567
git/rebase detect conflicts status detects REBASE_HEAD,0.442,git/rebase,21,13.567
git/rebase detect conflicts has conflicted files in working directory,0.442,git/rebase,21,13.567
git/rebase detect conflicts is a detached HEAD state,0.498,git/rebase,21,13.567
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.509,git/rebase,21,13.567
git/rebase abort after conflicts found no longer has working directory changes,0.515,git/rebase,21,13.567
git/rebase abort after conflicts found returns to the feature branch,0.522,git/rebase,21,13.567
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.591,git/rebase,21,13.567
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.585,git/rebase,21,13.567
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.604,git/rebase,21,13.567
git/rebase continue after resolving conflicts returns success,0.668,git/rebase,21,13.567
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.666,git/rebase,21,13.567
git/rebase continue after resolving conflicts no longer has working directory changes,0.674,git/rebase,21,13.567
git/rebase continue after resolving conflicts returns to the feature branch,0.664,git/rebase,21,13.567
git/rebase continue after resolving conflicts branch is now a different ref,0.711,git/rebase,21,13.567
git/rebase continue with additional changes unrelated to conflicted files returns success,0.707,git/rebase,21,13.567
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.663,git/rebase,21,13.567
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.682,git/rebase,21,13.567
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.682,git/rebase,21,13.567
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.749,git/rebase,21,13.567
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.688,git/rebase,21,13.567
git/commit createCommit normal commits the given files,0.168,git/commit,21,6.277
git/commit createCommit normal commit does not strip commentary by default,0.151,git/commit,21,6.277
git/commit createCommit normal can commit for empty repository,0.187,git/commit,21,6.277
git/commit createCommit normal can commit renames,0.224,git/commit,21,6.277
git/commit createCommit partials can commit some lines from new file,0.239,git/commit,21,6.277
git/commit createCommit partials can commit second hunk from modified file,0.253,git/commit,21,6.277
git/commit createCommit partials can commit single delete from modified file,0.236,git/commit,21,6.277
git/commit createCommit partials can commit multiple hunks from modified file,0.256,git/commit,21,6.277
git/commit createCommit partials can commit some lines from deleted file,0.243,git/commit,21,6.277
git/commit createCommit partials can commit renames with modifications,0.271,git/commit,21,6.277
git/commit createCommit partials can commit renames with partially selected modifications,0.371,git/commit,21,6.277
git/commit createCommit with a merge conflict creates a merge commit,0.364,git/commit,21,6.277
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.336,git/commit,21,6.277
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.474,git/commit,21,6.277
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.532,git/commit,21,6.277
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.602,git/commit,21,6.277
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.548,git/commit,21,6.277
git/commit createMergeCommit with no changes throws an error,0.106,git/commit,21,6.277
git/commit index corner cases can commit when staged new file is then deleted,0.184,git/commit,21,6.277
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.232,git/commit,21,6.277
git/commit index corner cases file is deleted in index,0.216,git/commit,21,6.277
git/rebase can parse progress returns a value indicating conflicts were encountered,0.559,git/rebase,7,5.144
git/rebase can parse progress status detects REBASE_HEAD,0.583,git/rebase,7,5.144
git/rebase can parse progress is a detached HEAD state,0.588,git/rebase,7,5.144
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.113,git/rebase,7,5.144
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.123,git/rebase,7,5.144
git/rebase can parse progress for long rebase is a detached HEAD state,1.114,git/rebase,7,5.144
GitStore loadCommitBatch includes HEAD when loading commits,0.308,GitStore,11,2.916
GitStore can discard changes from a repository,0.206,GitStore,11,2.916
GitStore can discard a renamed file,0.179,GitStore,11,2.916
GitStore undo first commit reports the repository is unborn,0.226,GitStore,11,2.916
GitStore undo first commit pre-fills the commit message,0.143,GitStore,11,2.916
GitStore undo first commit clears the undo commit dialog,0.262,GitStore,11,2.916
GitStore undo first commit has no staged files,0.247,GitStore,11,2.916
GitStore repository with HEAD file can discard modified change cleanly,0.13,GitStore,11,2.916
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.19,git/stash,14,2.995
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.25,git/stash,14,2.995
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.237,git/stash,14,2.995
git/status getStatus with conflicted repo parses conflicted files with markers,0.318,git/status,12,2.351
git/status getStatus with conflicted repo parses conflicted files without markers,0.324,git/status,12,2.351
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.561,git/status,12,2.351
git/status getStatus with conflicted repo parses resolved files,0.34,git/status,12,2.351
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.144,git/status,12,2.351
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.16,git/status,12,2.351
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.351
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.061,git/status,12,2.351
git/status getStatus with unconflicted repo reflects renames,0.12,git/status,12,2.351
git/status getStatus with unconflicted repo reflects copies,0.121,git/status,12,2.351
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.066,git/status,12,2.351
BranchPruner does nothing on non GitHub repositories,0.257,BranchPruner,6,1.99
BranchPruner prunes for GitHub repository,0.347,BranchPruner,6,1.99
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.259,BranchPruner,6,1.99
BranchPruner does not prune if there is no default branch,0.255,BranchPruner,6,1.99
BranchPruner does not prune reserved branches,0.336,BranchPruner,6,1.99
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.042,git/diff,19,2.177
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.055,git/diff,19,2.177
git/diff getBlobImage retrieves valid image for modified file,0.13,git/diff,19,2.177
git/diff getBlobImage retrieves valid images for deleted file,0.101,git/diff,19,2.177
git/diff imageDiff changes for images are set,0.106,git/diff,19,2.177
git/diff imageDiff changes for text are not set,0.101,git/diff,19,2.177
git/diff getWorkingDirectoryDiff counts lines for new file,0.088,git/diff,19,2.177
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,2.177
git/diff getWorkingDirectoryDiff counts lines for staged file,0.091,git/diff,19,2.177
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.128,git/diff,19,2.177
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.18,git/diff,19,2.177
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.181,git/diff,19,2.177
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.156,git/diff,19,2.177
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.154,git/diff,19,2.177
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.103,git/diff,19,2.177
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.072,git/diff,19,2.177
git/diff getBinaryPaths in repo with text only files returns an empty array,0.094,git/diff,19,2.177
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.106,git/diff,19,2.177
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.13,git/diff,19,2.177
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.379,formatPatch,5,1.209
git/reflog getRecentBranches returns the recently checked out branches,0.178,git/reflog,6,1.277
git/reflog getRecentBranches works after renaming a branch,0.232,git/reflog,6,1.277
git/reflog getRecentBranches returns a limited number of branches,0.307,git/reflog,6,1.277
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.191,git/reflog,6,1.277
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.235,git/reflog,6,1.277
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.076,git/reflog,6,1.277
git/checkout can checkout a valid branch name in an existing repository,0.147,git/checkout,6,1.142
git/checkout can checkout a branch when it exists on multiple remotes,0.155,git/checkout,6,1.142
git/checkout will fail when an existing branch matches the remote branch,0.144,git/checkout,6,1.142
git/checkout with submodules cleans up an submodule that no longer exists,0.328,git/checkout,6,1.142
git/checkout with submodules updates a changed submodule reference,0.271,git/checkout,6,1.142
git/rev-parse isGitRepository should return true for a repository,0.058,git/rev-parse,10,0.84
git/rev-parse isGitRepository should return false for a directory,0.068,git/rev-parse,10,0.84
git/rev-parse isBareRepository returns false for default initialized repository,0.071,git/rev-parse,10,0.84
git/rev-parse isBareRepository returns true for initialized bare repository,0.072,git/rev-parse,10,0.84
git/rev-parse isBareRepository returns false for empty directory,0.056,git/rev-parse,10,0.84
git/rev-parse isBareRepository throws error for missing directory,0.056,git/rev-parse,10,0.84
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.071,git/rev-parse,10,0.84
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.062,git/rev-parse,10,0.84
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.063,git/rev-parse,10,0.84
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.225,git/rev-parse,10,0.84
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.127,gitignore,9,0.818
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.124,gitignore,9,0.818
gitignore saveGitIgnore applies rule correctly to repository,0.12,gitignore,9,0.818
gitignore appendIgnoreRule appends one rule,0.137,gitignore,9,0.818
gitignore appendIgnoreRule appends multiple rules,0.14,gitignore,9,0.818
git/log getCommits loads history,0.076,git/log,7,0.675
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.675
git/log getCommits handles repository with signed commit and log.showSignature set,0.119,git/log,7,0.675
git/log getChangedFiles loads the files changed in the commit,0.06,git/log,7,0.675
git/log getChangedFiles detects renames,0.107,git/log,7,0.675
git/log getChangedFiles detect copies,0.099,git/log,7,0.675
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.675
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.627
git-lfs isUsingLFS returns true if LFS is tracking a path,0.087,git-lfs,9,0.627
git/branch tip returns unborn for new repository,0.047,git/branch,10,0.833
git/branch tip returns correct ref if checkout occurs,0.06,git/branch,10,0.833
git/branch tip returns detached for arbitrary checkout,0.066,git/branch,10,0.833
git/branch tip returns current branch when on a valid HEAD,0.103,git/branch,10,0.833
git/branch tip returns non-origin remote,0.105,git/branch,10,0.833
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.105,git/branch,10,0.833
git/branch getBranchesPointedAt in a local repo finds one branch name,0.059,git/branch,10,0.833
git/branch getBranchesPointedAt in a local repo finds no branch names,0.056,git/branch,10,0.833
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.059,git/branch,10,0.833
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.11,git/branch,10,0.833
git/submodule listSubmodules returns the submodule entry,0.135,git/submodule,3,0.778
git/submodule listSubmodules returns the expected tag,0.21,git/submodule,3,0.778
git/submodule resetSubmodulePaths update submodule to original commit,0.372,git/submodule,3,0.778
git/merge merge and is successful returns true,0.053,git/merge,7,0.745
git/merge merge and is a noop returns false,0.074,git/merge,7,0.745
git/merge getMergeBase returns the common ancestor of two branches,0.088,git/merge,7,0.745
git/remote getRemotes should return both remotes,0.063,git/remote,9,0.541
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,9,0.541
git/remote findDefaultRemote returns something when origin removed,0.079,git/remote,9,0.541
git/reset reset can hard reset a repository,0.083,git/reset,2,0.142
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.055,patch formatting,8,0.407
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.054,patch formatting,8,0.407
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.053,patch formatting,8,0.407
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.057,patch formatting,8,0.407
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.407
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.032,patch formatting,8,0.407
patch formatting formatPatchesForModifiedFile includes empty context lines,0.028,patch formatting,8,0.407
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.028,patch formatting,8,0.407
git/config config looks up config values,0.188,git/config,4,0.53
git/config config returns null for undefined values,0.077,git/config,4,0.53
git/config global config getGlobalConfigPath gets the config path,0.09,git/config,4,0.53
git/config global config setGlobalConfigValue will replace all entries for a global value,0.123,git/config,4,0.53
validatedRepositoryPath returns the path to the repository,0.054,validatedRepositoryPath,2,0.14
git/for-each-ref getBranches fetches branches using for-each-ref,0.088,git/for-each-ref,3,0.28
git/for-each-ref getBranches should return empty list for empty repo,0.08,git/for-each-ref,3,0.28
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.064,git/for-each-ref,3,0.28
git/core error handling does not throw for errors that were expected,0.059,git/core,4,0.309
git/core error handling throws for errors that were not expected,0.062,git/core,4,0.309
git/core exit code handling does not throw for exit codes that were expected,0.065,git/core,4,0.309
git/core exit code handling throws for exit codes that were not expected,0.062,git/core,4,0.309
AppStore can select a repository,0.166,AppStore,5,0.239
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.25,git/git-attributes,1,0.29
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.587,git/rebase,21,13.563
git/rebase detect conflicts status detects REBASE_HEAD,0.463,git/rebase,21,13.563
git/rebase detect conflicts has conflicted files in working directory,0.471,git/rebase,21,13.563
git/rebase detect conflicts is a detached HEAD state,0.545,git/rebase,21,13.563
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.521,git/rebase,21,13.563
git/rebase abort after conflicts found no longer has working directory changes,0.548,git/rebase,21,13.563
git/rebase abort after conflicts found returns to the feature branch,0.52,git/rebase,21,13.563
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.611,git/rebase,21,13.563
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.615,git/rebase,21,13.563
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.591,git/rebase,21,13.563
git/rebase continue after resolving conflicts returns success,0.672,git/rebase,21,13.563
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.679,git/rebase,21,13.563
git/rebase continue after resolving conflicts no longer has working directory changes,0.685,git/rebase,21,13.563
git/rebase continue after resolving conflicts returns to the feature branch,0.667,git/rebase,21,13.563
git/rebase continue after resolving conflicts branch is now a different ref,0.698,git/rebase,21,13.563
git/rebase continue with additional changes unrelated to conflicted files returns success,0.673,git/rebase,21,13.563
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.688,git/rebase,21,13.563
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.684,git/rebase,21,13.563
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.699,git/rebase,21,13.563
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.682,git/rebase,21,13.563
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.639,git/rebase,21,13.563
git/commit createCommit normal commits the given files,0.157,git/commit,21,5.827
git/commit createCommit normal commit does not strip commentary by default,0.139,git/commit,21,5.827
git/commit createCommit normal can commit for empty repository,0.179,git/commit,21,5.827
git/commit createCommit normal can commit renames,0.204,git/commit,21,5.827
git/commit createCommit partials can commit some lines from new file,0.218,git/commit,21,5.827
git/commit createCommit partials can commit second hunk from modified file,0.242,git/commit,21,5.827
git/commit createCommit partials can commit single delete from modified file,0.21,git/commit,21,5.827
git/commit createCommit partials can commit multiple hunks from modified file,0.242,git/commit,21,5.827
git/commit createCommit partials can commit some lines from deleted file,0.237,git/commit,21,5.827
git/commit createCommit partials can commit renames with modifications,0.239,git/commit,21,5.827
git/commit createCommit partials can commit renames with partially selected modifications,0.297,git/commit,21,5.827
git/commit createCommit with a merge conflict creates a merge commit,0.339,git/commit,21,5.827
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.316,git/commit,21,5.827
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.455,git/commit,21,5.827
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.436,git/commit,21,5.827
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.526,git/commit,21,5.827
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.541,git/commit,21,5.827
git/commit createMergeCommit with no changes throws an error,0.113,git/commit,21,5.827
git/commit index corner cases can commit when staged new file is then deleted,0.198,git/commit,21,5.827
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.229,git/commit,21,5.827
git/commit index corner cases file is deleted in index,0.226,git/commit,21,5.827
git/rebase can parse progress returns a value indicating conflicts were encountered,0.582,git/rebase,7,5.305
git/rebase can parse progress status detects REBASE_HEAD,0.598,git/rebase,7,5.305
git/rebase can parse progress is a detached HEAD state,0.596,git/rebase,7,5.305
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.133,git/rebase,7,5.305
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.159,git/rebase,7,5.305
git/rebase can parse progress for long rebase is a detached HEAD state,1.167,git/rebase,7,5.305
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.206,git/stash,14,3.32
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.325,git/stash,14,3.32
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.272,git/stash,14,3.32
GitStore loadCommitBatch includes HEAD when loading commits,0.446,GitStore,11,3.191
GitStore can discard changes from a repository,0.227,GitStore,11,3.191
GitStore can discard a renamed file,0.191,GitStore,11,3.191
GitStore undo first commit reports the repository is unborn,0.244,GitStore,11,3.191
GitStore undo first commit pre-fills the commit message,0.164,GitStore,11,3.191
GitStore undo first commit clears the undo commit dialog,0.274,GitStore,11,3.191
GitStore undo first commit has no staged files,0.272,GitStore,11,3.191
GitStore repository with HEAD file can discard modified change cleanly,0.145,GitStore,11,3.191
git/status getStatus with conflicted repo parses conflicted files with markers,0.372,git/status,12,2.597
git/status getStatus with conflicted repo parses conflicted files without markers,0.384,git/status,12,2.597
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.686,git/status,12,2.597
git/status getStatus with conflicted repo parses resolved files,0.351,git/status,12,2.597
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.131,git/status,12,2.597
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.159,git/status,12,2.597
git/status getStatus with unconflicted repo parses changed files,0.07,git/status,12,2.597
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.062,git/status,12,2.597
git/status getStatus with unconflicted repo reflects renames,0.121,git/status,12,2.597
git/status getStatus with unconflicted repo reflects copies,0.127,git/status,12,2.597
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.063,git/status,12,2.597
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,2.129
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.053,git/diff,19,2.129
git/diff getBlobImage retrieves valid image for modified file,0.053,git/diff,19,2.129
git/diff getBlobImage retrieves valid images for deleted file,0.078,git/diff,19,2.129
git/diff imageDiff changes for images are set,0.1,git/diff,19,2.129
git/diff imageDiff changes for text are not set,0.085,git/diff,19,2.129
git/diff getWorkingDirectoryDiff counts lines for new file,0.094,git/diff,19,2.129
git/diff getWorkingDirectoryDiff counts lines for modified file,0.172,git/diff,19,2.129
git/diff getWorkingDirectoryDiff counts lines for staged file,0.106,git/diff,19,2.129
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.137,git/diff,19,2.129
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.171,git/diff,19,2.129
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.188,git/diff,19,2.129
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.142,git/diff,19,2.129
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.144,git/diff,19,2.129
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.101,git/diff,19,2.129
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.069,git/diff,19,2.129
git/diff getBinaryPaths in repo with text only files returns an empty array,0.093,git/diff,19,2.129
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.113,git/diff,19,2.129
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.122,git/diff,19,2.129
BranchPruner does nothing on non GitHub repositories,0.272,BranchPruner,6,2.041
BranchPruner prunes for GitHub repository,0.346,BranchPruner,6,2.041
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.272,BranchPruner,6,2.041
BranchPruner does not prune if there is no default branch,0.268,BranchPruner,6,2.041
BranchPruner does not prune reserved branches,0.345,BranchPruner,6,2.041
git/reflog getRecentBranches returns the recently checked out branches,0.176,git/reflog,6,1.233
git/reflog getRecentBranches works after renaming a branch,0.222,git/reflog,6,1.233
git/reflog getRecentBranches returns a limited number of branches,0.3,git/reflog,6,1.233
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.182,git/reflog,6,1.233
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.221,git/reflog,6,1.233
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.233
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.355,formatPatch,5,1.153
git/checkout can checkout a valid branch name in an existing repository,0.147,git/checkout,6,1.12
git/checkout can checkout a branch when it exists on multiple remotes,0.15,git/checkout,6,1.12
git/checkout will fail when an existing branch matches the remote branch,0.136,git/checkout,6,1.12
git/checkout with submodules cleans up an submodule that no longer exists,0.32,git/checkout,6,1.12
git/checkout with submodules updates a changed submodule reference,0.269,git/checkout,6,1.12
git/rev-parse isGitRepository should return true for a repository,0.056,git/rev-parse,10,0.798
git/rev-parse isGitRepository should return false for a directory,0.055,git/rev-parse,10,0.798
git/rev-parse isBareRepository returns false for default initialized repository,0.074,git/rev-parse,10,0.798
git/rev-parse isBareRepository returns true for initialized bare repository,0.067,git/rev-parse,10,0.798
git/rev-parse isBareRepository returns false for empty directory,0.053,git/rev-parse,10,0.798
git/rev-parse isBareRepository throws error for missing directory,0.055,git/rev-parse,10,0.798
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.07,git/rev-parse,10,0.798
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.054,git/rev-parse,10,0.798
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.064,git/rev-parse,10,0.798
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.206,git/rev-parse,10,0.798
git/branch tip returns unborn for new repository,0.042,git/branch,10,0.793
git/branch tip returns correct ref if checkout occurs,0.058,git/branch,10,0.793
git/branch tip returns detached for arbitrary checkout,0.062,git/branch,10,0.793
git/branch tip returns current branch when on a valid HEAD,0.089,git/branch,10,0.793
git/branch tip returns non-origin remote,0.102,git/branch,10,0.793
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.101,git/branch,10,0.793
git/branch getBranchesPointedAt in a local repo finds one branch name,0.056,git/branch,10,0.793
git/branch getBranchesPointedAt in a local repo finds no branch names,0.057,git/branch,10,0.793
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.053,git/branch,10,0.793
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.104,git/branch,10,0.793
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.124,gitignore,9,0.816
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.128,gitignore,9,0.816
gitignore saveGitIgnore applies rule correctly to repository,0.12,gitignore,9,0.816
gitignore appendIgnoreRule appends one rule,0.134,gitignore,9,0.816
gitignore appendIgnoreRule appends multiple rules,0.139,gitignore,9,0.816
git/submodule listSubmodules returns the submodule entry,0.14,git/submodule,3,0.797
git/submodule listSubmodules returns the expected tag,0.203,git/submodule,3,0.797
git/submodule resetSubmodulePaths update submodule to original commit,0.392,git/submodule,3,0.797
git/merge merge and is successful returns true,0.049,git/merge,7,0.7
git/merge merge and is a noop returns false,0.063,git/merge,7,0.7
git/merge getMergeBase returns the common ancestor of two branches,0.084,git/merge,7,0.7
git/log getCommits loads history,0.072,git/log,7,0.684
git/log getCommits handles repository with HEAD file on disk,0.105,git/log,7,0.684
git/log getCommits handles repository with signed commit and log.showSignature set,0.123,git/log,7,0.684
git/log getChangedFiles loads the files changed in the commit,0.058,git/log,7,0.684
git/log getChangedFiles detects renames,0.105,git/log,7,0.684
git/log getChangedFiles detect copies,0.108,git/log,7,0.684
git/log getChangedFiles handles commit when HEAD exists on disk,0.056,git/log,7,0.684
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.638
git-lfs isUsingLFS returns true if LFS is tracking a path,0.096,git-lfs,9,0.638
git/remote getRemotes should return both remotes,0.059,git/remote,9,0.52
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,9,0.52
git/remote findDefaultRemote returns something when origin removed,0.077,git/remote,9,0.52
git/config config looks up config values,0.055,git/config,4,0.364
git/config config returns null for undefined values,0.059,git/config,4,0.364
git/config global config getGlobalConfigPath gets the config path,0.075,git/config,4,0.364
git/config global config setGlobalConfigValue will replace all entries for a global value,0.12,git/config,4,0.364
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.056,patch formatting,8,0.413
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.051,patch formatting,8,0.413
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.055,patch formatting,8,0.413
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.055,patch formatting,8,0.413
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.413
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.036,patch formatting,8,0.413
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.413
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.413
git/core error handling does not throw for errors that were expected,0.055,git/core,4,0.296
git/core error handling throws for errors that were not expected,0.062,git/core,4,0.296
git/core exit code handling does not throw for exit codes that were expected,0.06,git/core,4,0.296
git/core exit code handling throws for exit codes that were not expected,0.061,git/core,4,0.296
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.062
git/for-each-ref getBranches fetches branches using for-each-ref,0.086,git/for-each-ref,3,0.295
git/for-each-ref getBranches should return empty list for empty repo,0.098,git/for-each-ref,3,0.295
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.066,git/for-each-ref,3,0.295
AppStore can select a repository,0.176,AppStore,5,0.264
git/reset reset can hard reset a repository,0.498,git/reset,2,0.56
validatedRepositoryPath returns the path to the repository,0.063,validatedRepositoryPath,2,0.14
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.564,git/rebase,21,13.439
git/rebase detect conflicts status detects REBASE_HEAD,0.464,git/rebase,21,13.439
git/rebase detect conflicts has conflicted files in working directory,0.487,git/rebase,21,13.439
git/rebase detect conflicts is a detached HEAD state,0.476,git/rebase,21,13.439
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.517,git/rebase,21,13.439
git/rebase abort after conflicts found no longer has working directory changes,0.511,git/rebase,21,13.439
git/rebase abort after conflicts found returns to the feature branch,0.512,git/rebase,21,13.439
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.579,git/rebase,21,13.439
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.589,git/rebase,21,13.439
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.616,git/rebase,21,13.439
git/rebase continue after resolving conflicts returns success,0.709,git/rebase,21,13.439
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.679,git/rebase,21,13.439
git/rebase continue after resolving conflicts no longer has working directory changes,0.684,git/rebase,21,13.439
git/rebase continue after resolving conflicts returns to the feature branch,0.679,git/rebase,21,13.439
git/rebase continue after resolving conflicts branch is now a different ref,0.687,git/rebase,21,13.439
git/rebase continue with additional changes unrelated to conflicted files returns success,0.677,git/rebase,21,13.439
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.679,git/rebase,21,13.439
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.7,git/rebase,21,13.439
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.689,git/rebase,21,13.439
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.679,git/rebase,21,13.439
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.634,git/rebase,21,13.439
git/commit createCommit normal commits the given files,0.157,git/commit,21,5.824
git/commit createCommit normal commit does not strip commentary by default,0.14,git/commit,21,5.824
git/commit createCommit normal can commit for empty repository,0.187,git/commit,21,5.824
git/commit createCommit normal can commit renames,0.216,git/commit,21,5.824
git/commit createCommit partials can commit some lines from new file,0.221,git/commit,21,5.824
git/commit createCommit partials can commit second hunk from modified file,0.235,git/commit,21,5.824
git/commit createCommit partials can commit single delete from modified file,0.219,git/commit,21,5.824
git/commit createCommit partials can commit multiple hunks from modified file,0.242,git/commit,21,5.824
git/commit createCommit partials can commit some lines from deleted file,0.224,git/commit,21,5.824
git/commit createCommit partials can commit renames with modifications,0.236,git/commit,21,5.824
git/commit createCommit partials can commit renames with partially selected modifications,0.294,git/commit,21,5.824
git/commit createCommit with a merge conflict creates a merge commit,0.335,git/commit,21,5.824
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.326,git/commit,21,5.824
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.451,git/commit,21,5.824
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.436,git/commit,21,5.824
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.524,git/commit,21,5.824
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.522,git/commit,21,5.824
git/commit createMergeCommit with no changes throws an error,0.119,git/commit,21,5.824
git/commit index corner cases can commit when staged new file is then deleted,0.202,git/commit,21,5.824
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.225,git/commit,21,5.824
git/commit index corner cases file is deleted in index,0.234,git/commit,21,5.824
git/rebase can parse progress returns a value indicating conflicts were encountered,0.588,git/rebase,7,5.34
git/rebase can parse progress status detects REBASE_HEAD,0.609,git/rebase,7,5.34
git/rebase can parse progress is a detached HEAD state,0.608,git/rebase,7,5.34
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.135,git/rebase,7,5.34
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.162,git/rebase,7,5.34
git/rebase can parse progress for long rebase is a detached HEAD state,1.164,git/rebase,7,5.34
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.205,git/stash,14,3.244
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.326,git/stash,14,3.244
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.267,git/stash,14,3.244
GitStore loadCommitBatch includes HEAD when loading commits,0.357,GitStore,11,2.865
GitStore can discard changes from a repository,0.203,GitStore,11,2.865
GitStore can discard a renamed file,0.178,GitStore,11,2.865
GitStore undo first commit reports the repository is unborn,0.226,GitStore,11,2.865
GitStore undo first commit pre-fills the commit message,0.147,GitStore,11,2.865
GitStore undo first commit clears the undo commit dialog,0.258,GitStore,11,2.865
GitStore undo first commit has no staged files,0.242,GitStore,11,2.865
GitStore repository with HEAD file can discard modified change cleanly,0.137,GitStore,11,2.865
git/status getStatus with conflicted repo parses conflicted files with markers,0.332,git/status,12,2.439
git/status getStatus with conflicted repo parses conflicted files without markers,0.339,git/status,12,2.439
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.607,git/status,12,2.439
git/status getStatus with conflicted repo parses resolved files,0.368,git/status,12,2.439
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.131,git/status,12,2.439
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.156,git/status,12,2.439
git/status getStatus with unconflicted repo parses changed files,0.077,git/status,12,2.439
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.058,git/status,12,2.439
git/status getStatus with unconflicted repo reflects renames,0.118,git/status,12,2.439
git/status getStatus with unconflicted repo reflects copies,0.122,git/status,12,2.439
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.063,git/status,12,2.439
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.138,git/diff,19,2.125
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.062,git/diff,19,2.125
git/diff getBlobImage retrieves valid image for modified file,0.047,git/diff,19,2.125
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,2.125
git/diff imageDiff changes for images are set,0.094,git/diff,19,2.125
git/diff imageDiff changes for text are not set,0.092,git/diff,19,2.125
git/diff getWorkingDirectoryDiff counts lines for new file,0.106,git/diff,19,2.125
git/diff getWorkingDirectoryDiff counts lines for modified file,0.084,git/diff,19,2.125
git/diff getWorkingDirectoryDiff counts lines for staged file,0.08,git/diff,19,2.125
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.112,git/diff,19,2.125
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.163,git/diff,19,2.125
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.161,git/diff,19,2.125
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.136,git/diff,19,2.125
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.144,git/diff,19,2.125
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.1,git/diff,19,2.125
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.065,git/diff,19,2.125
git/diff getBinaryPaths in repo with text only files returns an empty array,0.086,git/diff,19,2.125
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.169,git/diff,19,2.125
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.15,git/diff,19,2.125
BranchPruner does nothing on non GitHub repositories,0.34,BranchPruner,6,2.016
BranchPruner prunes for GitHub repository,0.318,BranchPruner,6,2.016
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.284,BranchPruner,6,2.016
BranchPruner does not prune if there is no default branch,0.239,BranchPruner,6,2.016
BranchPruner does not prune reserved branches,0.327,BranchPruner,6,2.016
git/reflog getRecentBranches returns the recently checked out branches,0.162,git/reflog,6,1.171
git/reflog getRecentBranches works after renaming a branch,0.212,git/reflog,6,1.171
git/reflog getRecentBranches returns a limited number of branches,0.278,git/reflog,6,1.171
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.187,git/reflog,6,1.171
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.206,git/reflog,6,1.171
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.07,git/reflog,6,1.171
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.315,formatPatch,5,1.067
git/checkout can checkout a valid branch name in an existing repository,0.125,git/checkout,6,1.03
git/checkout can checkout a branch when it exists on multiple remotes,0.139,git/checkout,6,1.03
git/checkout will fail when an existing branch matches the remote branch,0.126,git/checkout,6,1.03
git/checkout with submodules cleans up an submodule that no longer exists,0.312,git/checkout,6,1.03
git/checkout with submodules updates a changed submodule reference,0.237,git/checkout,6,1.03
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.11,gitignore,9,0.722
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.115,gitignore,9,0.722
gitignore saveGitIgnore applies rule correctly to repository,0.108,gitignore,9,0.722
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.722
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.722
git/rev-parse isGitRepository should return true for a repository,0.045,git/rev-parse,10,0.746
git/rev-parse isGitRepository should return false for a directory,0.054,git/rev-parse,10,0.746
git/rev-parse isBareRepository returns false for default initialized repository,0.076,git/rev-parse,10,0.746
git/rev-parse isBareRepository returns true for initialized bare repository,0.06,git/rev-parse,10,0.746
git/rev-parse isBareRepository returns false for empty directory,0.052,git/rev-parse,10,0.746
git/rev-parse isBareRepository throws error for missing directory,0.049,git/rev-parse,10,0.746
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.06,git/rev-parse,10,0.746
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.05,git/rev-parse,10,0.746
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.057,git/rev-parse,10,0.746
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.206,git/rev-parse,10,0.746
git/submodule listSubmodules returns the submodule entry,0.116,git/submodule,3,0.664
git/submodule listSubmodules returns the expected tag,0.168,git/submodule,3,0.664
git/submodule resetSubmodulePaths update submodule to original commit,0.331,git/submodule,3,0.664
git/branch tip returns unborn for new repository,0.038,git/branch,10,0.688
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,10,0.688
git/branch tip returns detached for arbitrary checkout,0.054,git/branch,10,0.688
git/branch tip returns current branch when on a valid HEAD,0.083,git/branch,10,0.688
git/branch tip returns non-origin remote,0.084,git/branch,10,0.688
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.088,git/branch,10,0.688
git/branch getBranchesPointedAt in a local repo finds one branch name,0.05,git/branch,10,0.688
git/branch getBranchesPointedAt in a local repo finds no branch names,0.045,git/branch,10,0.688
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.05,git/branch,10,0.688
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.09,git/branch,10,0.688
git/merge merge and is successful returns true,0.044,git/merge,7,0.609
git/merge merge and is a noop returns false,0.056,git/merge,7,0.609
git/merge getMergeBase returns the common ancestor of two branches,0.067,git/merge,7,0.609
git/log getCommits loads history,0.061,git/log,7,0.583
git/log getCommits handles repository with HEAD file on disk,0.09,git/log,7,0.583
git/log getCommits handles repository with signed commit and log.showSignature set,0.108,git/log,7,0.583
git/log getChangedFiles loads the files changed in the commit,0.056,git/log,7,0.583
git/log getChangedFiles detects renames,0.084,git/log,7,0.583
git/log getChangedFiles detect copies,0.087,git/log,7,0.583
git/log getChangedFiles handles commit when HEAD exists on disk,0.046,git/log,7,0.583
git-lfs isUsingLFS returns false for repository not using LFS,0.159,git-lfs,9,0.66
git-lfs isUsingLFS returns true if LFS is tracking a path,0.088,git-lfs,9,0.66
git/reset reset can hard reset a repository,0.076,git/reset,2,0.127
git/remote getRemotes should return both remotes,0.048,git/remote,9,0.464
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.464
git/remote findDefaultRemote returns something when origin removed,0.071,git/remote,9,0.464
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.078,patch formatting,8,0.419
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.05,patch formatting,8,0.419
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.056,patch formatting,8,0.419
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.419
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.419
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.032,patch formatting,8,0.419
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.419
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.024,patch formatting,8,0.419
git/config config looks up config values,0.058,git/config,4,0.337
git/config config returns null for undefined values,0.053,git/config,4,0.337
git/config global config getGlobalConfigPath gets the config path,0.069,git/config,4,0.337
git/config global config setGlobalConfigValue will replace all entries for a global value,0.11,git/config,4,0.337
git/core error handling does not throw for errors that were expected,0.056,git/core,4,0.275
git/core error handling throws for errors that were not expected,0.057,git/core,4,0.275
git/core exit code handling does not throw for exit codes that were expected,0.052,git/core,4,0.275
git/core exit code handling throws for exit codes that were not expected,0.055,git/core,4,0.275
git/for-each-ref getBranches fetches branches using for-each-ref,0.084,git/for-each-ref,3,0.249
git/for-each-ref getBranches should return empty list for empty repo,0.071,git/for-each-ref,3,0.249
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.053,git/for-each-ref,3,0.249
AppStore can select a repository,0.129,AppStore,5,0.195
validatedRepositoryPath returns the path to the repository,0.449,validatedRepositoryPath,2,0.526
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.057
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.532,git/rebase,21,12.242
git/rebase detect conflicts status detects REBASE_HEAD,0.424,git/rebase,21,12.242
git/rebase detect conflicts has conflicted files in working directory,0.449,git/rebase,21,12.242
git/rebase detect conflicts is a detached HEAD state,0.449,git/rebase,21,12.242
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.465,git/rebase,21,12.242
git/rebase abort after conflicts found no longer has working directory changes,0.472,git/rebase,21,12.242
git/rebase abort after conflicts found returns to the feature branch,0.468,git/rebase,21,12.242
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.531,git/rebase,21,12.242
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.566,git/rebase,21,12.242
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.549,git/rebase,21,12.242
git/rebase continue after resolving conflicts returns success,0.602,git/rebase,21,12.242
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.625,git/rebase,21,12.242
git/rebase continue after resolving conflicts no longer has working directory changes,0.644,git/rebase,21,12.242
git/rebase continue after resolving conflicts returns to the feature branch,0.617,git/rebase,21,12.242
git/rebase continue after resolving conflicts branch is now a different ref,0.639,git/rebase,21,12.242
git/rebase continue with additional changes unrelated to conflicted files returns success,0.617,git/rebase,21,12.242
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.605,git/rebase,21,12.242
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.62,git/rebase,21,12.242
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.617,git/rebase,21,12.242
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.621,git/rebase,21,12.242
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.573,git/rebase,21,12.242
git/commit createCommit normal commits the given files,0.134,git/commit,21,5.074
git/commit createCommit normal commit does not strip commentary by default,0.126,git/commit,21,5.074
git/commit createCommit normal can commit for empty repository,0.171,git/commit,21,5.074
git/commit createCommit normal can commit renames,0.179,git/commit,21,5.074
git/commit createCommit partials can commit some lines from new file,0.187,git/commit,21,5.074
git/commit createCommit partials can commit second hunk from modified file,0.207,git/commit,21,5.074
git/commit createCommit partials can commit single delete from modified file,0.183,git/commit,21,5.074
git/commit createCommit partials can commit multiple hunks from modified file,0.212,git/commit,21,5.074
git/commit createCommit partials can commit some lines from deleted file,0.196,git/commit,21,5.074
git/commit createCommit partials can commit renames with modifications,0.204,git/commit,21,5.074
git/commit createCommit partials can commit renames with partially selected modifications,0.259,git/commit,21,5.074
git/commit createCommit with a merge conflict creates a merge commit,0.3,git/commit,21,5.074
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.286,git/commit,21,5.074
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.409,git/commit,21,5.074
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.388,git/commit,21,5.074
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.461,git/commit,21,5.074
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.461,git/commit,21,5.074
git/commit createMergeCommit with no changes throws an error,0.1,git/commit,21,5.074
git/commit index corner cases can commit when staged new file is then deleted,0.171,git/commit,21,5.074
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.185,git/commit,21,5.074
git/commit index corner cases file is deleted in index,0.191,git/commit,21,5.074
git/rebase can parse progress returns a value indicating conflicts were encountered,0.521,git/rebase,7,5.171
git/rebase can parse progress status detects REBASE_HEAD,0.535,git/rebase,7,5.171
git/rebase can parse progress is a detached HEAD state,0.568,git/rebase,7,5.171
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.089,git/rebase,7,5.171
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.189,git/rebase,7,5.171
git/rebase can parse progress for long rebase is a detached HEAD state,1.213,git/rebase,7,5.171
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.176,git/stash,14,2.658
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.247,git/stash,14,2.658
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.198,git/stash,14,2.658
GitStore loadCommitBatch includes HEAD when loading commits,0.364,GitStore,11,2.43
GitStore can discard changes from a repository,0.201,GitStore,11,2.43
GitStore can discard a renamed file,0.151,GitStore,11,2.43
GitStore undo first commit reports the repository is unborn,0.183,GitStore,11,2.43
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.43
GitStore undo first commit clears the undo commit dialog,0.207,GitStore,11,2.43
GitStore undo first commit has no staged files,0.197,GitStore,11,2.43
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.43
git/status getStatus with conflicted repo parses conflicted files with markers,0.279,git/status,12,1.961
git/status getStatus with conflicted repo parses conflicted files without markers,0.287,git/status,12,1.961
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.493,git/status,12,1.961
git/status getStatus with conflicted repo parses resolved files,0.293,git/status,12,1.961
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.109,git/status,12,1.961
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.122,git/status,12,1.961
git/status getStatus with unconflicted repo parses changed files,0.051,git/status,12,1.961
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.961
git/status getStatus with unconflicted repo reflects renames,0.091,git/status,12,1.961
git/status getStatus with unconflicted repo reflects copies,0.094,git/status,12,1.961
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.045,git/status,12,1.961
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.098,git/diff,19,1.593
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.051,git/diff,19,1.593
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.593
git/diff getBlobImage retrieves valid images for deleted file,0.056,git/diff,19,1.593
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.593
git/diff imageDiff changes for text are not set,0.068,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for new file,0.072,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for modified file,0.071,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.593
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.593
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.126,git/diff,19,1.593
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.134,git/diff,19,1.593
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.108,git/diff,19,1.593
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.106,git/diff,19,1.593
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.593
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.059,git/diff,19,1.593
git/diff getBinaryPaths in repo with text only files returns an empty array,0.071,git/diff,19,1.593
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.593
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.095,git/diff,19,1.593
BranchPruner does nothing on non GitHub repositories,0.276,BranchPruner,6,1.605
BranchPruner prunes for GitHub repository,0.279,BranchPruner,6,1.605
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.205,BranchPruner,6,1.605
BranchPruner does not prune if there is no default branch,0.203,BranchPruner,6,1.605
BranchPruner does not prune reserved branches,0.236,BranchPruner,6,1.605
git/reflog getRecentBranches returns the recently checked out branches,0.129,git/reflog,6,0.921
git/reflog getRecentBranches works after renaming a branch,0.161,git/reflog,6,0.921
git/reflog getRecentBranches returns a limited number of branches,0.223,git/reflog,6,0.921
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.134,git/reflog,6,0.921
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.171,git/reflog,6,0.921
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.921
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.295,formatPatch,5,0.884
git/checkout can checkout a valid branch name in an existing repository,0.15,git/checkout,6,0.942
git/checkout can checkout a branch when it exists on multiple remotes,0.144,git/checkout,6,0.942
git/checkout will fail when an existing branch matches the remote branch,0.1,git/checkout,6,0.942
git/checkout with submodules cleans up an submodule that no longer exists,0.253,git/checkout,6,0.942
git/checkout with submodules updates a changed submodule reference,0.22,git/checkout,6,0.942
git/rev-parse isGitRepository should return true for a repository,0.037,git/rev-parse,10,0.596
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.596
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.596
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.596
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.596
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.596
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.596
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.04,git/rev-parse,10,0.596
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.045,git/rev-parse,10,0.596
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.161,git/rev-parse,10,0.596
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.106,gitignore,9,0.645
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.103,gitignore,9,0.645
gitignore saveGitIgnore applies rule correctly to repository,0.09,gitignore,9,0.645
gitignore appendIgnoreRule appends one rule,0.104,gitignore,9,0.645
gitignore appendIgnoreRule appends multiple rules,0.11,gitignore,9,0.645
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.713
git/branch tip returns correct ref if checkout occurs,0.052,git/branch,10,0.713
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.713
git/branch tip returns current branch when on a valid HEAD,0.065,git/branch,10,0.713
git/branch tip returns non-origin remote,0.073,git/branch,10,0.713
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.713
git/branch getBranchesPointedAt in a local repo finds one branch name,0.069,git/branch,10,0.713
git/branch getBranchesPointedAt in a local repo finds no branch names,0.073,git/branch,10,0.713
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.065,git/branch,10,0.713
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.109,git/branch,10,0.713
git/submodule listSubmodules returns the submodule entry,0.144,git/submodule,3,0.691
git/submodule listSubmodules returns the expected tag,0.177,git/submodule,3,0.691
git/submodule resetSubmodulePaths update submodule to original commit,0.304,git/submodule,3,0.691
git-lfs isUsingLFS returns false for repository not using LFS,0.044,git-lfs,9,0.522
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.522
git/merge merge and is successful returns true,0.035,git/merge,7,0.729
git/merge merge and is a noop returns false,0.059,git/merge,7,0.729
git/merge getMergeBase returns the common ancestor of two branches,0.1,git/merge,7,0.729
git/log getCommits loads history,0.066,git/log,7,0.528
git/log getCommits handles repository with HEAD file on disk,0.074,git/log,7,0.528
git/log getCommits handles repository with signed commit and log.showSignature set,0.088,git/log,7,0.528
git/log getChangedFiles loads the files changed in the commit,0.048,git/log,7,0.528
git/log getChangedFiles detects renames,0.083,git/log,7,0.528
git/log getChangedFiles detect copies,0.078,git/log,7,0.528
git/log getChangedFiles handles commit when HEAD exists on disk,0.041,git/log,7,0.528
validatedRepositoryPath returns the path to the repository,0.04,validatedRepositoryPath,2,0.097
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.418
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,9,0.418
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.418
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.321
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.321
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.321
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.321
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.321
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.026,patch formatting,8,0.321
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.321
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.026,patch formatting,8,0.321
git/config config looks up config values,0.055,git/config,4,0.296
git/config config returns null for undefined values,0.046,git/config,4,0.296
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.296
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,4,0.296
git/core error handling does not throw for errors that were expected,0.087,git/core,4,0.354
git/core error handling throws for errors that were not expected,0.074,git/core,4,0.354
git/core exit code handling does not throw for exit codes that were expected,0.061,git/core,4,0.354
git/core exit code handling throws for exit codes that were not expected,0.064,git/core,4,0.354
git/for-each-ref getBranches fetches branches using for-each-ref,0.089,git/for-each-ref,3,0.279
git/for-each-ref getBranches should return empty list for empty repo,0.084,git/for-each-ref,3,0.279
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.279
AppStore can select a repository,0.129,AppStore,5,0.187
git/reset reset can hard reset a repository,0.399,git/reset,2,0.446
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.054
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.402,git/rebase,21,9.744
git/rebase detect conflicts status detects REBASE_HEAD,0.306,git/rebase,21,9.744
git/rebase detect conflicts has conflicted files in working directory,0.31,git/rebase,21,9.744
git/rebase detect conflicts is a detached HEAD state,0.334,git/rebase,21,9.744
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.339,git/rebase,21,9.744
git/rebase abort after conflicts found no longer has working directory changes,0.352,git/rebase,21,9.744
git/rebase abort after conflicts found returns to the feature branch,0.331,git/rebase,21,9.744
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.372,git/rebase,21,9.744
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.404,git/rebase,21,9.744
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.41,git/rebase,21,9.744
git/rebase continue after resolving conflicts returns success,0.595,git/rebase,21,9.744
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.613,git/rebase,21,9.744
git/rebase continue after resolving conflicts no longer has working directory changes,0.5,git/rebase,21,9.744
git/rebase continue after resolving conflicts returns to the feature branch,0.587,git/rebase,21,9.744
git/rebase continue after resolving conflicts branch is now a different ref,0.606,git/rebase,21,9.744
git/rebase continue with additional changes unrelated to conflicted files returns success,0.481,git/rebase,21,9.744
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.475,git/rebase,21,9.744
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.481,git/rebase,21,9.744
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.462,git/rebase,21,9.744
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.476,git/rebase,21,9.744
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.44,git/rebase,21,9.744
git/rebase can parse progress returns a value indicating conflicts were encountered,0.464,git/rebase,7,4.301
git/rebase can parse progress status detects REBASE_HEAD,0.558,git/rebase,7,4.301
git/rebase can parse progress is a detached HEAD state,0.41,git/rebase,7,4.301
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.903,git/rebase,7,4.301
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.046,git/rebase,7,4.301
git/rebase can parse progress for long rebase is a detached HEAD state,0.853,git/rebase,7,4.301
git/commit createCommit normal commits the given files,0.122,git/commit,21,5.042
git/commit createCommit normal commit does not strip commentary by default,0.105,git/commit,21,5.042
git/commit createCommit normal can commit for empty repository,0.144,git/commit,21,5.042
git/commit createCommit normal can commit renames,0.16,git/commit,21,5.042
git/commit createCommit partials can commit some lines from new file,0.171,git/commit,21,5.042
git/commit createCommit partials can commit second hunk from modified file,0.191,git/commit,21,5.042
git/commit createCommit partials can commit single delete from modified file,0.164,git/commit,21,5.042
git/commit createCommit partials can commit multiple hunks from modified file,0.184,git/commit,21,5.042
git/commit createCommit partials can commit some lines from deleted file,0.178,git/commit,21,5.042
git/commit createCommit partials can commit renames with modifications,0.179,git/commit,21,5.042
git/commit createCommit partials can commit renames with partially selected modifications,0.232,git/commit,21,5.042
git/commit createCommit with a merge conflict creates a merge commit,0.291,git/commit,21,5.042
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.34,git/commit,21,5.042
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.468,git/commit,21,5.042
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.362,git/commit,21,5.042
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.41,git/commit,21,5.042
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.519,git/commit,21,5.042
git/commit createMergeCommit with no changes throws an error,0.128,git/commit,21,5.042
git/commit index corner cases can commit when staged new file is then deleted,0.246,git/commit,21,5.042
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.212,git/commit,21,5.042
git/commit index corner cases file is deleted in index,0.181,git/commit,21,5.042
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.172,git/stash,14,2.848
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.272,git/stash,14,2.848
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.233,git/stash,14,2.848
GitStore loadCommitBatch includes HEAD when loading commits,0.49,GitStore,11,2.972
GitStore can discard changes from a repository,0.178,GitStore,11,2.972
GitStore can discard a renamed file,0.154,GitStore,11,2.972
GitStore undo first commit reports the repository is unborn,0.201,GitStore,11,2.972
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.972
GitStore undo first commit clears the undo commit dialog,0.216,GitStore,11,2.972
GitStore undo first commit has no staged files,0.221,GitStore,11,2.972
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.972
git/status getStatus with conflicted repo parses conflicted files with markers,0.313,git/status,12,2.089
git/status getStatus with conflicted repo parses conflicted files without markers,0.307,git/status,12,2.089
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.506,git/status,12,2.089
git/status getStatus with conflicted repo parses resolved files,0.36,git/status,12,2.089
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.118,git/status,12,2.089
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.123,git/status,12,2.089
git/status getStatus with unconflicted repo parses changed files,0.052,git/status,12,2.089
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,2.089
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,2.089
git/status getStatus with unconflicted repo reflects copies,0.084,git/status,12,2.089
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.048,git/status,12,2.089
BranchPruner does nothing on non GitHub repositories,0.194,BranchPruner,6,1.499
BranchPruner prunes for GitHub repository,0.273,BranchPruner,6,1.499
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.195,BranchPruner,6,1.499
BranchPruner does not prune if there is no default branch,0.182,BranchPruner,6,1.499
BranchPruner does not prune reserved branches,0.255,BranchPruner,6,1.499
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.641
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.641
git/diff getBlobImage retrieves valid image for modified file,0.102,git/diff,19,1.641
git/diff getBlobImage retrieves valid images for deleted file,0.066,git/diff,19,1.641
git/diff imageDiff changes for images are set,0.073,git/diff,19,1.641
git/diff imageDiff changes for text are not set,0.067,git/diff,19,1.641
git/diff getWorkingDirectoryDiff counts lines for new file,0.075,git/diff,19,1.641
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.641
git/diff getWorkingDirectoryDiff counts lines for staged file,0.07,git/diff,19,1.641
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.096,git/diff,19,1.641
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.145,git/diff,19,1.641
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.138,git/diff,19,1.641
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.122,git/diff,19,1.641
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.117,git/diff,19,1.641
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.077,git/diff,19,1.641
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.056,git/diff,19,1.641
git/diff getBinaryPaths in repo with text only files returns an empty array,0.064,git/diff,19,1.641
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.085,git/diff,19,1.641
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.099,git/diff,19,1.641
git/checkout can checkout a valid branch name in an existing repository,0.113,git/checkout,6,0.992
git/checkout can checkout a branch when it exists on multiple remotes,0.126,git/checkout,6,0.992
git/checkout will fail when an existing branch matches the remote branch,0.119,git/checkout,6,0.992
git/checkout with submodules cleans up an submodule that no longer exists,0.327,git/checkout,6,0.992
git/checkout with submodules updates a changed submodule reference,0.209,git/checkout,6,0.992
git/reflog getRecentBranches returns the recently checked out branches,0.144,git/reflog,6,1.103
git/reflog getRecentBranches works after renaming a branch,0.186,git/reflog,6,1.103
git/reflog getRecentBranches returns a limited number of branches,0.268,git/reflog,6,1.103
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.2,git/reflog,6,1.103
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.197,git/reflog,6,1.103
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.063,git/reflog,6,1.103
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.378,formatPatch,5,1.081
git/merge merge and is successful returns true,0.03,git/merge,7,0.547
git/merge merge and is a noop returns false,0.05,git/merge,7,0.547
git/merge getMergeBase returns the common ancestor of two branches,0.059,git/merge,7,0.547
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.632
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,10,0.632
git/branch tip returns detached for arbitrary checkout,0.052,git/branch,10,0.632
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,10,0.632
git/branch tip returns non-origin remote,0.084,git/branch,10,0.632
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.077,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.049,git/branch,10,0.632
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.632
git/submodule listSubmodules returns the submodule entry,0.109,git/submodule,3,0.621
git/submodule listSubmodules returns the expected tag,0.161,git/submodule,3,0.621
git/submodule resetSubmodulePaths update submodule to original commit,0.306,git/submodule,3,0.621
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.112,gitignore,9,0.686
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.106,gitignore,9,0.686
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.686
gitignore appendIgnoreRule appends one rule,0.113,gitignore,9,0.686
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.686
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.644
git/rev-parse isGitRepository should return false for a directory,0.045,git/rev-parse,10,0.644
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.644
git/rev-parse isBareRepository returns true for initialized bare repository,0.057,git/rev-parse,10,0.644
git/rev-parse isBareRepository returns false for empty directory,0.048,git/rev-parse,10,0.644
git/rev-parse isBareRepository throws error for missing directory,0.047,git/rev-parse,10,0.644
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.06,git/rev-parse,10,0.644
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.644
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.644
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.172,git/rev-parse,10,0.644
git/log getCommits loads history,0.054,git/log,7,0.513
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.513
git/log getCommits handles repository with signed commit and log.showSignature set,0.086,git/log,7,0.513
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.513
git/log getChangedFiles detects renames,0.076,git/log,7,0.513
git/log getChangedFiles detect copies,0.086,git/log,7,0.513
git/log getChangedFiles handles commit when HEAD exists on disk,0.045,git/log,7,0.513
git-lfs isUsingLFS returns false for repository not using LFS,0.05,git-lfs,9,0.505
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.505
git/reset reset can hard reset a repository,0.068,git/reset,2,0.116
git/remote getRemotes should return both remotes,0.04,git/remote,9,0.404
git/remote findDefaultRemote returns origin when multiple remotes found,0.048,git/remote,9,0.404
git/remote findDefaultRemote returns something when origin removed,0.053,git/remote,9,0.404
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.205
git/core error handling throws for errors that were not expected,0.042,git/core,4,0.205
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.205
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.205
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.037,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.025,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.03,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.03,patch formatting,8,0.322
git/config config looks up config values,0.055,git/config,4,0.382
git/config config returns null for undefined values,0.064,git/config,4,0.382
git/config global config getGlobalConfigPath gets the config path,0.08,git/config,4,0.382
git/config global config setGlobalConfigValue will replace all entries for a global value,0.123,git/config,4,0.382
git/for-each-ref getBranches fetches branches using for-each-ref,0.224,git/for-each-ref,3,0.457
git/for-each-ref getBranches should return empty list for empty repo,0.11,git/for-each-ref,3,0.457
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.076,git/for-each-ref,3,0.457
AppStore can select a repository,0.17,AppStore,5,0.261
validatedRepositoryPath returns the path to the repository,0.453,validatedRepositoryPath,2,0.53
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.387,git/rebase,21,9.486
git/rebase detect conflicts status detects REBASE_HEAD,0.3,git/rebase,21,9.486
git/rebase detect conflicts has conflicted files in working directory,0.311,git/rebase,21,9.486
git/rebase detect conflicts is a detached HEAD state,0.34,git/rebase,21,9.486
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.392,git/rebase,21,9.486
git/rebase abort after conflicts found no longer has working directory changes,0.334,git/rebase,21,9.486
git/rebase abort after conflicts found returns to the feature branch,0.393,git/rebase,21,9.486
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.397,git/rebase,21,9.486
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.446,git/rebase,21,9.486
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.379,git/rebase,21,9.486
git/rebase continue after resolving conflicts returns success,0.47,git/rebase,21,9.486
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.469,git/rebase,21,9.486
git/rebase continue after resolving conflicts no longer has working directory changes,0.473,git/rebase,21,9.486
git/rebase continue after resolving conflicts returns to the feature branch,0.469,git/rebase,21,9.486
git/rebase continue after resolving conflicts branch is now a different ref,0.469,git/rebase,21,9.486
git/rebase continue with additional changes unrelated to conflicted files returns success,0.53,git/rebase,21,9.486
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.584,git/rebase,21,9.486
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.481,git/rebase,21,9.486
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.472,git/rebase,21,9.486
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.493,git/rebase,21,9.486
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.434,git/rebase,21,9.486
git/commit createCommit normal commits the given files,0.111,git/commit,21,4.08
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.08
git/commit createCommit normal can commit for empty repository,0.124,git/commit,21,4.08
git/commit createCommit normal can commit renames,0.147,git/commit,21,4.08
git/commit createCommit partials can commit some lines from new file,0.155,git/commit,21,4.08
git/commit createCommit partials can commit second hunk from modified file,0.164,git/commit,21,4.08
git/commit createCommit partials can commit single delete from modified file,0.151,git/commit,21,4.08
git/commit createCommit partials can commit multiple hunks from modified file,0.163,git/commit,21,4.08
git/commit createCommit partials can commit some lines from deleted file,0.155,git/commit,21,4.08
git/commit createCommit partials can commit renames with modifications,0.166,git/commit,21,4.08
git/commit createCommit partials can commit renames with partially selected modifications,0.206,git/commit,21,4.08
git/commit createCommit with a merge conflict creates a merge commit,0.238,git/commit,21,4.08
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.23,git/commit,21,4.08
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.326,git/commit,21,4.08
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.309,git/commit,21,4.08
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.357,git/commit,21,4.08
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.36,git/commit,21,4.08
git/commit createMergeCommit with no changes throws an error,0.093,git/commit,21,4.08
git/commit index corner cases can commit when staged new file is then deleted,0.144,git/commit,21,4.08
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.16,git/commit,21,4.08
git/commit index corner cases file is deleted in index,0.16,git/commit,21,4.08
git/rebase can parse progress returns a value indicating conflicts were encountered,0.444,git/rebase,7,3.948
git/rebase can parse progress status detects REBASE_HEAD,0.44,git/rebase,7,3.948
git/rebase can parse progress is a detached HEAD state,0.448,git/rebase,7,3.948
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.838,git/rebase,7,3.948
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.859,git/rebase,7,3.948
git/rebase can parse progress for long rebase is a detached HEAD state,0.865,git/rebase,7,3.948
GitStore loadCommitBatch includes HEAD when loading commits,0.257,GitStore,11,2.452
GitStore can discard changes from a repository,0.204,GitStore,11,2.452
GitStore can discard a renamed file,0.143,GitStore,11,2.452
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.452
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.452
GitStore undo first commit clears the undo commit dialog,0.208,GitStore,11,2.452
GitStore undo first commit has no staged files,0.205,GitStore,11,2.452
GitStore repository with HEAD file can discard modified change cleanly,0.12,GitStore,11,2.452
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.151,git/stash,14,2.42
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.222,git/stash,14,2.42
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.19,git/stash,14,2.42
git/status getStatus with conflicted repo parses conflicted files with markers,0.228,git/status,12,1.65
git/status getStatus with conflicted repo parses conflicted files without markers,0.229,git/status,12,1.65
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.405,git/status,12,1.65
git/status getStatus with conflicted repo parses resolved files,0.228,git/status,12,1.65
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.099,git/status,12,1.65
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.105,git/status,12,1.65
git/status getStatus with unconflicted repo parses changed files,0.053,git/status,12,1.65
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.049,git/status,12,1.65
git/status getStatus with unconflicted repo reflects renames,0.083,git/status,12,1.65
git/status getStatus with unconflicted repo reflects copies,0.077,git/status,12,1.65
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.65
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.583
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.093,git/diff,19,1.583
git/diff getBlobImage retrieves valid image for modified file,0.054,git/diff,19,1.583
git/diff getBlobImage retrieves valid images for deleted file,0.059,git/diff,19,1.583
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.583
git/diff imageDiff changes for text are not set,0.058,git/diff,19,1.583
git/diff getWorkingDirectoryDiff counts lines for new file,0.062,git/diff,19,1.583
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.583
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.583
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.106,git/diff,19,1.583
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.146,git/diff,19,1.583
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.138,git/diff,19,1.583
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.583
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.583
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.583
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.583
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.583
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.079,git/diff,19,1.583
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.583
BranchPruner does nothing on non GitHub repositories,0.197,BranchPruner,6,1.524
BranchPruner prunes for GitHub repository,0.26,BranchPruner,6,1.524
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.197,BranchPruner,6,1.524
BranchPruner does not prune if there is no default branch,0.19,BranchPruner,6,1.524
BranchPruner does not prune reserved branches,0.271,BranchPruner,6,1.524
git/reflog getRecentBranches returns the recently checked out branches,0.13,git/reflog,6,0.95
git/reflog getRecentBranches works after renaming a branch,0.164,git/reflog,6,0.95
git/reflog getRecentBranches returns a limited number of branches,0.242,git/reflog,6,0.95
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.146,git/reflog,6,0.95
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.169,git/reflog,6,0.95
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.95
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.3,formatPatch,5,0.941
git/checkout can checkout a valid branch name in an existing repository,0.107,git/checkout,6,0.862
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.862
git/checkout will fail when an existing branch matches the remote branch,0.104,git/checkout,6,0.862
git/checkout with submodules cleans up an submodule that no longer exists,0.258,git/checkout,6,0.862
git/checkout with submodules updates a changed submodule reference,0.205,git/checkout,6,0.862
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.104,gitignore,9,0.625
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.625
gitignore saveGitIgnore applies rule correctly to repository,0.088,gitignore,9,0.625
gitignore appendIgnoreRule appends one rule,0.106,gitignore,9,0.625
gitignore appendIgnoreRule appends multiple rules,0.104,gitignore,9,0.625
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.61
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for default initialized repository,0.057,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns true for initialized bare repository,0.055,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.61
git/rev-parse isBareRepository throws error for missing directory,0.043,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.048,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.155,git/rev-parse,10,0.61
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.624
git/branch tip returns correct ref if checkout occurs,0.053,git/branch,10,0.624
git/branch tip returns detached for arbitrary checkout,0.053,git/branch,10,0.624
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.624
git/branch tip returns non-origin remote,0.077,git/branch,10,0.624
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,10,0.624
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.624
git/branch getBranchesPointedAt in a local repo finds no branch names,0.043,git/branch,10,0.624
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.624
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.624
git/submodule listSubmodules returns the submodule entry,0.111,git/submodule,3,0.645
git/submodule listSubmodules returns the expected tag,0.163,git/submodule,3,0.645
git/submodule resetSubmodulePaths update submodule to original commit,0.326,git/submodule,3,0.645
git/merge merge and is successful returns true,0.045,git/merge,7,0.593
git/merge merge and is a noop returns false,0.051,git/merge,7,0.593
git/merge getMergeBase returns the common ancestor of two branches,0.069,git/merge,7,0.593
validatedRepositoryPath returns the path to the repository,0.042,validatedRepositoryPath,2,0.099
git/log getCommits loads history,0.057,git/log,7,0.536
git/log getCommits handles repository with HEAD file on disk,0.079,git/log,7,0.536
git/log getCommits handles repository with signed commit and log.showSignature set,0.099,git/log,7,0.536
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.536
git/log getChangedFiles detects renames,0.077,git/log,7,0.536
git/log getChangedFiles detect copies,0.087,git/log,7,0.536
git/log getChangedFiles handles commit when HEAD exists on disk,0.046,git/log,7,0.536
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.54
git-lfs isUsingLFS returns true if LFS is tracking a path,0.075,git-lfs,9,0.54
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.197
git/for-each-ref getBranches should return empty list for empty repo,0.055,git/for-each-ref,3,0.197
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.197
git/remote getRemotes should return both remotes,0.048,git/remote,9,0.423
git/remote findDefaultRemote returns origin when multiple remotes found,0.051,git/remote,9,0.423
git/remote findDefaultRemote returns something when origin removed,0.059,git/remote,9,0.423
git/config config looks up config values,0.041,git/config,4,0.281
git/config config returns null for undefined values,0.05,git/config,4,0.281
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.281
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,4,0.281
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.028,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.312
AppStore can select a repository,0.124,AppStore,5,0.175
git/core error handling does not throw for errors that were expected,0.371,git/core,4,0.557
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.557
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.557
git/core exit code handling throws for exit codes that were not expected,0.049,git/core,4,0.557
git/reset reset can hard reset a repository,0.065,git/reset,2,0.112
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.396,git/rebase,21,9.101
git/rebase detect conflicts status detects REBASE_HEAD,0.303,git/rebase,21,9.101
git/rebase detect conflicts has conflicted files in working directory,0.305,git/rebase,21,9.101
git/rebase detect conflicts is a detached HEAD state,0.324,git/rebase,21,9.101
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.34,git/rebase,21,9.101
git/rebase abort after conflicts found no longer has working directory changes,0.328,git/rebase,21,9.101
git/rebase abort after conflicts found returns to the feature branch,0.342,git/rebase,21,9.101
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.387,git/rebase,21,9.101
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.41,git/rebase,21,9.101
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.416,git/rebase,21,9.101
git/rebase continue after resolving conflicts returns success,0.45,git/rebase,21,9.101
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.475,git/rebase,21,9.101
git/rebase continue after resolving conflicts no longer has working directory changes,0.449,git/rebase,21,9.101
git/rebase continue after resolving conflicts returns to the feature branch,0.471,git/rebase,21,9.101
git/rebase continue after resolving conflicts branch is now a different ref,0.452,git/rebase,21,9.101
git/rebase continue with additional changes unrelated to conflicted files returns success,0.454,git/rebase,21,9.101
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.455,git/rebase,21,9.101
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.452,git/rebase,21,9.101
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.485,git/rebase,21,9.101
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.479,git/rebase,21,9.101
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.448,git/rebase,21,9.101
git/commit createCommit normal commits the given files,0.112,git/commit,21,4.132
git/commit createCommit normal commit does not strip commentary by default,0.095,git/commit,21,4.132
git/commit createCommit normal can commit for empty repository,0.123,git/commit,21,4.132
git/commit createCommit normal can commit renames,0.15,git/commit,21,4.132
git/commit createCommit partials can commit some lines from new file,0.16,git/commit,21,4.132
git/commit createCommit partials can commit second hunk from modified file,0.17,git/commit,21,4.132
git/commit createCommit partials can commit single delete from modified file,0.155,git/commit,21,4.132
git/commit createCommit partials can commit multiple hunks from modified file,0.181,git/commit,21,4.132
git/commit createCommit partials can commit some lines from deleted file,0.16,git/commit,21,4.132
git/commit createCommit partials can commit renames with modifications,0.169,git/commit,21,4.132
git/commit createCommit partials can commit renames with partially selected modifications,0.207,git/commit,21,4.132
git/commit createCommit with a merge conflict creates a merge commit,0.241,git/commit,21,4.132
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.227,git/commit,21,4.132
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.323,git/commit,21,4.132
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.317,git/commit,21,4.132
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.366,git/commit,21,4.132
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.378,git/commit,21,4.132
git/commit createMergeCommit with no changes throws an error,0.083,git/commit,21,4.132
git/commit index corner cases can commit when staged new file is then deleted,0.139,git/commit,21,4.132
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,4.132
git/commit index corner cases file is deleted in index,0.158,git/commit,21,4.132
git/rebase can parse progress returns a value indicating conflicts were encountered,0.439,git/rebase,7,4.016
git/rebase can parse progress status detects REBASE_HEAD,0.449,git/rebase,7,4.016
git/rebase can parse progress is a detached HEAD state,0.443,git/rebase,7,4.016
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.839,git/rebase,7,4.016
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.922,git/rebase,7,4.016
git/rebase can parse progress for long rebase is a detached HEAD state,0.87,git/rebase,7,4.016
GitStore loadCommitBatch includes HEAD when loading commits,0.243,GitStore,11,2.357
GitStore can discard changes from a repository,0.194,GitStore,11,2.357
GitStore can discard a renamed file,0.14,GitStore,11,2.357
GitStore undo first commit reports the repository is unborn,0.186,GitStore,11,2.357
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.357
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.357
GitStore undo first commit has no staged files,0.198,GitStore,11,2.357
GitStore repository with HEAD file can discard modified change cleanly,0.107,GitStore,11,2.357
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.154,git/stash,14,2.496
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.24,git/stash,14,2.496
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.187,git/stash,14,2.496
git/status getStatus with conflicted repo parses conflicted files with markers,0.226,git/status,12,1.647
git/status getStatus with conflicted repo parses conflicted files without markers,0.233,git/status,12,1.647
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.394,git/status,12,1.647
git/status getStatus with conflicted repo parses resolved files,0.229,git/status,12,1.647
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.093,git/status,12,1.647
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.112,git/status,12,1.647
git/status getStatus with unconflicted repo parses changed files,0.061,git/status,12,1.647
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.039,git/status,12,1.647
git/status getStatus with unconflicted repo reflects renames,0.079,git/status,12,1.647
git/status getStatus with unconflicted repo reflects copies,0.088,git/status,12,1.647
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.043,git/status,12,1.647
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.545
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.545
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.545
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.545
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.545
git/diff imageDiff changes for text are not set,0.142,git/diff,19,1.545
git/diff getWorkingDirectoryDiff counts lines for new file,0.064,git/diff,19,1.545
git/diff getWorkingDirectoryDiff counts lines for modified file,0.062,git/diff,19,1.545
git/diff getWorkingDirectoryDiff counts lines for staged file,0.064,git/diff,19,1.545
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.093,git/diff,19,1.545
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.545
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.126,git/diff,19,1.545
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.11,git/diff,19,1.545
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.116,git/diff,19,1.545
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.545
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.545
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.545
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.545
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.092,git/diff,19,1.545
BranchPruner does nothing on non GitHub repositories,0.198,BranchPruner,6,1.536
BranchPruner prunes for GitHub repository,0.263,BranchPruner,6,1.536
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.2,BranchPruner,6,1.536
BranchPruner does not prune if there is no default branch,0.203,BranchPruner,6,1.536
BranchPruner does not prune reserved branches,0.264,BranchPruner,6,1.536
git/reflog getRecentBranches returns the recently checked out branches,0.133,git/reflog,6,0.922
git/reflog getRecentBranches works after renaming a branch,0.166,git/reflog,6,0.922
git/reflog getRecentBranches returns a limited number of branches,0.228,git/reflog,6,0.922
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.131,git/reflog,6,0.922
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.165,git/reflog,6,0.922
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.922
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.305,formatPatch,5,0.911
git/checkout can checkout a valid branch name in an existing repository,0.108,git/checkout,6,0.849
git/checkout can checkout a branch when it exists on multiple remotes,0.111,git/checkout,6,0.849
git/checkout will fail when an existing branch matches the remote branch,0.1,git/checkout,6,0.849
git/checkout with submodules cleans up an submodule that no longer exists,0.25,git/checkout,6,0.849
git/checkout with submodules updates a changed submodule reference,0.208,git/checkout,6,0.849
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.585
git/submodule listSubmodules returns the expected tag,0.141,git/submodule,3,0.585
git/submodule resetSubmodulePaths update submodule to original commit,0.303,git/submodule,3,0.585
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.601
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.092,gitignore,9,0.601
gitignore saveGitIgnore applies rule correctly to repository,0.089,gitignore,9,0.601
gitignore appendIgnoreRule appends one rule,0.1,gitignore,9,0.601
gitignore appendIgnoreRule appends multiple rules,0.102,gitignore,9,0.601
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.595
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.595
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.595
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,10,0.595
git/branch tip returns non-origin remote,0.073,git/branch,10,0.595
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.595
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.595
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.595
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.595
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.595
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.62
git/rev-parse isGitRepository should return false for a directory,0.044,git/rev-parse,10,0.62
git/rev-parse isBareRepository returns false for default initialized repository,0.049,git/rev-parse,10,0.62
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.62
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.62
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.62
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.62
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.044,git/rev-parse,10,0.62
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.04,git/rev-parse,10,0.62
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.178,git/rev-parse,10,0.62
git/merge merge and is successful returns true,0.035,git/merge,7,0.541
git/merge merge and is a noop returns false,0.053,git/merge,7,0.541
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.541
git/core error handling does not throw for errors that were expected,0.04,git/core,4,0.209
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.209
git/core exit code handling does not throw for exit codes that were expected,0.039,git/core,4,0.209
git/core exit code handling throws for exit codes that were not expected,0.042,git/core,4,0.209
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.493
git-lfs isUsingLFS returns true if LFS is tracking a path,0.073,git-lfs,9,0.493
git/log getCommits loads history,0.056,git/log,7,0.503
git/log getCommits handles repository with HEAD file on disk,0.081,git/log,7,0.503
git/log getCommits handles repository with signed commit and log.showSignature set,0.084,git/log,7,0.503
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.503
git/log getChangedFiles detects renames,0.071,git/log,7,0.503
git/log getChangedFiles detect copies,0.079,git/log,7,0.503
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.503
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.422
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,9,0.422
git/remote findDefaultRemote returns something when origin removed,0.059,git/remote,9,0.422
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.299
git/config config looks up config values,0.041,git/config,4,0.268
git/config config returns null for undefined values,0.043,git/config,4,0.268
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.268
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,4,0.268
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for empty repo,0.058,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.203
AppStore can select a repository,0.123,AppStore,5,0.174
git/reset reset can hard reset a repository,0.392,git/reset,2,0.438
validatedRepositoryPath returns the path to the repository,0.043,validatedRepositoryPath,2,0.1
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.388,git/rebase,21,9.051
git/rebase detect conflicts status detects REBASE_HEAD,0.316,git/rebase,21,9.051
git/rebase detect conflicts has conflicted files in working directory,0.299,git/rebase,21,9.051
git/rebase detect conflicts is a detached HEAD state,0.326,git/rebase,21,9.051
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.32,git/rebase,21,9.051
git/rebase abort after conflicts found no longer has working directory changes,0.325,git/rebase,21,9.051
git/rebase abort after conflicts found returns to the feature branch,0.359,git/rebase,21,9.051
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.413,git/rebase,21,9.051
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.396,git/rebase,21,9.051
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.403,git/rebase,21,9.051
git/rebase continue after resolving conflicts returns success,0.451,git/rebase,21,9.051
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.452,git/rebase,21,9.051
git/rebase continue after resolving conflicts no longer has working directory changes,0.44,git/rebase,21,9.051
git/rebase continue after resolving conflicts returns to the feature branch,0.462,git/rebase,21,9.051
git/rebase continue after resolving conflicts branch is now a different ref,0.469,git/rebase,21,9.051
git/rebase continue with additional changes unrelated to conflicted files returns success,0.455,git/rebase,21,9.051
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.461,git/rebase,21,9.051
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.472,git/rebase,21,9.051
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.478,git/rebase,21,9.051
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.464,git/rebase,21,9.051
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.443,git/rebase,21,9.051
git/commit createCommit normal commits the given files,0.111,git/commit,21,4.083
git/commit createCommit normal commit does not strip commentary by default,0.097,git/commit,21,4.083
git/commit createCommit normal can commit for empty repository,0.121,git/commit,21,4.083
git/commit createCommit normal can commit renames,0.147,git/commit,21,4.083
git/commit createCommit partials can commit some lines from new file,0.157,git/commit,21,4.083
git/commit createCommit partials can commit second hunk from modified file,0.164,git/commit,21,4.083
git/commit createCommit partials can commit single delete from modified file,0.16,git/commit,21,4.083
git/commit createCommit partials can commit multiple hunks from modified file,0.167,git/commit,21,4.083
git/commit createCommit partials can commit some lines from deleted file,0.162,git/commit,21,4.083
git/commit createCommit partials can commit renames with modifications,0.168,git/commit,21,4.083
git/commit createCommit partials can commit renames with partially selected modifications,0.208,git/commit,21,4.083
git/commit createCommit with a merge conflict creates a merge commit,0.241,git/commit,21,4.083
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.221,git/commit,21,4.083
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.311,git/commit,21,4.083
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.31,git/commit,21,4.083
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.369,git/commit,21,4.083
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.369,git/commit,21,4.083
git/commit createMergeCommit with no changes throws an error,0.083,git/commit,21,4.083
git/commit index corner cases can commit when staged new file is then deleted,0.138,git/commit,21,4.083
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,4.083
git/commit index corner cases file is deleted in index,0.163,git/commit,21,4.083
git/rebase can parse progress returns a value indicating conflicts were encountered,0.442,git/rebase,7,3.979
git/rebase can parse progress status detects REBASE_HEAD,0.436,git/rebase,7,3.979
git/rebase can parse progress is a detached HEAD state,0.445,git/rebase,7,3.979
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.847,git/rebase,7,3.979
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.869,git/rebase,7,3.979
git/rebase can parse progress for long rebase is a detached HEAD state,0.888,git/rebase,7,3.979
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.162,git/stash,14,2.589
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.263,git/stash,14,2.589
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.207,git/stash,14,2.589
GitStore loadCommitBatch includes HEAD when loading commits,0.344,GitStore,11,2.475
GitStore can discard changes from a repository,0.196,GitStore,11,2.475
GitStore can discard a renamed file,0.151,GitStore,11,2.475
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.475
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.475
GitStore undo first commit clears the undo commit dialog,0.209,GitStore,11,2.475
GitStore undo first commit has no staged files,0.198,GitStore,11,2.475
GitStore repository with HEAD file can discard modified change cleanly,0.129,GitStore,11,2.475
git/status getStatus with conflicted repo parses conflicted files with markers,0.292,git/status,12,1.996
git/status getStatus with conflicted repo parses conflicted files without markers,0.288,git/status,12,1.996
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.493,git/status,12,1.996
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,1.996
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,1.996
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.127,git/status,12,1.996
git/status getStatus with unconflicted repo parses changed files,0.056,git/status,12,1.996
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.996
git/status getStatus with unconflicted repo reflects renames,0.09,git/status,12,1.996
git/status getStatus with unconflicted repo reflects copies,0.085,git/status,12,1.996
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.996
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.099,git/diff,19,1.612
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.055,git/diff,19,1.612
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.612
git/diff getBlobImage retrieves valid images for deleted file,0.062,git/diff,19,1.612
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.612
git/diff imageDiff changes for text are not set,0.057,git/diff,19,1.612
git/diff getWorkingDirectoryDiff counts lines for new file,0.076,git/diff,19,1.612
git/diff getWorkingDirectoryDiff counts lines for modified file,0.068,git/diff,19,1.612
git/diff getWorkingDirectoryDiff counts lines for staged file,0.062,git/diff,19,1.612
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.612
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.133,git/diff,19,1.612
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.133,git/diff,19,1.612
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.157,git/diff,19,1.612
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.109,git/diff,19,1.612
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.071,git/diff,19,1.612
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.047,git/diff,19,1.612
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.612
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.071,git/diff,19,1.612
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.09,git/diff,19,1.612
BranchPruner does nothing on non GitHub repositories,0.187,BranchPruner,6,1.527
BranchPruner prunes for GitHub repository,0.321,BranchPruner,6,1.527
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.192,BranchPruner,6,1.527
BranchPruner does not prune if there is no default branch,0.196,BranchPruner,6,1.527
BranchPruner does not prune reserved branches,0.243,BranchPruner,6,1.527
git/reflog getRecentBranches returns the recently checked out branches,0.125,git/reflog,6,0.884
git/reflog getRecentBranches works after renaming a branch,0.158,git/reflog,6,0.884
git/reflog getRecentBranches returns a limited number of branches,0.212,git/reflog,6,0.884
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.125,git/reflog,6,0.884
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.161,git/reflog,6,0.884
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.884
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.296,formatPatch,5,0.882
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.812
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.812
git/checkout will fail when an existing branch matches the remote branch,0.093,git/checkout,6,0.812
git/checkout with submodules cleans up an submodule that no longer exists,0.234,git/checkout,6,0.812
git/checkout with submodules updates a changed submodule reference,0.194,git/checkout,6,0.812
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.594
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.594
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.594
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.594
git/rev-parse isBareRepository returns false for empty directory,0.038,git/rev-parse,10,0.594
git/rev-parse isBareRepository throws error for missing directory,0.037,git/rev-parse,10,0.594
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.594
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.594
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.048,git/rev-parse,10,0.594
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.165,git/rev-parse,10,0.594
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.588
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.089,gitignore,9,0.588
gitignore saveGitIgnore applies rule correctly to repository,0.084,gitignore,9,0.588
gitignore appendIgnoreRule appends one rule,0.1,gitignore,9,0.588
gitignore appendIgnoreRule appends multiple rules,0.099,gitignore,9,0.588
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.582
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,10,0.582
git/branch tip returns detached for arbitrary checkout,0.044,git/branch,10,0.582
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.582
git/branch tip returns non-origin remote,0.069,git/branch,10,0.582
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.073,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo finds one branch name,0.046,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.582
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,10,0.582
git/submodule listSubmodules returns the submodule entry,0.107,git/submodule,3,0.639
git/submodule listSubmodules returns the expected tag,0.158,git/submodule,3,0.639
git/submodule resetSubmodulePaths update submodule to original commit,0.33,git/submodule,3,0.639
git/merge merge and is successful returns true,0.031,git/merge,7,0.538
git/merge merge and is a noop returns false,0.051,git/merge,7,0.538
git/merge getMergeBase returns the common ancestor of two branches,0.06,git/merge,7,0.538
git/log getCommits loads history,0.053,git/log,7,0.5
git/log getCommits handles repository with HEAD file on disk,0.079,git/log,7,0.5
git/log getCommits handles repository with signed commit and log.showSignature set,0.085,git/log,7,0.5
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.5
git/log getChangedFiles detects renames,0.075,git/log,7,0.5
git/log getChangedFiles detect copies,0.081,git/log,7,0.5
git/log getChangedFiles handles commit when HEAD exists on disk,0.037,git/log,7,0.5
git-lfs isUsingLFS returns false for repository not using LFS,0.043,git-lfs,9,0.475
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.475
git/reset reset can hard reset a repository,0.065,git/reset,2,0.108
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.407
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,9,0.407
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.407
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.026,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.31
git/config config looks up config values,0.041,git/config,4,0.274
git/config config returns null for undefined values,0.045,git/config,4,0.274
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.274
git/config global config setGlobalConfigValue will replace all entries for a global value,0.089,git/config,4,0.274
git/core error handling does not throw for errors that were expected,0.048,git/core,4,0.229
git/core error handling throws for errors that were not expected,0.048,git/core,4,0.229
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.229
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.229
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.206
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.206
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.206
AppStore can select a repository,0.125,AppStore,5,0.177
validatedRepositoryPath returns the path to the repository,0.381,validatedRepositoryPath,2,0.435
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.397,git/rebase,21,9.209
git/rebase detect conflicts status detects REBASE_HEAD,0.306,git/rebase,21,9.209
git/rebase detect conflicts has conflicted files in working directory,0.304,git/rebase,21,9.209
git/rebase detect conflicts is a detached HEAD state,0.331,git/rebase,21,9.209
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.333,git/rebase,21,9.209
git/rebase abort after conflicts found no longer has working directory changes,0.346,git/rebase,21,9.209
git/rebase abort after conflicts found returns to the feature branch,0.34,git/rebase,21,9.209
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.384,git/rebase,21,9.209
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.397,git/rebase,21,9.209
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.403,git/rebase,21,9.209
git/rebase continue after resolving conflicts returns success,0.458,git/rebase,21,9.209
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.483,git/rebase,21,9.209
git/rebase continue after resolving conflicts no longer has working directory changes,0.471,git/rebase,21,9.209
git/rebase continue after resolving conflicts returns to the feature branch,0.48,git/rebase,21,9.209
git/rebase continue after resolving conflicts branch is now a different ref,0.478,git/rebase,21,9.209
git/rebase continue with additional changes unrelated to conflicted files returns success,0.459,git/rebase,21,9.209
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.471,git/rebase,21,9.209
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.472,git/rebase,21,9.209
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.475,git/rebase,21,9.209
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.486,git/rebase,21,9.209
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.464,git/rebase,21,9.209
git/commit createCommit normal commits the given files,0.117,git/commit,21,4.093
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.093
git/commit createCommit normal can commit for empty repository,0.132,git/commit,21,4.093
git/commit createCommit normal can commit renames,0.152,git/commit,21,4.093
git/commit createCommit partials can commit some lines from new file,0.155,git/commit,21,4.093
git/commit createCommit partials can commit second hunk from modified file,0.159,git/commit,21,4.093
git/commit createCommit partials can commit single delete from modified file,0.147,git/commit,21,4.093
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,4.093
git/commit createCommit partials can commit some lines from deleted file,0.16,git/commit,21,4.093
git/commit createCommit partials can commit renames with modifications,0.168,git/commit,21,4.093
git/commit createCommit partials can commit renames with partially selected modifications,0.213,git/commit,21,4.093
git/commit createCommit with a merge conflict creates a merge commit,0.238,git/commit,21,4.093
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.222,git/commit,21,4.093
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.322,git/commit,21,4.093
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.306,git/commit,21,4.093
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.368,git/commit,21,4.093
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.368,git/commit,21,4.093
git/commit createMergeCommit with no changes throws an error,0.087,git/commit,21,4.093
git/commit index corner cases can commit when staged new file is then deleted,0.143,git/commit,21,4.093
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,4.093
git/commit index corner cases file is deleted in index,0.159,git/commit,21,4.093
git/rebase can parse progress returns a value indicating conflicts were encountered,0.447,git/rebase,7,4.015
git/rebase can parse progress status detects REBASE_HEAD,0.451,git/rebase,7,4.015
git/rebase can parse progress is a detached HEAD state,0.449,git/rebase,7,4.015
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.855,git/rebase,7,4.015
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.87,git/rebase,7,4.015
git/rebase can parse progress for long rebase is a detached HEAD state,0.889,git/rebase,7,4.015
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.678
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.253,git/stash,14,2.678
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.21,git/stash,14,2.678
GitStore loadCommitBatch includes HEAD when loading commits,0.316,GitStore,11,2.401
GitStore can discard changes from a repository,0.197,GitStore,11,2.401
GitStore can discard a renamed file,0.147,GitStore,11,2.401
GitStore undo first commit reports the repository is unborn,0.183,GitStore,11,2.401
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.401
GitStore undo first commit clears the undo commit dialog,0.211,GitStore,11,2.401
GitStore undo first commit has no staged files,0.202,GitStore,11,2.401
GitStore repository with HEAD file can discard modified change cleanly,0.112,GitStore,11,2.401
git/status getStatus with conflicted repo parses conflicted files with markers,0.286,git/status,12,1.99
git/status getStatus with conflicted repo parses conflicted files without markers,0.291,git/status,12,1.99
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.512,git/status,12,1.99
git/status getStatus with conflicted repo parses resolved files,0.289,git/status,12,1.99
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.104,git/status,12,1.99
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.124,git/status,12,1.99
git/status getStatus with unconflicted repo parses changed files,0.055,git/status,12,1.99
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.045,git/status,12,1.99
git/status getStatus with unconflicted repo reflects renames,0.095,git/status,12,1.99
git/status getStatus with unconflicted repo reflects copies,0.094,git/status,12,1.99
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.045,git/status,12,1.99
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.108,git/diff,19,1.633
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.057,git/diff,19,1.633
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.633
git/diff getBlobImage retrieves valid images for deleted file,0.057,git/diff,19,1.633
git/diff imageDiff changes for images are set,0.078,git/diff,19,1.633
git/diff imageDiff changes for text are not set,0.066,git/diff,19,1.633
git/diff getWorkingDirectoryDiff counts lines for new file,0.085,git/diff,19,1.633
git/diff getWorkingDirectoryDiff counts lines for modified file,0.07,git/diff,19,1.633
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.633
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.098,git/diff,19,1.633
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.128,git/diff,19,1.633
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.136,git/diff,19,1.633
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.633
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.108,git/diff,19,1.633
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.633
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.062,git/diff,19,1.633
git/diff getBinaryPaths in repo with text only files returns an empty array,0.076,git/diff,19,1.633
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.08,git/diff,19,1.633
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.093,git/diff,19,1.633
BranchPruner does nothing on non GitHub repositories,0.289,BranchPruner,6,1.631
BranchPruner prunes for GitHub repository,0.253,BranchPruner,6,1.631
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.198,BranchPruner,6,1.631
BranchPruner does not prune if there is no default branch,0.214,BranchPruner,6,1.631
BranchPruner does not prune reserved branches,0.259,BranchPruner,6,1.631
git/reflog getRecentBranches returns the recently checked out branches,0.135,git/reflog,6,0.937
git/reflog getRecentBranches works after renaming a branch,0.171,git/reflog,6,0.937
git/reflog getRecentBranches returns a limited number of branches,0.223,git/reflog,6,0.937
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.137,git/reflog,6,0.937
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.169,git/reflog,6,0.937
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.937
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.278,formatPatch,5,0.877
git/checkout can checkout a valid branch name in an existing repository,0.179,git/checkout,6,0.98
git/checkout can checkout a branch when it exists on multiple remotes,0.125,git/checkout,6,0.98
git/checkout will fail when an existing branch matches the remote branch,0.107,git/checkout,6,0.98
git/checkout with submodules cleans up an submodule that no longer exists,0.272,git/checkout,6,0.98
git/checkout with submodules updates a changed submodule reference,0.225,git/checkout,6,0.98
git/submodule listSubmodules returns the submodule entry,0.109,git/submodule,3,0.641
git/submodule listSubmodules returns the expected tag,0.15,git/submodule,3,0.641
git/submodule resetSubmodulePaths update submodule to original commit,0.338,git/submodule,3,0.641
git/rev-parse isGitRepository should return true for a repository,0.051,git/rev-parse,10,0.611
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for default initialized repository,0.047,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns true for initialized bare repository,0.06,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for empty directory,0.04,git/rev-parse,10,0.611
git/rev-parse isBareRepository throws error for missing directory,0.037,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.164,git/rev-parse,10,0.611
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.095,gitignore,9,0.619
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.096,gitignore,9,0.619
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.619
gitignore appendIgnoreRule appends one rule,0.103,gitignore,9,0.619
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.619
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.588
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,10,0.588
git/branch tip returns detached for arbitrary checkout,0.044,git/branch,10,0.588
git/branch tip returns current branch when on a valid HEAD,0.064,git/branch,10,0.588
git/branch tip returns non-origin remote,0.068,git/branch,10,0.588
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.073,git/branch,10,0.588
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.588
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.588
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.043,git/branch,10,0.588
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.588
git/merge merge and is successful returns true,0.039,git/merge,7,0.541
git/merge merge and is a noop returns false,0.047,git/merge,7,0.541
git/merge getMergeBase returns the common ancestor of two branches,0.072,git/merge,7,0.541
git/log getCommits loads history,0.054,git/log,7,0.505
git/log getCommits handles repository with HEAD file on disk,0.084,git/log,7,0.505
git/log getCommits handles repository with signed commit and log.showSignature set,0.084,git/log,7,0.505
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.505
git/log getChangedFiles detects renames,0.077,git/log,7,0.505
git/log getChangedFiles detect copies,0.078,git/log,7,0.505
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.505
git-lfs isUsingLFS returns false for repository not using LFS,0.044,git-lfs,9,0.474
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.474
validatedRepositoryPath returns the path to the repository,0.039,validatedRepositoryPath,2,0.097
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.394
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.394
git/remote findDefaultRemote returns something when origin removed,0.049,git/remote,9,0.394
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.035,patch formatting,8,0.295
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.038,patch formatting,8,0.295
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.036,patch formatting,8,0.295
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.295
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.031,patch formatting,8,0.295
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.295
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.295
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.295
git/config config looks up config values,0.043,git/config,4,0.262
git/config config returns null for undefined values,0.044,git/config,4,0.262
git/config global config getGlobalConfigPath gets the config path,0.053,git/config,4,0.262
git/config global config setGlobalConfigValue will replace all entries for a global value,0.084,git/config,4,0.262
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.219
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.219
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.219
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.219
git/for-each-ref getBranches fetches branches using for-each-ref,0.07,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for empty repo,0.054,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.05,git/for-each-ref,3,0.203
AppStore can select a repository,0.122,AppStore,5,0.176
git/reset reset can hard reset a repository,0.391,git/reset,2,0.44
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.043
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.403,git/rebase,21,9.052
git/rebase detect conflicts status detects REBASE_HEAD,0.3,git/rebase,21,9.052
git/rebase detect conflicts has conflicted files in working directory,0.298,git/rebase,21,9.052
git/rebase detect conflicts is a detached HEAD state,0.319,git/rebase,21,9.052
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.324,git/rebase,21,9.052
git/rebase abort after conflicts found no longer has working directory changes,0.319,git/rebase,21,9.052
git/rebase abort after conflicts found returns to the feature branch,0.35,git/rebase,21,9.052
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.406,git/rebase,21,9.052
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.406,git/rebase,21,9.052
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.384,git/rebase,21,9.052
git/rebase continue after resolving conflicts returns success,0.442,git/rebase,21,9.052
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.479,git/rebase,21,9.052
git/rebase continue after resolving conflicts no longer has working directory changes,0.467,git/rebase,21,9.052
git/rebase continue after resolving conflicts returns to the feature branch,0.469,git/rebase,21,9.052
git/rebase continue after resolving conflicts branch is now a different ref,0.471,git/rebase,21,9.052
git/rebase continue with additional changes unrelated to conflicted files returns success,0.453,git/rebase,21,9.052
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.461,git/rebase,21,9.052
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.458,git/rebase,21,9.052
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.463,git/rebase,21,9.052
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.471,git/rebase,21,9.052
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.447,git/rebase,21,9.052
git/commit createCommit normal commits the given files,0.112,git/commit,21,4.077
git/commit createCommit normal commit does not strip commentary by default,0.094,git/commit,21,4.077
git/commit createCommit normal can commit for empty repository,0.123,git/commit,21,4.077
git/commit createCommit normal can commit renames,0.145,git/commit,21,4.077
git/commit createCommit partials can commit some lines from new file,0.155,git/commit,21,4.077
git/commit createCommit partials can commit second hunk from modified file,0.167,git/commit,21,4.077
git/commit createCommit partials can commit single delete from modified file,0.153,git/commit,21,4.077
git/commit createCommit partials can commit multiple hunks from modified file,0.171,git/commit,21,4.077
git/commit createCommit partials can commit some lines from deleted file,0.164,git/commit,21,4.077
git/commit createCommit partials can commit renames with modifications,0.168,git/commit,21,4.077
git/commit createCommit partials can commit renames with partially selected modifications,0.209,git/commit,21,4.077
git/commit createCommit with a merge conflict creates a merge commit,0.234,git/commit,21,4.077
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.214,git/commit,21,4.077
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.308,git/commit,21,4.077
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.315,git/commit,21,4.077
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.375,git/commit,21,4.077
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.361,git/commit,21,4.077
git/commit createMergeCommit with no changes throws an error,0.089,git/commit,21,4.077
git/commit index corner cases can commit when staged new file is then deleted,0.143,git/commit,21,4.077
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.158,git/commit,21,4.077
git/commit index corner cases file is deleted in index,0.159,git/commit,21,4.077
git/rebase can parse progress returns a value indicating conflicts were encountered,0.457,git/rebase,7,4.007
git/rebase can parse progress status detects REBASE_HEAD,0.442,git/rebase,7,4.007
git/rebase can parse progress is a detached HEAD state,0.454,git/rebase,7,4.007
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.848,git/rebase,7,4.007
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.878,git/rebase,7,4.007
git/rebase can parse progress for long rebase is a detached HEAD state,0.878,git/rebase,7,4.007
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.151,git/stash,14,2.582
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.259,git/stash,14,2.582
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.2,git/stash,14,2.582
GitStore loadCommitBatch includes HEAD when loading commits,0.333,GitStore,11,2.432
GitStore can discard changes from a repository,0.168,GitStore,11,2.432
GitStore can discard a renamed file,0.155,GitStore,11,2.432
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.432
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.432
GitStore undo first commit clears the undo commit dialog,0.216,GitStore,11,2.432
GitStore undo first commit has no staged files,0.203,GitStore,11,2.432
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.432
git/status getStatus with conflicted repo parses conflicted files with markers,0.296,git/status,12,2.014
git/status getStatus with conflicted repo parses conflicted files without markers,0.286,git/status,12,2.014
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.513,git/status,12,2.014
git/status getStatus with conflicted repo parses resolved files,0.304,git/status,12,2.014
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.108,git/status,12,2.014
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.132,git/status,12,2.014
git/status getStatus with unconflicted repo parses changed files,0.053,git/status,12,2.014
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.041,git/status,12,2.014
git/status getStatus with unconflicted repo reflects renames,0.092,git/status,12,2.014
git/status getStatus with unconflicted repo reflects copies,0.088,git/status,12,2.014
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.047,git/status,12,2.014
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.101,git/diff,19,1.579
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.056,git/diff,19,1.579
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.579
git/diff getBlobImage retrieves valid images for deleted file,0.062,git/diff,19,1.579
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.579
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.579
git/diff getWorkingDirectoryDiff counts lines for new file,0.078,git/diff,19,1.579
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.579
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.579
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.089,git/diff,19,1.579
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.125,git/diff,19,1.579
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.126,git/diff,19,1.579
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.106,git/diff,19,1.579
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.109,git/diff,19,1.579
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.579
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.059,git/diff,19,1.579
git/diff getBinaryPaths in repo with text only files returns an empty array,0.064,git/diff,19,1.579
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.083,git/diff,19,1.579
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.093,git/diff,19,1.579
BranchPruner does nothing on non GitHub repositories,0.277,BranchPruner,6,1.604
BranchPruner prunes for GitHub repository,0.25,BranchPruner,6,1.604
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.202,BranchPruner,6,1.604
BranchPruner does not prune if there is no default branch,0.225,BranchPruner,6,1.604
BranchPruner does not prune reserved branches,0.247,BranchPruner,6,1.604
git/checkout can checkout a valid branch name in an existing repository,0.107,git/checkout,6,0.837
git/checkout can checkout a branch when it exists on multiple remotes,0.102,git/checkout,6,0.837
git/checkout will fail when an existing branch matches the remote branch,0.104,git/checkout,6,0.837
git/checkout with submodules cleans up an submodule that no longer exists,0.258,git/checkout,6,0.837
git/checkout with submodules updates a changed submodule reference,0.19,git/checkout,6,0.837
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.938
git/reflog getRecentBranches works after renaming a branch,0.167,git/reflog,6,0.938
git/reflog getRecentBranches returns a limited number of branches,0.228,git/reflog,6,0.938
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.141,git/reflog,6,0.938
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.167,git/reflog,6,0.938
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.058,git/reflog,6,0.938
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.265,formatPatch,5,0.891
git/submodule listSubmodules returns the submodule entry,0.1,git/submodule,3,0.585
git/submodule listSubmodules returns the expected tag,0.15,git/submodule,3,0.585
git/submodule resetSubmodulePaths update submodule to original commit,0.286,git/submodule,3,0.585
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.097,gitignore,9,0.612
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.092,gitignore,9,0.612
gitignore saveGitIgnore applies rule correctly to repository,0.088,gitignore,9,0.612
gitignore appendIgnoreRule appends one rule,0.102,gitignore,9,0.612
gitignore appendIgnoreRule appends multiple rules,0.111,gitignore,9,0.612
git/rev-parse isGitRepository should return true for a repository,0.045,git/rev-parse,10,0.607
git/rev-parse isGitRepository should return false for a directory,0.044,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.607
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.04,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.171,git/rev-parse,10,0.607
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.598
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,10,0.598
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.598
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,10,0.598
git/branch tip returns non-origin remote,0.078,git/branch,10,0.598
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,10,0.598
git/branch getBranchesPointedAt in a local repo finds one branch name,0.041,git/branch,10,0.598
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.598
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.598
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.598
git/merge merge and is successful returns true,0.037,git/merge,7,0.544
git/merge merge and is a noop returns false,0.049,git/merge,7,0.544
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.544
git/log getCommits loads history,0.056,git/log,7,0.513
git/log getCommits handles repository with HEAD file on disk,0.08,git/log,7,0.513
git/log getCommits handles repository with signed commit and log.showSignature set,0.09,git/log,7,0.513
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.513
git/log getChangedFiles detects renames,0.074,git/log,7,0.513
git/log getChangedFiles detect copies,0.079,git/log,7,0.513
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.513
git-lfs isUsingLFS returns false for repository not using LFS,0.044,git-lfs,9,0.488
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.488
git/reset reset can hard reset a repository,0.064,git/reset,2,0.109
git/remote getRemotes should return both remotes,0.044,git/remote,9,0.389
git/remote findDefaultRemote returns origin when multiple remotes found,0.052,git/remote,9,0.389
git/remote findDefaultRemote returns something when origin removed,0.053,git/remote,9,0.389
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.044,patch formatting,8,0.428
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.428
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.428
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.147,patch formatting,8,0.428
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.428
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.031,patch formatting,8,0.428
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.428
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.024,patch formatting,8,0.428
git/config config looks up config values,0.043,git/config,4,0.268
git/config config returns null for undefined values,0.045,git/config,4,0.268
git/config global config getGlobalConfigPath gets the config path,0.053,git/config,4,0.268
git/config global config setGlobalConfigValue will replace all entries for a global value,0.082,git/config,4,0.268
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.228
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.228
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.228
git/core exit code handling throws for exit codes that were not expected,0.049,git/core,4,0.228
git/for-each-ref getBranches fetches branches using for-each-ref,0.064,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for empty repo,0.071,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.213
AppStore can select a repository,0.106,AppStore,5,0.158
validatedRepositoryPath returns the path to the repository,0.389,validatedRepositoryPath,2,0.449
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.046
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.394,git/rebase,21,9.066
git/rebase detect conflicts status detects REBASE_HEAD,0.302,git/rebase,21,9.066
git/rebase detect conflicts has conflicted files in working directory,0.302,git/rebase,21,9.066
git/rebase detect conflicts is a detached HEAD state,0.328,git/rebase,21,9.066
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.315,git/rebase,21,9.066
git/rebase abort after conflicts found no longer has working directory changes,0.328,git/rebase,21,9.066
git/rebase abort after conflicts found returns to the feature branch,0.339,git/rebase,21,9.066
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.391,git/rebase,21,9.066
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.413,git/rebase,21,9.066
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.411,git/rebase,21,9.066
git/rebase continue after resolving conflicts returns success,0.448,git/rebase,21,9.066
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.458,git/rebase,21,9.066
git/rebase continue after resolving conflicts no longer has working directory changes,0.478,git/rebase,21,9.066
git/rebase continue after resolving conflicts returns to the feature branch,0.455,git/rebase,21,9.066
git/rebase continue after resolving conflicts branch is now a different ref,0.466,git/rebase,21,9.066
git/rebase continue with additional changes unrelated to conflicted files returns success,0.452,git/rebase,21,9.066
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.459,git/rebase,21,9.066
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.46,git/rebase,21,9.066
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.5,git/rebase,21,9.066
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.469,git/rebase,21,9.066
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.439,git/rebase,21,9.066
git/commit createCommit normal commits the given files,0.123,git/commit,21,4.07
git/commit createCommit normal commit does not strip commentary by default,0.094,git/commit,21,4.07
git/commit createCommit normal can commit for empty repository,0.126,git/commit,21,4.07
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.07
git/commit createCommit partials can commit some lines from new file,0.149,git/commit,21,4.07
git/commit createCommit partials can commit second hunk from modified file,0.158,git/commit,21,4.07
git/commit createCommit partials can commit single delete from modified file,0.143,git/commit,21,4.07
git/commit createCommit partials can commit multiple hunks from modified file,0.171,git/commit,21,4.07
git/commit createCommit partials can commit some lines from deleted file,0.162,git/commit,21,4.07
git/commit createCommit partials can commit renames with modifications,0.165,git/commit,21,4.07
git/commit createCommit partials can commit renames with partially selected modifications,0.21,git/commit,21,4.07
git/commit createCommit with a merge conflict creates a merge commit,0.237,git/commit,21,4.07
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.214,git/commit,21,4.07
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.32,git/commit,21,4.07
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.305,git/commit,21,4.07
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.369,git/commit,21,4.07
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.372,git/commit,21,4.07
git/commit createMergeCommit with no changes throws an error,0.088,git/commit,21,4.07
git/commit index corner cases can commit when staged new file is then deleted,0.137,git/commit,21,4.07
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,4.07
git/commit index corner cases file is deleted in index,0.157,git/commit,21,4.07
git/rebase can parse progress returns a value indicating conflicts were encountered,0.426,git/rebase,7,4.01
git/rebase can parse progress status detects REBASE_HEAD,0.438,git/rebase,7,4.01
git/rebase can parse progress is a detached HEAD state,0.449,git/rebase,7,4.01
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.861,git/rebase,7,4.01
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.886,git/rebase,7,4.01
git/rebase can parse progress for long rebase is a detached HEAD state,0.9,git/rebase,7,4.01
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.154,git/stash,14,2.633
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.271,git/stash,14,2.633
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.227,git/stash,14,2.633
GitStore loadCommitBatch includes HEAD when loading commits,0.366,GitStore,11,2.485
GitStore can discard changes from a repository,0.199,GitStore,11,2.485
GitStore can discard a renamed file,0.152,GitStore,11,2.485
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.485
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.485
GitStore undo first commit clears the undo commit dialog,0.216,GitStore,11,2.485
GitStore undo first commit has no staged files,0.21,GitStore,11,2.485
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.485
git/status getStatus with conflicted repo parses conflicted files with markers,0.284,git/status,12,2.092
git/status getStatus with conflicted repo parses conflicted files without markers,0.301,git/status,12,2.092
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.525,git/status,12,2.092
git/status getStatus with conflicted repo parses resolved files,0.313,git/status,12,2.092
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.104,git/status,12,2.092
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.125,git/status,12,2.092
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,2.092
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.042,git/status,12,2.092
git/status getStatus with unconflicted repo reflects renames,0.093,git/status,12,2.092
git/status getStatus with unconflicted repo reflects copies,0.15,git/status,12,2.092
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.057,git/status,12,2.092
BranchPruner does nothing on non GitHub repositories,0.188,BranchPruner,6,1.478
BranchPruner prunes for GitHub repository,0.283,BranchPruner,6,1.478
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.203,BranchPruner,6,1.478
BranchPruner does not prune if there is no default branch,0.18,BranchPruner,6,1.478
BranchPruner does not prune reserved branches,0.249,BranchPruner,6,1.478
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.49
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.49
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.49
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.49
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.49
git/diff imageDiff changes for text are not set,0.068,git/diff,19,1.49
git/diff getWorkingDirectoryDiff counts lines for new file,0.062,git/diff,19,1.49
git/diff getWorkingDirectoryDiff counts lines for modified file,0.062,git/diff,19,1.49
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.49
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.092,git/diff,19,1.49
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.13,git/diff,19,1.49
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.131,git/diff,19,1.49
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.11,git/diff,19,1.49
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.11,git/diff,19,1.49
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.49
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.054,git/diff,19,1.49
git/diff getBinaryPaths in repo with text only files returns an empty array,0.062,git/diff,19,1.49
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.071,git/diff,19,1.49
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.49
git/reflog getRecentBranches returns the recently checked out branches,0.136,git/reflog,6,0.985
git/reflog getRecentBranches works after renaming a branch,0.171,git/reflog,6,0.985
git/reflog getRecentBranches returns a limited number of branches,0.233,git/reflog,6,0.985
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.143,git/reflog,6,0.985
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.185,git/reflog,6,0.985
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,0.985
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.254,formatPatch,5,0.894
git/checkout can checkout a valid branch name in an existing repository,0.111,git/checkout,6,0.91
git/checkout can checkout a branch when it exists on multiple remotes,0.124,git/checkout,6,0.91
git/checkout will fail when an existing branch matches the remote branch,0.105,git/checkout,6,0.91
git/checkout with submodules cleans up an submodule that no longer exists,0.267,git/checkout,6,0.91
git/checkout with submodules updates a changed submodule reference,0.231,git/checkout,6,0.91
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.098,gitignore,9,0.612
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.091,gitignore,9,0.612
gitignore saveGitIgnore applies rule correctly to repository,0.089,gitignore,9,0.612
gitignore appendIgnoreRule appends one rule,0.105,gitignore,9,0.612
gitignore appendIgnoreRule appends multiple rules,0.105,gitignore,9,0.612
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.621
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.621
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.621
git/rev-parse isBareRepository returns true for initialized bare repository,0.054,git/rev-parse,10,0.621
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.621
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.621
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.621
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.621
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.053,git/rev-parse,10,0.621
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.169,git/rev-parse,10,0.621
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.607
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.607
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.607
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.607
git/branch tip returns non-origin remote,0.075,git/branch,10,0.607
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,10,0.607
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.607
git/branch getBranchesPointedAt in a local repo finds no branch names,0.043,git/branch,10,0.607
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.607
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.607
git/submodule listSubmodules returns the submodule entry,0.101,git/submodule,3,0.615
git/submodule listSubmodules returns the expected tag,0.16,git/submodule,3,0.615
git/submodule resetSubmodulePaths update submodule to original commit,0.308,git/submodule,3,0.615
git/merge merge and is successful returns true,0.035,git/merge,7,0.557
git/merge merge and is a noop returns false,0.049,git/merge,7,0.557
git/merge getMergeBase returns the common ancestor of two branches,0.069,git/merge,7,0.557
git/log getCommits loads history,0.055,git/log,7,0.525
git/log getCommits handles repository with HEAD file on disk,0.077,git/log,7,0.525
git/log getCommits handles repository with signed commit and log.showSignature set,0.092,git/log,7,0.525
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.525
git/log getChangedFiles detects renames,0.072,git/log,7,0.525
git/log getChangedFiles detect copies,0.092,git/log,7,0.525
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.525
git-lfs isUsingLFS returns false for repository not using LFS,0.044,git-lfs,9,0.496
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.496
validatedRepositoryPath returns the path to the repository,0.045,validatedRepositoryPath,2,0.104
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.304
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.304
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.036,patch formatting,8,0.304
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.045,patch formatting,8,0.304
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.304
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.027,patch formatting,8,0.304
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.304
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.304
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.422
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.422
git/remote findDefaultRemote returns something when origin removed,0.059,git/remote,9,0.422
git/config config looks up config values,0.042,git/config,4,0.277
git/config config returns null for undefined values,0.044,git/config,4,0.277
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.277
git/config global config setGlobalConfigValue will replace all entries for a global value,0.088,git/config,4,0.277
git/core error handling does not throw for errors that were expected,0.043,git/core,4,0.214
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.214
git/core exit code handling does not throw for exit codes that were expected,0.042,git/core,4,0.214
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.214
git/for-each-ref getBranches fetches branches using for-each-ref,0.071,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.213
AppStore can select a repository,0.129,AppStore,5,0.184
git/reset reset can hard reset a repository,0.415,git/reset,2,0.456
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.051
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.392,git/rebase,21,9.081
git/rebase detect conflicts status detects REBASE_HEAD,0.308,git/rebase,21,9.081
git/rebase detect conflicts has conflicted files in working directory,0.298,git/rebase,21,9.081
git/rebase detect conflicts is a detached HEAD state,0.317,git/rebase,21,9.081
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.34,git/rebase,21,9.081
git/rebase abort after conflicts found no longer has working directory changes,0.353,git/rebase,21,9.081
git/rebase abort after conflicts found returns to the feature branch,0.355,git/rebase,21,9.081
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.407,git/rebase,21,9.081
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.412,git/rebase,21,9.081
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.388,git/rebase,21,9.081
git/rebase continue after resolving conflicts returns success,0.443,git/rebase,21,9.081
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.448,git/rebase,21,9.081
git/rebase continue after resolving conflicts no longer has working directory changes,0.459,git/rebase,21,9.081
git/rebase continue after resolving conflicts returns to the feature branch,0.454,git/rebase,21,9.081
git/rebase continue after resolving conflicts branch is now a different ref,0.461,git/rebase,21,9.081
git/rebase continue with additional changes unrelated to conflicted files returns success,0.474,git/rebase,21,9.081
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.471,git/rebase,21,9.081
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.461,git/rebase,21,9.081
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.486,git/rebase,21,9.081
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.462,git/rebase,21,9.081
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.43,git/rebase,21,9.081
git/commit createCommit normal commits the given files,0.117,git/commit,21,4.123
git/commit createCommit normal commit does not strip commentary by default,0.111,git/commit,21,4.123
git/commit createCommit normal can commit for empty repository,0.131,git/commit,21,4.123
git/commit createCommit normal can commit renames,0.147,git/commit,21,4.123
git/commit createCommit partials can commit some lines from new file,0.163,git/commit,21,4.123
git/commit createCommit partials can commit second hunk from modified file,0.164,git/commit,21,4.123
git/commit createCommit partials can commit single delete from modified file,0.15,git/commit,21,4.123
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,4.123
git/commit createCommit partials can commit some lines from deleted file,0.157,git/commit,21,4.123
git/commit createCommit partials can commit renames with modifications,0.167,git/commit,21,4.123
git/commit createCommit partials can commit renames with partially selected modifications,0.199,git/commit,21,4.123
git/commit createCommit with a merge conflict creates a merge commit,0.248,git/commit,21,4.123
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.216,git/commit,21,4.123
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.316,git/commit,21,4.123
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.309,git/commit,21,4.123
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.371,git/commit,21,4.123
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.383,git/commit,21,4.123
git/commit createMergeCommit with no changes throws an error,0.097,git/commit,21,4.123
git/commit index corner cases can commit when staged new file is then deleted,0.136,git/commit,21,4.123
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.159,git/commit,21,4.123
git/commit index corner cases file is deleted in index,0.157,git/commit,21,4.123
git/rebase can parse progress returns a value indicating conflicts were encountered,0.438,git/rebase,7,4.024
git/rebase can parse progress status detects REBASE_HEAD,0.472,git/rebase,7,4.024
git/rebase can parse progress is a detached HEAD state,0.445,git/rebase,7,4.024
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.871,git/rebase,7,4.024
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.856,git/rebase,7,4.024
git/rebase can parse progress for long rebase is a detached HEAD state,0.891,git/rebase,7,4.024
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.52
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.235,git/stash,14,2.52
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.211,git/stash,14,2.52
GitStore loadCommitBatch includes HEAD when loading commits,0.344,GitStore,11,2.494
GitStore can discard changes from a repository,0.2,GitStore,11,2.494
GitStore can discard a renamed file,0.161,GitStore,11,2.494
GitStore undo first commit reports the repository is unborn,0.188,GitStore,11,2.494
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.494
GitStore undo first commit clears the undo commit dialog,0.218,GitStore,11,2.494
GitStore undo first commit has no staged files,0.202,GitStore,11,2.494
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.494
git/status getStatus with conflicted repo parses conflicted files with markers,0.286,git/status,12,2.013
git/status getStatus with conflicted repo parses conflicted files without markers,0.291,git/status,12,2.013
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.469,git/status,12,2.013
git/status getStatus with conflicted repo parses resolved files,0.311,git/status,12,2.013
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.088,git/status,12,2.013
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.139,git/status,12,2.013
git/status getStatus with unconflicted repo parses changed files,0.107,git/status,12,2.013
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.052,git/status,12,2.013
git/status getStatus with unconflicted repo reflects renames,0.095,git/status,12,2.013
git/status getStatus with unconflicted repo reflects copies,0.086,git/status,12,2.013
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.037,git/status,12,2.013
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.123,git/diff,19,1.594
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.056,git/diff,19,1.594
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.594
git/diff getBlobImage retrieves valid images for deleted file,0.059,git/diff,19,1.594
git/diff imageDiff changes for images are set,0.073,git/diff,19,1.594
git/diff imageDiff changes for text are not set,0.073,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for new file,0.077,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for modified file,0.069,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.594
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.093,git/diff,19,1.594
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.12,git/diff,19,1.594
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.134,git/diff,19,1.594
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.108,git/diff,19,1.594
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.112,git/diff,19,1.594
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.594
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.049,git/diff,19,1.594
git/diff getBinaryPaths in repo with text only files returns an empty array,0.062,git/diff,19,1.594
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.072,git/diff,19,1.594
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.089,git/diff,19,1.594
BranchPruner does nothing on non GitHub repositories,0.204,BranchPruner,6,1.507
BranchPruner prunes for GitHub repository,0.254,BranchPruner,6,1.507
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.197,BranchPruner,6,1.507
BranchPruner does not prune if there is no default branch,0.187,BranchPruner,6,1.507
BranchPruner does not prune reserved branches,0.248,BranchPruner,6,1.507
git/reflog getRecentBranches returns the recently checked out branches,0.187,git/reflog,6,1.022
git/reflog getRecentBranches works after renaming a branch,0.192,git/reflog,6,1.022
git/reflog getRecentBranches returns a limited number of branches,0.227,git/reflog,6,1.022
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.143,git/reflog,6,1.022
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.169,git/reflog,6,1.022
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.058,git/reflog,6,1.022
git/checkout can checkout a valid branch name in an existing repository,0.111,git/checkout,6,0.83
git/checkout can checkout a branch when it exists on multiple remotes,0.106,git/checkout,6,0.83
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.83
git/checkout with submodules cleans up an submodule that no longer exists,0.238,git/checkout,6,0.83
git/checkout with submodules updates a changed submodule reference,0.197,git/checkout,6,0.83
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.259,formatPatch,5,0.862
git/rev-parse isGitRepository should return true for a repository,0.036,git/rev-parse,10,0.593
git/rev-parse isGitRepository should return false for a directory,0.046,git/rev-parse,10,0.593
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.593
git/rev-parse isBareRepository returns true for initialized bare repository,0.05,git/rev-parse,10,0.593
git/rev-parse isBareRepository returns false for empty directory,0.039,git/rev-parse,10,0.593
git/rev-parse isBareRepository throws error for missing directory,0.038,git/rev-parse,10,0.593
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.048,git/rev-parse,10,0.593
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.038,git/rev-parse,10,0.593
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.051,git/rev-parse,10,0.593
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.161,git/rev-parse,10,0.593
git/submodule listSubmodules returns the submodule entry,0.102,git/submodule,3,0.579
git/submodule listSubmodules returns the expected tag,0.14,git/submodule,3,0.579
git/submodule resetSubmodulePaths update submodule to original commit,0.294,git/submodule,3,0.579
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.094,gitignore,9,0.596
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.088,gitignore,9,0.596
gitignore saveGitIgnore applies rule correctly to repository,0.094,gitignore,9,0.596
gitignore appendIgnoreRule appends one rule,0.099,gitignore,9,0.596
gitignore appendIgnoreRule appends multiple rules,0.102,gitignore,9,0.596
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.579
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,10,0.579
git/branch tip returns detached for arbitrary checkout,0.042,git/branch,10,0.579
git/branch tip returns current branch when on a valid HEAD,0.063,git/branch,10,0.579
git/branch tip returns non-origin remote,0.071,git/branch,10,0.579
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,10,0.579
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.579
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.579
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.579
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.579
git/merge merge and is successful returns true,0.036,git/merge,7,0.518
git/merge merge and is a noop returns false,0.051,git/merge,7,0.518
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.518
git/log getCommits loads history,0.057,git/log,7,0.517
git/log getCommits handles repository with HEAD file on disk,0.081,git/log,7,0.517
git/log getCommits handles repository with signed commit and log.showSignature set,0.09,git/log,7,0.517
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.517
git/log getChangedFiles detects renames,0.073,git/log,7,0.517
git/log getChangedFiles detect copies,0.081,git/log,7,0.517
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.517
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.484
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.484
git/reset reset can hard reset a repository,0.16,git/reset,2,0.204
git/remote getRemotes should return both remotes,0.062,git/remote,9,0.422
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.422
git/remote findDefaultRemote returns something when origin removed,0.06,git/remote,9,0.422
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.05,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.026,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile includes empty context lines,0.026,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.322
git/config config looks up config values,0.041,git/config,4,0.27
git/config config returns null for undefined values,0.045,git/config,4,0.27
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.27
git/config global config setGlobalConfigValue will replace all entries for a global value,0.082,git/config,4,0.27
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.221
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.221
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.221
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.221
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.043,git/for-each-ref,3,0.199
AppStore can select a repository,0.121,AppStore,5,0.176
validatedRepositoryPath returns the path to the repository,0.305,validatedRepositoryPath,2,0.363
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.02,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.397,git/rebase,21,9.157
git/rebase detect conflicts status detects REBASE_HEAD,0.309,git/rebase,21,9.157
git/rebase detect conflicts has conflicted files in working directory,0.307,git/rebase,21,9.157
git/rebase detect conflicts is a detached HEAD state,0.34,git/rebase,21,9.157
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.33,git/rebase,21,9.157
git/rebase abort after conflicts found no longer has working directory changes,0.354,git/rebase,21,9.157
git/rebase abort after conflicts found returns to the feature branch,0.351,git/rebase,21,9.157
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.386,git/rebase,21,9.157
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.415,git/rebase,21,9.157
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.403,git/rebase,21,9.157
git/rebase continue after resolving conflicts returns success,0.445,git/rebase,21,9.157
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.461,git/rebase,21,9.157
git/rebase continue after resolving conflicts no longer has working directory changes,0.475,git/rebase,21,9.157
git/rebase continue after resolving conflicts returns to the feature branch,0.472,git/rebase,21,9.157
git/rebase continue after resolving conflicts branch is now a different ref,0.469,git/rebase,21,9.157
git/rebase continue with additional changes unrelated to conflicted files returns success,0.46,git/rebase,21,9.157
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.457,git/rebase,21,9.157
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.468,git/rebase,21,9.157
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.483,git/rebase,21,9.157
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.489,git/rebase,21,9.157
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.429,git/rebase,21,9.157
git/commit createCommit normal commits the given files,0.114,git/commit,21,4.15
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,4.15
git/commit createCommit normal can commit for empty repository,0.13,git/commit,21,4.15
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.15
git/commit createCommit partials can commit some lines from new file,0.165,git/commit,21,4.15
git/commit createCommit partials can commit second hunk from modified file,0.168,git/commit,21,4.15
git/commit createCommit partials can commit single delete from modified file,0.15,git/commit,21,4.15
git/commit createCommit partials can commit multiple hunks from modified file,0.172,git/commit,21,4.15
git/commit createCommit partials can commit some lines from deleted file,0.151,git/commit,21,4.15
git/commit createCommit partials can commit renames with modifications,0.162,git/commit,21,4.15
git/commit createCommit partials can commit renames with partially selected modifications,0.214,git/commit,21,4.15
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.15
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.226,git/commit,21,4.15
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.317,git/commit,21,4.15
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.32,git/commit,21,4.15
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.373,git/commit,21,4.15
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.377,git/commit,21,4.15
git/commit createMergeCommit with no changes throws an error,0.09,git/commit,21,4.15
git/commit index corner cases can commit when staged new file is then deleted,0.14,git/commit,21,4.15
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.158,git/commit,21,4.15
git/commit index corner cases file is deleted in index,0.153,git/commit,21,4.15
git/rebase can parse progress returns a value indicating conflicts were encountered,0.455,git/rebase,7,4.073
git/rebase can parse progress status detects REBASE_HEAD,0.446,git/rebase,7,4.073
git/rebase can parse progress is a detached HEAD state,0.467,git/rebase,7,4.073
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.83,git/rebase,7,4.073
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.876,git/rebase,7,4.073
git/rebase can parse progress for long rebase is a detached HEAD state,0.949,git/rebase,7,4.073
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.168,git/stash,14,2.562
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.245,git/stash,14,2.562
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.193,git/stash,14,2.562
GitStore loadCommitBatch includes HEAD when loading commits,0.33,GitStore,11,2.453
GitStore can discard changes from a repository,0.167,GitStore,11,2.453
GitStore can discard a renamed file,0.147,GitStore,11,2.453
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.453
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.453
GitStore undo first commit clears the undo commit dialog,0.221,GitStore,11,2.453
GitStore undo first commit has no staged files,0.202,GitStore,11,2.453
GitStore repository with HEAD file can discard modified change cleanly,0.123,GitStore,11,2.453
git/status getStatus with conflicted repo parses conflicted files with markers,0.36,git/status,12,2.385
git/status getStatus with conflicted repo parses conflicted files without markers,0.277,git/status,12,2.385
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.639,git/status,12,2.385
git/status getStatus with conflicted repo parses resolved files,0.369,git/status,12,2.385
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.143,git/status,12,2.385
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.128,git/status,12,2.385
git/status getStatus with unconflicted repo parses changed files,0.052,git/status,12,2.385
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.048,git/status,12,2.385
git/status getStatus with unconflicted repo reflects renames,0.097,git/status,12,2.385
git/status getStatus with unconflicted repo reflects copies,0.096,git/status,12,2.385
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.119,git/status,12,2.385
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.071,git/diff,19,1.828
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.828
git/diff getBlobImage retrieves valid image for modified file,0.105,git/diff,19,1.828
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,1.828
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.828
git/diff imageDiff changes for text are not set,0.064,git/diff,19,1.828
git/diff getWorkingDirectoryDiff counts lines for new file,0.062,git/diff,19,1.828
git/diff getWorkingDirectoryDiff counts lines for modified file,0.061,git/diff,19,1.828
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.828
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.098,git/diff,19,1.828
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.129,git/diff,19,1.828
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.141,git/diff,19,1.828
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.828
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.828
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.828
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.059,git/diff,19,1.828
git/diff getBinaryPaths in repo with text only files returns an empty array,0.105,git/diff,19,1.828
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.126,git/diff,19,1.828
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.145,git/diff,19,1.828
BranchPruner does nothing on non GitHub repositories,0.238,BranchPruner,6,1.622
BranchPruner prunes for GitHub repository,0.267,BranchPruner,6,1.622
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.213,BranchPruner,6,1.622
BranchPruner does not prune if there is no default branch,0.201,BranchPruner,6,1.622
BranchPruner does not prune reserved branches,0.255,BranchPruner,6,1.622
git/reflog getRecentBranches returns the recently checked out branches,0.186,git/reflog,6,1.096
git/reflog getRecentBranches works after renaming a branch,0.227,git/reflog,6,1.096
git/reflog getRecentBranches returns a limited number of branches,0.235,git/reflog,6,1.096
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.147,git/reflog,6,1.096
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.182,git/reflog,6,1.096
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.056,git/reflog,6,1.096
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.267,formatPatch,5,0.925
git/checkout can checkout a valid branch name in an existing repository,0.116,git/checkout,6,0.878
git/checkout can checkout a branch when it exists on multiple remotes,0.111,git/checkout,6,0.878
git/checkout will fail when an existing branch matches the remote branch,0.106,git/checkout,6,0.878
git/checkout with submodules cleans up an submodule that no longer exists,0.254,git/checkout,6,0.878
git/checkout with submodules updates a changed submodule reference,0.221,git/checkout,6,0.878
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.1,gitignore,9,0.628
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.094,gitignore,9,0.628
gitignore saveGitIgnore applies rule correctly to repository,0.093,gitignore,9,0.628
gitignore appendIgnoreRule appends one rule,0.105,gitignore,9,0.628
gitignore appendIgnoreRule appends multiple rules,0.108,gitignore,9,0.628
git/rev-parse isGitRepository should return true for a repository,0.077,git/rev-parse,10,0.915
git/rev-parse isGitRepository should return false for a directory,0.046,git/rev-parse,10,0.915
git/rev-parse isBareRepository returns false for default initialized repository,0.066,git/rev-parse,10,0.915
git/rev-parse isBareRepository returns true for initialized bare repository,0.073,git/rev-parse,10,0.915
git/rev-parse isBareRepository returns false for empty directory,0.074,git/rev-parse,10,0.915
git/rev-parse isBareRepository throws error for missing directory,0.068,git/rev-parse,10,0.915
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.104,git/rev-parse,10,0.915
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.062,git/rev-parse,10,0.915
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.082,git/rev-parse,10,0.915
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.23,git/rev-parse,10,0.915
git/submodule listSubmodules returns the submodule entry,0.153,git/submodule,3,0.828
git/submodule listSubmodules returns the expected tag,0.212,git/submodule,3,0.828
git/submodule resetSubmodulePaths update submodule to original commit,0.395,git/submodule,3,0.828
git/branch tip returns unborn for new repository,0.046,git/branch,10,0.876
git/branch tip returns correct ref if checkout occurs,0.066,git/branch,10,0.876
git/branch tip returns detached for arbitrary checkout,0.067,git/branch,10,0.876
git/branch tip returns current branch when on a valid HEAD,0.102,git/branch,10,0.876
git/branch tip returns non-origin remote,0.099,git/branch,10,0.876
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.105,git/branch,10,0.876
git/branch getBranchesPointedAt in a local repo finds one branch name,0.069,git/branch,10,0.876
git/branch getBranchesPointedAt in a local repo finds no branch names,0.067,git/branch,10,0.876
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.067,git/branch,10,0.876
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.116,git/branch,10,0.876
git/merge merge and is successful returns true,0.047,git/merge,7,0.72
git/merge merge and is a noop returns false,0.072,git/merge,7,0.72
git/merge getMergeBase returns the common ancestor of two branches,0.074,git/merge,7,0.72
git/log getCommits loads history,0.073,git/log,7,0.687
git/log getCommits handles repository with HEAD file on disk,0.095,git/log,7,0.687
git/log getCommits handles repository with signed commit and log.showSignature set,0.11,git/log,7,0.687
git/log getChangedFiles loads the files changed in the commit,0.066,git/log,7,0.687
git/log getChangedFiles detects renames,0.104,git/log,7,0.687
git/log getChangedFiles detect copies,0.116,git/log,7,0.687
git/log getChangedFiles handles commit when HEAD exists on disk,0.061,git/log,7,0.687
git-lfs isUsingLFS returns false for repository not using LFS,0.16,git-lfs,9,0.659
git-lfs isUsingLFS returns true if LFS is tracking a path,0.076,git-lfs,9,0.659
git/remote getRemotes should return both remotes,0.055,git/remote,9,0.422
git/remote findDefaultRemote returns origin when multiple remotes found,0.054,git/remote,9,0.422
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.422
validatedRepositoryPath returns the path to the repository,0.043,validatedRepositoryPath,2,0.101
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.026,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.3
git/config config looks up config values,0.043,git/config,4,0.271
git/config config returns null for undefined values,0.043,git/config,4,0.271
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.271
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,4,0.271
git/core error handling does not throw for errors that were expected,0.046,git/core,4,0.222
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.222
git/core exit code handling does not throw for exit codes that were expected,0.041,git/core,4,0.222
git/core exit code handling throws for exit codes that were not expected,0.042,git/core,4,0.222
git/reset reset can hard reset a repository,0.064,git/reset,2,0.109
git/for-each-ref getBranches fetches branches using for-each-ref,0.062,git/for-each-ref,3,0.212
git/for-each-ref getBranches should return empty list for empty repo,0.063,git/for-each-ref,3,0.212
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.054,git/for-each-ref,3,0.212
AppStore can select a repository,0.122,AppStore,5,0.174
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.194,git/git-attributes,1,0.224
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.395,git/rebase,21,10.076
git/rebase detect conflicts status detects REBASE_HEAD,0.317,git/rebase,21,10.076
git/rebase detect conflicts has conflicted files in working directory,0.323,git/rebase,21,10.076
git/rebase detect conflicts is a detached HEAD state,0.33,git/rebase,21,10.076
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.32,git/rebase,21,10.076
git/rebase abort after conflicts found no longer has working directory changes,0.335,git/rebase,21,10.076
git/rebase abort after conflicts found returns to the feature branch,0.358,git/rebase,21,10.076
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.406,git/rebase,21,10.076
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.416,git/rebase,21,10.076
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.407,git/rebase,21,10.076
git/rebase continue after resolving conflicts returns success,0.502,git/rebase,21,10.076
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.485,git/rebase,21,10.076
git/rebase continue after resolving conflicts no longer has working directory changes,0.511,git/rebase,21,10.076
git/rebase continue after resolving conflicts returns to the feature branch,0.488,git/rebase,21,10.076
git/rebase continue after resolving conflicts branch is now a different ref,0.601,git/rebase,21,10.076
git/rebase continue with additional changes unrelated to conflicted files returns success,0.638,git/rebase,21,10.076
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.606,git/rebase,21,10.076
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.494,git/rebase,21,10.076
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.623,git/rebase,21,10.076
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.574,git/rebase,21,10.076
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.467,git/rebase,21,10.076
git/commit createCommit normal commits the given files,0.119,git/commit,21,5.67
git/commit createCommit normal commit does not strip commentary by default,0.103,git/commit,21,5.67
git/commit createCommit normal can commit for empty repository,0.156,git/commit,21,5.67
git/commit createCommit normal can commit renames,0.223,git/commit,21,5.67
git/commit createCommit partials can commit some lines from new file,0.201,git/commit,21,5.67
git/commit createCommit partials can commit second hunk from modified file,0.258,git/commit,21,5.67
git/commit createCommit partials can commit single delete from modified file,0.247,git/commit,21,5.67
git/commit createCommit partials can commit multiple hunks from modified file,0.253,git/commit,21,5.67
git/commit createCommit partials can commit some lines from deleted file,0.24,git/commit,21,5.67
git/commit createCommit partials can commit renames with modifications,0.253,git/commit,21,5.67
git/commit createCommit partials can commit renames with partially selected modifications,0.31,git/commit,21,5.67
git/commit createCommit with a merge conflict creates a merge commit,0.341,git/commit,21,5.67
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.303,git/commit,21,5.67
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.429,git/commit,21,5.67
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.415,git/commit,21,5.67
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.485,git/commit,21,5.67
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.488,git/commit,21,5.67
git/commit createMergeCommit with no changes throws an error,0.103,git/commit,21,5.67
git/commit index corner cases can commit when staged new file is then deleted,0.188,git/commit,21,5.67
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.255,git/commit,21,5.67
git/commit index corner cases file is deleted in index,0.239,git/commit,21,5.67
git/rebase can parse progress returns a value indicating conflicts were encountered,0.599,git/rebase,7,5.481
git/rebase can parse progress status detects REBASE_HEAD,0.598,git/rebase,7,5.481
git/rebase can parse progress is a detached HEAD state,0.6,git/rebase,7,5.481
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.23,git/rebase,7,5.481
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.163,git/rebase,7,5.481
git/rebase can parse progress for long rebase is a detached HEAD state,1.227,git/rebase,7,5.481
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.226,git/stash,14,3.192
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.319,git/stash,14,3.192
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.259,git/stash,14,3.192
GitStore loadCommitBatch includes HEAD when loading commits,0.388,GitStore,11,2.957
GitStore can discard changes from a repository,0.219,GitStore,11,2.957
GitStore can discard a renamed file,0.173,GitStore,11,2.957
GitStore undo first commit reports the repository is unborn,0.235,GitStore,11,2.957
GitStore undo first commit pre-fills the commit message,0.152,GitStore,11,2.957
GitStore undo first commit clears the undo commit dialog,0.255,GitStore,11,2.957
GitStore undo first commit has no staged files,0.242,GitStore,11,2.957
GitStore repository with HEAD file can discard modified change cleanly,0.15,GitStore,11,2.957
git/status getStatus with conflicted repo parses conflicted files with markers,0.352,git/status,12,2.496
git/status getStatus with conflicted repo parses conflicted files without markers,0.356,git/status,12,2.496
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.586,git/status,12,2.496
git/status getStatus with conflicted repo parses resolved files,0.377,git/status,12,2.496
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.126,git/status,12,2.496
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.212,git/status,12,2.496
git/status getStatus with unconflicted repo parses changed files,0.09,git/status,12,2.496
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.059,git/status,12,2.496
git/status getStatus with unconflicted repo reflects renames,0.109,git/status,12,2.496
git/status getStatus with unconflicted repo reflects copies,0.109,git/status,12,2.496
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.496
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.049,git/diff,19,1.901
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.901
git/diff getBlobImage retrieves valid image for modified file,0.044,git/diff,19,1.901
git/diff getBlobImage retrieves valid images for deleted file,0.07,git/diff,19,1.901
git/diff imageDiff changes for images are set,0.092,git/diff,19,1.901
git/diff imageDiff changes for text are not set,0.086,git/diff,19,1.901
git/diff getWorkingDirectoryDiff counts lines for new file,0.084,git/diff,19,1.901
git/diff getWorkingDirectoryDiff counts lines for modified file,0.083,git/diff,19,1.901
git/diff getWorkingDirectoryDiff counts lines for staged file,0.096,git/diff,19,1.901
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.115,git/diff,19,1.901
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.152,git/diff,19,1.901
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.168,git/diff,19,1.901
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.141,git/diff,19,1.901
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.137,git/diff,19,1.901
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.091,git/diff,19,1.901
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.067,git/diff,19,1.901
git/diff getBinaryPaths in repo with text only files returns an empty array,0.095,git/diff,19,1.901
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.103,git/diff,19,1.901
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.121,git/diff,19,1.901
BranchPruner does nothing on non GitHub repositories,0.358,BranchPruner,6,2.078
BranchPruner prunes for GitHub repository,0.341,BranchPruner,6,2.078
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.251,BranchPruner,6,2.078
BranchPruner does not prune if there is no default branch,0.275,BranchPruner,6,2.078
BranchPruner does not prune reserved branches,0.328,BranchPruner,6,2.078
git/reflog getRecentBranches returns the recently checked out branches,0.17,git/reflog,6,1.176
git/reflog getRecentBranches works after renaming a branch,0.206,git/reflog,6,1.176
git/reflog getRecentBranches returns a limited number of branches,0.293,git/reflog,6,1.176
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.166,git/reflog,6,1.176
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.21,git/reflog,6,1.176
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.068,git/reflog,6,1.176
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.358,formatPatch,5,1.118
git/rev-parse isGitRepository should return true for a repository,0.135,git/rev-parse,10,0.878
git/rev-parse isGitRepository should return false for a directory,0.077,git/rev-parse,10,0.878
git/rev-parse isBareRepository returns false for default initialized repository,0.065,git/rev-parse,10,0.878
git/rev-parse isBareRepository returns true for initialized bare repository,0.061,git/rev-parse,10,0.878
git/rev-parse isBareRepository returns false for empty directory,0.052,git/rev-parse,10,0.878
git/rev-parse isBareRepository throws error for missing directory,0.053,git/rev-parse,10,0.878
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.062,git/rev-parse,10,0.878
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.048,git/rev-parse,10,0.878
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.072,git/rev-parse,10,0.878
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.213,git/rev-parse,10,0.878
git/checkout can checkout a valid branch name in an existing repository,0.13,git/checkout,6,1.041
git/checkout can checkout a branch when it exists on multiple remotes,0.143,git/checkout,6,1.041
git/checkout will fail when an existing branch matches the remote branch,0.133,git/checkout,6,1.041
git/checkout with submodules cleans up an submodule that no longer exists,0.283,git/checkout,6,1.041
git/checkout with submodules updates a changed submodule reference,0.254,git/checkout,6,1.041
git/branch tip returns unborn for new repository,0.035,git/branch,10,0.748
git/branch tip returns correct ref if checkout occurs,0.052,git/branch,10,0.748
git/branch tip returns detached for arbitrary checkout,0.065,git/branch,10,0.748
git/branch tip returns current branch when on a valid HEAD,0.091,git/branch,10,0.748
git/branch tip returns non-origin remote,0.091,git/branch,10,0.748
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.104,git/branch,10,0.748
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.748
git/branch getBranchesPointedAt in a local repo finds no branch names,0.058,git/branch,10,0.748
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.048,git/branch,10,0.748
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.095,git/branch,10,0.748
git/submodule listSubmodules returns the submodule entry,0.132,git/submodule,3,0.707
git/submodule listSubmodules returns the expected tag,0.178,git/submodule,3,0.707
git/submodule resetSubmodulePaths update submodule to original commit,0.337,git/submodule,3,0.707
git/merge merge and is successful returns true,0.044,git/merge,7,0.626
git/merge merge and is a noop returns false,0.061,git/merge,7,0.626
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.626
git/log getCommits loads history,0.064,git/log,7,0.66
git/log getCommits handles repository with HEAD file on disk,0.097,git/log,7,0.66
git/log getCommits handles repository with signed commit and log.showSignature set,0.133,git/log,7,0.66
git/log getChangedFiles loads the files changed in the commit,0.064,git/log,7,0.66
git/log getChangedFiles detects renames,0.093,git/log,7,0.66
git/log getChangedFiles detect copies,0.101,git/log,7,0.66
git/log getChangedFiles handles commit when HEAD exists on disk,0.05,git/log,7,0.66
git-lfs isUsingLFS returns false for repository not using LFS,0.061,git-lfs,9,0.58
git-lfs isUsingLFS returns true if LFS is tracking a path,0.086,git-lfs,9,0.58
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.123,gitignore,9,0.816
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.126,gitignore,9,0.816
gitignore saveGitIgnore applies rule correctly to repository,0.115,gitignore,9,0.816
gitignore appendIgnoreRule appends one rule,0.15,gitignore,9,0.816
gitignore appendIgnoreRule appends multiple rules,0.14,gitignore,9,0.816
git/remote getRemotes should return both remotes,0.052,git/remote,9,0.473
git/remote findDefaultRemote returns origin when multiple remotes found,0.064,git/remote,9,0.473
git/remote findDefaultRemote returns something when origin removed,0.068,git/remote,9,0.473
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.048,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.052,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.052,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.053,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.036,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.031,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile includes empty context lines,0.031,patch formatting,8,0.381
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.381
git/config config looks up config values,0.052,git/config,4,0.338
git/config config returns null for undefined values,0.052,git/config,4,0.338
git/config global config getGlobalConfigPath gets the config path,0.068,git/config,4,0.338
git/config global config setGlobalConfigValue will replace all entries for a global value,0.107,git/config,4,0.338
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.061
git/core error handling does not throw for errors that were expected,0.081,git/core,4,0.318
git/core error handling throws for errors that were not expected,0.066,git/core,4,0.318
git/core exit code handling does not throw for exit codes that were expected,0.057,git/core,4,0.318
git/core exit code handling throws for exit codes that were not expected,0.051,git/core,4,0.318
git/for-each-ref getBranches fetches branches using for-each-ref,0.081,git/for-each-ref,3,0.26
git/for-each-ref getBranches should return empty list for empty repo,0.075,git/for-each-ref,3,0.26
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.06,git/for-each-ref,3,0.26
AppStore can select a repository,0.144,AppStore,5,0.212
git/reset reset can hard reset a repository,0.447,git/reset,2,0.506
validatedRepositoryPath returns the path to the repository,0.058,validatedRepositoryPath,2,0.131
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.556,git/rebase,21,12.318
git/rebase detect conflicts status detects REBASE_HEAD,0.442,git/rebase,21,12.318
git/rebase detect conflicts has conflicted files in working directory,0.436,git/rebase,21,12.318
git/rebase detect conflicts is a detached HEAD state,0.468,git/rebase,21,12.318
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.506,git/rebase,21,12.318
git/rebase abort after conflicts found no longer has working directory changes,0.471,git/rebase,21,12.318
git/rebase abort after conflicts found returns to the feature branch,0.475,git/rebase,21,12.318
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.537,git/rebase,21,12.318
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.542,git/rebase,21,12.318
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.527,git/rebase,21,12.318
git/rebase continue after resolving conflicts returns success,0.608,git/rebase,21,12.318
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.607,git/rebase,21,12.318
git/rebase continue after resolving conflicts no longer has working directory changes,0.629,git/rebase,21,12.318
git/rebase continue after resolving conflicts returns to the feature branch,0.619,git/rebase,21,12.318
git/rebase continue after resolving conflicts branch is now a different ref,0.626,git/rebase,21,12.318
git/rebase continue with additional changes unrelated to conflicted files returns success,0.622,git/rebase,21,12.318
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.629,git/rebase,21,12.318
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.604,git/rebase,21,12.318
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.617,git/rebase,21,12.318
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.618,git/rebase,21,12.318
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.597,git/rebase,21,12.318
git/commit createCommit normal commits the given files,0.139,git/commit,21,5.254
git/commit createCommit normal commit does not strip commentary by default,0.124,git/commit,21,5.254
git/commit createCommit normal can commit for empty repository,0.167,git/commit,21,5.254
git/commit createCommit normal can commit renames,0.187,git/commit,21,5.254
git/commit createCommit partials can commit some lines from new file,0.193,git/commit,21,5.254
git/commit createCommit partials can commit second hunk from modified file,0.219,git/commit,21,5.254
git/commit createCommit partials can commit single delete from modified file,0.188,git/commit,21,5.254
git/commit createCommit partials can commit multiple hunks from modified file,0.222,git/commit,21,5.254
git/commit createCommit partials can commit some lines from deleted file,0.203,git/commit,21,5.254
git/commit createCommit partials can commit renames with modifications,0.205,git/commit,21,5.254
git/commit createCommit partials can commit renames with partially selected modifications,0.262,git/commit,21,5.254
git/commit createCommit with a merge conflict creates a merge commit,0.322,git/commit,21,5.254
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.287,git/commit,21,5.254
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.407,git/commit,21,5.254
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.392,git/commit,21,5.254
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.479,git/commit,21,5.254
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.484,git/commit,21,5.254
git/commit createMergeCommit with no changes throws an error,0.1,git/commit,21,5.254
git/commit index corner cases can commit when staged new file is then deleted,0.174,git/commit,21,5.254
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.209,git/commit,21,5.254
git/commit index corner cases file is deleted in index,0.216,git/commit,21,5.254
git/rebase can parse progress returns a value indicating conflicts were encountered,0.531,git/rebase,7,4.865
git/rebase can parse progress status detects REBASE_HEAD,0.556,git/rebase,7,4.865
git/rebase can parse progress is a detached HEAD state,0.552,git/rebase,7,4.865
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.047,git/rebase,7,4.865
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.045,git/rebase,7,4.865
git/rebase can parse progress for long rebase is a detached HEAD state,1.066,git/rebase,7,4.865
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.197,git/stash,14,2.988
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.301,git/stash,14,2.988
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.239,git/stash,14,2.988
GitStore loadCommitBatch includes HEAD when loading commits,0.426,GitStore,11,2.905
GitStore can discard changes from a repository,0.195,GitStore,11,2.905
GitStore can discard a renamed file,0.18,GitStore,11,2.905
GitStore undo first commit reports the repository is unborn,0.221,GitStore,11,2.905
GitStore undo first commit pre-fills the commit message,0.152,GitStore,11,2.905
GitStore undo first commit clears the undo commit dialog,0.251,GitStore,11,2.905
GitStore undo first commit has no staged files,0.241,GitStore,11,2.905
GitStore repository with HEAD file can discard modified change cleanly,0.137,GitStore,11,2.905
git/status getStatus with conflicted repo parses conflicted files with markers,0.353,git/status,12,2.414
git/status getStatus with conflicted repo parses conflicted files without markers,0.353,git/status,12,2.414
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.572,git/status,12,2.414
git/status getStatus with conflicted repo parses resolved files,0.343,git/status,12,2.414
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.127,git/status,12,2.414
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.219,git/status,12,2.414
git/status getStatus with unconflicted repo parses changed files,0.059,git/status,12,2.414
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.052,git/status,12,2.414
git/status getStatus with unconflicted repo reflects renames,0.101,git/status,12,2.414
git/status getStatus with unconflicted repo reflects copies,0.111,git/status,12,2.414
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.059,git/status,12,2.414
BranchPruner does nothing on non GitHub repositories,0.234,BranchPruner,6,1.81
BranchPruner prunes for GitHub repository,0.304,BranchPruner,6,1.81
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.229,BranchPruner,6,1.81
BranchPruner does not prune if there is no default branch,0.239,BranchPruner,6,1.81
BranchPruner does not prune reserved branches,0.305,BranchPruner,6,1.81
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.044,git/diff,19,1.999
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.05,git/diff,19,1.999
git/diff getBlobImage retrieves valid image for modified file,0.046,git/diff,19,1.999
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.999
git/diff imageDiff changes for images are set,0.162,git/diff,19,1.999
git/diff imageDiff changes for text are not set,0.137,git/diff,19,1.999
git/diff getWorkingDirectoryDiff counts lines for new file,0.084,git/diff,19,1.999
git/diff getWorkingDirectoryDiff counts lines for modified file,0.084,git/diff,19,1.999
git/diff getWorkingDirectoryDiff counts lines for staged file,0.085,git/diff,19,1.999
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.115,git/diff,19,1.999
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.161,git/diff,19,1.999
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.159,git/diff,19,1.999
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.134,git/diff,19,1.999
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.147,git/diff,19,1.999
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.093,git/diff,19,1.999
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.061,git/diff,19,1.999
git/diff getBinaryPaths in repo with text only files returns an empty array,0.084,git/diff,19,1.999
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.099,git/diff,19,1.999
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.124,git/diff,19,1.999
git/reflog getRecentBranches returns the recently checked out branches,0.167,git/reflog,6,1.167
git/reflog getRecentBranches works after renaming a branch,0.209,git/reflog,6,1.167
git/reflog getRecentBranches returns a limited number of branches,0.283,git/reflog,6,1.167
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.167,git/reflog,6,1.167
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.21,git/reflog,6,1.167
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.07,git/reflog,6,1.167
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.322,formatPatch,5,1.077
git/checkout can checkout a valid branch name in an existing repository,0.135,git/checkout,6,1.065
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.065
git/checkout will fail when an existing branch matches the remote branch,0.127,git/checkout,6,1.065
git/checkout with submodules cleans up an submodule that no longer exists,0.313,git/checkout,6,1.065
git/checkout with submodules updates a changed submodule reference,0.259,git/checkout,6,1.065
git/rev-parse isGitRepository should return true for a repository,0.047,git/rev-parse,10,0.759
git/rev-parse isGitRepository should return false for a directory,0.05,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns false for default initialized repository,0.063,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns true for initialized bare repository,0.061,git/rev-parse,10,0.759
git/rev-parse isBareRepository returns false for empty directory,0.048,git/rev-parse,10,0.759
git/rev-parse isBareRepository throws error for missing directory,0.052,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.067,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.054,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.062,git/rev-parse,10,0.759
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.21,git/rev-parse,10,0.759
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.125,gitignore,9,0.744
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.114,gitignore,9,0.744
gitignore saveGitIgnore applies rule correctly to repository,0.106,gitignore,9,0.744
gitignore appendIgnoreRule appends one rule,0.123,gitignore,9,0.744
gitignore appendIgnoreRule appends multiple rules,0.129,gitignore,9,0.744
git/branch tip returns unborn for new repository,0.038,git/branch,10,0.731
git/branch tip returns correct ref if checkout occurs,0.06,git/branch,10,0.731
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,10,0.731
git/branch tip returns current branch when on a valid HEAD,0.082,git/branch,10,0.731
git/branch tip returns non-origin remote,0.092,git/branch,10,0.731
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.094,git/branch,10,0.731
git/branch getBranchesPointedAt in a local repo finds one branch name,0.063,git/branch,10,0.731
git/branch getBranchesPointedAt in a local repo finds no branch names,0.044,git/branch,10,0.731
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.046,git/branch,10,0.731
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.092,git/branch,10,0.731
git/submodule listSubmodules returns the submodule entry,0.125,git/submodule,3,0.72
git/submodule listSubmodules returns the expected tag,0.182,git/submodule,3,0.72
git/submodule resetSubmodulePaths update submodule to original commit,0.35,git/submodule,3,0.72
git/log getCommits loads history,0.064,git/log,7,0.612
git/log getCommits handles repository with HEAD file on disk,0.091,git/log,7,0.612
git/log getCommits handles repository with signed commit and log.showSignature set,0.11,git/log,7,0.612
git/log getChangedFiles loads the files changed in the commit,0.054,git/log,7,0.612
git/log getChangedFiles detects renames,0.092,git/log,7,0.612
git/log getChangedFiles detect copies,0.093,git/log,7,0.612
git/log getChangedFiles handles commit when HEAD exists on disk,0.051,git/log,7,0.612
git/merge merge and is successful returns true,0.045,git/merge,7,0.645
git/merge merge and is a noop returns false,0.064,git/merge,7,0.645
git/merge getMergeBase returns the common ancestor of two branches,0.07,git/merge,7,0.645
git-lfs isUsingLFS returns false for repository not using LFS,0.062,git-lfs,9,0.582
git-lfs isUsingLFS returns true if LFS is tracking a path,0.083,git-lfs,9,0.582
git/reset reset can hard reset a repository,0.076,git/reset,2,0.131
git/remote getRemotes should return both remotes,0.056,git/remote,9,0.472
git/remote findDefaultRemote returns origin when multiple remotes found,0.057,git/remote,9,0.472
git/remote findDefaultRemote returns something when origin removed,0.073,git/remote,9,0.472
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.053,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.055,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.048,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.054,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.038,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile includes empty context lines,0.027,patch formatting,8,0.389
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.025,patch formatting,8,0.389
git/config config looks up config values,0.053,git/config,4,0.338
git/config config returns null for undefined values,0.054,git/config,4,0.338
git/config global config getGlobalConfigPath gets the config path,0.069,git/config,4,0.338
git/config global config setGlobalConfigValue will replace all entries for a global value,0.106,git/config,4,0.338
git/core error handling does not throw for errors that were expected,0.052,git/core,4,0.269
git/core error handling throws for errors that were not expected,0.059,git/core,4,0.269
git/core exit code handling does not throw for exit codes that were expected,0.05,git/core,4,0.269
git/core exit code handling throws for exit codes that were not expected,0.053,git/core,4,0.269
git/for-each-ref getBranches fetches branches using for-each-ref,0.085,git/for-each-ref,3,0.275
git/for-each-ref getBranches should return empty list for empty repo,0.079,git/for-each-ref,3,0.275
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.057,git/for-each-ref,3,0.275
AppStore can select a repository,0.153,AppStore,5,0.227
validatedRepositoryPath returns the path to the repository,0.432,validatedRepositoryPath,2,0.505
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.062
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.53,git/rebase,21,12.122
git/rebase detect conflicts status detects REBASE_HEAD,0.435,git/rebase,21,12.122
git/rebase detect conflicts has conflicted files in working directory,0.437,git/rebase,21,12.122
git/rebase detect conflicts is a detached HEAD state,0.454,git/rebase,21,12.122
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.455,git/rebase,21,12.122
git/rebase abort after conflicts found no longer has working directory changes,0.457,git/rebase,21,12.122
git/rebase abort after conflicts found returns to the feature branch,0.453,git/rebase,21,12.122
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.543,git/rebase,21,12.122
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.552,git/rebase,21,12.122
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.514,git/rebase,21,12.122
git/rebase continue after resolving conflicts returns success,0.607,git/rebase,21,12.122
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.65,git/rebase,21,12.122
git/rebase continue after resolving conflicts no longer has working directory changes,0.619,git/rebase,21,12.122
git/rebase continue after resolving conflicts returns to the feature branch,0.616,git/rebase,21,12.122
git/rebase continue after resolving conflicts branch is now a different ref,0.634,git/rebase,21,12.122
git/rebase continue with additional changes unrelated to conflicted files returns success,0.597,git/rebase,21,12.122
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.612,git/rebase,21,12.122
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.622,git/rebase,21,12.122
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.626,git/rebase,21,12.122
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.599,git/rebase,21,12.122
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.562,git/rebase,21,12.122
git/commit createCommit normal commits the given files,0.138,git/commit,21,5.29
git/commit createCommit normal commit does not strip commentary by default,0.125,git/commit,21,5.29
git/commit createCommit normal can commit for empty repository,0.158,git/commit,21,5.29
git/commit createCommit normal can commit renames,0.198,git/commit,21,5.29
git/commit createCommit partials can commit some lines from new file,0.195,git/commit,21,5.29
git/commit createCommit partials can commit second hunk from modified file,0.22,git/commit,21,5.29
git/commit createCommit partials can commit single delete from modified file,0.187,git/commit,21,5.29
git/commit createCommit partials can commit multiple hunks from modified file,0.221,git/commit,21,5.29
git/commit createCommit partials can commit some lines from deleted file,0.202,git/commit,21,5.29
git/commit createCommit partials can commit renames with modifications,0.206,git/commit,21,5.29
git/commit createCommit partials can commit renames with partially selected modifications,0.267,git/commit,21,5.29
git/commit createCommit with a merge conflict creates a merge commit,0.316,git/commit,21,5.29
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.298,git/commit,21,5.29
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.42,git/commit,21,5.29
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.411,git/commit,21,5.29
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.469,git/commit,21,5.29
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.488,git/commit,21,5.29
git/commit createMergeCommit with no changes throws an error,0.103,git/commit,21,5.29
git/commit index corner cases can commit when staged new file is then deleted,0.186,git/commit,21,5.29
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.206,git/commit,21,5.29
git/commit index corner cases file is deleted in index,0.207,git/commit,21,5.29
git/rebase can parse progress returns a value indicating conflicts were encountered,0.547,git/rebase,7,4.904
git/rebase can parse progress status detects REBASE_HEAD,0.548,git/rebase,7,4.904
git/rebase can parse progress is a detached HEAD state,0.561,git/rebase,7,4.904
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,1.066,git/rebase,7,4.904
git/rebase can parse progress for long rebase status detects REBASE_HEAD,1.08,git/rebase,7,4.904
git/rebase can parse progress for long rebase is a detached HEAD state,1.038,git/rebase,7,4.904
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.171,git/stash,14,2.849
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.298,git/stash,14,2.849
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.22,git/stash,14,2.849
GitStore loadCommitBatch includes HEAD when loading commits,0.343,GitStore,11,2.652
GitStore can discard changes from a repository,0.186,GitStore,11,2.652
GitStore can discard a renamed file,0.163,GitStore,11,2.652
GitStore undo first commit reports the repository is unborn,0.205,GitStore,11,2.652
GitStore undo first commit pre-fills the commit message,0.132,GitStore,11,2.652
GitStore undo first commit clears the undo commit dialog,0.232,GitStore,11,2.652
GitStore undo first commit has no staged files,0.228,GitStore,11,2.652
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.652
git/status getStatus with conflicted repo parses conflicted files with markers,0.322,git/status,12,2.194
git/status getStatus with conflicted repo parses conflicted files without markers,0.315,git/status,12,2.194
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.536,git/status,12,2.194
git/status getStatus with conflicted repo parses resolved files,0.318,git/status,12,2.194
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.12,git/status,12,2.194
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.144,git/status,12,2.194
git/status getStatus with unconflicted repo parses changed files,0.061,git/status,12,2.194
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.063,git/status,12,2.194
git/status getStatus with unconflicted repo reflects renames,0.101,git/status,12,2.194
git/status getStatus with unconflicted repo reflects copies,0.109,git/status,12,2.194
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.054,git/status,12,2.194
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.097,git/diff,19,1.926
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.075,git/diff,19,1.926
git/diff getBlobImage retrieves valid image for modified file,0.058,git/diff,19,1.926
git/diff getBlobImage retrieves valid images for deleted file,0.066,git/diff,19,1.926
git/diff imageDiff changes for images are set,0.103,git/diff,19,1.926
git/diff imageDiff changes for text are not set,0.078,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for new file,0.082,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for modified file,0.093,git/diff,19,1.926
git/diff getWorkingDirectoryDiff counts lines for staged file,0.076,git/diff,19,1.926
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.122,git/diff,19,1.926
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.154,git/diff,19,1.926
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.156,git/diff,19,1.926
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.133,git/diff,19,1.926
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.13,git/diff,19,1.926
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.091,git/diff,19,1.926
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.064,git/diff,19,1.926
git/diff getBinaryPaths in repo with text only files returns an empty array,0.086,git/diff,19,1.926
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.098,git/diff,19,1.926
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.11,git/diff,19,1.926
BranchPruner does nothing on non GitHub repositories,0.241,BranchPruner,6,1.887
BranchPruner prunes for GitHub repository,0.327,BranchPruner,6,1.887
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.248,BranchPruner,6,1.887
BranchPruner does not prune if there is no default branch,0.241,BranchPruner,6,1.887
BranchPruner does not prune reserved branches,0.314,BranchPruner,6,1.887
git/reflog getRecentBranches returns the recently checked out branches,0.16,git/reflog,6,1.168
git/reflog getRecentBranches works after renaming a branch,0.213,git/reflog,6,1.168
git/reflog getRecentBranches returns a limited number of branches,0.288,git/reflog,6,1.168
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.169,git/reflog,6,1.168
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.207,git/reflog,6,1.168
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.071,git/reflog,6,1.168
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.305,formatPatch,5,1.08
git/checkout can checkout a valid branch name in an existing repository,0.137,git/checkout,6,1.053
git/checkout can checkout a branch when it exists on multiple remotes,0.138,git/checkout,6,1.053
git/checkout will fail when an existing branch matches the remote branch,0.123,git/checkout,6,1.053
git/checkout with submodules cleans up an submodule that no longer exists,0.312,git/checkout,6,1.053
git/checkout with submodules updates a changed submodule reference,0.248,git/checkout,6,1.053
git/rev-parse isGitRepository should return true for a repository,0.05,git/rev-parse,10,0.726
git/rev-parse isGitRepository should return false for a directory,0.053,git/rev-parse,10,0.726
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.726
git/rev-parse isBareRepository returns true for initialized bare repository,0.061,git/rev-parse,10,0.726
git/rev-parse isBareRepository returns false for empty directory,0.05,git/rev-parse,10,0.726
git/rev-parse isBareRepository throws error for missing directory,0.049,git/rev-parse,10,0.726
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.062,git/rev-parse,10,0.726
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.053,git/rev-parse,10,0.726
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.054,git/rev-parse,10,0.726
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.188,git/rev-parse,10,0.726
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.119,gitignore,9,0.757
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.12,gitignore,9,0.757
gitignore saveGitIgnore applies rule correctly to repository,0.107,gitignore,9,0.757
gitignore appendIgnoreRule appends one rule,0.128,gitignore,9,0.757
gitignore appendIgnoreRule appends multiple rules,0.135,gitignore,9,0.757
git/branch tip returns unborn for new repository,0.038,git/branch,10,0.713
git/branch tip returns correct ref if checkout occurs,0.059,git/branch,10,0.713
git/branch tip returns detached for arbitrary checkout,0.053,git/branch,10,0.713
git/branch tip returns current branch when on a valid HEAD,0.083,git/branch,10,0.713
git/branch tip returns non-origin remote,0.088,git/branch,10,0.713
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.095,git/branch,10,0.713
git/branch getBranchesPointedAt in a local repo finds one branch name,0.053,git/branch,10,0.713
git/branch getBranchesPointedAt in a local repo finds no branch names,0.046,git/branch,10,0.713
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.047,git/branch,10,0.713
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.092,git/branch,10,0.713
git/submodule listSubmodules returns the submodule entry,0.228,git/submodule,3,0.819
git/submodule listSubmodules returns the expected tag,0.186,git/submodule,3,0.819
git/submodule resetSubmodulePaths update submodule to original commit,0.352,git/submodule,3,0.819
git/merge merge and is successful returns true,0.044,git/merge,7,0.635
git/merge merge and is a noop returns false,0.057,git/merge,7,0.635
git/merge getMergeBase returns the common ancestor of two branches,0.078,git/merge,7,0.635
git/log getCommits loads history,0.074,git/log,7,0.618
git/log getCommits handles repository with HEAD file on disk,0.093,git/log,7,0.618
git/log getCommits handles repository with signed commit and log.showSignature set,0.116,git/log,7,0.618
git/log getChangedFiles loads the files changed in the commit,0.051,git/log,7,0.618
git/log getChangedFiles detects renames,0.087,git/log,7,0.618
git/log getChangedFiles detect copies,0.094,git/log,7,0.618
git/log getChangedFiles handles commit when HEAD exists on disk,0.049,git/log,7,0.618
git-lfs isUsingLFS returns false for repository not using LFS,0.054,git-lfs,9,0.556
git-lfs isUsingLFS returns true if LFS is tracking a path,0.076,git-lfs,9,0.556
validatedRepositoryPath returns the path to the repository,0.05,validatedRepositoryPath,2,0.114
git/remote getRemotes should return both remotes,0.058,git/remote,9,0.497
git/remote findDefaultRemote returns origin when multiple remotes found,0.062,git/remote,9,0.497
git/remote findDefaultRemote returns something when origin removed,0.082,git/remote,9,0.497
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.047,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.053,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.051,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.052,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.039,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.033,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile includes empty context lines,0.03,patch formatting,8,0.385
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.025,patch formatting,8,0.385
git/config config looks up config values,0.049,git/config,4,0.326
git/config config returns null for undefined values,0.053,git/config,4,0.326
git/config global config getGlobalConfigPath gets the config path,0.072,git/config,4,0.326
git/config global config setGlobalConfigValue will replace all entries for a global value,0.099,git/config,4,0.326
git/for-each-ref getBranches fetches branches using for-each-ref,0.074,git/for-each-ref,3,0.246
git/for-each-ref getBranches should return empty list for empty repo,0.072,git/for-each-ref,3,0.246
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.056,git/for-each-ref,3,0.246
git/core error handling does not throw for errors that were expected,0.057,git/core,4,0.278
git/core error handling throws for errors that were not expected,0.053,git/core,4,0.278
git/core exit code handling does not throw for exit codes that were expected,0.056,git/core,4,0.278
git/core exit code handling throws for exit codes that were not expected,0.058,git/core,4,0.278
AppStore can select a repository,0.14,AppStore,5,0.209
git/reset reset can hard reset a repository,0.44,git/reset,2,0.492
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.064
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.521,git/rebase,21,11.929
git/rebase detect conflicts status detects REBASE_HEAD,0.427,git/rebase,21,11.929
git/rebase detect conflicts has conflicted files in working directory,0.442,git/rebase,21,11.929
git/rebase detect conflicts is a detached HEAD state,0.45,git/rebase,21,11.929
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.473,git/rebase,21,11.929
git/rebase abort after conflicts found no longer has working directory changes,0.471,git/rebase,21,11.929
git/rebase abort after conflicts found returns to the feature branch,0.463,git/rebase,21,11.929
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.539,git/rebase,21,11.929
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.554,git/rebase,21,11.929
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.544,git/rebase,21,11.929
git/rebase continue after resolving conflicts returns success,0.592,git/rebase,21,11.929
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.608,git/rebase,21,11.929
git/rebase continue after resolving conflicts no longer has working directory changes,0.613,git/rebase,21,11.929
git/rebase continue after resolving conflicts returns to the feature branch,0.652,git/rebase,21,11.929
git/rebase continue after resolving conflicts branch is now a different ref,0.68,git/rebase,21,11.929
git/rebase continue with additional changes unrelated to conflicted files returns success,0.656,git/rebase,21,11.929
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.668,git/rebase,21,11.929
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.556,git/rebase,21,11.929
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.504,git/rebase,21,11.929
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.485,git/rebase,21,11.929
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.462,git/rebase,21,11.929
git/commit createCommit normal commits the given files,0.114,git/commit,21,4.075
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.075
git/commit createCommit normal can commit for empty repository,0.124,git/commit,21,4.075
git/commit createCommit normal can commit renames,0.156,git/commit,21,4.075
git/commit createCommit partials can commit some lines from new file,0.157,git/commit,21,4.075
git/commit createCommit partials can commit second hunk from modified file,0.17,git/commit,21,4.075
git/commit createCommit partials can commit single delete from modified file,0.152,git/commit,21,4.075
git/commit createCommit partials can commit multiple hunks from modified file,0.176,git/commit,21,4.075
git/commit createCommit partials can commit some lines from deleted file,0.155,git/commit,21,4.075
git/commit createCommit partials can commit renames with modifications,0.171,git/commit,21,4.075
git/commit createCommit partials can commit renames with partially selected modifications,0.202,git/commit,21,4.075
git/commit createCommit with a merge conflict creates a merge commit,0.244,git/commit,21,4.075
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.228,git/commit,21,4.075
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.307,git/commit,21,4.075
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.295,git/commit,21,4.075
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.364,git/commit,21,4.075
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.367,git/commit,21,4.075
git/commit createMergeCommit with no changes throws an error,0.082,git/commit,21,4.075
git/commit index corner cases can commit when staged new file is then deleted,0.139,git/commit,21,4.075
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.16,git/commit,21,4.075
git/commit index corner cases file is deleted in index,0.153,git/commit,21,4.075
git/rebase can parse progress returns a value indicating conflicts were encountered,0.434,git/rebase,7,3.835
git/rebase can parse progress status detects REBASE_HEAD,0.442,git/rebase,7,3.835
git/rebase can parse progress is a detached HEAD state,0.429,git/rebase,7,3.835
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.807,git/rebase,7,3.835
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.83,git/rebase,7,3.835
git/rebase can parse progress for long rebase is a detached HEAD state,0.842,git/rebase,7,3.835
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.158,git/stash,14,2.588
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.242,git/stash,14,2.588
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.208,git/stash,14,2.588
GitStore loadCommitBatch includes HEAD when loading commits,0.369,GitStore,11,2.364
GitStore can discard changes from a repository,0.162,GitStore,11,2.364
GitStore can discard a renamed file,0.143,GitStore,11,2.364
GitStore undo first commit reports the repository is unborn,0.174,GitStore,11,2.364
GitStore undo first commit pre-fills the commit message,0.115,GitStore,11,2.364
GitStore undo first commit clears the undo commit dialog,0.2,GitStore,11,2.364
GitStore undo first commit has no staged files,0.189,GitStore,11,2.364
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.364
git/status getStatus with conflicted repo parses conflicted files with markers,0.274,git/status,12,1.89
git/status getStatus with conflicted repo parses conflicted files without markers,0.276,git/status,12,1.89
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.449,git/status,12,1.89
git/status getStatus with conflicted repo parses resolved files,0.276,git/status,12,1.89
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.11,git/status,12,1.89
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.12,git/status,12,1.89
git/status getStatus with unconflicted repo parses changed files,0.051,git/status,12,1.89
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.056,git/status,12,1.89
git/status getStatus with unconflicted repo reflects renames,0.093,git/status,12,1.89
git/status getStatus with unconflicted repo reflects copies,0.091,git/status,12,1.89
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.89
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.495
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.119,git/diff,19,1.495
git/diff getBlobImage retrieves valid image for modified file,0.048,git/diff,19,1.495
git/diff getBlobImage retrieves valid images for deleted file,0.058,git/diff,19,1.495
git/diff imageDiff changes for images are set,0.069,git/diff,19,1.495
git/diff imageDiff changes for text are not set,0.061,git/diff,19,1.495
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.495
git/diff getWorkingDirectoryDiff counts lines for modified file,0.068,git/diff,19,1.495
git/diff getWorkingDirectoryDiff counts lines for staged file,0.064,git/diff,19,1.495
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.091,git/diff,19,1.495
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.114,git/diff,19,1.495
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.12,git/diff,19,1.495
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.097,git/diff,19,1.495
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.099,git/diff,19,1.495
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.069,git/diff,19,1.495
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.048,git/diff,19,1.495
git/diff getBinaryPaths in repo with text only files returns an empty array,0.063,git/diff,19,1.495
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.076,git/diff,19,1.495
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.089,git/diff,19,1.495
BranchPruner does nothing on non GitHub repositories,0.2,BranchPruner,6,1.523
BranchPruner prunes for GitHub repository,0.258,BranchPruner,6,1.523
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.191,BranchPruner,6,1.523
BranchPruner does not prune if there is no default branch,0.209,BranchPruner,6,1.523
BranchPruner does not prune reserved branches,0.259,BranchPruner,6,1.523
git/reflog getRecentBranches returns the recently checked out branches,0.127,git/reflog,6,0.943
git/reflog getRecentBranches works after renaming a branch,0.168,git/reflog,6,0.943
git/reflog getRecentBranches returns a limited number of branches,0.241,git/reflog,6,0.943
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.133,git/reflog,6,0.943
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.173,git/reflog,6,0.943
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.943
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.27,formatPatch,5,0.88
git/checkout can checkout a valid branch name in an existing repository,0.111,git/checkout,6,0.83
git/checkout can checkout a branch when it exists on multiple remotes,0.107,git/checkout,6,0.83
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.83
git/checkout with submodules cleans up an submodule that no longer exists,0.235,git/checkout,6,0.83
git/checkout with submodules updates a changed submodule reference,0.21,git/checkout,6,0.83
git/submodule listSubmodules returns the submodule entry,0.109,git/submodule,3,0.582
git/submodule listSubmodules returns the expected tag,0.149,git/submodule,3,0.582
git/submodule resetSubmodulePaths update submodule to original commit,0.282,git/submodule,3,0.582
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.622
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.098,gitignore,9,0.622
gitignore saveGitIgnore applies rule correctly to repository,0.088,gitignore,9,0.622
gitignore appendIgnoreRule appends one rule,0.107,gitignore,9,0.622
gitignore appendIgnoreRule appends multiple rules,0.109,gitignore,9,0.622
git/rev-parse isGitRepository should return true for a repository,0.046,git/rev-parse,10,0.611
git/rev-parse isGitRepository should return false for a directory,0.042,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.611
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.039,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.17,git/rev-parse,10,0.611
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.593
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,10,0.593
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.593
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.593
git/branch tip returns non-origin remote,0.073,git/branch,10,0.593
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,10,0.593
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.593
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.593
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.593
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.593
git/merge merge and is successful returns true,0.034,git/merge,7,0.53
git/merge merge and is a noop returns false,0.048,git/merge,7,0.53
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.53
git/log getCommits loads history,0.055,git/log,7,0.521
git/log getCommits handles repository with HEAD file on disk,0.077,git/log,7,0.521
git/log getCommits handles repository with signed commit and log.showSignature set,0.088,git/log,7,0.521
git/log getChangedFiles loads the files changed in the commit,0.051,git/log,7,0.521
git/log getChangedFiles detects renames,0.084,git/log,7,0.521
git/log getChangedFiles detect copies,0.078,git/log,7,0.521
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.521
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.485
git-lfs isUsingLFS returns true if LFS is tracking a path,0.07,git-lfs,9,0.485
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.492
git/remote findDefaultRemote returns origin when multiple remotes found,0.05,git/remote,9,0.492
git/remote findDefaultRemote returns something when origin removed,0.153,git/remote,9,0.492
git/reset reset can hard reset a repository,0.074,git/reset,2,0.125
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.284
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.037,patch formatting,8,0.284
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.284
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.037,patch formatting,8,0.284
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.026,patch formatting,8,0.284
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.019,patch formatting,8,0.284
patch formatting formatPatchesForModifiedFile includes empty context lines,0.021,patch formatting,8,0.284
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.018,patch formatting,8,0.284
git/config config looks up config values,0.038,git/config,4,0.259
git/config config returns null for undefined values,0.045,git/config,4,0.259
git/config global config getGlobalConfigPath gets the config path,0.055,git/config,4,0.259
git/config global config setGlobalConfigValue will replace all entries for a global value,0.078,git/config,4,0.259
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.224
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.224
git/core exit code handling does not throw for exit codes that were expected,0.042,git/core,4,0.224
git/core exit code handling throws for exit codes that were not expected,0.046,git/core,4,0.224
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.201
AppStore can select a repository,0.118,AppStore,5,0.173
validatedRepositoryPath returns the path to the repository,0.342,validatedRepositoryPath,2,0.401
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.391,git/rebase,21,9.074
git/rebase detect conflicts status detects REBASE_HEAD,0.299,git/rebase,21,9.074
git/rebase detect conflicts has conflicted files in working directory,0.305,git/rebase,21,9.074
git/rebase detect conflicts is a detached HEAD state,0.324,git/rebase,21,9.074
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.318,git/rebase,21,9.074
git/rebase abort after conflicts found no longer has working directory changes,0.322,git/rebase,21,9.074
git/rebase abort after conflicts found returns to the feature branch,0.346,git/rebase,21,9.074
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.416,git/rebase,21,9.074
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.403,git/rebase,21,9.074
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.386,git/rebase,21,9.074
git/rebase continue after resolving conflicts returns success,0.444,git/rebase,21,9.074
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.465,git/rebase,21,9.074
git/rebase continue after resolving conflicts no longer has working directory changes,0.474,git/rebase,21,9.074
git/rebase continue after resolving conflicts returns to the feature branch,0.453,git/rebase,21,9.074
git/rebase continue after resolving conflicts branch is now a different ref,0.481,git/rebase,21,9.074
git/rebase continue with additional changes unrelated to conflicted files returns success,0.468,git/rebase,21,9.074
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.461,git/rebase,21,9.074
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.473,git/rebase,21,9.074
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.47,git/rebase,21,9.074
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.468,git/rebase,21,9.074
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.446,git/rebase,21,9.074
git/commit createCommit normal commits the given files,0.111,git/commit,21,4.028
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.028
git/commit createCommit normal can commit for empty repository,0.127,git/commit,21,4.028
git/commit createCommit normal can commit renames,0.149,git/commit,21,4.028
git/commit createCommit partials can commit some lines from new file,0.159,git/commit,21,4.028
git/commit createCommit partials can commit second hunk from modified file,0.163,git/commit,21,4.028
git/commit createCommit partials can commit single delete from modified file,0.15,git/commit,21,4.028
git/commit createCommit partials can commit multiple hunks from modified file,0.167,git/commit,21,4.028
git/commit createCommit partials can commit some lines from deleted file,0.165,git/commit,21,4.028
git/commit createCommit partials can commit renames with modifications,0.165,git/commit,21,4.028
git/commit createCommit partials can commit renames with partially selected modifications,0.206,git/commit,21,4.028
git/commit createCommit with a merge conflict creates a merge commit,0.235,git/commit,21,4.028
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.215,git/commit,21,4.028
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.304,git/commit,21,4.028
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.299,git/commit,21,4.028
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.358,git/commit,21,4.028
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.351,git/commit,21,4.028
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,4.028
git/commit index corner cases can commit when staged new file is then deleted,0.138,git/commit,21,4.028
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.152,git/commit,21,4.028
git/commit index corner cases file is deleted in index,0.164,git/commit,21,4.028
git/rebase can parse progress returns a value indicating conflicts were encountered,0.433,git/rebase,7,3.953
git/rebase can parse progress status detects REBASE_HEAD,0.446,git/rebase,7,3.953
git/rebase can parse progress is a detached HEAD state,0.417,git/rebase,7,3.953
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.889,git/rebase,7,3.953
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.872,git/rebase,7,3.953
git/rebase can parse progress for long rebase is a detached HEAD state,0.844,git/rebase,7,3.953
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.157,git/stash,14,2.502
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.25,git/stash,14,2.502
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.214,git/stash,14,2.502
GitStore loadCommitBatch includes HEAD when loading commits,0.339,GitStore,11,2.375
GitStore can discard changes from a repository,0.194,GitStore,11,2.375
GitStore can discard a renamed file,0.146,GitStore,11,2.375
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.375
GitStore undo first commit pre-fills the commit message,0.115,GitStore,11,2.375
GitStore undo first commit clears the undo commit dialog,0.205,GitStore,11,2.375
GitStore undo first commit has no staged files,0.195,GitStore,11,2.375
GitStore repository with HEAD file can discard modified change cleanly,0.112,GitStore,11,2.375
git/status getStatus with conflicted repo parses conflicted files with markers,0.269,git/status,12,1.906
git/status getStatus with conflicted repo parses conflicted files without markers,0.278,git/status,12,1.906
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.473,git/status,12,1.906
git/status getStatus with conflicted repo parses resolved files,0.282,git/status,12,1.906
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.098,git/status,12,1.906
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.128,git/status,12,1.906
git/status getStatus with unconflicted repo parses changed files,0.052,git/status,12,1.906
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,1.906
git/status getStatus with unconflicted repo reflects renames,0.091,git/status,12,1.906
git/status getStatus with unconflicted repo reflects copies,0.09,git/status,12,1.906
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.049,git/status,12,1.906
BranchPruner does nothing on non GitHub repositories,0.262,BranchPruner,6,1.556
BranchPruner prunes for GitHub repository,0.254,BranchPruner,6,1.556
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.208,BranchPruner,6,1.556
BranchPruner does not prune if there is no default branch,0.19,BranchPruner,6,1.556
BranchPruner does not prune reserved branches,0.248,BranchPruner,6,1.556
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.512
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.512
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.512
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.512
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.512
git/diff imageDiff changes for text are not set,0.068,git/diff,19,1.512
git/diff getWorkingDirectoryDiff counts lines for new file,0.069,git/diff,19,1.512
git/diff getWorkingDirectoryDiff counts lines for modified file,0.068,git/diff,19,1.512
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.512
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.1,git/diff,19,1.512
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.127,git/diff,19,1.512
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.132,git/diff,19,1.512
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.111,git/diff,19,1.512
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.107,git/diff,19,1.512
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.512
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.055,git/diff,19,1.512
git/diff getBinaryPaths in repo with text only files returns an empty array,0.071,git/diff,19,1.512
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.081,git/diff,19,1.512
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.091,git/diff,19,1.512
git/reflog getRecentBranches returns the recently checked out branches,0.132,git/reflog,6,0.943
git/reflog getRecentBranches works after renaming a branch,0.17,git/reflog,6,0.943
git/reflog getRecentBranches returns a limited number of branches,0.242,git/reflog,6,0.943
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.135,git/reflog,6,0.943
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.165,git/reflog,6,0.943
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.943
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.287,formatPatch,5,0.961
git/checkout can checkout a valid branch name in an existing repository,0.113,git/checkout,6,0.857
git/checkout can checkout a branch when it exists on multiple remotes,0.117,git/checkout,6,0.857
git/checkout will fail when an existing branch matches the remote branch,0.096,git/checkout,6,0.857
git/checkout with submodules cleans up an submodule that no longer exists,0.247,git/checkout,6,0.857
git/checkout with submodules updates a changed submodule reference,0.207,git/checkout,6,0.857
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.085,gitignore,9,0.576
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.088,gitignore,9,0.576
gitignore saveGitIgnore applies rule correctly to repository,0.086,gitignore,9,0.576
gitignore appendIgnoreRule appends one rule,0.093,gitignore,9,0.576
gitignore appendIgnoreRule appends multiple rules,0.102,gitignore,9,0.576
git/rev-parse isGitRepository should return true for a repository,0.046,git/rev-parse,10,0.592
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns false for default initialized repository,0.047,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.592
git/rev-parse isBareRepository throws error for missing directory,0.038,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.048,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.04,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.045,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.157,git/rev-parse,10,0.592
git/branch tip returns unborn for new repository,0.027,git/branch,10,0.583
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,10,0.583
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.583
git/branch tip returns current branch when on a valid HEAD,0.071,git/branch,10,0.583
git/branch tip returns non-origin remote,0.069,git/branch,10,0.583
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.583
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.072,git/branch,10,0.583
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.567
git/submodule listSubmodules returns the expected tag,0.137,git/submodule,3,0.567
git/submodule resetSubmodulePaths update submodule to original commit,0.284,git/submodule,3,0.567
git/merge merge and is successful returns true,0.038,git/merge,7,0.508
git/merge merge and is a noop returns false,0.053,git/merge,7,0.508
git/merge getMergeBase returns the common ancestor of two branches,0.058,git/merge,7,0.508
git/log getCommits loads history,0.054,git/log,7,0.516
git/log getCommits handles repository with HEAD file on disk,0.074,git/log,7,0.516
git/log getCommits handles repository with signed commit and log.showSignature set,0.087,git/log,7,0.516
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.516
git/log getChangedFiles detects renames,0.078,git/log,7,0.516
git/log getChangedFiles detect copies,0.085,git/log,7,0.516
git/log getChangedFiles handles commit when HEAD exists on disk,0.045,git/log,7,0.516
git/remote getRemotes should return both remotes,0.044,git/remote,9,0.369
git/remote findDefaultRemote returns origin when multiple remotes found,0.046,git/remote,9,0.369
git/remote findDefaultRemote returns something when origin removed,0.052,git/remote,9,0.369
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.47
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.47
validatedRepositoryPath returns the path to the repository,0.041,validatedRepositoryPath,2,0.098
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.045,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.039,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.025,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.303
git/config config looks up config values,0.148,git/config,4,0.38
git/config config returns null for undefined values,0.052,git/config,4,0.38
git/config global config getGlobalConfigPath gets the config path,0.056,git/config,4,0.38
git/config global config setGlobalConfigValue will replace all entries for a global value,0.084,git/config,4,0.38
git/core error handling does not throw for errors that were expected,0.047,git/core,4,0.215
git/core error handling throws for errors that were not expected,0.04,git/core,4,0.215
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.215
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.215
git/for-each-ref getBranches fetches branches using for-each-ref,0.069,git/for-each-ref,3,0.207
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.207
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.207
AppStore can select a repository,0.124,AppStore,5,0.18
git/reset reset can hard reset a repository,0.362,git/reset,2,0.407
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.015,git/git-attributes,1,0.044
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.413,git/rebase,21,9.19
git/rebase detect conflicts status detects REBASE_HEAD,0.314,git/rebase,21,9.19
git/rebase detect conflicts has conflicted files in working directory,0.312,git/rebase,21,9.19
git/rebase detect conflicts is a detached HEAD state,0.34,git/rebase,21,9.19
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.367,git/rebase,21,9.19
git/rebase abort after conflicts found no longer has working directory changes,0.341,git/rebase,21,9.19
git/rebase abort after conflicts found returns to the feature branch,0.344,git/rebase,21,9.19
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.398,git/rebase,21,9.19
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.418,git/rebase,21,9.19
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.379,git/rebase,21,9.19
git/rebase continue after resolving conflicts returns success,0.447,git/rebase,21,9.19
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.465,git/rebase,21,9.19
git/rebase continue after resolving conflicts no longer has working directory changes,0.461,git/rebase,21,9.19
git/rebase continue after resolving conflicts returns to the feature branch,0.449,git/rebase,21,9.19
git/rebase continue after resolving conflicts branch is now a different ref,0.462,git/rebase,21,9.19
git/rebase continue with additional changes unrelated to conflicted files returns success,0.458,git/rebase,21,9.19
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.462,git/rebase,21,9.19
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.452,git/rebase,21,9.19
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.462,git/rebase,21,9.19
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.47,git/rebase,21,9.19
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.429,git/rebase,21,9.19
git/commit createCommit normal commits the given files,0.112,git/commit,21,3.975
git/commit createCommit normal commit does not strip commentary by default,0.095,git/commit,21,3.975
git/commit createCommit normal can commit for empty repository,0.123,git/commit,21,3.975
git/commit createCommit normal can commit renames,0.141,git/commit,21,3.975
git/commit createCommit partials can commit some lines from new file,0.149,git/commit,21,3.975
git/commit createCommit partials can commit second hunk from modified file,0.16,git/commit,21,3.975
git/commit createCommit partials can commit single delete from modified file,0.14,git/commit,21,3.975
git/commit createCommit partials can commit multiple hunks from modified file,0.166,git/commit,21,3.975
git/commit createCommit partials can commit some lines from deleted file,0.155,git/commit,21,3.975
git/commit createCommit partials can commit renames with modifications,0.16,git/commit,21,3.975
git/commit createCommit partials can commit renames with partially selected modifications,0.203,git/commit,21,3.975
git/commit createCommit with a merge conflict creates a merge commit,0.243,git/commit,21,3.975
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.211,git/commit,21,3.975
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.301,git/commit,21,3.975
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.296,git/commit,21,3.975
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.358,git/commit,21,3.975
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.372,git/commit,21,3.975
git/commit createMergeCommit with no changes throws an error,0.081,git/commit,21,3.975
git/commit index corner cases can commit when staged new file is then deleted,0.136,git/commit,21,3.975
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.153,git/commit,21,3.975
git/commit index corner cases file is deleted in index,0.157,git/commit,21,3.975
git/rebase can parse progress returns a value indicating conflicts were encountered,0.425,git/rebase,7,3.88
git/rebase can parse progress status detects REBASE_HEAD,0.429,git/rebase,7,3.88
git/rebase can parse progress is a detached HEAD state,0.424,git/rebase,7,3.88
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.852,git/rebase,7,3.88
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.853,git/rebase,7,3.88
git/rebase can parse progress for long rebase is a detached HEAD state,0.846,git/rebase,7,3.88
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.166,git/stash,14,2.457
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.249,git/stash,14,2.457
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.203,git/stash,14,2.457
GitStore loadCommitBatch includes HEAD when loading commits,0.333,GitStore,11,2.408
GitStore can discard changes from a repository,0.19,GitStore,11,2.408
GitStore can discard a renamed file,0.144,GitStore,11,2.408
GitStore undo first commit reports the repository is unborn,0.175,GitStore,11,2.408
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.408
GitStore undo first commit clears the undo commit dialog,0.199,GitStore,11,2.408
GitStore undo first commit has no staged files,0.188,GitStore,11,2.408
GitStore repository with HEAD file can discard modified change cleanly,0.138,GitStore,11,2.408
git/status getStatus with conflicted repo parses conflicted files with markers,0.274,git/status,12,1.905
git/status getStatus with conflicted repo parses conflicted files without markers,0.275,git/status,12,1.905
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.47,git/status,12,1.905
git/status getStatus with conflicted repo parses resolved files,0.278,git/status,12,1.905
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.103,git/status,12,1.905
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.121,git/status,12,1.905
git/status getStatus with unconflicted repo parses changed files,0.052,git/status,12,1.905
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.05,git/status,12,1.905
git/status getStatus with unconflicted repo reflects renames,0.091,git/status,12,1.905
git/status getStatus with unconflicted repo reflects copies,0.096,git/status,12,1.905
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.045,git/status,12,1.905
BranchPruner does nothing on non GitHub repositories,0.278,BranchPruner,6,1.546
BranchPruner prunes for GitHub repository,0.238,BranchPruner,6,1.546
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.209,BranchPruner,6,1.546
BranchPruner does not prune if there is no default branch,0.196,BranchPruner,6,1.546
BranchPruner does not prune reserved branches,0.245,BranchPruner,6,1.546
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.036,git/diff,19,1.488
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.488
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.488
git/diff getBlobImage retrieves valid images for deleted file,0.051,git/diff,19,1.488
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.488
git/diff imageDiff changes for text are not set,0.062,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for new file,0.064,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.488
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.099,git/diff,19,1.488
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.128,git/diff,19,1.488
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.14,git/diff,19,1.488
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.106,git/diff,19,1.488
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.119,git/diff,19,1.488
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.488
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.488
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.488
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.074,git/diff,19,1.488
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.089,git/diff,19,1.488
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.274,formatPatch,5,0.885
git/reflog getRecentBranches returns the recently checked out branches,0.133,git/reflog,6,0.944
git/reflog getRecentBranches works after renaming a branch,0.167,git/reflog,6,0.944
git/reflog getRecentBranches returns a limited number of branches,0.23,git/reflog,6,0.944
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.142,git/reflog,6,0.944
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.172,git/reflog,6,0.944
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.944
git/checkout can checkout a valid branch name in an existing repository,0.111,git/checkout,6,0.85
git/checkout can checkout a branch when it exists on multiple remotes,0.107,git/checkout,6,0.85
git/checkout will fail when an existing branch matches the remote branch,0.103,git/checkout,6,0.85
git/checkout with submodules cleans up an submodule that no longer exists,0.259,git/checkout,6,0.85
git/checkout with submodules updates a changed submodule reference,0.193,git/checkout,6,0.85
git/rev-parse isGitRepository should return true for a repository,0.039,git/rev-parse,10,0.603
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.603
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.603
git/rev-parse isBareRepository returns true for initialized bare repository,0.057,git/rev-parse,10,0.603
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.603
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.603
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.603
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.603
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.05,git/rev-parse,10,0.603
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.157,git/rev-parse,10,0.603
git/branch tip returns unborn for new repository,0.034,git/branch,10,0.663
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.663
git/branch tip returns detached for arbitrary checkout,0.117,git/branch,10,0.663
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,10,0.663
git/branch tip returns non-origin remote,0.075,git/branch,10,0.663
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,10,0.663
git/branch getBranchesPointedAt in a local repo finds one branch name,0.041,git/branch,10,0.663
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.663
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.663
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.071,git/branch,10,0.663
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.093,gitignore,9,0.602
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.093,gitignore,9,0.602
gitignore saveGitIgnore applies rule correctly to repository,0.093,gitignore,9,0.602
gitignore appendIgnoreRule appends one rule,0.097,gitignore,9,0.602
gitignore appendIgnoreRule appends multiple rules,0.101,gitignore,9,0.602
git/submodule listSubmodules returns the submodule entry,0.108,git/submodule,3,0.603
git/submodule listSubmodules returns the expected tag,0.159,git/submodule,3,0.603
git/submodule resetSubmodulePaths update submodule to original commit,0.29,git/submodule,3,0.603
git/log getCommits loads history,0.053,git/log,7,0.484
git/log getCommits handles repository with HEAD file on disk,0.076,git/log,7,0.484
git/log getCommits handles repository with signed commit and log.showSignature set,0.081,git/log,7,0.484
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.484
git/log getChangedFiles detects renames,0.072,git/log,7,0.484
git/log getChangedFiles detect copies,0.074,git/log,7,0.484
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.484
git/merge merge and is successful returns true,0.037,git/merge,7,0.511
git/merge merge and is a noop returns false,0.05,git/merge,7,0.511
git/merge getMergeBase returns the common ancestor of two branches,0.06,git/merge,7,0.511
git-lfs isUsingLFS returns false for repository not using LFS,0.045,git-lfs,9,0.455
git-lfs isUsingLFS returns true if LFS is tracking a path,0.065,git-lfs,9,0.455
git/reset reset can hard reset a repository,0.059,git/reset,2,0.102
git/config config looks up config values,0.038,git/config,4,0.245
git/config config returns null for undefined values,0.039,git/config,4,0.245
git/config global config getGlobalConfigPath gets the config path,0.048,git/config,4,0.245
git/config global config setGlobalConfigValue will replace all entries for a global value,0.076,git/config,4,0.245
git/remote getRemotes should return both remotes,0.041,git/remote,9,0.379
git/remote findDefaultRemote returns origin when multiple remotes found,0.047,git/remote,9,0.379
git/remote findDefaultRemote returns something when origin removed,0.052,git/remote,9,0.379
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.026,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.31
git/core error handling does not throw for errors that were expected,0.04,git/core,4,0.214
git/core error handling throws for errors that were not expected,0.048,git/core,4,0.214
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.214
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.214
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.191
git/for-each-ref getBranches should return empty list for empty repo,0.053,git/for-each-ref,3,0.191
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.04,git/for-each-ref,3,0.191
AppStore can select a repository,0.114,AppStore,5,0.167
validatedRepositoryPath returns the path to the repository,0.337,validatedRepositoryPath,2,0.395
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.051
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.401,git/rebase,21,8.907
git/rebase detect conflicts status detects REBASE_HEAD,0.293,git/rebase,21,8.907
git/rebase detect conflicts has conflicted files in working directory,0.295,git/rebase,21,8.907
git/rebase detect conflicts is a detached HEAD state,0.312,git/rebase,21,8.907
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.316,git/rebase,21,8.907
git/rebase abort after conflicts found no longer has working directory changes,0.318,git/rebase,21,8.907
git/rebase abort after conflicts found returns to the feature branch,0.331,git/rebase,21,8.907
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.397,git/rebase,21,8.907
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.406,git/rebase,21,8.907
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.396,git/rebase,21,8.907
git/rebase continue after resolving conflicts returns success,0.44,git/rebase,21,8.907
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.466,git/rebase,21,8.907
git/rebase continue after resolving conflicts no longer has working directory changes,0.451,git/rebase,21,8.907
git/rebase continue after resolving conflicts returns to the feature branch,0.45,git/rebase,21,8.907
git/rebase continue after resolving conflicts branch is now a different ref,0.466,git/rebase,21,8.907
git/rebase continue with additional changes unrelated to conflicted files returns success,0.44,git/rebase,21,8.907
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.449,git/rebase,21,8.907
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.458,git/rebase,21,8.907
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.474,git/rebase,21,8.907
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.454,git/rebase,21,8.907
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.436,git/rebase,21,8.907
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.997
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.997
git/commit createCommit normal can commit for empty repository,0.119,git/commit,21,3.997
git/commit createCommit normal can commit renames,0.14,git/commit,21,3.997
git/commit createCommit partials can commit some lines from new file,0.159,git/commit,21,3.997
git/commit createCommit partials can commit second hunk from modified file,0.16,git/commit,21,3.997
git/commit createCommit partials can commit single delete from modified file,0.144,git/commit,21,3.997
git/commit createCommit partials can commit multiple hunks from modified file,0.158,git/commit,21,3.997
git/commit createCommit partials can commit some lines from deleted file,0.158,git/commit,21,3.997
git/commit createCommit partials can commit renames with modifications,0.159,git/commit,21,3.997
git/commit createCommit partials can commit renames with partially selected modifications,0.192,git/commit,21,3.997
git/commit createCommit with a merge conflict creates a merge commit,0.241,git/commit,21,3.997
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.23,git/commit,21,3.997
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.314,git/commit,21,3.997
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.296,git/commit,21,3.997
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.36,git/commit,21,3.997
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.364,git/commit,21,3.997
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,3.997
git/commit index corner cases can commit when staged new file is then deleted,0.14,git/commit,21,3.997
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.157,git/commit,21,3.997
git/commit index corner cases file is deleted in index,0.159,git/commit,21,3.997
git/rebase can parse progress returns a value indicating conflicts were encountered,0.436,git/rebase,7,3.865
git/rebase can parse progress status detects REBASE_HEAD,0.418,git/rebase,7,3.865
git/rebase can parse progress is a detached HEAD state,0.433,git/rebase,7,3.865
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.856,git/rebase,7,3.865
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.82,git/rebase,7,3.865
git/rebase can parse progress for long rebase is a detached HEAD state,0.849,git/rebase,7,3.865
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.53
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.253,git/stash,14,2.53
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.197,git/stash,14,2.53
GitStore loadCommitBatch includes HEAD when loading commits,0.329,GitStore,11,2.343
GitStore can discard changes from a repository,0.19,GitStore,11,2.343
GitStore can discard a renamed file,0.141,GitStore,11,2.343
GitStore undo first commit reports the repository is unborn,0.175,GitStore,11,2.343
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.343
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.343
GitStore undo first commit has no staged files,0.194,GitStore,11,2.343
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.343
git/status getStatus with conflicted repo parses conflicted files with markers,0.272,git/status,12,1.897
git/status getStatus with conflicted repo parses conflicted files without markers,0.275,git/status,12,1.897
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.479,git/status,12,1.897
git/status getStatus with conflicted repo parses resolved files,0.274,git/status,12,1.897
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.101,git/status,12,1.897
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.121,git/status,12,1.897
git/status getStatus with unconflicted repo parses changed files,0.046,git/status,12,1.897
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.042,git/status,12,1.897
git/status getStatus with unconflicted repo reflects renames,0.087,git/status,12,1.897
git/status getStatus with unconflicted repo reflects copies,0.096,git/status,12,1.897
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.047,git/status,12,1.897
BranchPruner does nothing on non GitHub repositories,0.277,BranchPruner,6,1.497
BranchPruner prunes for GitHub repository,0.235,BranchPruner,6,1.497
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.201,BranchPruner,6,1.497
BranchPruner does not prune if there is no default branch,0.172,BranchPruner,6,1.497
BranchPruner does not prune reserved branches,0.232,BranchPruner,6,1.497
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.036,git/diff,19,1.476
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.476
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.476
git/diff getBlobImage retrieves valid images for deleted file,0.058,git/diff,19,1.476
git/diff imageDiff changes for images are set,0.073,git/diff,19,1.476
git/diff imageDiff changes for text are not set,0.071,git/diff,19,1.476
git/diff getWorkingDirectoryDiff counts lines for new file,0.071,git/diff,19,1.476
git/diff getWorkingDirectoryDiff counts lines for modified file,0.068,git/diff,19,1.476
git/diff getWorkingDirectoryDiff counts lines for staged file,0.058,git/diff,19,1.476
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.091,git/diff,19,1.476
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.13,git/diff,19,1.476
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.13,git/diff,19,1.476
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.476
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.108,git/diff,19,1.476
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.069,git/diff,19,1.476
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.048,git/diff,19,1.476
git/diff getBinaryPaths in repo with text only files returns an empty array,0.062,git/diff,19,1.476
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.069,git/diff,19,1.476
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.09,git/diff,19,1.476
git/reflog getRecentBranches returns the recently checked out branches,0.137,git/reflog,6,1.182
git/reflog getRecentBranches works after renaming a branch,0.276,git/reflog,6,1.182
git/reflog getRecentBranches returns a limited number of branches,0.327,git/reflog,6,1.182
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.166,git/reflog,6,1.182
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.175,git/reflog,6,1.182
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,1.182
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.333,formatPatch,5,1.056
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.811
git/checkout can checkout a branch when it exists on multiple remotes,0.106,git/checkout,6,0.811
git/checkout will fail when an existing branch matches the remote branch,0.096,git/checkout,6,0.811
git/checkout with submodules cleans up an submodule that no longer exists,0.242,git/checkout,6,0.811
git/checkout with submodules updates a changed submodule reference,0.189,git/checkout,6,0.811
git/branch tip returns unborn for new repository,0.032,git/branch,10,0.578
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,10,0.578
git/branch tip returns detached for arbitrary checkout,0.051,git/branch,10,0.578
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.578
git/branch tip returns non-origin remote,0.07,git/branch,10,0.578
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.068,git/branch,10,0.578
git/branch getBranchesPointedAt in a local repo finds one branch name,0.042,git/branch,10,0.578
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.578
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.578
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.578
git/submodule listSubmodules returns the submodule entry,0.112,git/submodule,3,0.585
git/submodule listSubmodules returns the expected tag,0.149,git/submodule,3,0.585
git/submodule resetSubmodulePaths update submodule to original commit,0.281,git/submodule,3,0.585
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.624
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.624
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.624
git/rev-parse isBareRepository returns true for initialized bare repository,0.052,git/rev-parse,10,0.624
git/rev-parse isBareRepository returns false for empty directory,0.06,git/rev-parse,10,0.624
git/rev-parse isBareRepository throws error for missing directory,0.043,git/rev-parse,10,0.624
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.05,git/rev-parse,10,0.624
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.624
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.04,git/rev-parse,10,0.624
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.17,git/rev-parse,10,0.624
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.097,gitignore,9,0.625
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.099,gitignore,9,0.625
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.625
gitignore appendIgnoreRule appends one rule,0.103,gitignore,9,0.625
gitignore appendIgnoreRule appends multiple rules,0.107,gitignore,9,0.625
git/merge merge and is successful returns true,0.035,git/merge,7,0.625
git/merge merge and is a noop returns false,0.136,git/merge,7,0.625
git/merge getMergeBase returns the common ancestor of two branches,0.071,git/merge,7,0.625
git/log getCommits loads history,0.06,git/log,7,0.537
git/log getCommits handles repository with HEAD file on disk,0.077,git/log,7,0.537
git/log getCommits handles repository with signed commit and log.showSignature set,0.092,git/log,7,0.537
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.537
git/log getChangedFiles detects renames,0.079,git/log,7,0.537
git/log getChangedFiles detect copies,0.086,git/log,7,0.537
git/log getChangedFiles handles commit when HEAD exists on disk,0.049,git/log,7,0.537
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.48
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.48
validatedRepositoryPath returns the path to the repository,0.044,validatedRepositoryPath,2,0.099
git/remote getRemotes should return both remotes,0.044,git/remote,9,0.398
git/remote findDefaultRemote returns origin when multiple remotes found,0.047,git/remote,9,0.398
git/remote findDefaultRemote returns something when origin removed,0.054,git/remote,9,0.398
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.037,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.298
git/config config looks up config values,0.039,git/config,4,0.267
git/config config returns null for undefined values,0.044,git/config,4,0.267
git/config global config getGlobalConfigPath gets the config path,0.053,git/config,4,0.267
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,4,0.267
git/core error handling does not throw for errors that were expected,0.046,git/core,4,0.223
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.223
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.223
git/core exit code handling throws for exit codes that were not expected,0.048,git/core,4,0.223
git/for-each-ref getBranches fetches branches using for-each-ref,0.069,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for empty repo,0.056,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.201
AppStore can select a repository,0.124,AppStore,5,0.182
git/reset reset can hard reset a repository,0.401,git/reset,2,0.447
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.458,git/rebase,21,9.075
git/rebase detect conflicts status detects REBASE_HEAD,0.301,git/rebase,21,9.075
git/rebase detect conflicts has conflicted files in working directory,0.301,git/rebase,21,9.075
git/rebase detect conflicts is a detached HEAD state,0.321,git/rebase,21,9.075
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.34,git/rebase,21,9.075
git/rebase abort after conflicts found no longer has working directory changes,0.326,git/rebase,21,9.075
git/rebase abort after conflicts found returns to the feature branch,0.33,git/rebase,21,9.075
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.375,git/rebase,21,9.075
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.391,git/rebase,21,9.075
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.408,git/rebase,21,9.075
git/rebase continue after resolving conflicts returns success,0.455,git/rebase,21,9.075
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.452,git/rebase,21,9.075
git/rebase continue after resolving conflicts no longer has working directory changes,0.481,git/rebase,21,9.075
git/rebase continue after resolving conflicts returns to the feature branch,0.47,git/rebase,21,9.075
git/rebase continue after resolving conflicts branch is now a different ref,0.464,git/rebase,21,9.075
git/rebase continue with additional changes unrelated to conflicted files returns success,0.462,git/rebase,21,9.075
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.455,git/rebase,21,9.075
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.457,git/rebase,21,9.075
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.472,git/rebase,21,9.075
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.465,git/rebase,21,9.075
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.43,git/rebase,21,9.075
git/commit createCommit normal commits the given files,0.112,git/commit,21,4.067
git/commit createCommit normal commit does not strip commentary by default,0.097,git/commit,21,4.067
git/commit createCommit normal can commit for empty repository,0.131,git/commit,21,4.067
git/commit createCommit normal can commit renames,0.157,git/commit,21,4.067
git/commit createCommit partials can commit some lines from new file,0.171,git/commit,21,4.067
git/commit createCommit partials can commit second hunk from modified file,0.167,git/commit,21,4.067
git/commit createCommit partials can commit single delete from modified file,0.149,git/commit,21,4.067
git/commit createCommit partials can commit multiple hunks from modified file,0.158,git/commit,21,4.067
git/commit createCommit partials can commit some lines from deleted file,0.151,git/commit,21,4.067
git/commit createCommit partials can commit renames with modifications,0.163,git/commit,21,4.067
git/commit createCommit partials can commit renames with partially selected modifications,0.204,git/commit,21,4.067
git/commit createCommit with a merge conflict creates a merge commit,0.242,git/commit,21,4.067
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.216,git/commit,21,4.067
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.308,git/commit,21,4.067
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.305,git/commit,21,4.067
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.366,git/commit,21,4.067
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.379,git/commit,21,4.067
git/commit createMergeCommit with no changes throws an error,0.084,git/commit,21,4.067
git/commit index corner cases can commit when staged new file is then deleted,0.138,git/commit,21,4.067
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,4.067
git/commit index corner cases file is deleted in index,0.156,git/commit,21,4.067
git/rebase can parse progress returns a value indicating conflicts were encountered,0.441,git/rebase,7,3.997
git/rebase can parse progress status detects REBASE_HEAD,0.45,git/rebase,7,3.997
git/rebase can parse progress is a detached HEAD state,0.446,git/rebase,7,3.997
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.845,git/rebase,7,3.997
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.888,git/rebase,7,3.997
git/rebase can parse progress for long rebase is a detached HEAD state,0.877,git/rebase,7,3.997
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.16,git/stash,14,2.601
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.26,git/stash,14,2.601
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.2,git/stash,14,2.601
GitStore loadCommitBatch includes HEAD when loading commits,0.369,GitStore,11,2.512
GitStore can discard changes from a repository,0.2,GitStore,11,2.512
GitStore can discard a renamed file,0.157,GitStore,11,2.512
GitStore undo first commit reports the repository is unborn,0.186,GitStore,11,2.512
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.512
GitStore undo first commit clears the undo commit dialog,0.216,GitStore,11,2.512
GitStore undo first commit has no staged files,0.202,GitStore,11,2.512
GitStore repository with HEAD file can discard modified change cleanly,0.118,GitStore,11,2.512
git/status getStatus with conflicted repo parses conflicted files with markers,0.288,git/status,12,1.989
git/status getStatus with conflicted repo parses conflicted files without markers,0.298,git/status,12,1.989
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.486,git/status,12,1.989
git/status getStatus with conflicted repo parses resolved files,0.301,git/status,12,1.989
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.105,git/status,12,1.989
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.134,git/status,12,1.989
git/status getStatus with unconflicted repo parses changed files,0.052,git/status,12,1.989
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.989
git/status getStatus with unconflicted repo reflects renames,0.094,git/status,12,1.989
git/status getStatus with unconflicted repo reflects copies,0.091,git/status,12,1.989
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.043,git/status,12,1.989
BranchPruner does nothing on non GitHub repositories,0.275,BranchPruner,6,1.575
BranchPruner prunes for GitHub repository,0.254,BranchPruner,6,1.575
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.204,BranchPruner,6,1.575
BranchPruner does not prune if there is no default branch,0.192,BranchPruner,6,1.575
BranchPruner does not prune reserved branches,0.256,BranchPruner,6,1.575
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.037,git/diff,19,1.57
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.57
git/diff getBlobImage retrieves valid image for modified file,0.039,git/diff,19,1.57
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.57
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.57
git/diff imageDiff changes for text are not set,0.068,git/diff,19,1.57
git/diff getWorkingDirectoryDiff counts lines for new file,0.067,git/diff,19,1.57
git/diff getWorkingDirectoryDiff counts lines for modified file,0.071,git/diff,19,1.57
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.57
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.102,git/diff,19,1.57
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.137,git/diff,19,1.57
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.135,git/diff,19,1.57
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.111,git/diff,19,1.57
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.113,git/diff,19,1.57
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.079,git/diff,19,1.57
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.058,git/diff,19,1.57
git/diff getBinaryPaths in repo with text only files returns an empty array,0.076,git/diff,19,1.57
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.57
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.107,git/diff,19,1.57
git/reflog getRecentBranches returns the recently checked out branches,0.135,git/reflog,6,1.011
git/reflog getRecentBranches works after renaming a branch,0.184,git/reflog,6,1.011
git/reflog getRecentBranches returns a limited number of branches,0.252,git/reflog,6,1.011
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.144,git/reflog,6,1.011
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.187,git/reflog,6,1.011
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.062,git/reflog,6,1.011
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.293,formatPatch,5,1.036
git/checkout can checkout a valid branch name in an existing repository,0.111,git/checkout,6,0.89
git/checkout can checkout a branch when it exists on multiple remotes,0.117,git/checkout,6,0.89
git/checkout will fail when an existing branch matches the remote branch,0.114,git/checkout,6,0.89
git/checkout with submodules cleans up an submodule that no longer exists,0.261,git/checkout,6,0.89
git/checkout with submodules updates a changed submodule reference,0.21,git/checkout,6,0.89
git/merge merge and is successful returns true,0.035,git/merge,7,0.492
git/merge merge and is a noop returns false,0.048,git/merge,7,0.492
git/merge getMergeBase returns the common ancestor of two branches,0.058,git/merge,7,0.492
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.092,gitignore,9,0.593
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.093,gitignore,9,0.593
gitignore saveGitIgnore applies rule correctly to repository,0.09,gitignore,9,0.593
gitignore appendIgnoreRule appends one rule,0.097,gitignore,9,0.593
gitignore appendIgnoreRule appends multiple rules,0.099,gitignore,9,0.593
git/rev-parse isGitRepository should return true for a repository,0.038,git/rev-parse,10,0.595
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns true for initialized bare repository,0.057,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.595
git/rev-parse isBareRepository throws error for missing directory,0.043,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.05,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.04,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.039,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.161,git/rev-parse,10,0.595
git/submodule listSubmodules returns the submodule entry,0.101,git/submodule,3,0.618
git/submodule listSubmodules returns the expected tag,0.164,git/submodule,3,0.618
git/submodule resetSubmodulePaths update submodule to original commit,0.309,git/submodule,3,0.618
git/branch tip returns unborn for new repository,0.034,git/branch,10,0.64
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,10,0.64
git/branch tip returns detached for arbitrary checkout,0.052,git/branch,10,0.64
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.64
git/branch tip returns non-origin remote,0.089,git/branch,10,0.64
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.091,git/branch,10,0.64
git/branch getBranchesPointedAt in a local repo finds one branch name,0.062,git/branch,10,0.64
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.64
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.64
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.64
git/log getCommits loads history,0.14,git/log,7,0.636
git/log getCommits handles repository with HEAD file on disk,0.1,git/log,7,0.636
git/log getCommits handles repository with signed commit and log.showSignature set,0.093,git/log,7,0.636
git/log getChangedFiles loads the files changed in the commit,0.05,git/log,7,0.636
git/log getChangedFiles detects renames,0.073,git/log,7,0.636
git/log getChangedFiles detect copies,0.087,git/log,7,0.636
git/log getChangedFiles handles commit when HEAD exists on disk,0.05,git/log,7,0.636
git-lfs isUsingLFS returns false for repository not using LFS,0.05,git-lfs,9,0.482
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.482
git/reset reset can hard reset a repository,0.062,git/reset,2,0.11
git/remote getRemotes should return both remotes,0.039,git/remote,9,0.379
git/remote findDefaultRemote returns origin when multiple remotes found,0.043,git/remote,9,0.379
git/remote findDefaultRemote returns something when origin removed,0.054,git/remote,9,0.379
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.037,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.299
git/config config looks up config values,0.044,git/config,4,0.264
git/config config returns null for undefined values,0.044,git/config,4,0.264
git/config global config getGlobalConfigPath gets the config path,0.053,git/config,4,0.264
git/config global config setGlobalConfigValue will replace all entries for a global value,0.084,git/config,4,0.264
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.215
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.215
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.215
git/core exit code handling throws for exit codes that were not expected,0.047,git/core,4,0.215
git/for-each-ref getBranches fetches branches using for-each-ref,0.069,git/for-each-ref,3,0.194
git/for-each-ref getBranches should return empty list for empty repo,0.055,git/for-each-ref,3,0.194
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.042,git/for-each-ref,3,0.194
AppStore can select a repository,0.117,AppStore,5,0.172
validatedRepositoryPath returns the path to the repository,0.352,validatedRepositoryPath,2,0.413
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.046
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.402,git/rebase,21,9.021
git/rebase detect conflicts status detects REBASE_HEAD,0.298,git/rebase,21,9.021
git/rebase detect conflicts has conflicted files in working directory,0.299,git/rebase,21,9.021
git/rebase detect conflicts is a detached HEAD state,0.328,git/rebase,21,9.021
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.348,git/rebase,21,9.021
git/rebase abort after conflicts found no longer has working directory changes,0.342,git/rebase,21,9.021
git/rebase abort after conflicts found returns to the feature branch,0.335,git/rebase,21,9.021
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.378,git/rebase,21,9.021
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.407,git/rebase,21,9.021
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.397,git/rebase,21,9.021
git/rebase continue after resolving conflicts returns success,0.438,git/rebase,21,9.021
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.462,git/rebase,21,9.021
git/rebase continue after resolving conflicts no longer has working directory changes,0.464,git/rebase,21,9.021
git/rebase continue after resolving conflicts returns to the feature branch,0.451,git/rebase,21,9.021
git/rebase continue after resolving conflicts branch is now a different ref,0.459,git/rebase,21,9.021
git/rebase continue with additional changes unrelated to conflicted files returns success,0.451,git/rebase,21,9.021
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.45,git/rebase,21,9.021
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.468,git/rebase,21,9.021
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.485,git/rebase,21,9.021
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.461,git/rebase,21,9.021
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.441,git/rebase,21,9.021
git/commit createCommit normal commits the given files,0.114,git/commit,21,4.047
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,4.047
git/commit createCommit normal can commit for empty repository,0.124,git/commit,21,4.047
git/commit createCommit normal can commit renames,0.148,git/commit,21,4.047
git/commit createCommit partials can commit some lines from new file,0.15,git/commit,21,4.047
git/commit createCommit partials can commit second hunk from modified file,0.17,git/commit,21,4.047
git/commit createCommit partials can commit single delete from modified file,0.147,git/commit,21,4.047
git/commit createCommit partials can commit multiple hunks from modified file,0.17,git/commit,21,4.047
git/commit createCommit partials can commit some lines from deleted file,0.168,git/commit,21,4.047
git/commit createCommit partials can commit renames with modifications,0.164,git/commit,21,4.047
git/commit createCommit partials can commit renames with partially selected modifications,0.204,git/commit,21,4.047
git/commit createCommit with a merge conflict creates a merge commit,0.239,git/commit,21,4.047
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.218,git/commit,21,4.047
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.309,git/commit,21,4.047
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.303,git/commit,21,4.047
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.358,git/commit,21,4.047
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.366,git/commit,21,4.047
git/commit createMergeCommit with no changes throws an error,0.085,git/commit,21,4.047
git/commit index corner cases can commit when staged new file is then deleted,0.137,git/commit,21,4.047
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.158,git/commit,21,4.047
git/commit index corner cases file is deleted in index,0.156,git/commit,21,4.047
git/rebase can parse progress returns a value indicating conflicts were encountered,0.444,git/rebase,7,4.038
git/rebase can parse progress status detects REBASE_HEAD,0.447,git/rebase,7,4.038
git/rebase can parse progress is a detached HEAD state,0.465,git/rebase,7,4.038
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.867,git/rebase,7,4.038
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.891,git/rebase,7,4.038
git/rebase can parse progress for long rebase is a detached HEAD state,0.868,git/rebase,7,4.038
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.145,git/stash,14,2.564
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.254,git/stash,14,2.564
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.2,git/stash,14,2.564
GitStore loadCommitBatch includes HEAD when loading commits,0.343,GitStore,11,2.439
GitStore can discard changes from a repository,0.171,GitStore,11,2.439
GitStore can discard a renamed file,0.151,GitStore,11,2.439
GitStore undo first commit reports the repository is unborn,0.192,GitStore,11,2.439
GitStore undo first commit pre-fills the commit message,0.126,GitStore,11,2.439
GitStore undo first commit clears the undo commit dialog,0.208,GitStore,11,2.439
GitStore undo first commit has no staged files,0.201,GitStore,11,2.439
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.439
git/status getStatus with conflicted repo parses conflicted files with markers,0.303,git/status,12,2.039
git/status getStatus with conflicted repo parses conflicted files without markers,0.3,git/status,12,2.039
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.498,git/status,12,2.039
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,2.039
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.15,git/status,12,2.039
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.129,git/status,12,2.039
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,2.039
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.042,git/status,12,2.039
git/status getStatus with unconflicted repo reflects renames,0.086,git/status,12,2.039
git/status getStatus with unconflicted repo reflects copies,0.087,git/status,12,2.039
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.046,git/status,12,2.039
BranchPruner does nothing on non GitHub repositories,0.214,BranchPruner,6,1.507
BranchPruner prunes for GitHub repository,0.242,BranchPruner,6,1.507
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.199,BranchPruner,6,1.507
BranchPruner does not prune if there is no default branch,0.188,BranchPruner,6,1.507
BranchPruner does not prune reserved branches,0.258,BranchPruner,6,1.507
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.033,git/diff,19,1.649
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.128,git/diff,19,1.649
git/diff getBlobImage retrieves valid image for modified file,0.05,git/diff,19,1.649
git/diff getBlobImage retrieves valid images for deleted file,0.059,git/diff,19,1.649
git/diff imageDiff changes for images are set,0.078,git/diff,19,1.649
git/diff imageDiff changes for text are not set,0.073,git/diff,19,1.649
git/diff getWorkingDirectoryDiff counts lines for new file,0.07,git/diff,19,1.649
git/diff getWorkingDirectoryDiff counts lines for modified file,0.075,git/diff,19,1.649
git/diff getWorkingDirectoryDiff counts lines for staged file,0.07,git/diff,19,1.649
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.088,git/diff,19,1.649
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.142,git/diff,19,1.649
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.131,git/diff,19,1.649
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.649
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.649
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.079,git/diff,19,1.649
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.057,git/diff,19,1.649
git/diff getBinaryPaths in repo with text only files returns an empty array,0.072,git/diff,19,1.649
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.076,git/diff,19,1.649
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.092,git/diff,19,1.649
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.297,formatPatch,5,0.96
git/reflog getRecentBranches returns the recently checked out branches,0.137,git/reflog,6,1.038
git/reflog getRecentBranches works after renaming a branch,0.208,git/reflog,6,1.038
git/reflog getRecentBranches returns a limited number of branches,0.255,git/reflog,6,1.038
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.144,git/reflog,6,1.038
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.185,git/reflog,6,1.038
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.061,git/reflog,6,1.038
git/checkout can checkout a valid branch name in an existing repository,0.114,git/checkout,6,0.829
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.829
git/checkout will fail when an existing branch matches the remote branch,0.114,git/checkout,6,0.829
git/checkout with submodules cleans up an submodule that no longer exists,0.222,git/checkout,6,0.829
git/checkout with submodules updates a changed submodule reference,0.193,git/checkout,6,0.829
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.58
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,10,0.58
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.58
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.58
git/branch tip returns non-origin remote,0.078,git/branch,10,0.58
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.071,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo finds one branch name,0.042,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.58
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.58
git/log getCommits loads history,0.058,git/log,7,0.498
git/log getCommits handles repository with HEAD file on disk,0.072,git/log,7,0.498
git/log getCommits handles repository with signed commit and log.showSignature set,0.089,git/log,7,0.498
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.498
git/log getChangedFiles detects renames,0.074,git/log,7,0.498
git/log getChangedFiles detect copies,0.079,git/log,7,0.498
git/log getChangedFiles handles commit when HEAD exists on disk,0.038,git/log,7,0.498
git/submodule listSubmodules returns the submodule entry,0.1,git/submodule,3,0.592
git/submodule listSubmodules returns the expected tag,0.144,git/submodule,3,0.592
git/submodule resetSubmodulePaths update submodule to original commit,0.306,git/submodule,3,0.592
git/rev-parse isGitRepository should return true for a repository,0.122,git/rev-parse,10,0.73
git/rev-parse isGitRepository should return false for a directory,0.057,git/rev-parse,10,0.73
git/rev-parse isBareRepository returns false for default initialized repository,0.067,git/rev-parse,10,0.73
git/rev-parse isBareRepository returns true for initialized bare repository,0.056,git/rev-parse,10,0.73
git/rev-parse isBareRepository returns false for empty directory,0.046,git/rev-parse,10,0.73
git/rev-parse isBareRepository throws error for missing directory,0.043,git/rev-parse,10,0.73
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.73
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.73
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.73
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.175,git/rev-parse,10,0.73
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.108,gitignore,9,0.672
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.105,gitignore,9,0.672
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.672
gitignore appendIgnoreRule appends one rule,0.12,gitignore,9,0.672
gitignore appendIgnoreRule appends multiple rules,0.119,gitignore,9,0.672
git/merge merge and is successful returns true,0.036,git/merge,7,0.543
git/merge merge and is a noop returns false,0.049,git/merge,7,0.543
git/merge getMergeBase returns the common ancestor of two branches,0.057,git/merge,7,0.543
git-lfs isUsingLFS returns false for repository not using LFS,0.051,git-lfs,9,0.481
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.481
validatedRepositoryPath returns the path to the repository,0.042,validatedRepositoryPath,2,0.1
git/remote getRemotes should return both remotes,0.042,git/remote,9,0.392
git/remote findDefaultRemote returns origin when multiple remotes found,0.049,git/remote,9,0.392
git/remote findDefaultRemote returns something when origin removed,0.053,git/remote,9,0.392
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.039,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.026,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile includes empty context lines,0.033,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.306
git/config config looks up config values,0.041,git/config,4,0.265
git/config config returns null for undefined values,0.043,git/config,4,0.265
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.265
git/config global config setGlobalConfigValue will replace all entries for a global value,0.084,git/config,4,0.265
git/core error handling does not throw for errors that were expected,0.043,git/core,4,0.205
git/core error handling throws for errors that were not expected,0.037,git/core,4,0.205
git/core exit code handling does not throw for exit codes that were expected,0.038,git/core,4,0.205
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.205
git/for-each-ref getBranches fetches branches using for-each-ref,0.06,git/for-each-ref,3,0.185
git/for-each-ref getBranches should return empty list for empty repo,0.057,git/for-each-ref,3,0.185
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.039,git/for-each-ref,3,0.185
AppStore can select a repository,0.121,AppStore,5,0.175
git/reset reset can hard reset a repository,0.372,git/reset,2,0.416
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.02,git/git-attributes,1,0.051
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.398,git/rebase,21,9.098
git/rebase detect conflicts status detects REBASE_HEAD,0.297,git/rebase,21,9.098
git/rebase detect conflicts has conflicted files in working directory,0.298,git/rebase,21,9.098
git/rebase detect conflicts is a detached HEAD state,0.339,git/rebase,21,9.098
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.319,git/rebase,21,9.098
git/rebase abort after conflicts found no longer has working directory changes,0.335,git/rebase,21,9.098
git/rebase abort after conflicts found returns to the feature branch,0.348,git/rebase,21,9.098
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.397,git/rebase,21,9.098
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.408,git/rebase,21,9.098
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.431,git/rebase,21,9.098
git/rebase continue after resolving conflicts returns success,0.448,git/rebase,21,9.098
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.47,git/rebase,21,9.098
git/rebase continue after resolving conflicts no longer has working directory changes,0.47,git/rebase,21,9.098
git/rebase continue after resolving conflicts returns to the feature branch,0.462,git/rebase,21,9.098
git/rebase continue after resolving conflicts branch is now a different ref,0.462,git/rebase,21,9.098
git/rebase continue with additional changes unrelated to conflicted files returns success,0.461,git/rebase,21,9.098
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.462,git/rebase,21,9.098
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.474,git/rebase,21,9.098
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.465,git/rebase,21,9.098
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.469,git/rebase,21,9.098
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.418,git/rebase,21,9.098
git/commit createCommit normal commits the given files,0.111,git/commit,21,4.042
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,4.042
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,4.042
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.042
git/commit createCommit partials can commit some lines from new file,0.16,git/commit,21,4.042
git/commit createCommit partials can commit second hunk from modified file,0.161,git/commit,21,4.042
git/commit createCommit partials can commit single delete from modified file,0.146,git/commit,21,4.042
git/commit createCommit partials can commit multiple hunks from modified file,0.169,git/commit,21,4.042
git/commit createCommit partials can commit some lines from deleted file,0.162,git/commit,21,4.042
git/commit createCommit partials can commit renames with modifications,0.169,git/commit,21,4.042
git/commit createCommit partials can commit renames with partially selected modifications,0.204,git/commit,21,4.042
git/commit createCommit with a merge conflict creates a merge commit,0.241,git/commit,21,4.042
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.222,git/commit,21,4.042
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.312,git/commit,21,4.042
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.302,git/commit,21,4.042
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.361,git/commit,21,4.042
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.368,git/commit,21,4.042
git/commit createMergeCommit with no changes throws an error,0.081,git/commit,21,4.042
git/commit index corner cases can commit when staged new file is then deleted,0.14,git/commit,21,4.042
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,4.042
git/commit index corner cases file is deleted in index,0.153,git/commit,21,4.042
git/rebase can parse progress returns a value indicating conflicts were encountered,0.444,git/rebase,7,4.009
git/rebase can parse progress status detects REBASE_HEAD,0.433,git/rebase,7,4.009
git/rebase can parse progress is a detached HEAD state,0.452,git/rebase,7,4.009
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.851,git/rebase,7,4.009
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.89,git/rebase,7,4.009
git/rebase can parse progress for long rebase is a detached HEAD state,0.888,git/rebase,7,4.009
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.161,git/stash,14,2.681
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.25,git/stash,14,2.681
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.21,git/stash,14,2.681
GitStore loadCommitBatch includes HEAD when loading commits,0.33,GitStore,11,2.463
GitStore can discard changes from a repository,0.194,GitStore,11,2.463
GitStore can discard a renamed file,0.147,GitStore,11,2.463
GitStore undo first commit reports the repository is unborn,0.187,GitStore,11,2.463
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.463
GitStore undo first commit clears the undo commit dialog,0.212,GitStore,11,2.463
GitStore undo first commit has no staged files,0.203,GitStore,11,2.463
GitStore repository with HEAD file can discard modified change cleanly,0.112,GitStore,11,2.463
git/status getStatus with conflicted repo parses conflicted files with markers,0.288,git/status,12,2.002
git/status getStatus with conflicted repo parses conflicted files without markers,0.289,git/status,12,2.002
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.492,git/status,12,2.002
git/status getStatus with conflicted repo parses resolved files,0.294,git/status,12,2.002
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.16,git/status,12,2.002
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.114,git/status,12,2.002
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,2.002
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.054,git/status,12,2.002
git/status getStatus with unconflicted repo reflects renames,0.084,git/status,12,2.002
git/status getStatus with unconflicted repo reflects copies,0.087,git/status,12,2.002
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.039,git/status,12,2.002
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.556
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.556
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.556
git/diff getBlobImage retrieves valid images for deleted file,0.05,git/diff,19,1.556
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.556
git/diff imageDiff changes for text are not set,0.069,git/diff,19,1.556
git/diff getWorkingDirectoryDiff counts lines for new file,0.068,git/diff,19,1.556
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.556
git/diff getWorkingDirectoryDiff counts lines for staged file,0.134,git/diff,19,1.556
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.092,git/diff,19,1.556
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.12,git/diff,19,1.556
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.136,git/diff,19,1.556
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.102,git/diff,19,1.556
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.105,git/diff,19,1.556
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.556
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.556
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.556
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.556
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.556
BranchPruner does nothing on non GitHub repositories,0.204,BranchPruner,6,1.512
BranchPruner prunes for GitHub repository,0.246,BranchPruner,6,1.512
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.205,BranchPruner,6,1.512
BranchPruner does not prune if there is no default branch,0.2,BranchPruner,6,1.512
BranchPruner does not prune reserved branches,0.255,BranchPruner,6,1.512
git/reflog getRecentBranches returns the recently checked out branches,0.138,git/reflog,6,0.908
git/reflog getRecentBranches works after renaming a branch,0.163,git/reflog,6,0.908
git/reflog getRecentBranches returns a limited number of branches,0.223,git/reflog,6,0.908
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.131,git/reflog,6,0.908
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.156,git/reflog,6,0.908
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.908
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.269,formatPatch,5,0.868
git/checkout can checkout a valid branch name in an existing repository,0.108,git/checkout,6,0.854
git/checkout can checkout a branch when it exists on multiple remotes,0.111,git/checkout,6,0.854
git/checkout will fail when an existing branch matches the remote branch,0.106,git/checkout,6,0.854
git/checkout with submodules cleans up an submodule that no longer exists,0.239,git/checkout,6,0.854
git/checkout with submodules updates a changed submodule reference,0.217,git/checkout,6,0.854
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.61
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns true for initialized bare repository,0.049,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for empty directory,0.039,git/rev-parse,10,0.61
git/rev-parse isBareRepository throws error for missing directory,0.036,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.039,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.055,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.172,git/rev-parse,10,0.61
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.097,gitignore,9,0.629
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.1,gitignore,9,0.629
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.629
gitignore appendIgnoreRule appends one rule,0.105,gitignore,9,0.629
gitignore appendIgnoreRule appends multiple rules,0.111,gitignore,9,0.629
git/submodule listSubmodules returns the submodule entry,0.108,git/submodule,3,0.592
git/submodule listSubmodules returns the expected tag,0.147,git/submodule,3,0.592
git/submodule resetSubmodulePaths update submodule to original commit,0.294,git/submodule,3,0.592
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.615
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,10,0.615
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.615
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.615
git/branch tip returns non-origin remote,0.07,git/branch,10,0.615
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,10,0.615
git/branch getBranchesPointedAt in a local repo finds one branch name,0.052,git/branch,10,0.615
git/branch getBranchesPointedAt in a local repo finds no branch names,0.046,git/branch,10,0.615
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.043,git/branch,10,0.615
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.081,git/branch,10,0.615
git/merge merge and is successful returns true,0.038,git/merge,7,0.565
git/merge merge and is a noop returns false,0.051,git/merge,7,0.565
git/merge getMergeBase returns the common ancestor of two branches,0.064,git/merge,7,0.565
git/log getCommits loads history,0.059,git/log,7,0.515
git/log getCommits handles repository with HEAD file on disk,0.074,git/log,7,0.515
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.515
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.515
git/log getChangedFiles detects renames,0.08,git/log,7,0.515
git/log getChangedFiles detect copies,0.08,git/log,7,0.515
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.515
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.5
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.5
git/reset reset can hard reset a repository,0.066,git/reset,2,0.107
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.407
git/remote findDefaultRemote returns origin when multiple remotes found,0.051,git/remote,9,0.407
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.407
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.031,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile includes empty context lines,0.021,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.299
git/config config looks up config values,0.047,git/config,4,0.281
git/config config returns null for undefined values,0.046,git/config,4,0.281
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.281
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,4,0.281
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.218
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.218
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.218
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.218
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.2
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.2
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.2
AppStore can select a repository,0.122,AppStore,5,0.176
validatedRepositoryPath returns the path to the repository,0.372,validatedRepositoryPath,2,0.428
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.389,git/rebase,21,9.017
git/rebase detect conflicts status detects REBASE_HEAD,0.307,git/rebase,21,9.017
git/rebase detect conflicts has conflicted files in working directory,0.3,git/rebase,21,9.017
git/rebase detect conflicts is a detached HEAD state,0.319,git/rebase,21,9.017
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.329,git/rebase,21,9.017
git/rebase abort after conflicts found no longer has working directory changes,0.328,git/rebase,21,9.017
git/rebase abort after conflicts found returns to the feature branch,0.336,git/rebase,21,9.017
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.374,git/rebase,21,9.017
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.39,git/rebase,21,9.017
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.427,git/rebase,21,9.017
git/rebase continue after resolving conflicts returns success,0.446,git/rebase,21,9.017
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.454,git/rebase,21,9.017
git/rebase continue after resolving conflicts no longer has working directory changes,0.463,git/rebase,21,9.017
git/rebase continue after resolving conflicts returns to the feature branch,0.463,git/rebase,21,9.017
git/rebase continue after resolving conflicts branch is now a different ref,0.449,git/rebase,21,9.017
git/rebase continue with additional changes unrelated to conflicted files returns success,0.45,git/rebase,21,9.017
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.467,git/rebase,21,9.017
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.469,git/rebase,21,9.017
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.465,git/rebase,21,9.017
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.471,git/rebase,21,9.017
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.455,git/rebase,21,9.017
git/commit createCommit normal commits the given files,0.111,git/commit,21,4.05
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,4.05
git/commit createCommit normal can commit for empty repository,0.124,git/commit,21,4.05
git/commit createCommit normal can commit renames,0.145,git/commit,21,4.05
git/commit createCommit partials can commit some lines from new file,0.159,git/commit,21,4.05
git/commit createCommit partials can commit second hunk from modified file,0.164,git/commit,21,4.05
git/commit createCommit partials can commit single delete from modified file,0.152,git/commit,21,4.05
git/commit createCommit partials can commit multiple hunks from modified file,0.167,git/commit,21,4.05
git/commit createCommit partials can commit some lines from deleted file,0.152,git/commit,21,4.05
git/commit createCommit partials can commit renames with modifications,0.158,git/commit,21,4.05
git/commit createCommit partials can commit renames with partially selected modifications,0.203,git/commit,21,4.05
git/commit createCommit with a merge conflict creates a merge commit,0.236,git/commit,21,4.05
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.216,git/commit,21,4.05
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.309,git/commit,21,4.05
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.322,git/commit,21,4.05
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.373,git/commit,21,4.05
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.36,git/commit,21,4.05
git/commit createMergeCommit with no changes throws an error,0.088,git/commit,21,4.05
git/commit index corner cases can commit when staged new file is then deleted,0.14,git/commit,21,4.05
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.153,git/commit,21,4.05
git/commit index corner cases file is deleted in index,0.164,git/commit,21,4.05
git/rebase can parse progress returns a value indicating conflicts were encountered,0.455,git/rebase,7,4.067
git/rebase can parse progress status detects REBASE_HEAD,0.463,git/rebase,7,4.067
git/rebase can parse progress is a detached HEAD state,0.454,git/rebase,7,4.067
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.856,git/rebase,7,4.067
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.878,git/rebase,7,4.067
git/rebase can parse progress for long rebase is a detached HEAD state,0.91,git/rebase,7,4.067
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.166,git/stash,14,2.775
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.301,git/stash,14,2.775
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.227,git/stash,14,2.775
GitStore loadCommitBatch includes HEAD when loading commits,0.338,GitStore,11,2.458
GitStore can discard changes from a repository,0.182,GitStore,11,2.458
GitStore can discard a renamed file,0.15,GitStore,11,2.458
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.458
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.458
GitStore undo first commit clears the undo commit dialog,0.214,GitStore,11,2.458
GitStore undo first commit has no staged files,0.205,GitStore,11,2.458
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.458
git/status getStatus with conflicted repo parses conflicted files with markers,0.285,git/status,12,1.917
git/status getStatus with conflicted repo parses conflicted files without markers,0.292,git/status,12,1.917
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.531,git/status,12,1.917
git/status getStatus with conflicted repo parses resolved files,0.256,git/status,12,1.917
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.091,git/status,12,1.917
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.108,git/status,12,1.917
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.917
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.041,git/status,12,1.917
git/status getStatus with unconflicted repo reflects renames,0.081,git/status,12,1.917
git/status getStatus with unconflicted repo reflects copies,0.091,git/status,12,1.917
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,1.917
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.551
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.551
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.551
git/diff getBlobImage retrieves valid images for deleted file,0.051,git/diff,19,1.551
git/diff imageDiff changes for images are set,0.121,git/diff,19,1.551
git/diff imageDiff changes for text are not set,0.091,git/diff,19,1.551
git/diff getWorkingDirectoryDiff counts lines for new file,0.075,git/diff,19,1.551
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.551
git/diff getWorkingDirectoryDiff counts lines for staged file,0.071,git/diff,19,1.551
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.098,git/diff,19,1.551
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.122,git/diff,19,1.551
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.124,git/diff,19,1.551
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.551
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.107,git/diff,19,1.551
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.081,git/diff,19,1.551
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.551
git/diff getBinaryPaths in repo with text only files returns an empty array,0.06,git/diff,19,1.551
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.078,git/diff,19,1.551
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.088,git/diff,19,1.551
BranchPruner does nothing on non GitHub repositories,0.199,BranchPruner,6,1.529
BranchPruner prunes for GitHub repository,0.259,BranchPruner,6,1.529
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.198,BranchPruner,6,1.529
BranchPruner does not prune if there is no default branch,0.197,BranchPruner,6,1.529
BranchPruner does not prune reserved branches,0.26,BranchPruner,6,1.529
git/reflog getRecentBranches returns the recently checked out branches,0.134,git/reflog,6,0.916
git/reflog getRecentBranches works after renaming a branch,0.166,git/reflog,6,0.916
git/reflog getRecentBranches returns a limited number of branches,0.229,git/reflog,6,0.916
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.13,git/reflog,6,0.916
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.16,git/reflog,6,0.916
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.916
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.267,formatPatch,5,0.872
git/checkout can checkout a valid branch name in an existing repository,0.112,git/checkout,6,0.868
git/checkout can checkout a branch when it exists on multiple remotes,0.111,git/checkout,6,0.868
git/checkout will fail when an existing branch matches the remote branch,0.109,git/checkout,6,0.868
git/checkout with submodules cleans up an submodule that no longer exists,0.255,git/checkout,6,0.868
git/checkout with submodules updates a changed submodule reference,0.209,git/checkout,6,0.868
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.627
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.099,gitignore,9,0.627
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.627
gitignore appendIgnoreRule appends one rule,0.104,gitignore,9,0.627
gitignore appendIgnoreRule appends multiple rules,0.107,gitignore,9,0.627
git/branch tip returns unborn for new repository,0.037,git/branch,10,0.615
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.615
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.615
git/branch tip returns current branch when on a valid HEAD,0.066,git/branch,10,0.615
git/branch tip returns non-origin remote,0.079,git/branch,10,0.615
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,10,0.615
git/branch getBranchesPointedAt in a local repo finds one branch name,0.046,git/branch,10,0.615
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.615
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.615
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.615
git/rev-parse isGitRepository should return true for a repository,0.049,git/rev-parse,10,0.634
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.634
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.634
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.634
git/rev-parse isBareRepository returns false for empty directory,0.047,git/rev-parse,10,0.634
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.634
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.055,git/rev-parse,10,0.634
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.044,git/rev-parse,10,0.634
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.043,git/rev-parse,10,0.634
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.177,git/rev-parse,10,0.634
git/submodule listSubmodules returns the submodule entry,0.107,git/submodule,3,0.626
git/submodule listSubmodules returns the expected tag,0.155,git/submodule,3,0.626
git/submodule resetSubmodulePaths update submodule to original commit,0.323,git/submodule,3,0.626
git/merge merge and is successful returns true,0.036,git/merge,7,0.555
git/merge merge and is a noop returns false,0.048,git/merge,7,0.555
git/merge getMergeBase returns the common ancestor of two branches,0.065,git/merge,7,0.555
git/log getCommits loads history,0.061,git/log,7,0.502
git/log getCommits handles repository with HEAD file on disk,0.074,git/log,7,0.502
git/log getCommits handles repository with signed commit and log.showSignature set,0.089,git/log,7,0.502
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.502
git/log getChangedFiles detects renames,0.068,git/log,7,0.502
git/log getChangedFiles detect copies,0.076,git/log,7,0.502
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.502
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.498
git-lfs isUsingLFS returns true if LFS is tracking a path,0.07,git-lfs,9,0.498
validatedRepositoryPath returns the path to the repository,0.041,validatedRepositoryPath,2,0.097
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.415
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,9,0.415
git/remote findDefaultRemote returns something when origin removed,0.053,git/remote,9,0.415
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.312
git/config config looks up config values,0.042,git/config,4,0.273
git/config config returns null for undefined values,0.048,git/config,4,0.273
git/config global config getGlobalConfigPath gets the config path,0.056,git/config,4,0.273
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,4,0.273
git/core error handling does not throw for errors that were expected,0.048,git/core,4,0.216
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.216
git/core exit code handling does not throw for exit codes that were expected,0.042,git/core,4,0.216
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.216
git/for-each-ref getBranches fetches branches using for-each-ref,0.059,git/for-each-ref,3,0.188
git/for-each-ref getBranches should return empty list for empty repo,0.058,git/for-each-ref,3,0.188
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.041,git/for-each-ref,3,0.188
AppStore can select a repository,0.122,AppStore,5,0.176
git/reset reset can hard reset a repository,0.384,git/reset,2,0.427
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.394,git/rebase,21,9.07
git/rebase detect conflicts status detects REBASE_HEAD,0.293,git/rebase,21,9.07
git/rebase detect conflicts has conflicted files in working directory,0.315,git/rebase,21,9.07
git/rebase detect conflicts is a detached HEAD state,0.328,git/rebase,21,9.07
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.329,git/rebase,21,9.07
git/rebase abort after conflicts found no longer has working directory changes,0.333,git/rebase,21,9.07
git/rebase abort after conflicts found returns to the feature branch,0.338,git/rebase,21,9.07
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.389,git/rebase,21,9.07
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.405,git/rebase,21,9.07
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.399,git/rebase,21,9.07
git/rebase continue after resolving conflicts returns success,0.444,git/rebase,21,9.07
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.473,git/rebase,21,9.07
git/rebase continue after resolving conflicts no longer has working directory changes,0.457,git/rebase,21,9.07
git/rebase continue after resolving conflicts returns to the feature branch,0.443,git/rebase,21,9.07
git/rebase continue after resolving conflicts branch is now a different ref,0.482,git/rebase,21,9.07
git/rebase continue with additional changes unrelated to conflicted files returns success,0.454,git/rebase,21,9.07
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.469,git/rebase,21,9.07
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.479,git/rebase,21,9.07
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.474,git/rebase,21,9.07
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.456,git/rebase,21,9.07
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.451,git/rebase,21,9.07
git/rebase can parse progress returns a value indicating conflicts were encountered,0.389,git/rebase,7,3.553
git/rebase can parse progress status detects REBASE_HEAD,0.393,git/rebase,7,3.553
git/rebase can parse progress is a detached HEAD state,0.382,git/rebase,7,3.553
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.754,git/rebase,7,3.553
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.765,git/rebase,7,3.553
git/rebase can parse progress for long rebase is a detached HEAD state,0.814,git/rebase,7,3.553
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.382
git/commit createCommit normal commit does not strip commentary by default,0.101,git/commit,21,4.382
git/commit createCommit normal can commit for empty repository,0.133,git/commit,21,4.382
git/commit createCommit normal can commit renames,0.148,git/commit,21,4.382
git/commit createCommit partials can commit some lines from new file,0.168,git/commit,21,4.382
git/commit createCommit partials can commit second hunk from modified file,0.175,git/commit,21,4.382
git/commit createCommit partials can commit single delete from modified file,0.165,git/commit,21,4.382
git/commit createCommit partials can commit multiple hunks from modified file,0.18,git/commit,21,4.382
git/commit createCommit partials can commit some lines from deleted file,0.17,git/commit,21,4.382
git/commit createCommit partials can commit renames with modifications,0.182,git/commit,21,4.382
git/commit createCommit partials can commit renames with partially selected modifications,0.22,git/commit,21,4.382
git/commit createCommit with a merge conflict creates a merge commit,0.263,git/commit,21,4.382
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.242,git/commit,21,4.382
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.349,git/commit,21,4.382
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.337,git/commit,21,4.382
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.39,git/commit,21,4.382
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.406,git/commit,21,4.382
git/commit createMergeCommit with no changes throws an error,0.087,git/commit,21,4.382
git/commit index corner cases can commit when staged new file is then deleted,0.151,git/commit,21,4.382
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.171,git/commit,21,4.382
git/commit index corner cases file is deleted in index,0.17,git/commit,21,4.382
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.162,git/stash,14,2.614
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.248,git/stash,14,2.614
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.245,git/stash,14,2.614
GitStore loadCommitBatch includes HEAD when loading commits,0.346,GitStore,11,2.449
GitStore can discard changes from a repository,0.168,GitStore,11,2.449
GitStore can discard a renamed file,0.149,GitStore,11,2.449
GitStore undo first commit reports the repository is unborn,0.19,GitStore,11,2.449
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.449
GitStore undo first commit clears the undo commit dialog,0.213,GitStore,11,2.449
GitStore undo first commit has no staged files,0.199,GitStore,11,2.449
GitStore repository with HEAD file can discard modified change cleanly,0.11,GitStore,11,2.449
git/status getStatus with conflicted repo parses conflicted files with markers,0.295,git/status,12,1.921
git/status getStatus with conflicted repo parses conflicted files without markers,0.294,git/status,12,1.921
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.504,git/status,12,1.921
git/status getStatus with conflicted repo parses resolved files,0.263,git/status,12,1.921
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.094,git/status,12,1.921
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.11,git/status,12,1.921
git/status getStatus with unconflicted repo parses changed files,0.055,git/status,12,1.921
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.921
git/status getStatus with unconflicted repo reflects renames,0.085,git/status,12,1.921
git/status getStatus with unconflicted repo reflects copies,0.08,git/status,12,1.921
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.921
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.463
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.463
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.463
git/diff getBlobImage retrieves valid images for deleted file,0.049,git/diff,19,1.463
git/diff imageDiff changes for images are set,0.067,git/diff,19,1.463
git/diff imageDiff changes for text are not set,0.058,git/diff,19,1.463
git/diff getWorkingDirectoryDiff counts lines for new file,0.112,git/diff,19,1.463
git/diff getWorkingDirectoryDiff counts lines for modified file,0.095,git/diff,19,1.463
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.463
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.085,git/diff,19,1.463
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.114,git/diff,19,1.463
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.122,git/diff,19,1.463
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.097,git/diff,19,1.463
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.098,git/diff,19,1.463
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.067,git/diff,19,1.463
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.463
git/diff getBinaryPaths in repo with text only files returns an empty array,0.06,git/diff,19,1.463
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.068,git/diff,19,1.463
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.092,git/diff,19,1.463
BranchPruner does nothing on non GitHub repositories,0.19,BranchPruner,6,1.469
BranchPruner prunes for GitHub repository,0.243,BranchPruner,6,1.469
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.185,BranchPruner,6,1.469
BranchPruner does not prune if there is no default branch,0.196,BranchPruner,6,1.469
BranchPruner does not prune reserved branches,0.253,BranchPruner,6,1.469
git/reflog getRecentBranches returns the recently checked out branches,0.129,git/reflog,6,0.915
git/reflog getRecentBranches works after renaming a branch,0.165,git/reflog,6,0.915
git/reflog getRecentBranches returns a limited number of branches,0.239,git/reflog,6,0.915
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.127,git/reflog,6,0.915
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.16,git/reflog,6,0.915
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.05,git/reflog,6,0.915
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.257,formatPatch,5,0.856
git/checkout can checkout a valid branch name in an existing repository,0.107,git/checkout,6,0.849
git/checkout can checkout a branch when it exists on multiple remotes,0.109,git/checkout,6,0.849
git/checkout will fail when an existing branch matches the remote branch,0.107,git/checkout,6,0.849
git/checkout with submodules cleans up an submodule that no longer exists,0.255,git/checkout,6,0.849
git/checkout with submodules updates a changed submodule reference,0.202,git/checkout,6,0.849
git/rev-parse isGitRepository should return true for a repository,0.039,git/rev-parse,10,0.611
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for default initialized repository,0.047,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns true for initialized bare repository,0.052,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for empty directory,0.047,git/rev-parse,10,0.611
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.046,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.169,git/rev-parse,10,0.611
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.099,gitignore,9,0.612
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.096,gitignore,9,0.612
gitignore saveGitIgnore applies rule correctly to repository,0.087,gitignore,9,0.612
gitignore appendIgnoreRule appends one rule,0.104,gitignore,9,0.612
gitignore appendIgnoreRule appends multiple rules,0.105,gitignore,9,0.612
git/submodule listSubmodules returns the submodule entry,0.091,git/submodule,3,0.573
git/submodule listSubmodules returns the expected tag,0.149,git/submodule,3,0.573
git/submodule resetSubmodulePaths update submodule to original commit,0.292,git/submodule,3,0.573
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.59
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,10,0.59
git/branch tip returns detached for arbitrary checkout,0.041,git/branch,10,0.59
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.59
git/branch tip returns non-origin remote,0.074,git/branch,10,0.59
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.59
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.59
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.59
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.043,git/branch,10,0.59
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.59
git/merge merge and is successful returns true,0.035,git/merge,7,0.529
git/merge merge and is a noop returns false,0.049,git/merge,7,0.529
git/merge getMergeBase returns the common ancestor of two branches,0.059,git/merge,7,0.529
git/log getCommits loads history,0.056,git/log,7,0.507
git/log getCommits handles repository with HEAD file on disk,0.074,git/log,7,0.507
git/log getCommits handles repository with signed commit and log.showSignature set,0.086,git/log,7,0.507
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.507
git/log getChangedFiles detects renames,0.074,git/log,7,0.507
git/log getChangedFiles detect copies,0.082,git/log,7,0.507
git/log getChangedFiles handles commit when HEAD exists on disk,0.045,git/log,7,0.507
git-lfs isUsingLFS returns false for repository not using LFS,0.044,git-lfs,9,0.465
git-lfs isUsingLFS returns true if LFS is tracking a path,0.064,git-lfs,9,0.465
git/reset reset can hard reset a repository,0.06,git/reset,2,0.103
git/remote getRemotes should return both remotes,0.042,git/remote,9,0.405
git/remote findDefaultRemote returns origin when multiple remotes found,0.049,git/remote,9,0.405
git/remote findDefaultRemote returns something when origin removed,0.066,git/remote,9,0.405
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.301
git/config config looks up config values,0.042,git/config,4,0.267
git/config config returns null for undefined values,0.044,git/config,4,0.267
git/config global config getGlobalConfigPath gets the config path,0.056,git/config,4,0.267
git/config global config setGlobalConfigValue will replace all entries for a global value,0.085,git/config,4,0.267
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.218
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.218
git/core exit code handling does not throw for exit codes that were expected,0.042,git/core,4,0.218
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.218
git/for-each-ref getBranches fetches branches using for-each-ref,0.06,git/for-each-ref,3,0.187
git/for-each-ref getBranches should return empty list for empty repo,0.057,git/for-each-ref,3,0.187
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.04,git/for-each-ref,3,0.187
AppStore can select a repository,0.122,AppStore,5,0.174
validatedRepositoryPath returns the path to the repository,0.357,validatedRepositoryPath,2,0.418
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.395,git/rebase,21,9.161
git/rebase detect conflicts status detects REBASE_HEAD,0.319,git/rebase,21,9.161
git/rebase detect conflicts has conflicted files in working directory,0.302,git/rebase,21,9.161
git/rebase detect conflicts is a detached HEAD state,0.325,git/rebase,21,9.161
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.335,git/rebase,21,9.161
git/rebase abort after conflicts found no longer has working directory changes,0.333,git/rebase,21,9.161
git/rebase abort after conflicts found returns to the feature branch,0.348,git/rebase,21,9.161
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.406,git/rebase,21,9.161
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.405,git/rebase,21,9.161
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.388,git/rebase,21,9.161
git/rebase continue after resolving conflicts returns success,0.454,git/rebase,21,9.161
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.454,git/rebase,21,9.161
git/rebase continue after resolving conflicts no longer has working directory changes,0.475,git/rebase,21,9.161
git/rebase continue after resolving conflicts returns to the feature branch,0.469,git/rebase,21,9.161
git/rebase continue after resolving conflicts branch is now a different ref,0.462,git/rebase,21,9.161
git/rebase continue with additional changes unrelated to conflicted files returns success,0.452,git/rebase,21,9.161
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.48,git/rebase,21,9.161
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.489,git/rebase,21,9.161
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.468,git/rebase,21,9.161
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.485,git/rebase,21,9.161
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.46,git/rebase,21,9.161
git/commit createCommit normal commits the given files,0.114,git/commit,21,4.103
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,4.103
git/commit createCommit normal can commit for empty repository,0.121,git/commit,21,4.103
git/commit createCommit normal can commit renames,0.153,git/commit,21,4.103
git/commit createCommit partials can commit some lines from new file,0.152,git/commit,21,4.103
git/commit createCommit partials can commit second hunk from modified file,0.165,git/commit,21,4.103
git/commit createCommit partials can commit single delete from modified file,0.145,git/commit,21,4.103
git/commit createCommit partials can commit multiple hunks from modified file,0.169,git/commit,21,4.103
git/commit createCommit partials can commit some lines from deleted file,0.158,git/commit,21,4.103
git/commit createCommit partials can commit renames with modifications,0.167,git/commit,21,4.103
git/commit createCommit partials can commit renames with partially selected modifications,0.206,git/commit,21,4.103
git/commit createCommit with a merge conflict creates a merge commit,0.234,git/commit,21,4.103
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.214,git/commit,21,4.103
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.332,git/commit,21,4.103
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.306,git/commit,21,4.103
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.363,git/commit,21,4.103
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.38,git/commit,21,4.103
git/commit createMergeCommit with no changes throws an error,0.091,git/commit,21,4.103
git/commit index corner cases can commit when staged new file is then deleted,0.146,git/commit,21,4.103
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.162,git/commit,21,4.103
git/commit index corner cases file is deleted in index,0.171,git/commit,21,4.103
git/rebase can parse progress returns a value indicating conflicts were encountered,0.449,git/rebase,7,4.138
git/rebase can parse progress status detects REBASE_HEAD,0.455,git/rebase,7,4.138
git/rebase can parse progress is a detached HEAD state,0.471,git/rebase,7,4.138
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.895,git/rebase,7,4.138
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.892,git/rebase,7,4.138
git/rebase can parse progress for long rebase is a detached HEAD state,0.925,git/rebase,7,4.138
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.169,git/stash,14,2.591
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.254,git/stash,14,2.591
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.218,git/stash,14,2.591
GitStore loadCommitBatch includes HEAD when loading commits,0.353,GitStore,11,2.547
GitStore can discard changes from a repository,0.206,GitStore,11,2.547
GitStore can discard a renamed file,0.154,GitStore,11,2.547
GitStore undo first commit reports the repository is unborn,0.186,GitStore,11,2.547
GitStore undo first commit pre-fills the commit message,0.138,GitStore,11,2.547
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.547
GitStore undo first commit has no staged files,0.214,GitStore,11,2.547
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.547
git/status getStatus with conflicted repo parses conflicted files with markers,0.292,git/status,12,2.068
git/status getStatus with conflicted repo parses conflicted files without markers,0.3,git/status,12,2.068
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.52,git/status,12,2.068
git/status getStatus with conflicted repo parses resolved files,0.301,git/status,12,2.068
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.108,git/status,12,2.068
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.173,git/status,12,2.068
git/status getStatus with unconflicted repo parses changed files,0.066,git/status,12,2.068
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,2.068
git/status getStatus with unconflicted repo reflects renames,0.08,git/status,12,2.068
git/status getStatus with unconflicted repo reflects copies,0.088,git/status,12,2.068
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.046,git/status,12,2.068
BranchPruner does nothing on non GitHub repositories,0.185,BranchPruner,6,1.399
BranchPruner prunes for GitHub repository,0.235,BranchPruner,6,1.399
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.19,BranchPruner,6,1.399
BranchPruner does not prune if there is no default branch,0.175,BranchPruner,6,1.399
BranchPruner does not prune reserved branches,0.222,BranchPruner,6,1.399
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.602
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.038,git/diff,19,1.602
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.602
git/diff getBlobImage retrieves valid images for deleted file,0.051,git/diff,19,1.602
git/diff imageDiff changes for images are set,0.156,git/diff,19,1.602
git/diff imageDiff changes for text are not set,0.07,git/diff,19,1.602
git/diff getWorkingDirectoryDiff counts lines for new file,0.074,git/diff,19,1.602
git/diff getWorkingDirectoryDiff counts lines for modified file,0.072,git/diff,19,1.602
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.602
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.1,git/diff,19,1.602
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.135,git/diff,19,1.602
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.131,git/diff,19,1.602
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.602
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.11,git/diff,19,1.602
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.074,git/diff,19,1.602
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.055,git/diff,19,1.602
git/diff getBinaryPaths in repo with text only files returns an empty array,0.068,git/diff,19,1.602
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.602
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.602
git/reflog getRecentBranches returns the recently checked out branches,0.13,git/reflog,6,0.935
git/reflog getRecentBranches works after renaming a branch,0.163,git/reflog,6,0.935
git/reflog getRecentBranches returns a limited number of branches,0.227,git/reflog,6,0.935
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.145,git/reflog,6,0.935
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.164,git/reflog,6,0.935
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.056,git/reflog,6,0.935
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.289,formatPatch,5,0.906
git/checkout can checkout a valid branch name in an existing repository,0.111,git/checkout,6,0.846
git/checkout can checkout a branch when it exists on multiple remotes,0.11,git/checkout,6,0.846
git/checkout will fail when an existing branch matches the remote branch,0.097,git/checkout,6,0.846
git/checkout with submodules cleans up an submodule that no longer exists,0.246,git/checkout,6,0.846
git/checkout with submodules updates a changed submodule reference,0.211,git/checkout,6,0.846
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.091,gitignore,9,0.598
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.096,gitignore,9,0.598
gitignore saveGitIgnore applies rule correctly to repository,0.088,gitignore,9,0.598
gitignore appendIgnoreRule appends one rule,0.1,gitignore,9,0.598
gitignore appendIgnoreRule appends multiple rules,0.101,gitignore,9,0.598
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.606
git/rev-parse isGitRepository should return false for a directory,0.037,git/rev-parse,10,0.606
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.606
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.606
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.606
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.606
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.606
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.606
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.047,git/rev-parse,10,0.606
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.17,git/rev-parse,10,0.606
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.596
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.596
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.596
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.596
git/branch tip returns non-origin remote,0.072,git/branch,10,0.596
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,10,0.596
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.596
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.596
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.596
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.596
git/submodule listSubmodules returns the submodule entry,0.104,git/submodule,3,0.584
git/submodule listSubmodules returns the expected tag,0.154,git/submodule,3,0.584
git/submodule resetSubmodulePaths update submodule to original commit,0.289,git/submodule,3,0.584
git/merge merge and is successful returns true,0.038,git/merge,7,0.549
git/merge merge and is a noop returns false,0.047,git/merge,7,0.549
git/merge getMergeBase returns the common ancestor of two branches,0.059,git/merge,7,0.549
git/log getCommits loads history,0.058,git/log,7,0.516
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.516
git/log getCommits handles repository with signed commit and log.showSignature set,0.087,git/log,7,0.516
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.516
git/log getChangedFiles detects renames,0.082,git/log,7,0.516
git/log getChangedFiles detect copies,0.08,git/log,7,0.516
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.516
git-lfs isUsingLFS returns false for repository not using LFS,0.05,git-lfs,9,0.494
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.494
validatedRepositoryPath returns the path to the repository,0.046,validatedRepositoryPath,2,0.099
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.406
git/remote findDefaultRemote returns origin when multiple remotes found,0.049,git/remote,9,0.406
git/remote findDefaultRemote returns something when origin removed,0.052,git/remote,9,0.406
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.037,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.026,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile includes empty context lines,0.026,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.309
git/config config looks up config values,0.042,git/config,4,0.271
git/config config returns null for undefined values,0.047,git/config,4,0.271
git/config global config getGlobalConfigPath gets the config path,0.053,git/config,4,0.271
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,4,0.271
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.214
git/core error handling throws for errors that were not expected,0.042,git/core,4,0.214
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.214
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.214
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.199
AppStore can select a repository,0.232,AppStore,5,0.285
git/reset reset can hard reset a repository,0.386,git/reset,2,0.434
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.419,git/rebase,21,9.213
git/rebase detect conflicts status detects REBASE_HEAD,0.31,git/rebase,21,9.213
git/rebase detect conflicts has conflicted files in working directory,0.304,git/rebase,21,9.213
git/rebase detect conflicts is a detached HEAD state,0.326,git/rebase,21,9.213
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.331,git/rebase,21,9.213
git/rebase abort after conflicts found no longer has working directory changes,0.334,git/rebase,21,9.213
git/rebase abort after conflicts found returns to the feature branch,0.352,git/rebase,21,9.213
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.417,git/rebase,21,9.213
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.401,git/rebase,21,9.213
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.409,git/rebase,21,9.213
git/rebase continue after resolving conflicts returns success,0.448,git/rebase,21,9.213
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.459,git/rebase,21,9.213
git/rebase continue after resolving conflicts no longer has working directory changes,0.474,git/rebase,21,9.213
git/rebase continue after resolving conflicts returns to the feature branch,0.472,git/rebase,21,9.213
git/rebase continue after resolving conflicts branch is now a different ref,0.476,git/rebase,21,9.213
git/rebase continue with additional changes unrelated to conflicted files returns success,0.491,git/rebase,21,9.213
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.478,git/rebase,21,9.213
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.472,git/rebase,21,9.213
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.477,git/rebase,21,9.213
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.473,git/rebase,21,9.213
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.435,git/rebase,21,9.213
git/rebase can parse progress returns a value indicating conflicts were encountered,0.395,git/rebase,7,3.603
git/rebase can parse progress status detects REBASE_HEAD,0.405,git/rebase,7,3.603
git/rebase can parse progress is a detached HEAD state,0.394,git/rebase,7,3.603
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.768,git/rebase,7,3.603
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.806,git/rebase,7,3.603
git/rebase can parse progress for long rebase is a detached HEAD state,0.778,git/rebase,7,3.603
git/commit createCommit normal commits the given files,0.121,git/commit,21,4.331
git/commit createCommit normal commit does not strip commentary by default,0.102,git/commit,21,4.331
git/commit createCommit normal can commit for empty repository,0.129,git/commit,21,4.331
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.331
git/commit createCommit partials can commit some lines from new file,0.174,git/commit,21,4.331
git/commit createCommit partials can commit second hunk from modified file,0.177,git/commit,21,4.331
git/commit createCommit partials can commit single delete from modified file,0.164,git/commit,21,4.331
git/commit createCommit partials can commit multiple hunks from modified file,0.179,git/commit,21,4.331
git/commit createCommit partials can commit some lines from deleted file,0.176,git/commit,21,4.331
git/commit createCommit partials can commit renames with modifications,0.17,git/commit,21,4.331
git/commit createCommit partials can commit renames with partially selected modifications,0.23,git/commit,21,4.331
git/commit createCommit with a merge conflict creates a merge commit,0.257,git/commit,21,4.331
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.23,git/commit,21,4.331
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.337,git/commit,21,4.331
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.329,git/commit,21,4.331
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.388,git/commit,21,4.331
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.398,git/commit,21,4.331
git/commit createMergeCommit with no changes throws an error,0.078,git/commit,21,4.331
git/commit index corner cases can commit when staged new file is then deleted,0.146,git/commit,21,4.331
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.173,git/commit,21,4.331
git/commit index corner cases file is deleted in index,0.17,git/commit,21,4.331
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.173,git/stash,14,2.605
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.258,git/stash,14,2.605
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.194,git/stash,14,2.605
GitStore loadCommitBatch includes HEAD when loading commits,0.361,GitStore,11,2.42
GitStore can discard changes from a repository,0.187,GitStore,11,2.42
GitStore can discard a renamed file,0.148,GitStore,11,2.42
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.42
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.42
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.42
GitStore undo first commit has no staged files,0.197,GitStore,11,2.42
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.42
git/status getStatus with conflicted repo parses conflicted files with markers,0.287,git/status,12,1.924
git/status getStatus with conflicted repo parses conflicted files without markers,0.279,git/status,12,1.924
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.476,git/status,12,1.924
git/status getStatus with conflicted repo parses resolved files,0.285,git/status,12,1.924
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.103,git/status,12,1.924
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.126,git/status,12,1.924
git/status getStatus with unconflicted repo parses changed files,0.052,git/status,12,1.924
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,1.924
git/status getStatus with unconflicted repo reflects renames,0.092,git/status,12,1.924
git/status getStatus with unconflicted repo reflects copies,0.086,git/status,12,1.924
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.924
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.106,git/diff,19,1.564
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.055,git/diff,19,1.564
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.564
git/diff getBlobImage retrieves valid images for deleted file,0.058,git/diff,19,1.564
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.564
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.564
git/diff getWorkingDirectoryDiff counts lines for new file,0.087,git/diff,19,1.564
git/diff getWorkingDirectoryDiff counts lines for modified file,0.059,git/diff,19,1.564
git/diff getWorkingDirectoryDiff counts lines for staged file,0.057,git/diff,19,1.564
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.084,git/diff,19,1.564
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.117,git/diff,19,1.564
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.129,git/diff,19,1.564
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.106,git/diff,19,1.564
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.106,git/diff,19,1.564
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.564
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.564
git/diff getBinaryPaths in repo with text only files returns an empty array,0.071,git/diff,19,1.564
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.087,git/diff,19,1.564
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.564
BranchPruner does nothing on non GitHub repositories,0.274,BranchPruner,6,1.607
BranchPruner prunes for GitHub repository,0.254,BranchPruner,6,1.607
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.201,BranchPruner,6,1.607
BranchPruner does not prune if there is no default branch,0.228,BranchPruner,6,1.607
BranchPruner does not prune reserved branches,0.25,BranchPruner,6,1.607
git/reflog getRecentBranches returns the recently checked out branches,0.159,git/reflog,6,0.945
git/reflog getRecentBranches works after renaming a branch,0.165,git/reflog,6,0.945
git/reflog getRecentBranches returns a limited number of branches,0.222,git/reflog,6,0.945
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.133,git/reflog,6,0.945
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.163,git/reflog,6,0.945
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.057,git/reflog,6,0.945
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.289,formatPatch,5,0.877
git/checkout can checkout a valid branch name in an existing repository,0.102,git/checkout,6,0.917
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.917
git/checkout will fail when an existing branch matches the remote branch,0.1,git/checkout,6,0.917
git/checkout with submodules cleans up an submodule that no longer exists,0.331,git/checkout,6,0.917
git/checkout with submodules updates a changed submodule reference,0.205,git/checkout,6,0.917
git/rev-parse isGitRepository should return true for a repository,0.044,git/rev-parse,10,0.597
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.597
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.597
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.597
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.597
git/rev-parse isBareRepository throws error for missing directory,0.043,git/rev-parse,10,0.597
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.597
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.597
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.045,git/rev-parse,10,0.597
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.157,git/rev-parse,10,0.597
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.094,gitignore,9,0.587
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.089,gitignore,9,0.587
gitignore saveGitIgnore applies rule correctly to repository,0.085,gitignore,9,0.587
gitignore appendIgnoreRule appends one rule,0.097,gitignore,9,0.587
gitignore appendIgnoreRule appends multiple rules,0.096,gitignore,9,0.587
git/branch tip returns unborn for new repository,0.026,git/branch,10,0.569
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,10,0.569
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.569
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.569
git/branch tip returns non-origin remote,0.072,git/branch,10,0.569
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.07,git/branch,10,0.569
git/branch getBranchesPointedAt in a local repo finds one branch name,0.042,git/branch,10,0.569
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.569
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.569
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.072,git/branch,10,0.569
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.584
git/submodule listSubmodules returns the expected tag,0.143,git/submodule,3,0.584
git/submodule resetSubmodulePaths update submodule to original commit,0.298,git/submodule,3,0.584
git/merge merge and is successful returns true,0.034,git/merge,7,0.513
git/merge merge and is a noop returns false,0.047,git/merge,7,0.513
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.513
git/log getCommits loads history,0.054,git/log,7,0.52
git/log getCommits handles repository with HEAD file on disk,0.075,git/log,7,0.52
git/log getCommits handles repository with signed commit and log.showSignature set,0.086,git/log,7,0.52
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.52
git/log getChangedFiles detects renames,0.09,git/log,7,0.52
git/log getChangedFiles detect copies,0.079,git/log,7,0.52
git/log getChangedFiles handles commit when HEAD exists on disk,0.046,git/log,7,0.52
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.461
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.461
git/reset reset can hard reset a repository,0.06,git/reset,2,0.106
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.385
git/remote findDefaultRemote returns origin when multiple remotes found,0.046,git/remote,9,0.385
git/remote findDefaultRemote returns something when origin removed,0.061,git/remote,9,0.385
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.289
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.289
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.035,patch formatting,8,0.289
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.034,patch formatting,8,0.289
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.289
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.289
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.289
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.024,patch formatting,8,0.289
AppStore can select a repository,0.107,AppStore,5,0.164
git/config config looks up config values,0.326,git/config,4,0.548
git/config config returns null for undefined values,0.041,git/config,4,0.548
git/config global config getGlobalConfigPath gets the config path,0.052,git/config,4,0.548
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,4,0.548
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.225
git/core error handling throws for errors that were not expected,0.048,git/core,4,0.225
git/core exit code handling does not throw for exit codes that were expected,0.045,git/core,4,0.225
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.225
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.199
validatedRepositoryPath returns the path to the repository,0.046,validatedRepositoryPath,2,0.101
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.044
