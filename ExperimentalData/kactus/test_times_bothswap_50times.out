git/rebase detect conflicts returns a value indicating conflicts were encountered,0.382,git/rebase,21,8.527
git/rebase detect conflicts status detects REBASE_HEAD,0.289,git/rebase,21,8.527
git/rebase detect conflicts has conflicted files in working directory,0.278,git/rebase,21,8.527
git/rebase detect conflicts is a detached HEAD state,0.286,git/rebase,21,8.527
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.308,git/rebase,21,8.527
git/rebase abort after conflicts found no longer has working directory changes,0.3,git/rebase,21,8.527
git/rebase abort after conflicts found returns to the feature branch,0.308,git/rebase,21,8.527
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.371,git/rebase,21,8.527
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.392,git/rebase,21,8.527
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.398,git/rebase,21,8.527
git/rebase continue after resolving conflicts returns success,0.422,git/rebase,21,8.527
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.419,git/rebase,21,8.527
git/rebase continue after resolving conflicts no longer has working directory changes,0.439,git/rebase,21,8.527
git/rebase continue after resolving conflicts returns to the feature branch,0.415,git/rebase,21,8.527
git/rebase continue after resolving conflicts branch is now a different ref,0.449,git/rebase,21,8.527
git/rebase continue with additional changes unrelated to conflicted files returns success,0.434,git/rebase,21,8.527
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.46,git/rebase,21,8.527
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.437,git/rebase,21,8.527
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.434,git/rebase,21,8.527
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.445,git/rebase,21,8.527
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.401,git/rebase,21,8.527
git/commit createCommit normal commits the given files,0.108,git/commit,21,3.855
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.855
git/commit createCommit normal can commit for empty repository,0.115,git/commit,21,3.855
git/commit createCommit normal can commit renames,0.136,git/commit,21,3.855
git/commit createCommit partials can commit some lines from new file,0.144,git/commit,21,3.855
git/commit createCommit partials can commit second hunk from modified file,0.149,git/commit,21,3.855
git/commit createCommit partials can commit single delete from modified file,0.145,git/commit,21,3.855
git/commit createCommit partials can commit multiple hunks from modified file,0.177,git/commit,21,3.855
git/commit createCommit partials can commit some lines from deleted file,0.148,git/commit,21,3.855
git/commit createCommit partials can commit renames with modifications,0.153,git/commit,21,3.855
git/commit createCommit partials can commit renames with partially selected modifications,0.192,git/commit,21,3.855
git/commit createCommit with a merge conflict creates a merge commit,0.226,git/commit,21,3.855
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.211,git/commit,21,3.855
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.292,git/commit,21,3.855
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.28,git/commit,21,3.855
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.334,git/commit,21,3.855
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.367,git/commit,21,3.855
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,3.855
git/commit index corner cases can commit when staged new file is then deleted,0.134,git/commit,21,3.855
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.152,git/commit,21,3.855
git/commit index corner cases file is deleted in index,0.156,git/commit,21,3.855
git/rebase can parse progress returns a value indicating conflicts were encountered,0.421,git/rebase,7,3.92
git/rebase can parse progress status detects REBASE_HEAD,0.416,git/rebase,7,3.92
git/rebase can parse progress is a detached HEAD state,0.422,git/rebase,7,3.92
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.852,git/rebase,7,3.92
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.9,git/rebase,7,3.92
git/rebase can parse progress for long rebase is a detached HEAD state,0.859,git/rebase,7,3.92
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.161,git/stash,14,2.602
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.29,git/stash,14,2.602
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.203,git/stash,14,2.602
GitStore loadCommitBatch includes HEAD when loading commits,0.362,GitStore,11,2.384
GitStore can discard changes from a repository,0.175,GitStore,11,2.384
GitStore can discard a renamed file,0.152,GitStore,11,2.384
GitStore undo first commit reports the repository is unborn,0.182,GitStore,11,2.384
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.384
GitStore undo first commit clears the undo commit dialog,0.198,GitStore,11,2.384
GitStore undo first commit has no staged files,0.192,GitStore,11,2.384
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.384
git/status getStatus with conflicted repo parses conflicted files with markers,0.274,git/status,12,1.97
git/status getStatus with conflicted repo parses conflicted files without markers,0.278,git/status,12,1.97
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.483,git/status,12,1.97
git/status getStatus with conflicted repo parses resolved files,0.289,git/status,12,1.97
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.106,git/status,12,1.97
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.179,git/status,12,1.97
git/status getStatus with unconflicted repo parses changed files,0.06,git/status,12,1.97
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.049,git/status,12,1.97
git/status getStatus with unconflicted repo reflects renames,0.077,git/status,12,1.97
git/status getStatus with unconflicted repo reflects copies,0.082,git/status,12,1.97
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.97
BranchPruner does nothing on non GitHub repositories,0.197,BranchPruner,6,1.476
BranchPruner prunes for GitHub repository,0.246,BranchPruner,6,1.476
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.2,BranchPruner,6,1.476
BranchPruner does not prune if there is no default branch,0.191,BranchPruner,6,1.476
BranchPruner does not prune reserved branches,0.235,BranchPruner,6,1.476
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.603
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.603
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.603
git/diff getBlobImage retrieves valid images for deleted file,0.051,git/diff,19,1.603
git/diff imageDiff changes for images are set,0.15,git/diff,19,1.603
git/diff imageDiff changes for text are not set,0.078,git/diff,19,1.603
git/diff getWorkingDirectoryDiff counts lines for new file,0.072,git/diff,19,1.603
git/diff getWorkingDirectoryDiff counts lines for modified file,0.073,git/diff,19,1.603
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.603
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.099,git/diff,19,1.603
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.133,git/diff,19,1.603
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.134,git/diff,19,1.603
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.121,git/diff,19,1.603
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.112,git/diff,19,1.603
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.603
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.048,git/diff,19,1.603
git/diff getBinaryPaths in repo with text only files returns an empty array,0.061,git/diff,19,1.603
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.079,git/diff,19,1.603
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.089,git/diff,19,1.603
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.867
git/checkout can checkout a branch when it exists on multiple remotes,0.109,git/checkout,6,0.867
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.867
git/checkout with submodules cleans up an submodule that no longer exists,0.252,git/checkout,6,0.867
git/checkout with submodules updates a changed submodule reference,0.221,git/checkout,6,0.867
git/reflog getRecentBranches returns the recently checked out branches,0.133,git/reflog,6,0.95
git/reflog getRecentBranches works after renaming a branch,0.173,git/reflog,6,0.95
git/reflog getRecentBranches returns a limited number of branches,0.23,git/reflog,6,0.95
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.136,git/reflog,6,0.95
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.175,git/reflog,6,0.95
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.056,git/reflog,6,0.95
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.291,formatPatch,5,0.935
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.091,gitignore,9,0.611
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.611
gitignore saveGitIgnore applies rule correctly to repository,0.093,gitignore,9,0.611
gitignore appendIgnoreRule appends one rule,0.101,gitignore,9,0.611
gitignore appendIgnoreRule appends multiple rules,0.105,gitignore,9,0.611
git/submodule listSubmodules returns the submodule entry,0.105,git/submodule,3,0.583
git/submodule listSubmodules returns the expected tag,0.146,git/submodule,3,0.583
git/submodule resetSubmodulePaths update submodule to original commit,0.291,git/submodule,3,0.583
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.576
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,10,0.576
git/branch tip returns detached for arbitrary checkout,0.044,git/branch,10,0.576
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.576
git/branch tip returns non-origin remote,0.071,git/branch,10,0.576
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.071,git/branch,10,0.576
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.576
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.576
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.576
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.576
git/rev-parse isGitRepository should return true for a repository,0.039,git/rev-parse,10,0.609
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.609
git/rev-parse isBareRepository throws error for missing directory,0.038,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.172,git/rev-parse,10,0.609
git-lfs isUsingLFS returns false for repository not using LFS,0.05,git-lfs,9,0.498
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.498
git/merge merge and is successful returns true,0.034,git/merge,7,0.558
git/merge merge and is a noop returns false,0.051,git/merge,7,0.558
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.558
git/log getCommits loads history,0.055,git/log,7,0.515
git/log getCommits handles repository with HEAD file on disk,0.075,git/log,7,0.515
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.515
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.515
git/log getChangedFiles detects renames,0.082,git/log,7,0.515
git/log getChangedFiles detect copies,0.076,git/log,7,0.515
git/log getChangedFiles handles commit when HEAD exists on disk,0.048,git/log,7,0.515
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.406
git/remote findDefaultRemote returns origin when multiple remotes found,0.046,git/remote,9,0.406
git/remote findDefaultRemote returns something when origin removed,0.054,git/remote,9,0.406
git/for-each-ref getBranches fetches branches using for-each-ref,0.057,git/for-each-ref,3,0.186
git/for-each-ref getBranches should return empty list for empty repo,0.056,git/for-each-ref,3,0.186
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.041,git/for-each-ref,3,0.186
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.267
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.267
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.036,patch formatting,8,0.267
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.035,patch formatting,8,0.267
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.023,patch formatting,8,0.267
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.267
patch formatting formatPatchesForModifiedFile includes empty context lines,0.018,patch formatting,8,0.267
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.016,patch formatting,8,0.267
git/config config looks up config values,0.038,git/config,4,0.262
git/config config returns null for undefined values,0.042,git/config,4,0.262
git/config global config getGlobalConfigPath gets the config path,0.056,git/config,4,0.262
git/config global config setGlobalConfigValue will replace all entries for a global value,0.088,git/config,4,0.262
AppStore can select a repository,0.126,AppStore,5,0.185
git/core error handling does not throw for errors that were expected,0.383,git/core,4,0.557
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.557
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.557
git/core exit code handling throws for exit codes that were not expected,0.042,git/core,4,0.557
validatedRepositoryPath returns the path to the repository,0.04,validatedRepositoryPath,2,0.098
git/reset reset can hard reset a repository,0.07,git/reset,2,0.115
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.368,git/rebase,21,8.519
git/rebase detect conflicts status detects REBASE_HEAD,0.283,git/rebase,21,8.519
git/rebase detect conflicts has conflicted files in working directory,0.264,git/rebase,21,8.519
git/rebase detect conflicts is a detached HEAD state,0.288,git/rebase,21,8.519
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.297,git/rebase,21,8.519
git/rebase abort after conflicts found no longer has working directory changes,0.293,git/rebase,21,8.519
git/rebase abort after conflicts found returns to the feature branch,0.303,git/rebase,21,8.519
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.365,git/rebase,21,8.519
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.4,git/rebase,21,8.519
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.389,git/rebase,21,8.519
git/rebase continue after resolving conflicts returns success,0.425,git/rebase,21,8.519
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.439,git/rebase,21,8.519
git/rebase continue after resolving conflicts no longer has working directory changes,0.449,git/rebase,21,8.519
git/rebase continue after resolving conflicts returns to the feature branch,0.42,git/rebase,21,8.519
git/rebase continue after resolving conflicts branch is now a different ref,0.459,git/rebase,21,8.519
git/rebase continue with additional changes unrelated to conflicted files returns success,0.419,git/rebase,21,8.519
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.428,git/rebase,21,8.519
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.436,git/rebase,21,8.519
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.472,git/rebase,21,8.519
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.459,git/rebase,21,8.519
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.403,git/rebase,21,8.519
git/rebase can parse progress returns a value indicating conflicts were encountered,0.391,git/rebase,7,3.436
git/rebase can parse progress status detects REBASE_HEAD,0.38,git/rebase,7,3.436
git/rebase can parse progress is a detached HEAD state,0.379,git/rebase,7,3.436
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.729,git/rebase,7,3.436
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.749,git/rebase,7,3.436
git/rebase can parse progress for long rebase is a detached HEAD state,0.751,git/rebase,7,3.436
git/commit createCommit normal commits the given files,0.116,git/commit,21,4.159
git/commit createCommit normal commit does not strip commentary by default,0.097,git/commit,21,4.159
git/commit createCommit normal can commit for empty repository,0.136,git/commit,21,4.159
git/commit createCommit normal can commit renames,0.14,git/commit,21,4.159
git/commit createCommit partials can commit some lines from new file,0.162,git/commit,21,4.159
git/commit createCommit partials can commit second hunk from modified file,0.168,git/commit,21,4.159
git/commit createCommit partials can commit single delete from modified file,0.145,git/commit,21,4.159
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,4.159
git/commit createCommit partials can commit some lines from deleted file,0.163,git/commit,21,4.159
git/commit createCommit partials can commit renames with modifications,0.165,git/commit,21,4.159
git/commit createCommit partials can commit renames with partially selected modifications,0.206,git/commit,21,4.159
git/commit createCommit with a merge conflict creates a merge commit,0.248,git/commit,21,4.159
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.227,git/commit,21,4.159
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.325,git/commit,21,4.159
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.326,git/commit,21,4.159
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.375,git/commit,21,4.159
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.379,git/commit,21,4.159
git/commit createMergeCommit with no changes throws an error,0.088,git/commit,21,4.159
git/commit index corner cases can commit when staged new file is then deleted,0.146,git/commit,21,4.159
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.165,git/commit,21,4.159
git/commit index corner cases file is deleted in index,0.164,git/commit,21,4.159
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.547
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.24,git/stash,14,2.547
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.205,git/stash,14,2.547
GitStore loadCommitBatch includes HEAD when loading commits,0.353,GitStore,11,2.387
GitStore can discard changes from a repository,0.175,GitStore,11,2.387
GitStore can discard a renamed file,0.147,GitStore,11,2.387
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.387
GitStore undo first commit pre-fills the commit message,0.117,GitStore,11,2.387
GitStore undo first commit clears the undo commit dialog,0.197,GitStore,11,2.387
GitStore undo first commit has no staged files,0.192,GitStore,11,2.387
GitStore repository with HEAD file can discard modified change cleanly,0.105,GitStore,11,2.387
git/status getStatus with conflicted repo parses conflicted files with markers,0.28,git/status,12,1.924
git/status getStatus with conflicted repo parses conflicted files without markers,0.28,git/status,12,1.924
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.469,git/status,12,1.924
git/status getStatus with conflicted repo parses resolved files,0.345,git/status,12,1.924
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.088,git/status,12,1.924
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.11,git/status,12,1.924
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.924
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,1.924
git/status getStatus with unconflicted repo reflects renames,0.081,git/status,12,1.924
git/status getStatus with unconflicted repo reflects copies,0.086,git/status,12,1.924
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.043,git/status,12,1.924
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.036,git/diff,19,1.532
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.532
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.532
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.532
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.532
git/diff imageDiff changes for text are not set,0.152,git/diff,19,1.532
git/diff getWorkingDirectoryDiff counts lines for new file,0.068,git/diff,19,1.532
git/diff getWorkingDirectoryDiff counts lines for modified file,0.071,git/diff,19,1.532
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.532
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.093,git/diff,19,1.532
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.118,git/diff,19,1.532
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.122,git/diff,19,1.532
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.101,git/diff,19,1.532
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.1,git/diff,19,1.532
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.532
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.532
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.532
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.532
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.083,git/diff,19,1.532
BranchPruner does nothing on non GitHub repositories,0.181,BranchPruner,6,1.414
BranchPruner prunes for GitHub repository,0.244,BranchPruner,6,1.414
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.194,BranchPruner,6,1.414
BranchPruner does not prune if there is no default branch,0.182,BranchPruner,6,1.414
BranchPruner does not prune reserved branches,0.234,BranchPruner,6,1.414
git/reflog getRecentBranches returns the recently checked out branches,0.118,git/reflog,6,0.862
git/reflog getRecentBranches works after renaming a branch,0.151,git/reflog,6,0.862
git/reflog getRecentBranches returns a limited number of branches,0.21,git/reflog,6,0.862
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.126,git/reflog,6,0.862
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.159,git/reflog,6,0.862
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.862
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.298,formatPatch,5,0.893
git/checkout can checkout a valid branch name in an existing repository,0.108,git/checkout,6,0.881
git/checkout can checkout a branch when it exists on multiple remotes,0.12,git/checkout,6,0.881
git/checkout will fail when an existing branch matches the remote branch,0.106,git/checkout,6,0.881
git/checkout with submodules cleans up an submodule that no longer exists,0.26,git/checkout,6,0.881
git/checkout with submodules updates a changed submodule reference,0.216,git/checkout,6,0.881
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.099,gitignore,9,0.618
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.099,gitignore,9,0.618
gitignore saveGitIgnore applies rule correctly to repository,0.09,gitignore,9,0.618
gitignore appendIgnoreRule appends one rule,0.103,gitignore,9,0.618
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.618
git/rev-parse isGitRepository should return true for a repository,0.037,git/rev-parse,10,0.613
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.613
git/rev-parse isBareRepository returns false for default initialized repository,0.06,git/rev-parse,10,0.613
git/rev-parse isBareRepository returns true for initialized bare repository,0.052,git/rev-parse,10,0.613
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.613
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.613
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.613
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.038,git/rev-parse,10,0.613
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.048,git/rev-parse,10,0.613
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.169,git/rev-parse,10,0.613
git/submodule listSubmodules returns the submodule entry,0.093,git/submodule,3,0.67
git/submodule listSubmodules returns the expected tag,0.146,git/submodule,3,0.67
git/submodule resetSubmodulePaths update submodule to original commit,0.387,git/submodule,3,0.67
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.584
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,10,0.584
git/branch tip returns detached for arbitrary checkout,0.041,git/branch,10,0.584
git/branch tip returns current branch when on a valid HEAD,0.066,git/branch,10,0.584
git/branch tip returns non-origin remote,0.072,git/branch,10,0.584
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.584
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.584
git/merge merge and is successful returns true,0.032,git/merge,7,0.557
git/merge merge and is a noop returns false,0.048,git/merge,7,0.557
git/merge getMergeBase returns the common ancestor of two branches,0.067,git/merge,7,0.557
git/core error handling does not throw for errors that were expected,0.038,git/core,4,0.216
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.216
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.216
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.216
git/log getCommits loads history,0.058,git/log,7,0.525
git/log getCommits handles repository with HEAD file on disk,0.086,git/log,7,0.525
git/log getCommits handles repository with signed commit and log.showSignature set,0.098,git/log,7,0.525
git/log getChangedFiles loads the files changed in the commit,0.053,git/log,7,0.525
git/log getChangedFiles detects renames,0.069,git/log,7,0.525
git/log getChangedFiles detect copies,0.076,git/log,7,0.525
git/log getChangedFiles handles commit when HEAD exists on disk,0.041,git/log,7,0.525
git-lfs isUsingLFS returns false for repository not using LFS,0.043,git-lfs,9,0.531
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.531
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.42
git/remote findDefaultRemote returns origin when multiple remotes found,0.048,git/remote,9,0.42
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.42
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.035,patch formatting,8,0.276
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.036,patch formatting,8,0.276
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.276
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.276
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.025,patch formatting,8,0.276
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.02,patch formatting,8,0.276
patch formatting formatPatchesForModifiedFile includes empty context lines,0.019,patch formatting,8,0.276
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.017,patch formatting,8,0.276
git/config config looks up config values,0.044,git/config,4,0.303
git/config config returns null for undefined values,0.048,git/config,4,0.303
git/config global config getGlobalConfigPath gets the config path,0.066,git/config,4,0.303
git/config global config setGlobalConfigValue will replace all entries for a global value,0.098,git/config,4,0.303
git/for-each-ref getBranches fetches branches using for-each-ref,0.068,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for empty repo,0.063,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.049,git/for-each-ref,3,0.213
AppStore can select a repository,0.137,AppStore,5,0.19
git/reset reset can hard reset a repository,0.429,git/reset,2,0.472
validatedRepositoryPath returns the path to the repository,0.045,validatedRepositoryPath,2,0.107
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.371,git/rebase,21,8.465
git/rebase detect conflicts status detects REBASE_HEAD,0.28,git/rebase,21,8.465
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,8.465
git/rebase detect conflicts is a detached HEAD state,0.303,git/rebase,21,8.465
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.291,git/rebase,21,8.465
git/rebase abort after conflicts found no longer has working directory changes,0.299,git/rebase,21,8.465
git/rebase abort after conflicts found returns to the feature branch,0.316,git/rebase,21,8.465
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.372,git/rebase,21,8.465
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.389,git/rebase,21,8.465
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.372,git/rebase,21,8.465
git/rebase continue after resolving conflicts returns success,0.424,git/rebase,21,8.465
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.405,git/rebase,21,8.465
git/rebase continue after resolving conflicts no longer has working directory changes,0.426,git/rebase,21,8.465
git/rebase continue after resolving conflicts returns to the feature branch,0.409,git/rebase,21,8.465
git/rebase continue after resolving conflicts branch is now a different ref,0.433,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files returns success,0.446,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.422,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.431,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.454,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.467,git/rebase,21,8.465
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.426,git/rebase,21,8.465
git/commit createCommit normal commits the given files,0.108,git/commit,21,3.889
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.889
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.889
git/commit createCommit normal can commit renames,0.144,git/commit,21,3.889
git/commit createCommit partials can commit some lines from new file,0.147,git/commit,21,3.889
git/commit createCommit partials can commit second hunk from modified file,0.155,git/commit,21,3.889
git/commit createCommit partials can commit single delete from modified file,0.141,git/commit,21,3.889
git/commit createCommit partials can commit multiple hunks from modified file,0.157,git/commit,21,3.889
git/commit createCommit partials can commit some lines from deleted file,0.154,git/commit,21,3.889
git/commit createCommit partials can commit renames with modifications,0.164,git/commit,21,3.889
git/commit createCommit partials can commit renames with partially selected modifications,0.196,git/commit,21,3.889
git/commit createCommit with a merge conflict creates a merge commit,0.226,git/commit,21,3.889
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.218,git/commit,21,3.889
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.305,git/commit,21,3.889
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.283,git/commit,21,3.889
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.348,git/commit,21,3.889
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.352,git/commit,21,3.889
git/commit createMergeCommit with no changes throws an error,0.083,git/commit,21,3.889
git/commit index corner cases can commit when staged new file is then deleted,0.132,git/commit,21,3.889
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.151,git/commit,21,3.889
git/commit index corner cases file is deleted in index,0.15,git/commit,21,3.889
git/rebase can parse progress returns a value indicating conflicts were encountered,0.436,git/rebase,7,3.86
git/rebase can parse progress status detects REBASE_HEAD,0.441,git/rebase,7,3.86
git/rebase can parse progress is a detached HEAD state,0.434,git/rebase,7,3.86
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.808,git/rebase,7,3.86
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.864,git/rebase,7,3.86
git/rebase can parse progress for long rebase is a detached HEAD state,0.829,git/rebase,7,3.86
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.157,git/stash,14,2.75
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.258,git/stash,14,2.75
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.218,git/stash,14,2.75
GitStore loadCommitBatch includes HEAD when loading commits,0.351,GitStore,11,2.38
GitStore can discard changes from a repository,0.174,GitStore,11,2.38
GitStore can discard a renamed file,0.142,GitStore,11,2.38
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.38
GitStore undo first commit pre-fills the commit message,0.118,GitStore,11,2.38
GitStore undo first commit clears the undo commit dialog,0.199,GitStore,11,2.38
GitStore undo first commit has no staged files,0.193,GitStore,11,2.38
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.38
git/status getStatus with conflicted repo parses conflicted files with markers,0.312,git/status,12,1.728
git/status getStatus with conflicted repo parses conflicted files without markers,0.242,git/status,12,1.728
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.421,git/status,12,1.728
git/status getStatus with conflicted repo parses resolved files,0.236,git/status,12,1.728
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.091,git/status,12,1.728
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.103,git/status,12,1.728
git/status getStatus with unconflicted repo parses changed files,0.043,git/status,12,1.728
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.038,git/status,12,1.728
git/status getStatus with unconflicted repo reflects renames,0.076,git/status,12,1.728
git/status getStatus with unconflicted repo reflects copies,0.078,git/status,12,1.728
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.038,git/status,12,1.728
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.044,git/diff,19,1.539
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.539
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.539
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.539
git/diff imageDiff changes for images are set,0.073,git/diff,19,1.539
git/diff imageDiff changes for text are not set,0.144,git/diff,19,1.539
git/diff getWorkingDirectoryDiff counts lines for new file,0.067,git/diff,19,1.539
git/diff getWorkingDirectoryDiff counts lines for modified file,0.072,git/diff,19,1.539
git/diff getWorkingDirectoryDiff counts lines for staged file,0.062,git/diff,19,1.539
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.091,git/diff,19,1.539
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.119,git/diff,19,1.539
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.124,git/diff,19,1.539
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.1,git/diff,19,1.539
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.099,git/diff,19,1.539
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.069,git/diff,19,1.539
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.539
git/diff getBinaryPaths in repo with text only files returns an empty array,0.066,git/diff,19,1.539
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.078,git/diff,19,1.539
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.09,git/diff,19,1.539
BranchPruner does nothing on non GitHub repositories,0.19,BranchPruner,6,1.397
BranchPruner prunes for GitHub repository,0.25,BranchPruner,6,1.397
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.186,BranchPruner,6,1.397
BranchPruner does not prune if there is no default branch,0.171,BranchPruner,6,1.397
BranchPruner does not prune reserved branches,0.224,BranchPruner,6,1.397
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.292,formatPatch,5,0.875
git/checkout can checkout a valid branch name in an existing repository,0.102,git/checkout,6,0.862
git/checkout can checkout a branch when it exists on multiple remotes,0.107,git/checkout,6,0.862
git/checkout will fail when an existing branch matches the remote branch,0.104,git/checkout,6,0.862
git/checkout with submodules cleans up an submodule that no longer exists,0.269,git/checkout,6,0.862
git/checkout with submodules updates a changed submodule reference,0.209,git/checkout,6,0.862
git/reflog getRecentBranches returns the recently checked out branches,0.136,git/reflog,6,0.959
git/reflog getRecentBranches works after renaming a branch,0.176,git/reflog,6,0.959
git/reflog getRecentBranches returns a limited number of branches,0.232,git/reflog,6,0.959
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.145,git/reflog,6,0.959
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.166,git/reflog,6,0.959
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.06,git/reflog,6,0.959
git/submodule listSubmodules returns the submodule entry,0.101,git/submodule,3,0.651
git/submodule listSubmodules returns the expected tag,0.141,git/submodule,3,0.651
git/submodule resetSubmodulePaths update submodule to original commit,0.367,git/submodule,3,0.651
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.1,gitignore,9,0.614
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.614
gitignore saveGitIgnore applies rule correctly to repository,0.086,gitignore,9,0.614
gitignore appendIgnoreRule appends one rule,0.103,gitignore,9,0.614
gitignore appendIgnoreRule appends multiple rules,0.104,gitignore,9,0.614
git/rev-parse isGitRepository should return true for a repository,0.048,git/rev-parse,10,0.623
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.623
git/rev-parse isBareRepository returns false for default initialized repository,0.048,git/rev-parse,10,0.623
git/rev-parse isBareRepository returns true for initialized bare repository,0.054,git/rev-parse,10,0.623
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.623
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.623
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.055,git/rev-parse,10,0.623
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.623
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.623
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.179,git/rev-parse,10,0.623
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.626
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,10,0.626
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.626
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.626
git/branch tip returns non-origin remote,0.075,git/branch,10,0.626
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.084,git/branch,10,0.626
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.626
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.626
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.626
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.084,git/branch,10,0.626
git/merge merge and is successful returns true,0.031,git/merge,7,0.568
git/merge merge and is a noop returns false,0.049,git/merge,7,0.568
git/merge getMergeBase returns the common ancestor of two branches,0.064,git/merge,7,0.568
git-lfs isUsingLFS returns false for repository not using LFS,0.053,git-lfs,9,0.514
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.514
git/log getCommits loads history,0.063,git/log,7,0.539
git/log getCommits handles repository with HEAD file on disk,0.079,git/log,7,0.539
git/log getCommits handles repository with signed commit and log.showSignature set,0.097,git/log,7,0.539
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.539
git/log getChangedFiles detects renames,0.085,git/log,7,0.539
git/log getChangedFiles detect copies,0.085,git/log,7,0.539
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.539
git/reset reset can hard reset a repository,0.066,git/reset,2,0.111
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.438
git/remote findDefaultRemote returns origin when multiple remotes found,0.052,git/remote,9,0.438
git/remote findDefaultRemote returns something when origin removed,0.062,git/remote,9,0.438
git/config config looks up config values,0.043,git/config,4,0.284
git/config config returns null for undefined values,0.047,git/config,4,0.284
git/config global config getGlobalConfigPath gets the config path,0.06,git/config,4,0.284
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,4,0.284
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.023,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.028,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.3
git/core error handling does not throw for errors that were expected,0.038,git/core,4,0.204
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.204
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.204
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.204
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for empty repo,0.062,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.204
AppStore can select a repository,0.138,AppStore,5,0.19
validatedRepositoryPath returns the path to the repository,0.406,validatedRepositoryPath,2,0.468
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.37,git/rebase,21,8.445
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.445
git/rebase detect conflicts has conflicted files in working directory,0.278,git/rebase,21,8.445
git/rebase detect conflicts is a detached HEAD state,0.28,git/rebase,21,8.445
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.293,git/rebase,21,8.445
git/rebase abort after conflicts found no longer has working directory changes,0.303,git/rebase,21,8.445
git/rebase abort after conflicts found returns to the feature branch,0.32,git/rebase,21,8.445
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.385,git/rebase,21,8.445
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.377,git/rebase,21,8.445
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.383,git/rebase,21,8.445
git/rebase continue after resolving conflicts returns success,0.415,git/rebase,21,8.445
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.427,git/rebase,21,8.445
git/rebase continue after resolving conflicts no longer has working directory changes,0.46,git/rebase,21,8.445
git/rebase continue after resolving conflicts returns to the feature branch,0.408,git/rebase,21,8.445
git/rebase continue after resolving conflicts branch is now a different ref,0.446,git/rebase,21,8.445
git/rebase continue with additional changes unrelated to conflicted files returns success,0.419,git/rebase,21,8.445
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.421,git/rebase,21,8.445
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.433,git/rebase,21,8.445
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.447,git/rebase,21,8.445
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.45,git/rebase,21,8.445
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.405,git/rebase,21,8.445
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.799
git/commit createCommit normal commit does not strip commentary by default,0.091,git/commit,21,3.799
git/commit createCommit normal can commit for empty repository,0.124,git/commit,21,3.799
git/commit createCommit normal can commit renames,0.135,git/commit,21,3.799
git/commit createCommit partials can commit some lines from new file,0.147,git/commit,21,3.799
git/commit createCommit partials can commit second hunk from modified file,0.153,git/commit,21,3.799
git/commit createCommit partials can commit single delete from modified file,0.14,git/commit,21,3.799
git/commit createCommit partials can commit multiple hunks from modified file,0.154,git/commit,21,3.799
git/commit createCommit partials can commit some lines from deleted file,0.15,git/commit,21,3.799
git/commit createCommit partials can commit renames with modifications,0.15,git/commit,21,3.799
git/commit createCommit partials can commit renames with partially selected modifications,0.186,git/commit,21,3.799
git/commit createCommit with a merge conflict creates a merge commit,0.225,git/commit,21,3.799
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.211,git/commit,21,3.799
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.296,git/commit,21,3.799
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.283,git/commit,21,3.799
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.337,git/commit,21,3.799
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.344,git/commit,21,3.799
git/commit createMergeCommit with no changes throws an error,0.077,git/commit,21,3.799
git/commit index corner cases can commit when staged new file is then deleted,0.132,git/commit,21,3.799
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.149,git/commit,21,3.799
git/commit index corner cases file is deleted in index,0.148,git/commit,21,3.799
git/rebase can parse progress returns a value indicating conflicts were encountered,0.423,git/rebase,7,3.774
git/rebase can parse progress status detects REBASE_HEAD,0.412,git/rebase,7,3.774
git/rebase can parse progress is a detached HEAD state,0.434,git/rebase,7,3.774
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.815,git/rebase,7,3.774
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.821,git/rebase,7,3.774
git/rebase can parse progress for long rebase is a detached HEAD state,0.819,git/rebase,7,3.774
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.167,git/stash,14,2.628
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.242,git/stash,14,2.628
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.245,git/stash,14,2.628
GitStore loadCommitBatch includes HEAD when loading commits,0.307,GitStore,11,2.375
GitStore can discard changes from a repository,0.179,GitStore,11,2.375
GitStore can discard a renamed file,0.147,GitStore,11,2.375
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.375
GitStore undo first commit pre-fills the commit message,0.122,GitStore,11,2.375
GitStore undo first commit clears the undo commit dialog,0.202,GitStore,11,2.375
GitStore undo first commit has no staged files,0.192,GitStore,11,2.375
GitStore repository with HEAD file can discard modified change cleanly,0.11,GitStore,11,2.375
git/status getStatus with conflicted repo parses conflicted files with markers,0.279,git/status,12,1.803
git/status getStatus with conflicted repo parses conflicted files without markers,0.318,git/status,12,1.803
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.419,git/status,12,1.803
git/status getStatus with conflicted repo parses resolved files,0.247,git/status,12,1.803
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.095,git/status,12,1.803
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.114,git/status,12,1.803
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,1.803
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.039,git/status,12,1.803
git/status getStatus with unconflicted repo reflects renames,0.077,git/status,12,1.803
git/status getStatus with unconflicted repo reflects copies,0.081,git/status,12,1.803
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.038,git/status,12,1.803
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.465
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.465
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.465
git/diff getBlobImage retrieves valid images for deleted file,0.056,git/diff,19,1.465
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.465
git/diff imageDiff changes for text are not set,0.145,git/diff,19,1.465
git/diff getWorkingDirectoryDiff counts lines for new file,0.069,git/diff,19,1.465
git/diff getWorkingDirectoryDiff counts lines for modified file,0.07,git/diff,19,1.465
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.465
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.081,git/diff,19,1.465
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.465
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.113,git/diff,19,1.465
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.091,git/diff,19,1.465
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.094,git/diff,19,1.465
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.063,git/diff,19,1.465
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.045,git/diff,19,1.465
git/diff getBinaryPaths in repo with text only files returns an empty array,0.058,git/diff,19,1.465
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.07,git/diff,19,1.465
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.083,git/diff,19,1.465
BranchPruner does nothing on non GitHub repositories,0.179,BranchPruner,6,1.389
BranchPruner prunes for GitHub repository,0.222,BranchPruner,6,1.389
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.173,BranchPruner,6,1.389
BranchPruner does not prune if there is no default branch,0.184,BranchPruner,6,1.389
BranchPruner does not prune reserved branches,0.245,BranchPruner,6,1.389
git/reflog getRecentBranches returns the recently checked out branches,0.125,git/reflog,6,0.876
git/reflog getRecentBranches works after renaming a branch,0.166,git/reflog,6,0.876
git/reflog getRecentBranches returns a limited number of branches,0.204,git/reflog,6,0.876
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.125,git/reflog,6,0.876
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.161,git/reflog,6,0.876
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.876
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.241,formatPatch,5,0.84
git/checkout can checkout a valid branch name in an existing repository,0.102,git/checkout,6,0.804
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.804
git/checkout will fail when an existing branch matches the remote branch,0.097,git/checkout,6,0.804
git/checkout with submodules cleans up an submodule that no longer exists,0.227,git/checkout,6,0.804
git/checkout with submodules updates a changed submodule reference,0.2,git/checkout,6,0.804
git/submodule listSubmodules returns the submodule entry,0.103,git/submodule,3,0.575
git/submodule listSubmodules returns the expected tag,0.145,git/submodule,3,0.575
git/submodule resetSubmodulePaths update submodule to original commit,0.287,git/submodule,3,0.575
git/branch tip returns unborn for new repository,0.027,git/branch,10,0.589
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.589
git/branch tip returns detached for arbitrary checkout,0.041,git/branch,10,0.589
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.589
git/branch tip returns non-origin remote,0.068,git/branch,10,0.589
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.589
git/branch getBranchesPointedAt in a local repo finds one branch name,0.057,git/branch,10,0.589
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.589
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.035,git/branch,10,0.589
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.079,git/branch,10,0.589
git/rev-parse isGitRepository should return true for a repository,0.039,git/rev-parse,10,0.611
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for default initialized repository,0.051,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.611
git/rev-parse isBareRepository throws error for missing directory,0.045,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.171,git/rev-parse,10,0.611
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.108,gitignore,9,0.687
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.103,gitignore,9,0.687
gitignore saveGitIgnore applies rule correctly to repository,0.104,gitignore,9,0.687
gitignore appendIgnoreRule appends one rule,0.118,gitignore,9,0.687
gitignore appendIgnoreRule appends multiple rules,0.116,gitignore,9,0.687
git/merge merge and is successful returns true,0.034,git/merge,7,0.558
git/merge merge and is a noop returns false,0.046,git/merge,7,0.558
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.558
git/log getCommits loads history,0.054,git/log,7,0.512
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.512
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.512
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.512
git/log getChangedFiles detects renames,0.079,git/log,7,0.512
git/log getChangedFiles detect copies,0.08,git/log,7,0.512
git/log getChangedFiles handles commit when HEAD exists on disk,0.041,git/log,7,0.512
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.52
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.52
validatedRepositoryPath returns the path to the repository,0.042,validatedRepositoryPath,2,0.101
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.439
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.439
git/remote findDefaultRemote returns something when origin removed,0.063,git/remote,9,0.439
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.044,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.028,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.317
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.317
git/config config looks up config values,0.045,git/config,4,0.284
git/config config returns null for undefined values,0.047,git/config,4,0.284
git/config global config getGlobalConfigPath gets the config path,0.06,git/config,4,0.284
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,4,0.284
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.205
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.205
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.05,git/for-each-ref,3,0.205
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.225
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.225
git/core exit code handling does not throw for exit codes that were expected,0.051,git/core,4,0.225
git/core exit code handling throws for exit codes that were not expected,0.046,git/core,4,0.225
AppStore can select a repository,0.134,AppStore,5,0.187
git/reset reset can hard reset a repository,0.379,git/reset,2,0.419
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.367,git/rebase,21,8.611
git/rebase detect conflicts status detects REBASE_HEAD,0.283,git/rebase,21,8.611
git/rebase detect conflicts has conflicted files in working directory,0.277,git/rebase,21,8.611
git/rebase detect conflicts is a detached HEAD state,0.293,git/rebase,21,8.611
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.336,git/rebase,21,8.611
git/rebase abort after conflicts found no longer has working directory changes,0.33,git/rebase,21,8.611
git/rebase abort after conflicts found returns to the feature branch,0.303,git/rebase,21,8.611
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.368,git/rebase,21,8.611
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.411,git/rebase,21,8.611
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.384,git/rebase,21,8.611
git/rebase continue after resolving conflicts returns success,0.425,git/rebase,21,8.611
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.431,git/rebase,21,8.611
git/rebase continue after resolving conflicts no longer has working directory changes,0.447,git/rebase,21,8.611
git/rebase continue after resolving conflicts returns to the feature branch,0.412,git/rebase,21,8.611
git/rebase continue after resolving conflicts branch is now a different ref,0.458,git/rebase,21,8.611
git/rebase continue with additional changes unrelated to conflicted files returns success,0.418,git/rebase,21,8.611
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.43,git/rebase,21,8.611
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.429,git/rebase,21,8.611
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.611
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.48,git/rebase,21,8.611
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.436,git/rebase,21,8.611
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.934
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.934
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.934
git/commit createCommit normal can commit renames,0.14,git/commit,21,3.934
git/commit createCommit partials can commit some lines from new file,0.153,git/commit,21,3.934
git/commit createCommit partials can commit second hunk from modified file,0.153,git/commit,21,3.934
git/commit createCommit partials can commit single delete from modified file,0.141,git/commit,21,3.934
git/commit createCommit partials can commit multiple hunks from modified file,0.167,git/commit,21,3.934
git/commit createCommit partials can commit some lines from deleted file,0.151,git/commit,21,3.934
git/commit createCommit partials can commit renames with modifications,0.159,git/commit,21,3.934
git/commit createCommit partials can commit renames with partially selected modifications,0.192,git/commit,21,3.934
git/commit createCommit with a merge conflict creates a merge commit,0.233,git/commit,21,3.934
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.219,git/commit,21,3.934
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.295,git/commit,21,3.934
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.286,git/commit,21,3.934
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.348,git/commit,21,3.934
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.378,git/commit,21,3.934
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,3.934
git/commit index corner cases can commit when staged new file is then deleted,0.141,git/commit,21,3.934
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,3.934
git/commit index corner cases file is deleted in index,0.157,git/commit,21,3.934
git/rebase can parse progress returns a value indicating conflicts were encountered,0.441,git/rebase,7,3.829
git/rebase can parse progress status detects REBASE_HEAD,0.427,git/rebase,7,3.829
git/rebase can parse progress is a detached HEAD state,0.439,git/rebase,7,3.829
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.814,git/rebase,7,3.829
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.839,git/rebase,7,3.829
git/rebase can parse progress for long rebase is a detached HEAD state,0.819,git/rebase,7,3.829
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.163,git/stash,14,2.525
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.244,git/stash,14,2.525
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.203,git/stash,14,2.525
GitStore loadCommitBatch includes HEAD when loading commits,0.31,GitStore,11,2.477
GitStore can discard changes from a repository,0.194,GitStore,11,2.477
GitStore can discard a renamed file,0.152,GitStore,11,2.477
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.477
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.477
GitStore undo first commit clears the undo commit dialog,0.205,GitStore,11,2.477
GitStore undo first commit has no staged files,0.195,GitStore,11,2.477
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.477
git/status getStatus with conflicted repo parses conflicted files with markers,0.277,git/status,12,1.792
git/status getStatus with conflicted repo parses conflicted files without markers,0.31,git/status,12,1.792
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.407,git/status,12,1.792
git/status getStatus with conflicted repo parses resolved files,0.24,git/status,12,1.792
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.093,git/status,12,1.792
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.109,git/status,12,1.792
git/status getStatus with unconflicted repo parses changed files,0.051,git/status,12,1.792
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.792
git/status getStatus with unconflicted repo reflects renames,0.08,git/status,12,1.792
git/status getStatus with unconflicted repo reflects copies,0.084,git/status,12,1.792
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.792
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.593
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.048,git/diff,19,1.593
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.593
git/diff getBlobImage retrieves valid images for deleted file,0.054,git/diff,19,1.593
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.593
git/diff imageDiff changes for text are not set,0.159,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for new file,0.078,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for modified file,0.065,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for staged file,0.067,git/diff,19,1.593
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.095,git/diff,19,1.593
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.127,git/diff,19,1.593
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.127,git/diff,19,1.593
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.105,git/diff,19,1.593
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.593
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.593
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.593
git/diff getBinaryPaths in repo with text only files returns an empty array,0.072,git/diff,19,1.593
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.079,git/diff,19,1.593
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.091,git/diff,19,1.593
BranchPruner does nothing on non GitHub repositories,0.183,BranchPruner,6,1.396
BranchPruner prunes for GitHub repository,0.24,BranchPruner,6,1.396
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.178,BranchPruner,6,1.396
BranchPruner does not prune if there is no default branch,0.181,BranchPruner,6,1.396
BranchPruner does not prune reserved branches,0.232,BranchPruner,6,1.396
git/reflog getRecentBranches returns the recently checked out branches,0.125,git/reflog,6,0.875
git/reflog getRecentBranches works after renaming a branch,0.159,git/reflog,6,0.875
git/reflog getRecentBranches returns a limited number of branches,0.216,git/reflog,6,0.875
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.125,git/reflog,6,0.875
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.156,git/reflog,6,0.875
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.051,git/reflog,6,0.875
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.278,formatPatch,5,0.89
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.855
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.855
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.855
git/checkout with submodules cleans up an submodule that no longer exists,0.257,git/checkout,6,0.855
git/checkout with submodules updates a changed submodule reference,0.21,git/checkout,6,0.855
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.098,gitignore,9,0.615
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.097,gitignore,9,0.615
gitignore saveGitIgnore applies rule correctly to repository,0.089,gitignore,9,0.615
gitignore appendIgnoreRule appends one rule,0.102,gitignore,9,0.615
gitignore appendIgnoreRule appends multiple rules,0.107,gitignore,9,0.615
git/rev-parse isGitRepository should return true for a repository,0.043,git/rev-parse,10,0.624
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.624
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.624
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.624
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.624
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.624
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.624
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.624
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.047,git/rev-parse,10,0.624
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.18,git/rev-parse,10,0.624
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.612
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.612
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.612
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.612
git/branch tip returns non-origin remote,0.078,git/branch,10,0.612
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,10,0.612
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.612
git/branch getBranchesPointedAt in a local repo finds no branch names,0.044,git/branch,10,0.612
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.612
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.612
git/submodule listSubmodules returns the submodule entry,0.095,git/submodule,3,0.643
git/submodule listSubmodules returns the expected tag,0.144,git/submodule,3,0.643
git/submodule resetSubmodulePaths update submodule to original commit,0.36,git/submodule,3,0.643
git/merge merge and is successful returns true,0.036,git/merge,7,0.546
git/merge merge and is a noop returns false,0.048,git/merge,7,0.546
git/merge getMergeBase returns the common ancestor of two branches,0.06,git/merge,7,0.546
git-lfs isUsingLFS returns false for repository not using LFS,0.05,git-lfs,9,0.508
git-lfs isUsingLFS returns true if LFS is tracking a path,0.065,git-lfs,9,0.508
git/log getCommits loads history,0.06,git/log,7,0.544
git/log getCommits handles repository with HEAD file on disk,0.075,git/log,7,0.544
git/log getCommits handles repository with signed commit and log.showSignature set,0.097,git/log,7,0.544
git/log getChangedFiles loads the files changed in the commit,0.049,git/log,7,0.544
git/log getChangedFiles detects renames,0.087,git/log,7,0.544
git/log getChangedFiles detect copies,0.091,git/log,7,0.544
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.544
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.425
git/remote findDefaultRemote returns origin when multiple remotes found,0.051,git/remote,9,0.425
git/remote findDefaultRemote returns something when origin removed,0.06,git/remote,9,0.425
git/reset reset can hard reset a repository,0.069,git/reset,2,0.113
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.044,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.033,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.31
git/config config looks up config values,0.048,git/config,4,0.292
git/config config returns null for undefined values,0.045,git/config,4,0.292
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.292
git/config global config setGlobalConfigValue will replace all entries for a global value,0.1,git/config,4,0.292
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.216
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.216
git/core exit code handling does not throw for exit codes that were expected,0.042,git/core,4,0.216
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.216
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.203
AppStore can select a repository,0.139,AppStore,5,0.192
validatedRepositoryPath returns the path to the repository,0.35,validatedRepositoryPath,2,0.408
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.046
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.372,git/rebase,21,8.501
git/rebase detect conflicts status detects REBASE_HEAD,0.275,git/rebase,21,8.501
git/rebase detect conflicts has conflicted files in working directory,0.271,git/rebase,21,8.501
git/rebase detect conflicts is a detached HEAD state,0.295,git/rebase,21,8.501
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.298,git/rebase,21,8.501
git/rebase abort after conflicts found no longer has working directory changes,0.309,git/rebase,21,8.501
git/rebase abort after conflicts found returns to the feature branch,0.315,git/rebase,21,8.501
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.381,git/rebase,21,8.501
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.399,git/rebase,21,8.501
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.359,git/rebase,21,8.501
git/rebase continue after resolving conflicts returns success,0.418,git/rebase,21,8.501
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.422,git/rebase,21,8.501
git/rebase continue after resolving conflicts no longer has working directory changes,0.457,git/rebase,21,8.501
git/rebase continue after resolving conflicts returns to the feature branch,0.426,git/rebase,21,8.501
git/rebase continue after resolving conflicts branch is now a different ref,0.438,git/rebase,21,8.501
git/rebase continue with additional changes unrelated to conflicted files returns success,0.428,git/rebase,21,8.501
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.436,git/rebase,21,8.501
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.429,git/rebase,21,8.501
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.447,git/rebase,21,8.501
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.473,git/rebase,21,8.501
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.501
git/commit createCommit normal commits the given files,0.106,git/commit,21,3.826
git/commit createCommit normal commit does not strip commentary by default,0.089,git/commit,21,3.826
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.826
git/commit createCommit normal can commit renames,0.142,git/commit,21,3.826
git/commit createCommit partials can commit some lines from new file,0.144,git/commit,21,3.826
git/commit createCommit partials can commit second hunk from modified file,0.147,git/commit,21,3.826
git/commit createCommit partials can commit single delete from modified file,0.131,git/commit,21,3.826
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,3.826
git/commit createCommit partials can commit some lines from deleted file,0.151,git/commit,21,3.826
git/commit createCommit partials can commit renames with modifications,0.166,git/commit,21,3.826
git/commit createCommit partials can commit renames with partially selected modifications,0.191,git/commit,21,3.826
git/commit createCommit with a merge conflict creates a merge commit,0.222,git/commit,21,3.826
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.214,git/commit,21,3.826
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.297,git/commit,21,3.826
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.279,git/commit,21,3.826
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.343,git/commit,21,3.826
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.352,git/commit,21,3.826
git/commit createMergeCommit with no changes throws an error,0.075,git/commit,21,3.826
git/commit index corner cases can commit when staged new file is then deleted,0.133,git/commit,21,3.826
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.151,git/commit,21,3.826
git/commit index corner cases file is deleted in index,0.153,git/commit,21,3.826
git/rebase can parse progress returns a value indicating conflicts were encountered,0.441,git/rebase,7,3.826
git/rebase can parse progress status detects REBASE_HEAD,0.431,git/rebase,7,3.826
git/rebase can parse progress is a detached HEAD state,0.441,git/rebase,7,3.826
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.805,git/rebase,7,3.826
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.824,git/rebase,7,3.826
git/rebase can parse progress for long rebase is a detached HEAD state,0.834,git/rebase,7,3.826
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.17,git/stash,14,2.577
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.245,git/stash,14,2.577
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.213,git/stash,14,2.577
GitStore loadCommitBatch includes HEAD when loading commits,0.333,GitStore,11,2.392
GitStore can discard changes from a repository,0.176,GitStore,11,2.392
GitStore can discard a renamed file,0.15,GitStore,11,2.392
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.392
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.392
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.392
GitStore undo first commit has no staged files,0.196,GitStore,11,2.392
GitStore repository with HEAD file can discard modified change cleanly,0.111,GitStore,11,2.392
git/status getStatus with conflicted repo parses conflicted files with markers,0.3,git/status,12,1.901
git/status getStatus with conflicted repo parses conflicted files without markers,0.293,git/status,12,1.901
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.515,git/status,12,1.901
git/status getStatus with conflicted repo parses resolved files,0.25,git/status,12,1.901
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.086,git/status,12,1.901
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.107,git/status,12,1.901
git/status getStatus with unconflicted repo parses changed files,0.047,git/status,12,1.901
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.901
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,1.901
git/status getStatus with unconflicted repo reflects copies,0.081,git/status,12,1.901
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,1.901
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.04,git/diff,19,1.568
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.568
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.568
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.568
git/diff imageDiff changes for images are set,0.155,git/diff,19,1.568
git/diff imageDiff changes for text are not set,0.074,git/diff,19,1.568
git/diff getWorkingDirectoryDiff counts lines for new file,0.085,git/diff,19,1.568
git/diff getWorkingDirectoryDiff counts lines for modified file,0.061,git/diff,19,1.568
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.568
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.095,git/diff,19,1.568
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.568
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.128,git/diff,19,1.568
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.104,git/diff,19,1.568
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.105,git/diff,19,1.568
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.568
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.568
git/diff getBinaryPaths in repo with text only files returns an empty array,0.06,git/diff,19,1.568
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.076,git/diff,19,1.568
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.086,git/diff,19,1.568
BranchPruner does nothing on non GitHub repositories,0.184,BranchPruner,6,1.419
BranchPruner prunes for GitHub repository,0.232,BranchPruner,6,1.419
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.185,BranchPruner,6,1.419
BranchPruner does not prune if there is no default branch,0.192,BranchPruner,6,1.419
BranchPruner does not prune reserved branches,0.242,BranchPruner,6,1.419
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.302,formatPatch,5,0.935
git/reflog getRecentBranches returns the recently checked out branches,0.136,git/reflog,6,0.984
git/reflog getRecentBranches works after renaming a branch,0.18,git/reflog,6,0.984
git/reflog getRecentBranches returns a limited number of branches,0.245,git/reflog,6,0.984
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.145,git/reflog,6,0.984
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.176,git/reflog,6,0.984
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.058,git/reflog,6,0.984
git/checkout can checkout a valid branch name in an existing repository,0.113,git/checkout,6,0.903
git/checkout can checkout a branch when it exists on multiple remotes,0.124,git/checkout,6,0.903
git/checkout will fail when an existing branch matches the remote branch,0.102,git/checkout,6,0.903
git/checkout with submodules cleans up an submodule that no longer exists,0.277,git/checkout,6,0.903
git/checkout with submodules updates a changed submodule reference,0.213,git/checkout,6,0.903
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.609
git/submodule listSubmodules returns the expected tag,0.147,git/submodule,3,0.609
git/submodule resetSubmodulePaths update submodule to original commit,0.32,git/submodule,3,0.609
git/rev-parse isGitRepository should return true for a repository,0.045,git/rev-parse,10,0.61
git/rev-parse isGitRepository should return false for a directory,0.044,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns true for initialized bare repository,0.055,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.61
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.04,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.038,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.171,git/rev-parse,10,0.61
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.101,gitignore,9,0.68
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.106,gitignore,9,0.68
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.68
gitignore appendIgnoreRule appends one rule,0.117,gitignore,9,0.68
gitignore appendIgnoreRule appends multiple rules,0.122,gitignore,9,0.68
git/branch tip returns unborn for new repository,0.036,git/branch,10,0.603
git/branch tip returns correct ref if checkout occurs,0.052,git/branch,10,0.603
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.603
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,10,0.603
git/branch tip returns non-origin remote,0.073,git/branch,10,0.603
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.603
git/branch getBranchesPointedAt in a local repo finds one branch name,0.041,git/branch,10,0.603
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.603
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.603
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,10,0.603
git/merge merge and is successful returns true,0.034,git/merge,7,0.578
git/merge merge and is a noop returns false,0.052,git/merge,7,0.578
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.578
git/log getCommits loads history,0.059,git/log,7,0.527
git/log getCommits handles repository with HEAD file on disk,0.072,git/log,7,0.527
git/log getCommits handles repository with signed commit and log.showSignature set,0.093,git/log,7,0.527
git/log getChangedFiles loads the files changed in the commit,0.05,git/log,7,0.527
git/log getChangedFiles detects renames,0.078,git/log,7,0.527
git/log getChangedFiles detect copies,0.084,git/log,7,0.527
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.527
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.536
git-lfs isUsingLFS returns true if LFS is tracking a path,0.07,git-lfs,9,0.536
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.427
git/remote findDefaultRemote returns origin when multiple remotes found,0.05,git/remote,9,0.427
git/remote findDefaultRemote returns something when origin removed,0.059,git/remote,9,0.427
validatedRepositoryPath returns the path to the repository,0.041,validatedRepositoryPath,2,0.101
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.034,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.045,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.046,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.308
git/config config looks up config values,0.045,git/config,4,0.285
git/config config returns null for undefined values,0.046,git/config,4,0.285
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.285
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,4,0.285
git/core error handling does not throw for errors that were expected,0.048,git/core,4,0.221
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.221
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.221
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.221
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for empty repo,0.064,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.204
AppStore can select a repository,0.138,AppStore,5,0.19
git/reset reset can hard reset a repository,0.435,git/reset,2,0.479
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.048
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.389,git/rebase,21,8.461
git/rebase detect conflicts status detects REBASE_HEAD,0.284,git/rebase,21,8.461
git/rebase detect conflicts has conflicted files in working directory,0.28,git/rebase,21,8.461
git/rebase detect conflicts is a detached HEAD state,0.3,git/rebase,21,8.461
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.343,git/rebase,21,8.461
git/rebase abort after conflicts found no longer has working directory changes,0.296,git/rebase,21,8.461
git/rebase abort after conflicts found returns to the feature branch,0.315,git/rebase,21,8.461
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.352,git/rebase,21,8.461
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.376,git/rebase,21,8.461
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.357,git/rebase,21,8.461
git/rebase continue after resolving conflicts returns success,0.42,git/rebase,21,8.461
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.438,git/rebase,21,8.461
git/rebase continue after resolving conflicts no longer has working directory changes,0.419,git/rebase,21,8.461
git/rebase continue after resolving conflicts returns to the feature branch,0.411,git/rebase,21,8.461
git/rebase continue after resolving conflicts branch is now a different ref,0.454,git/rebase,21,8.461
git/rebase continue with additional changes unrelated to conflicted files returns success,0.41,git/rebase,21,8.461
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.424,git/rebase,21,8.461
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.434,git/rebase,21,8.461
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.439,git/rebase,21,8.461
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.463,git/rebase,21,8.461
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,8.461
git/rebase can parse progress returns a value indicating conflicts were encountered,0.401,git/rebase,7,3.425
git/rebase can parse progress status detects REBASE_HEAD,0.377,git/rebase,7,3.425
git/rebase can parse progress is a detached HEAD state,0.372,git/rebase,7,3.425
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.722,git/rebase,7,3.425
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.736,git/rebase,7,3.425
git/rebase can parse progress for long rebase is a detached HEAD state,0.761,git/rebase,7,3.425
git/commit createCommit normal commits the given files,0.117,git/commit,21,4.118
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,4.118
git/commit createCommit normal can commit for empty repository,0.123,git/commit,21,4.118
git/commit createCommit normal can commit renames,0.14,git/commit,21,4.118
git/commit createCommit partials can commit some lines from new file,0.155,git/commit,21,4.118
git/commit createCommit partials can commit second hunk from modified file,0.171,git/commit,21,4.118
git/commit createCommit partials can commit single delete from modified file,0.15,git/commit,21,4.118
git/commit createCommit partials can commit multiple hunks from modified file,0.169,git/commit,21,4.118
git/commit createCommit partials can commit some lines from deleted file,0.161,git/commit,21,4.118
git/commit createCommit partials can commit renames with modifications,0.159,git/commit,21,4.118
git/commit createCommit partials can commit renames with partially selected modifications,0.202,git/commit,21,4.118
git/commit createCommit with a merge conflict creates a merge commit,0.252,git/commit,21,4.118
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.221,git/commit,21,4.118
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.322,git/commit,21,4.118
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.319,git/commit,21,4.118
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.369,git/commit,21,4.118
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.373,git/commit,21,4.118
git/commit createMergeCommit with no changes throws an error,0.085,git/commit,21,4.118
git/commit index corner cases can commit when staged new file is then deleted,0.147,git/commit,21,4.118
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.167,git/commit,21,4.118
git/commit index corner cases file is deleted in index,0.167,git/commit,21,4.118
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.168,git/stash,14,2.555
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.254,git/stash,14,2.555
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.199,git/stash,14,2.555
GitStore loadCommitBatch includes HEAD when loading commits,0.335,GitStore,11,2.397
GitStore can discard changes from a repository,0.176,GitStore,11,2.397
GitStore can discard a renamed file,0.147,GitStore,11,2.397
GitStore undo first commit reports the repository is unborn,0.18,GitStore,11,2.397
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.397
GitStore undo first commit clears the undo commit dialog,0.2,GitStore,11,2.397
GitStore undo first commit has no staged files,0.201,GitStore,11,2.397
GitStore repository with HEAD file can discard modified change cleanly,0.107,GitStore,11,2.397
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.988
git/status getStatus with conflicted repo parses conflicted files without markers,0.29,git/status,12,1.988
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.481,git/status,12,1.988
git/status getStatus with conflicted repo parses resolved files,0.297,git/status,12,1.988
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.168,git/status,12,1.988
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.117,git/status,12,1.988
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.988
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,1.988
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,1.988
git/status getStatus with unconflicted repo reflects copies,0.085,git/status,12,1.988
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.046,git/status,12,1.988
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.043,git/diff,19,1.46
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.46
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.46
git/diff getBlobImage retrieves valid images for deleted file,0.052,git/diff,19,1.46
git/diff imageDiff changes for images are set,0.07,git/diff,19,1.46
git/diff imageDiff changes for text are not set,0.066,git/diff,19,1.46
git/diff getWorkingDirectoryDiff counts lines for new file,0.067,git/diff,19,1.46
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.46
git/diff getWorkingDirectoryDiff counts lines for staged file,0.064,git/diff,19,1.46
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.098,git/diff,19,1.46
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.127,git/diff,19,1.46
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.128,git/diff,19,1.46
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.097,git/diff,19,1.46
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.46
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.069,git/diff,19,1.46
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.049,git/diff,19,1.46
git/diff getBinaryPaths in repo with text only files returns an empty array,0.063,git/diff,19,1.46
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.078,git/diff,19,1.46
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.088,git/diff,19,1.46
BranchPruner does nothing on non GitHub repositories,0.272,BranchPruner,6,1.54
BranchPruner prunes for GitHub repository,0.253,BranchPruner,6,1.54
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.184,BranchPruner,6,1.54
BranchPruner does not prune if there is no default branch,0.197,BranchPruner,6,1.54
BranchPruner does not prune reserved branches,0.238,BranchPruner,6,1.54
git/reflog getRecentBranches returns the recently checked out branches,0.127,git/reflog,6,0.89
git/reflog getRecentBranches works after renaming a branch,0.157,git/reflog,6,0.89
git/reflog getRecentBranches returns a limited number of branches,0.22,git/reflog,6,0.89
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.127,git/reflog,6,0.89
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.158,git/reflog,6,0.89
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.89
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.276,formatPatch,5,0.876
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.794
git/checkout can checkout a branch when it exists on multiple remotes,0.103,git/checkout,6,0.794
git/checkout will fail when an existing branch matches the remote branch,0.093,git/checkout,6,0.794
git/checkout with submodules cleans up an submodule that no longer exists,0.231,git/checkout,6,0.794
git/checkout with submodules updates a changed submodule reference,0.191,git/checkout,6,0.794
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.094,gitignore,9,0.577
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.088,gitignore,9,0.577
gitignore saveGitIgnore applies rule correctly to repository,0.083,gitignore,9,0.577
gitignore appendIgnoreRule appends one rule,0.096,gitignore,9,0.577
gitignore appendIgnoreRule appends multiple rules,0.095,gitignore,9,0.577
git/rev-parse isGitRepository should return true for a repository,0.038,git/rev-parse,10,0.571
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.571
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.571
git/rev-parse isBareRepository returns true for initialized bare repository,0.046,git/rev-parse,10,0.571
git/rev-parse isBareRepository returns false for empty directory,0.037,git/rev-parse,10,0.571
git/rev-parse isBareRepository throws error for missing directory,0.036,git/rev-parse,10,0.571
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.044,git/rev-parse,10,0.571
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.037,git/rev-parse,10,0.571
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.043,git/rev-parse,10,0.571
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.168,git/rev-parse,10,0.571
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.594
git/submodule listSubmodules returns the expected tag,0.145,git/submodule,3,0.594
git/submodule resetSubmodulePaths update submodule to original commit,0.309,git/submodule,3,0.594
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.58
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.58
git/branch tip returns detached for arbitrary checkout,0.043,git/branch,10,0.58
git/branch tip returns current branch when on a valid HEAD,0.064,git/branch,10,0.58
git/branch tip returns non-origin remote,0.067,git/branch,10,0.58
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.072,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.043,git/branch,10,0.58
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.077,git/branch,10,0.58
git/merge merge and is successful returns true,0.035,git/merge,7,0.552
git/merge merge and is a noop returns false,0.05,git/merge,7,0.552
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.552
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.505
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.505
git/log getCommits loads history,0.15,git/log,7,0.645
git/log getCommits handles repository with HEAD file on disk,0.105,git/log,7,0.645
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.645
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.645
git/log getChangedFiles detects renames,0.082,git/log,7,0.645
git/log getChangedFiles detect copies,0.081,git/log,7,0.645
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.645
git/reset reset can hard reset a repository,0.063,git/reset,2,0.11
git/remote getRemotes should return both remotes,0.041,git/remote,9,0.408
git/remote findDefaultRemote returns origin when multiple remotes found,0.047,git/remote,9,0.408
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.408
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.279
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.279
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.279
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.038,patch formatting,8,0.279
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.024,patch formatting,8,0.279
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.02,patch formatting,8,0.279
patch formatting formatPatchesForModifiedFile includes empty context lines,0.019,patch formatting,8,0.279
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.018,patch formatting,8,0.279
git/config config looks up config values,0.036,git/config,4,0.258
git/config config returns null for undefined values,0.038,git/config,4,0.258
git/config global config getGlobalConfigPath gets the config path,0.054,git/config,4,0.258
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,4,0.258
git/core error handling does not throw for errors that were expected,0.039,git/core,4,0.219
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.219
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.219
git/core exit code handling throws for exit codes that were not expected,0.048,git/core,4,0.219
git/for-each-ref getBranches fetches branches using for-each-ref,0.078,git/for-each-ref,3,0.212
git/for-each-ref getBranches should return empty list for empty repo,0.055,git/for-each-ref,3,0.212
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.051,git/for-each-ref,3,0.212
AppStore can select a repository,0.127,AppStore,5,0.181
validatedRepositoryPath returns the path to the repository,0.372,validatedRepositoryPath,2,0.434
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.37,git/rebase,21,8.504
git/rebase detect conflicts status detects REBASE_HEAD,0.286,git/rebase,21,8.504
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,8.504
git/rebase detect conflicts is a detached HEAD state,0.301,git/rebase,21,8.504
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.289,git/rebase,21,8.504
git/rebase abort after conflicts found no longer has working directory changes,0.305,git/rebase,21,8.504
git/rebase abort after conflicts found returns to the feature branch,0.297,git/rebase,21,8.504
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.369,git/rebase,21,8.504
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.401,git/rebase,21,8.504
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.369,git/rebase,21,8.504
git/rebase continue after resolving conflicts returns success,0.417,git/rebase,21,8.504
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.453,git/rebase,21,8.504
git/rebase continue after resolving conflicts no longer has working directory changes,0.474,git/rebase,21,8.504
git/rebase continue after resolving conflicts returns to the feature branch,0.413,git/rebase,21,8.504
git/rebase continue after resolving conflicts branch is now a different ref,0.471,git/rebase,21,8.504
git/rebase continue with additional changes unrelated to conflicted files returns success,0.421,git/rebase,21,8.504
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.419,git/rebase,21,8.504
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.426,git/rebase,21,8.504
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.442,git/rebase,21,8.504
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.45,git/rebase,21,8.504
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.406,git/rebase,21,8.504
git/commit createCommit normal commits the given files,0.106,git/commit,21,3.828
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.828
git/commit createCommit normal can commit for empty repository,0.124,git/commit,21,3.828
git/commit createCommit normal can commit renames,0.143,git/commit,21,3.828
git/commit createCommit partials can commit some lines from new file,0.145,git/commit,21,3.828
git/commit createCommit partials can commit second hunk from modified file,0.152,git/commit,21,3.828
git/commit createCommit partials can commit single delete from modified file,0.137,git/commit,21,3.828
git/commit createCommit partials can commit multiple hunks from modified file,0.164,git/commit,21,3.828
git/commit createCommit partials can commit some lines from deleted file,0.144,git/commit,21,3.828
git/commit createCommit partials can commit renames with modifications,0.158,git/commit,21,3.828
git/commit createCommit partials can commit renames with partially selected modifications,0.19,git/commit,21,3.828
git/commit createCommit with a merge conflict creates a merge commit,0.22,git/commit,21,3.828
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.216,git/commit,21,3.828
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.294,git/commit,21,3.828
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.282,git/commit,21,3.828
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.333,git/commit,21,3.828
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.346,git/commit,21,3.828
git/commit createMergeCommit with no changes throws an error,0.078,git/commit,21,3.828
git/commit index corner cases can commit when staged new file is then deleted,0.137,git/commit,21,3.828
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.153,git/commit,21,3.828
git/commit index corner cases file is deleted in index,0.15,git/commit,21,3.828
git/rebase can parse progress returns a value indicating conflicts were encountered,0.422,git/rebase,7,3.799
git/rebase can parse progress status detects REBASE_HEAD,0.429,git/rebase,7,3.799
git/rebase can parse progress is a detached HEAD state,0.445,git/rebase,7,3.799
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.796,git/rebase,7,3.799
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.827,git/rebase,7,3.799
git/rebase can parse progress for long rebase is a detached HEAD state,0.829,git/rebase,7,3.799
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.167,git/stash,14,2.618
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.227,git/stash,14,2.618
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.217,git/stash,14,2.618
GitStore loadCommitBatch includes HEAD when loading commits,0.376,GitStore,11,2.477
GitStore can discard changes from a repository,0.179,GitStore,11,2.477
GitStore can discard a renamed file,0.169,GitStore,11,2.477
GitStore undo first commit reports the repository is unborn,0.182,GitStore,11,2.477
GitStore undo first commit pre-fills the commit message,0.118,GitStore,11,2.477
GitStore undo first commit clears the undo commit dialog,0.209,GitStore,11,2.477
GitStore undo first commit has no staged files,0.195,GitStore,11,2.477
GitStore repository with HEAD file can discard modified change cleanly,0.111,GitStore,11,2.477
git/status getStatus with conflicted repo parses conflicted files with markers,0.33,git/status,12,1.713
git/status getStatus with conflicted repo parses conflicted files without markers,0.244,git/status,12,1.713
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.405,git/status,12,1.713
git/status getStatus with conflicted repo parses resolved files,0.234,git/status,12,1.713
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.087,git/status,12,1.713
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.1,git/status,12,1.713
git/status getStatus with unconflicted repo parses changed files,0.043,git/status,12,1.713
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.039,git/status,12,1.713
git/status getStatus with unconflicted repo reflects renames,0.073,git/status,12,1.713
git/status getStatus with unconflicted repo reflects copies,0.071,git/status,12,1.713
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.036,git/status,12,1.713
BranchPruner does nothing on non GitHub repositories,0.18,BranchPruner,6,1.403
BranchPruner prunes for GitHub repository,0.231,BranchPruner,6,1.403
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.19,BranchPruner,6,1.403
BranchPruner does not prune if there is no default branch,0.191,BranchPruner,6,1.403
BranchPruner does not prune reserved branches,0.241,BranchPruner,6,1.403
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.109,git/diff,19,1.585
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.066,git/diff,19,1.585
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.585
git/diff getBlobImage retrieves valid images for deleted file,0.063,git/diff,19,1.585
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.585
git/diff imageDiff changes for text are not set,0.071,git/diff,19,1.585
git/diff getWorkingDirectoryDiff counts lines for new file,0.067,git/diff,19,1.585
git/diff getWorkingDirectoryDiff counts lines for modified file,0.06,git/diff,19,1.585
git/diff getWorkingDirectoryDiff counts lines for staged file,0.062,git/diff,19,1.585
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.107,git/diff,19,1.585
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.129,git/diff,19,1.585
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.126,git/diff,19,1.585
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.11,git/diff,19,1.585
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.108,git/diff,19,1.585
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.074,git/diff,19,1.585
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.585
git/diff getBinaryPaths in repo with text only files returns an empty array,0.062,git/diff,19,1.585
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.073,git/diff,19,1.585
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.086,git/diff,19,1.585
git/reflog getRecentBranches returns the recently checked out branches,0.133,git/reflog,6,0.917
git/reflog getRecentBranches works after renaming a branch,0.164,git/reflog,6,0.917
git/reflog getRecentBranches returns a limited number of branches,0.226,git/reflog,6,0.917
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.125,git/reflog,6,0.917
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.165,git/reflog,6,0.917
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.056,git/reflog,6,0.917
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.317,formatPatch,5,1.009
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.867
git/checkout can checkout a branch when it exists on multiple remotes,0.111,git/checkout,6,0.867
git/checkout will fail when an existing branch matches the remote branch,0.107,git/checkout,6,0.867
git/checkout with submodules cleans up an submodule that no longer exists,0.246,git/checkout,6,0.867
git/checkout with submodules updates a changed submodule reference,0.219,git/checkout,6,0.867
git/log getCommits loads history,0.06,git/log,7,0.519
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.519
git/log getCommits handles repository with signed commit and log.showSignature set,0.084,git/log,7,0.519
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.519
git/log getChangedFiles detects renames,0.082,git/log,7,0.519
git/log getChangedFiles detect copies,0.082,git/log,7,0.519
git/log getChangedFiles handles commit when HEAD exists on disk,0.045,git/log,7,0.519
git/submodule listSubmodules returns the submodule entry,0.108,git/submodule,3,0.59
git/submodule listSubmodules returns the expected tag,0.151,git/submodule,3,0.59
git/submodule resetSubmodulePaths update submodule to original commit,0.292,git/submodule,3,0.59
git/branch tip returns unborn for new repository,0.032,git/branch,10,0.561
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,10,0.561
git/branch tip returns detached for arbitrary checkout,0.042,git/branch,10,0.561
git/branch tip returns current branch when on a valid HEAD,0.063,git/branch,10,0.561
git/branch tip returns non-origin remote,0.069,git/branch,10,0.561
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.561
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.561
git/branch getBranchesPointedAt in a local repo finds no branch names,0.036,git/branch,10,0.561
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.036,git/branch,10,0.561
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.071,git/branch,10,0.561
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.101,gitignore,9,0.634
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.1,gitignore,9,0.634
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.634
gitignore appendIgnoreRule appends one rule,0.107,gitignore,9,0.634
gitignore appendIgnoreRule appends multiple rules,0.113,gitignore,9,0.634
git/rev-parse isGitRepository should return true for a repository,0.044,git/rev-parse,10,0.599
git/rev-parse isGitRepository should return false for a directory,0.044,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns false for default initialized repository,0.051,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.599
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.037,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.161,git/rev-parse,10,0.599
git/merge merge and is successful returns true,0.036,git/merge,7,0.546
git/merge merge and is a noop returns false,0.046,git/merge,7,0.546
git/merge getMergeBase returns the common ancestor of two branches,0.056,git/merge,7,0.546
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.494
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.494
validatedRepositoryPath returns the path to the repository,0.038,validatedRepositoryPath,2,0.097
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.41
git/remote findDefaultRemote returns origin when multiple remotes found,0.055,git/remote,9,0.41
git/remote findDefaultRemote returns something when origin removed,0.055,git/remote,9,0.41
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.283
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.283
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.034,patch formatting,8,0.283
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.038,patch formatting,8,0.283
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.283
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.283
patch formatting formatPatchesForModifiedFile includes empty context lines,0.018,patch formatting,8,0.283
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.018,patch formatting,8,0.283
git/config config looks up config values,0.038,git/config,4,0.27
git/config config returns null for undefined values,0.041,git/config,4,0.27
git/config global config getGlobalConfigPath gets the config path,0.055,git/config,4,0.27
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,4,0.27
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.215
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.215
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.215
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.215
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.202
AppStore can select a repository,0.133,AppStore,5,0.185
git/reset reset can hard reset a repository,0.531,git/reset,2,0.576
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.046
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.373,git/rebase,21,8.539
git/rebase detect conflicts status detects REBASE_HEAD,0.284,git/rebase,21,8.539
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,8.539
git/rebase detect conflicts is a detached HEAD state,0.302,git/rebase,21,8.539
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.303,git/rebase,21,8.539
git/rebase abort after conflicts found no longer has working directory changes,0.298,git/rebase,21,8.539
git/rebase abort after conflicts found returns to the feature branch,0.312,git/rebase,21,8.539
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.394,git/rebase,21,8.539
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.389,git/rebase,21,8.539
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.362,git/rebase,21,8.539
git/rebase continue after resolving conflicts returns success,0.418,git/rebase,21,8.539
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.428,git/rebase,21,8.539
git/rebase continue after resolving conflicts no longer has working directory changes,0.45,git/rebase,21,8.539
git/rebase continue after resolving conflicts returns to the feature branch,0.432,git/rebase,21,8.539
git/rebase continue after resolving conflicts branch is now a different ref,0.455,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files returns success,0.432,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.432,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.425,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.442,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.466,git/rebase,21,8.539
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.416,git/rebase,21,8.539
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.828
git/commit createCommit normal commit does not strip commentary by default,0.09,git/commit,21,3.828
git/commit createCommit normal can commit for empty repository,0.125,git/commit,21,3.828
git/commit createCommit normal can commit renames,0.14,git/commit,21,3.828
git/commit createCommit partials can commit some lines from new file,0.143,git/commit,21,3.828
git/commit createCommit partials can commit second hunk from modified file,0.15,git/commit,21,3.828
git/commit createCommit partials can commit single delete from modified file,0.136,git/commit,21,3.828
git/commit createCommit partials can commit multiple hunks from modified file,0.159,git/commit,21,3.828
git/commit createCommit partials can commit some lines from deleted file,0.141,git/commit,21,3.828
git/commit createCommit partials can commit renames with modifications,0.147,git/commit,21,3.828
git/commit createCommit partials can commit renames with partially selected modifications,0.186,git/commit,21,3.828
git/commit createCommit with a merge conflict creates a merge commit,0.226,git/commit,21,3.828
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.223,git/commit,21,3.828
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.287,git/commit,21,3.828
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.287,git/commit,21,3.828
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.361,git/commit,21,3.828
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.359,git/commit,21,3.828
git/commit createMergeCommit with no changes throws an error,0.083,git/commit,21,3.828
git/commit index corner cases can commit when staged new file is then deleted,0.13,git/commit,21,3.828
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.146,git/commit,21,3.828
git/commit index corner cases file is deleted in index,0.147,git/commit,21,3.828
git/rebase can parse progress returns a value indicating conflicts were encountered,0.437,git/rebase,7,3.846
git/rebase can parse progress status detects REBASE_HEAD,0.42,git/rebase,7,3.846
git/rebase can parse progress is a detached HEAD state,0.45,git/rebase,7,3.846
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.811,git/rebase,7,3.846
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.826,git/rebase,7,3.846
git/rebase can parse progress for long rebase is a detached HEAD state,0.853,git/rebase,7,3.846
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.173,git/stash,14,2.688
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.274,git/stash,14,2.688
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.206,git/stash,14,2.688
GitStore loadCommitBatch includes HEAD when loading commits,0.326,GitStore,11,2.371
GitStore can discard changes from a repository,0.175,GitStore,11,2.371
GitStore can discard a renamed file,0.145,GitStore,11,2.371
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.371
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.371
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.371
GitStore undo first commit has no staged files,0.193,GitStore,11,2.371
GitStore repository with HEAD file can discard modified change cleanly,0.107,GitStore,11,2.371
git/status getStatus with conflicted repo parses conflicted files with markers,0.293,git/status,12,1.802
git/status getStatus with conflicted repo parses conflicted files without markers,0.323,git/status,12,1.802
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.421,git/status,12,1.802
git/status getStatus with conflicted repo parses resolved files,0.238,git/status,12,1.802
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.089,git/status,12,1.802
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.113,git/status,12,1.802
git/status getStatus with unconflicted repo parses changed files,0.042,git/status,12,1.802
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.038,git/status,12,1.802
git/status getStatus with unconflicted repo reflects renames,0.077,git/status,12,1.802
git/status getStatus with unconflicted repo reflects copies,0.074,git/status,12,1.802
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,1.802
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.031,git/diff,19,1.563
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.563
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.563
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.563
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.563
git/diff imageDiff changes for text are not set,0.069,git/diff,19,1.563
git/diff getWorkingDirectoryDiff counts lines for new file,0.069,git/diff,19,1.563
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.563
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.563
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.095,git/diff,19,1.563
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.128,git/diff,19,1.563
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.124,git/diff,19,1.563
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.1,git/diff,19,1.563
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.103,git/diff,19,1.563
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.068,git/diff,19,1.563
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.049,git/diff,19,1.563
git/diff getBinaryPaths in repo with text only files returns an empty array,0.171,git/diff,19,1.563
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.078,git/diff,19,1.563
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.086,git/diff,19,1.563
BranchPruner does nothing on non GitHub repositories,0.182,BranchPruner,6,1.502
BranchPruner prunes for GitHub repository,0.225,BranchPruner,6,1.502
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.187,BranchPruner,6,1.502
BranchPruner does not prune if there is no default branch,0.267,BranchPruner,6,1.502
BranchPruner does not prune reserved branches,0.254,BranchPruner,6,1.502
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.303,formatPatch,5,0.925
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.928
git/reflog getRecentBranches works after renaming a branch,0.179,git/reflog,6,0.928
git/reflog getRecentBranches returns a limited number of branches,0.222,git/reflog,6,0.928
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.132,git/reflog,6,0.928
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.164,git/reflog,6,0.928
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.058,git/reflog,6,0.928
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.831
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.831
git/checkout will fail when an existing branch matches the remote branch,0.103,git/checkout,6,0.831
git/checkout with submodules cleans up an submodule that no longer exists,0.257,git/checkout,6,0.831
git/checkout with submodules updates a changed submodule reference,0.185,git/checkout,6,0.831
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.09,gitignore,9,0.594
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.093,gitignore,9,0.594
gitignore saveGitIgnore applies rule correctly to repository,0.085,gitignore,9,0.594
gitignore appendIgnoreRule appends one rule,0.101,gitignore,9,0.594
gitignore appendIgnoreRule appends multiple rules,0.103,gitignore,9,0.594
git/rev-parse isGitRepository should return true for a repository,0.039,git/rev-parse,10,0.609
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns false for default initialized repository,0.057,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns true for initialized bare repository,0.048,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns false for empty directory,0.039,git/rev-parse,10,0.609
git/rev-parse isBareRepository throws error for missing directory,0.039,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.039,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.179,git/rev-parse,10,0.609
git/submodule listSubmodules returns the submodule entry,0.19,git/submodule,3,0.691
git/submodule listSubmodules returns the expected tag,0.151,git/submodule,3,0.691
git/submodule resetSubmodulePaths update submodule to original commit,0.309,git/submodule,3,0.691
git/reset reset can hard reset a repository,0.062,git/reset,2,0.107
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.6
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.6
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.6
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.6
git/branch tip returns non-origin remote,0.076,git/branch,10,0.6
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.077,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.049,git/branch,10,0.6
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.072,git/branch,10,0.6
git/merge merge and is successful returns true,0.031,git/merge,7,0.532
git/merge merge and is a noop returns false,0.045,git/merge,7,0.532
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.532
git/log getCommits loads history,0.052,git/log,7,0.495
git/log getCommits handles repository with HEAD file on disk,0.074,git/log,7,0.495
git/log getCommits handles repository with signed commit and log.showSignature set,0.086,git/log,7,0.495
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.495
git/log getChangedFiles detects renames,0.071,git/log,7,0.495
git/log getChangedFiles detect copies,0.075,git/log,7,0.495
git/log getChangedFiles handles commit when HEAD exists on disk,0.048,git/log,7,0.495
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.496
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.496
git/remote getRemotes should return both remotes,0.041,git/remote,9,0.4
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,9,0.4
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.4
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.037,patch formatting,8,0.274
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.036,patch formatting,8,0.274
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.274
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.037,patch formatting,8,0.274
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.025,patch formatting,8,0.274
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.019,patch formatting,8,0.274
patch formatting formatPatchesForModifiedFile includes empty context lines,0.019,patch formatting,8,0.274
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.017,patch formatting,8,0.274
git/config config looks up config values,0.039,git/config,4,0.257
git/config config returns null for undefined values,0.04,git/config,4,0.257
git/config global config getGlobalConfigPath gets the config path,0.052,git/config,4,0.257
git/config global config setGlobalConfigValue will replace all entries for a global value,0.084,git/config,4,0.257
git/core error handling does not throw for errors that were expected,0.041,git/core,4,0.205
git/core error handling throws for errors that were not expected,0.041,git/core,4,0.205
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.205
git/core exit code handling throws for exit codes that were not expected,0.038,git/core,4,0.205
git/for-each-ref getBranches fetches branches using for-each-ref,0.058,git/for-each-ref,3,0.19
git/for-each-ref getBranches should return empty list for empty repo,0.057,git/for-each-ref,3,0.19
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.043,git/for-each-ref,3,0.19
AppStore can select a repository,0.127,AppStore,5,0.182
validatedRepositoryPath returns the path to the repository,0.378,validatedRepositoryPath,2,0.433
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.023,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.384,git/rebase,21,8.723
git/rebase detect conflicts status detects REBASE_HEAD,0.286,git/rebase,21,8.723
git/rebase detect conflicts has conflicted files in working directory,0.29,git/rebase,21,8.723
git/rebase detect conflicts is a detached HEAD state,0.326,git/rebase,21,8.723
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.356,git/rebase,21,8.723
git/rebase abort after conflicts found no longer has working directory changes,0.301,git/rebase,21,8.723
git/rebase abort after conflicts found returns to the feature branch,0.312,git/rebase,21,8.723
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.4,git/rebase,21,8.723
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.438,git/rebase,21,8.723
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.387,git/rebase,21,8.723
git/rebase continue after resolving conflicts returns success,0.427,git/rebase,21,8.723
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.444,git/rebase,21,8.723
git/rebase continue after resolving conflicts no longer has working directory changes,0.428,git/rebase,21,8.723
git/rebase continue after resolving conflicts returns to the feature branch,0.418,git/rebase,21,8.723
git/rebase continue after resolving conflicts branch is now a different ref,0.424,git/rebase,21,8.723
git/rebase continue with additional changes unrelated to conflicted files returns success,0.419,git/rebase,21,8.723
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.463,git/rebase,21,8.723
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.448,git/rebase,21,8.723
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.476,git/rebase,21,8.723
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.433,git/rebase,21,8.723
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.411,git/rebase,21,8.723
git/rebase can parse progress returns a value indicating conflicts were encountered,0.391,git/rebase,7,3.462
git/rebase can parse progress status detects REBASE_HEAD,0.388,git/rebase,7,3.462
git/rebase can parse progress is a detached HEAD state,0.394,git/rebase,7,3.462
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.72,git/rebase,7,3.462
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.707,git/rebase,7,3.462
git/rebase can parse progress for long rebase is a detached HEAD state,0.801,git/rebase,7,3.462
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.209
git/commit createCommit normal commit does not strip commentary by default,0.101,git/commit,21,4.209
git/commit createCommit normal can commit for empty repository,0.134,git/commit,21,4.209
git/commit createCommit normal can commit renames,0.145,git/commit,21,4.209
git/commit createCommit partials can commit some lines from new file,0.163,git/commit,21,4.209
git/commit createCommit partials can commit second hunk from modified file,0.176,git/commit,21,4.209
git/commit createCommit partials can commit single delete from modified file,0.156,git/commit,21,4.209
git/commit createCommit partials can commit multiple hunks from modified file,0.18,git/commit,21,4.209
git/commit createCommit partials can commit some lines from deleted file,0.164,git/commit,21,4.209
git/commit createCommit partials can commit renames with modifications,0.168,git/commit,21,4.209
git/commit createCommit partials can commit renames with partially selected modifications,0.212,git/commit,21,4.209
git/commit createCommit with a merge conflict creates a merge commit,0.245,git/commit,21,4.209
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.223,git/commit,21,4.209
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.322,git/commit,21,4.209
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.323,git/commit,21,4.209
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.378,git/commit,21,4.209
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.392,git/commit,21,4.209
git/commit createMergeCommit with no changes throws an error,0.082,git/commit,21,4.209
git/commit index corner cases can commit when staged new file is then deleted,0.144,git/commit,21,4.209
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.162,git/commit,21,4.209
git/commit index corner cases file is deleted in index,0.166,git/commit,21,4.209
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.166,git/stash,14,2.601
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.25,git/stash,14,2.601
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.211,git/stash,14,2.601
GitStore loadCommitBatch includes HEAD when loading commits,0.327,GitStore,11,2.473
GitStore can discard changes from a repository,0.189,GitStore,11,2.473
GitStore can discard a renamed file,0.169,GitStore,11,2.473
GitStore undo first commit reports the repository is unborn,0.187,GitStore,11,2.473
GitStore undo first commit pre-fills the commit message,0.122,GitStore,11,2.473
GitStore undo first commit clears the undo commit dialog,0.21,GitStore,11,2.473
GitStore undo first commit has no staged files,0.202,GitStore,11,2.473
GitStore repository with HEAD file can discard modified change cleanly,0.118,GitStore,11,2.473
git/status getStatus with conflicted repo parses conflicted files with markers,0.298,git/status,12,1.875
git/status getStatus with conflicted repo parses conflicted files without markers,0.296,git/status,12,1.875
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.494,git/status,12,1.875
git/status getStatus with conflicted repo parses resolved files,0.233,git/status,12,1.875
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.091,git/status,12,1.875
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.11,git/status,12,1.875
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.875
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,1.875
git/status getStatus with unconflicted repo reflects renames,0.088,git/status,12,1.875
git/status getStatus with unconflicted repo reflects copies,0.081,git/status,12,1.875
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.04,git/status,12,1.875
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.537
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.537
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.537
git/diff getBlobImage retrieves valid images for deleted file,0.054,git/diff,19,1.537
git/diff imageDiff changes for images are set,0.073,git/diff,19,1.537
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.537
git/diff getWorkingDirectoryDiff counts lines for new file,0.074,git/diff,19,1.537
git/diff getWorkingDirectoryDiff counts lines for modified file,0.057,git/diff,19,1.537
git/diff getWorkingDirectoryDiff counts lines for staged file,0.058,git/diff,19,1.537
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.172,git/diff,19,1.537
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.116,git/diff,19,1.537
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.128,git/diff,19,1.537
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.104,git/diff,19,1.537
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.106,git/diff,19,1.537
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.537
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.537
git/diff getBinaryPaths in repo with text only files returns an empty array,0.066,git/diff,19,1.537
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.537
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.087,git/diff,19,1.537
BranchPruner does nothing on non GitHub repositories,0.187,BranchPruner,6,1.449
BranchPruner prunes for GitHub repository,0.235,BranchPruner,6,1.449
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.182,BranchPruner,6,1.449
BranchPruner does not prune if there is no default branch,0.198,BranchPruner,6,1.449
BranchPruner does not prune reserved branches,0.253,BranchPruner,6,1.449
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.918
git/reflog getRecentBranches works after renaming a branch,0.17,git/reflog,6,0.918
git/reflog getRecentBranches returns a limited number of branches,0.216,git/reflog,6,0.918
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.139,git/reflog,6,0.918
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.166,git/reflog,6,0.918
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.918
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.239,formatPatch,5,0.83
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.812
git/checkout can checkout a branch when it exists on multiple remotes,0.11,git/checkout,6,0.812
git/checkout will fail when an existing branch matches the remote branch,0.093,git/checkout,6,0.812
git/checkout with submodules cleans up an submodule that no longer exists,0.228,git/checkout,6,0.812
git/checkout with submodules updates a changed submodule reference,0.205,git/checkout,6,0.812
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.562
git/submodule listSubmodules returns the expected tag,0.132,git/submodule,3,0.562
git/submodule resetSubmodulePaths update submodule to original commit,0.287,git/submodule,3,0.562
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.576
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns false for default initialized repository,0.047,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns true for initialized bare repository,0.054,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns false for empty directory,0.038,git/rev-parse,10,0.576
git/rev-parse isBareRepository throws error for missing directory,0.035,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.047,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.037,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.037,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.169,git/rev-parse,10,0.576
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.559
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.559
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.559
git/branch tip returns current branch when on a valid HEAD,0.066,git/branch,10,0.559
git/branch tip returns non-origin remote,0.068,git/branch,10,0.559
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.07,git/branch,10,0.559
git/branch getBranchesPointedAt in a local repo finds one branch name,0.037,git/branch,10,0.559
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.559
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.036,git/branch,10,0.559
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.073,git/branch,10,0.559
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.101,gitignore,9,0.674
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.106,gitignore,9,0.674
gitignore saveGitIgnore applies rule correctly to repository,0.102,gitignore,9,0.674
gitignore appendIgnoreRule appends one rule,0.112,gitignore,9,0.674
gitignore appendIgnoreRule appends multiple rules,0.121,gitignore,9,0.674
git/merge merge and is successful returns true,0.034,git/merge,7,0.558
git/merge merge and is a noop returns false,0.046,git/merge,7,0.558
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.558
git-lfs isUsingLFS returns false for repository not using LFS,0.044,git-lfs,9,0.512
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.512
git/log getCommits loads history,0.06,git/log,7,0.521
git/log getCommits handles repository with HEAD file on disk,0.081,git/log,7,0.521
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.521
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.521
git/log getChangedFiles detects renames,0.08,git/log,7,0.521
git/log getChangedFiles detect copies,0.073,git/log,7,0.521
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.521
validatedRepositoryPath returns the path to the repository,0.041,validatedRepositoryPath,2,0.098
git/remote getRemotes should return both remotes,0.05,git/remote,9,0.434
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,9,0.434
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.434
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.3
git/config config looks up config values,0.044,git/config,4,0.289
git/config config returns null for undefined values,0.045,git/config,4,0.289
git/config global config getGlobalConfigPath gets the config path,0.06,git/config,4,0.289
git/config global config setGlobalConfigValue will replace all entries for a global value,0.099,git/config,4,0.289
git/core error handling does not throw for errors that were expected,0.043,git/core,4,0.217
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.217
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.217
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.217
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for empty repo,0.068,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.211
AppStore can select a repository,0.137,AppStore,5,0.191
git/reset reset can hard reset a repository,0.43,git/reset,2,0.47
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.387,git/rebase,21,8.503
git/rebase detect conflicts status detects REBASE_HEAD,0.29,git/rebase,21,8.503
git/rebase detect conflicts has conflicted files in working directory,0.286,git/rebase,21,8.503
git/rebase detect conflicts is a detached HEAD state,0.311,git/rebase,21,8.503
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.302,git/rebase,21,8.503
git/rebase abort after conflicts found no longer has working directory changes,0.306,git/rebase,21,8.503
git/rebase abort after conflicts found returns to the feature branch,0.307,git/rebase,21,8.503
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.37,git/rebase,21,8.503
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.388,git/rebase,21,8.503
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.352,git/rebase,21,8.503
git/rebase continue after resolving conflicts returns success,0.415,git/rebase,21,8.503
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.433,git/rebase,21,8.503
git/rebase continue after resolving conflicts no longer has working directory changes,0.43,git/rebase,21,8.503
git/rebase continue after resolving conflicts returns to the feature branch,0.422,git/rebase,21,8.503
git/rebase continue after resolving conflicts branch is now a different ref,0.46,git/rebase,21,8.503
git/rebase continue with additional changes unrelated to conflicted files returns success,0.417,git/rebase,21,8.503
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.419,git/rebase,21,8.503
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.427,git/rebase,21,8.503
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.472,git/rebase,21,8.503
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.448,git/rebase,21,8.503
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.503
git/commit createCommit normal commits the given files,0.104,git/commit,21,3.803
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.803
git/commit createCommit normal can commit for empty repository,0.109,git/commit,21,3.803
git/commit createCommit normal can commit renames,0.129,git/commit,21,3.803
git/commit createCommit partials can commit some lines from new file,0.144,git/commit,21,3.803
git/commit createCommit partials can commit second hunk from modified file,0.151,git/commit,21,3.803
git/commit createCommit partials can commit single delete from modified file,0.137,git/commit,21,3.803
git/commit createCommit partials can commit multiple hunks from modified file,0.161,git/commit,21,3.803
git/commit createCommit partials can commit some lines from deleted file,0.152,git/commit,21,3.803
git/commit createCommit partials can commit renames with modifications,0.153,git/commit,21,3.803
git/commit createCommit partials can commit renames with partially selected modifications,0.185,git/commit,21,3.803
git/commit createCommit with a merge conflict creates a merge commit,0.223,git/commit,21,3.803
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.207,git/commit,21,3.803
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.303,git/commit,21,3.803
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.281,git/commit,21,3.803
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.351,git/commit,21,3.803
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.362,git/commit,21,3.803
git/commit createMergeCommit with no changes throws an error,0.077,git/commit,21,3.803
git/commit index corner cases can commit when staged new file is then deleted,0.129,git/commit,21,3.803
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.144,git/commit,21,3.803
git/commit index corner cases file is deleted in index,0.146,git/commit,21,3.803
git/rebase can parse progress returns a value indicating conflicts were encountered,0.422,git/rebase,7,3.769
git/rebase can parse progress status detects REBASE_HEAD,0.403,git/rebase,7,3.769
git/rebase can parse progress is a detached HEAD state,0.435,git/rebase,7,3.769
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.803,git/rebase,7,3.769
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.839,git/rebase,7,3.769
git/rebase can parse progress for long rebase is a detached HEAD state,0.817,git/rebase,7,3.769
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.157,git/stash,14,2.61
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.269,git/stash,14,2.61
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.208,git/stash,14,2.61
GitStore loadCommitBatch includes HEAD when loading commits,0.248,GitStore,11,2.355
GitStore can discard changes from a repository,0.165,GitStore,11,2.355
GitStore can discard a renamed file,0.148,GitStore,11,2.355
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.355
GitStore undo first commit pre-fills the commit message,0.116,GitStore,11,2.355
GitStore undo first commit clears the undo commit dialog,0.2,GitStore,11,2.355
GitStore undo first commit has no staged files,0.249,GitStore,11,2.355
GitStore repository with HEAD file can discard modified change cleanly,0.122,GitStore,11,2.355
git/status getStatus with conflicted repo parses conflicted files with markers,0.321,git/status,12,1.714
git/status getStatus with conflicted repo parses conflicted files without markers,0.219,git/status,12,1.714
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.389,git/status,12,1.714
git/status getStatus with conflicted repo parses resolved files,0.239,git/status,12,1.714
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.088,git/status,12,1.714
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.114,git/status,12,1.714
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.714
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.714
git/status getStatus with unconflicted repo reflects renames,0.079,git/status,12,1.714
git/status getStatus with unconflicted repo reflects copies,0.081,git/status,12,1.714
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.714
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.036,git/diff,19,1.463
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.463
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.463
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.463
git/diff imageDiff changes for images are set,0.071,git/diff,19,1.463
git/diff imageDiff changes for text are not set,0.06,git/diff,19,1.463
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.463
git/diff getWorkingDirectoryDiff counts lines for modified file,0.066,git/diff,19,1.463
git/diff getWorkingDirectoryDiff counts lines for staged file,0.067,git/diff,19,1.463
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.092,git/diff,19,1.463
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.122,git/diff,19,1.463
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.129,git/diff,19,1.463
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.101,git/diff,19,1.463
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.105,git/diff,19,1.463
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.463
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.463
git/diff getBinaryPaths in repo with text only files returns an empty array,0.07,git/diff,19,1.463
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.081,git/diff,19,1.463
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.093,git/diff,19,1.463
BranchPruner does nothing on non GitHub repositories,0.276,BranchPruner,6,1.498
BranchPruner prunes for GitHub repository,0.246,BranchPruner,6,1.498
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.18,BranchPruner,6,1.498
BranchPruner does not prune if there is no default branch,0.181,BranchPruner,6,1.498
BranchPruner does not prune reserved branches,0.234,BranchPruner,6,1.498
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.892
git/reflog getRecentBranches works after renaming a branch,0.153,git/reflog,6,0.892
git/reflog getRecentBranches returns a limited number of branches,0.208,git/reflog,6,0.892
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.141,git/reflog,6,0.892
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.162,git/reflog,6,0.892
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.892
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.302,formatPatch,5,0.888
git/checkout can checkout a valid branch name in an existing repository,0.106,git/checkout,6,0.833
git/checkout can checkout a branch when it exists on multiple remotes,0.112,git/checkout,6,0.833
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.833
git/checkout with submodules cleans up an submodule that no longer exists,0.239,git/checkout,6,0.833
git/checkout with submodules updates a changed submodule reference,0.208,git/checkout,6,0.833
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.605
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.093,gitignore,9,0.605
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.605
gitignore appendIgnoreRule appends one rule,0.104,gitignore,9,0.605
gitignore appendIgnoreRule appends multiple rules,0.1,gitignore,9,0.605
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.57
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.57
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.57
git/rev-parse isBareRepository returns true for initialized bare repository,0.05,git/rev-parse,10,0.57
git/rev-parse isBareRepository returns false for empty directory,0.038,git/rev-parse,10,0.57
git/rev-parse isBareRepository throws error for missing directory,0.037,git/rev-parse,10,0.57
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.047,git/rev-parse,10,0.57
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.039,git/rev-parse,10,0.57
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.57
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.159,git/rev-parse,10,0.57
git/submodule listSubmodules returns the submodule entry,0.101,git/submodule,3,0.629
git/submodule listSubmodules returns the expected tag,0.158,git/submodule,3,0.629
git/submodule resetSubmodulePaths update submodule to original commit,0.329,git/submodule,3,0.629
git/branch tip returns unborn for new repository,0.034,git/branch,10,0.584
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.584
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.584
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.584
git/branch tip returns non-origin remote,0.074,git/branch,10,0.584
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.077,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.584
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.584
git/merge merge and is successful returns true,0.035,git/merge,7,0.553
git/merge merge and is a noop returns false,0.048,git/merge,7,0.553
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.553
git/log getCommits loads history,0.06,git/log,7,0.525
git/log getCommits handles repository with HEAD file on disk,0.08,git/log,7,0.525
git/log getCommits handles repository with signed commit and log.showSignature set,0.092,git/log,7,0.525
git/log getChangedFiles loads the files changed in the commit,0.049,git/log,7,0.525
git/log getChangedFiles detects renames,0.077,git/log,7,0.525
git/log getChangedFiles detect copies,0.081,git/log,7,0.525
git/log getChangedFiles handles commit when HEAD exists on disk,0.039,git/log,7,0.525
git-lfs isUsingLFS returns false for repository not using LFS,0.126,git-lfs,9,0.627
git-lfs isUsingLFS returns true if LFS is tracking a path,0.094,git-lfs,9,0.627
git/reset reset can hard reset a repository,0.068,git/reset,2,0.115
git/remote getRemotes should return both remotes,0.05,git/remote,9,0.417
git/remote findDefaultRemote returns origin when multiple remotes found,0.048,git/remote,9,0.417
git/remote findDefaultRemote returns something when origin removed,0.054,git/remote,9,0.417
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.035,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.298
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.298
git/config config looks up config values,0.044,git/config,4,0.279
git/config config returns null for undefined values,0.042,git/config,4,0.279
git/config global config getGlobalConfigPath gets the config path,0.054,git/config,4,0.279
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,4,0.279
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.206
git/core error handling throws for errors that were not expected,0.041,git/core,4,0.206
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.206
git/core exit code handling throws for exit codes that were not expected,0.039,git/core,4,0.206
git/for-each-ref getBranches fetches branches using for-each-ref,0.058,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for empty repo,0.062,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.198
AppStore can select a repository,0.127,AppStore,5,0.179
validatedRepositoryPath returns the path to the repository,0.374,validatedRepositoryPath,2,0.435
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.048
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.373,git/rebase,21,8.58
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.58
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.58
git/rebase detect conflicts is a detached HEAD state,0.321,git/rebase,21,8.58
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.313,git/rebase,21,8.58
git/rebase abort after conflicts found no longer has working directory changes,0.306,git/rebase,21,8.58
git/rebase abort after conflicts found returns to the feature branch,0.321,git/rebase,21,8.58
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.384,git/rebase,21,8.58
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.377,git/rebase,21,8.58
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.379,git/rebase,21,8.58
git/rebase continue after resolving conflicts returns success,0.418,git/rebase,21,8.58
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.434,git/rebase,21,8.58
git/rebase continue after resolving conflicts no longer has working directory changes,0.439,git/rebase,21,8.58
git/rebase continue after resolving conflicts returns to the feature branch,0.428,git/rebase,21,8.58
git/rebase continue after resolving conflicts branch is now a different ref,0.449,git/rebase,21,8.58
git/rebase continue with additional changes unrelated to conflicted files returns success,0.451,git/rebase,21,8.58
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.435,git/rebase,21,8.58
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.439,git/rebase,21,8.58
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.444,git/rebase,21,8.58
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.441,git/rebase,21,8.58
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.413,git/rebase,21,8.58
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.936
git/commit createCommit normal commit does not strip commentary by default,0.09,git/commit,21,3.936
git/commit createCommit normal can commit for empty repository,0.119,git/commit,21,3.936
git/commit createCommit normal can commit renames,0.142,git/commit,21,3.936
git/commit createCommit partials can commit some lines from new file,0.147,git/commit,21,3.936
git/commit createCommit partials can commit second hunk from modified file,0.158,git/commit,21,3.936
git/commit createCommit partials can commit single delete from modified file,0.145,git/commit,21,3.936
git/commit createCommit partials can commit multiple hunks from modified file,0.164,git/commit,21,3.936
git/commit createCommit partials can commit some lines from deleted file,0.153,git/commit,21,3.936
git/commit createCommit partials can commit renames with modifications,0.161,git/commit,21,3.936
git/commit createCommit partials can commit renames with partially selected modifications,0.2,git/commit,21,3.936
git/commit createCommit with a merge conflict creates a merge commit,0.233,git/commit,21,3.936
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.225,git/commit,21,3.936
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.302,git/commit,21,3.936
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.295,git/commit,21,3.936
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.362,git/commit,21,3.936
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.358,git/commit,21,3.936
git/commit createMergeCommit with no changes throws an error,0.081,git/commit,21,3.936
git/commit index corner cases can commit when staged new file is then deleted,0.132,git/commit,21,3.936
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.153,git/commit,21,3.936
git/commit index corner cases file is deleted in index,0.15,git/commit,21,3.936
git/rebase can parse progress returns a value indicating conflicts were encountered,0.423,git/rebase,7,3.841
git/rebase can parse progress status detects REBASE_HEAD,0.421,git/rebase,7,3.841
git/rebase can parse progress is a detached HEAD state,0.445,git/rebase,7,3.841
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.812,git/rebase,7,3.841
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.831,git/rebase,7,3.841
git/rebase can parse progress for long rebase is a detached HEAD state,0.858,git/rebase,7,3.841
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.173,git/stash,14,2.631
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.249,git/stash,14,2.631
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.203,git/stash,14,2.631
GitStore loadCommitBatch includes HEAD when loading commits,0.322,GitStore,11,2.34
GitStore can discard changes from a repository,0.179,GitStore,11,2.34
GitStore can discard a renamed file,0.146,GitStore,11,2.34
GitStore undo first commit reports the repository is unborn,0.179,GitStore,11,2.34
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.34
GitStore undo first commit clears the undo commit dialog,0.2,GitStore,11,2.34
GitStore undo first commit has no staged files,0.19,GitStore,11,2.34
GitStore repository with HEAD file can discard modified change cleanly,0.11,GitStore,11,2.34
git/status getStatus with conflicted repo parses conflicted files with markers,0.279,git/status,12,1.983
git/status getStatus with conflicted repo parses conflicted files without markers,0.284,git/status,12,1.983
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.472,git/status,12,1.983
git/status getStatus with conflicted repo parses resolved files,0.286,git/status,12,1.983
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.103,git/status,12,1.983
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.121,git/status,12,1.983
git/status getStatus with unconflicted repo parses changed files,0.057,git/status,12,1.983
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.044,git/status,12,1.983
git/status getStatus with unconflicted repo reflects renames,0.09,git/status,12,1.983
git/status getStatus with unconflicted repo reflects copies,0.161,git/status,12,1.983
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.036,git/status,12,1.983
BranchPruner does nothing on non GitHub repositories,0.189,BranchPruner,6,1.497
BranchPruner prunes for GitHub repository,0.225,BranchPruner,6,1.497
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.266,BranchPruner,6,1.497
BranchPruner does not prune if there is no default branch,0.192,BranchPruner,6,1.497
BranchPruner does not prune reserved branches,0.241,BranchPruner,6,1.497
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.486
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.047,git/diff,19,1.486
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.486
git/diff getBlobImage retrieves valid images for deleted file,0.057,git/diff,19,1.486
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.486
git/diff imageDiff changes for text are not set,0.069,git/diff,19,1.486
git/diff getWorkingDirectoryDiff counts lines for new file,0.068,git/diff,19,1.486
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.486
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.486
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.089,git/diff,19,1.486
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.127,git/diff,19,1.486
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.13,git/diff,19,1.486
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.108,git/diff,19,1.486
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.108,git/diff,19,1.486
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.486
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.486
git/diff getBinaryPaths in repo with text only files returns an empty array,0.066,git/diff,19,1.486
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.486
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.091,git/diff,19,1.486
git/reflog getRecentBranches returns the recently checked out branches,0.135,git/reflog,6,0.946
git/reflog getRecentBranches works after renaming a branch,0.17,git/reflog,6,0.946
git/reflog getRecentBranches returns a limited number of branches,0.238,git/reflog,6,0.946
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.134,git/reflog,6,0.946
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.17,git/reflog,6,0.946
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.946
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.276,formatPatch,5,0.914
git/checkout can checkout a valid branch name in an existing repository,0.114,git/checkout,6,0.896
git/checkout can checkout a branch when it exists on multiple remotes,0.122,git/checkout,6,0.896
git/checkout will fail when an existing branch matches the remote branch,0.107,git/checkout,6,0.896
git/checkout with submodules cleans up an submodule that no longer exists,0.263,git/checkout,6,0.896
git/checkout with submodules updates a changed submodule reference,0.22,git/checkout,6,0.896
git/submodule listSubmodules returns the submodule entry,0.102,git/submodule,3,0.669
git/submodule listSubmodules returns the expected tag,0.155,git/submodule,3,0.669
git/submodule resetSubmodulePaths update submodule to original commit,0.367,git/submodule,3,0.669
git-lfs isUsingLFS returns false for repository not using LFS,0.051,git-lfs,9,0.497
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.497
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.11,gitignore,9,0.678
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.104,gitignore,9,0.678
gitignore saveGitIgnore applies rule correctly to repository,0.097,gitignore,9,0.678
gitignore appendIgnoreRule appends one rule,0.116,gitignore,9,0.678
gitignore appendIgnoreRule appends multiple rules,0.113,gitignore,9,0.678
git/branch tip returns unborn for new repository,0.032,git/branch,10,0.606
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,10,0.606
git/branch tip returns detached for arbitrary checkout,0.043,git/branch,10,0.606
git/branch tip returns current branch when on a valid HEAD,0.073,git/branch,10,0.606
git/branch tip returns non-origin remote,0.076,git/branch,10,0.606
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.079,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.606
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,10,0.606
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.607
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns true for initialized bare repository,0.052,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for empty directory,0.04,git/rev-parse,10,0.607
git/rev-parse isBareRepository throws error for missing directory,0.039,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.056,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.04,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.176,git/rev-parse,10,0.607
git/merge merge and is successful returns true,0.038,git/merge,7,0.586
git/merge merge and is a noop returns false,0.049,git/merge,7,0.586
git/merge getMergeBase returns the common ancestor of two branches,0.066,git/merge,7,0.586
git/log getCommits loads history,0.059,git/log,7,0.501
git/log getCommits handles repository with HEAD file on disk,0.072,git/log,7,0.501
git/log getCommits handles repository with signed commit and log.showSignature set,0.085,git/log,7,0.501
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.501
git/log getChangedFiles detects renames,0.077,git/log,7,0.501
git/log getChangedFiles detect copies,0.078,git/log,7,0.501
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.501
validatedRepositoryPath returns the path to the repository,0.04,validatedRepositoryPath,2,0.092
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.431
git/remote findDefaultRemote returns origin when multiple remotes found,0.051,git/remote,9,0.431
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.431
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.044,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.019,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.296
git/config config looks up config values,0.043,git/config,4,0.285
git/config config returns null for undefined values,0.044,git/config,4,0.285
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.285
git/config global config setGlobalConfigValue will replace all entries for a global value,0.094,git/config,4,0.285
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.232
git/core error handling throws for errors that were not expected,0.05,git/core,4,0.232
git/core exit code handling does not throw for exit codes that were expected,0.047,git/core,4,0.232
git/core exit code handling throws for exit codes that were not expected,0.046,git/core,4,0.232
git/for-each-ref getBranches fetches branches using for-each-ref,0.068,git/for-each-ref,3,0.224
git/for-each-ref getBranches should return empty list for empty repo,0.074,git/for-each-ref,3,0.224
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.05,git/for-each-ref,3,0.224
AppStore can select a repository,0.141,AppStore,5,0.195
git/reset reset can hard reset a repository,0.444,git/reset,2,0.483
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.051
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.373,git/rebase,21,8.54
git/rebase detect conflicts status detects REBASE_HEAD,0.299,git/rebase,21,8.54
git/rebase detect conflicts has conflicted files in working directory,0.27,git/rebase,21,8.54
git/rebase detect conflicts is a detached HEAD state,0.293,git/rebase,21,8.54
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.308,git/rebase,21,8.54
git/rebase abort after conflicts found no longer has working directory changes,0.298,git/rebase,21,8.54
git/rebase abort after conflicts found returns to the feature branch,0.342,git/rebase,21,8.54
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.395,git/rebase,21,8.54
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.376,git/rebase,21,8.54
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.376,git/rebase,21,8.54
git/rebase continue after resolving conflicts returns success,0.437,git/rebase,21,8.54
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.426,git/rebase,21,8.54
git/rebase continue after resolving conflicts no longer has working directory changes,0.421,git/rebase,21,8.54
git/rebase continue after resolving conflicts returns to the feature branch,0.416,git/rebase,21,8.54
git/rebase continue after resolving conflicts branch is now a different ref,0.435,git/rebase,21,8.54
git/rebase continue with additional changes unrelated to conflicted files returns success,0.429,git/rebase,21,8.54
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.43,git/rebase,21,8.54
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.451,git/rebase,21,8.54
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.427,git/rebase,21,8.54
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.442,git/rebase,21,8.54
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.409,git/rebase,21,8.54
git/commit createCommit normal commits the given files,0.11,git/commit,21,3.839
git/commit createCommit normal commit does not strip commentary by default,0.09,git/commit,21,3.839
git/commit createCommit normal can commit for empty repository,0.119,git/commit,21,3.839
git/commit createCommit normal can commit renames,0.14,git/commit,21,3.839
git/commit createCommit partials can commit some lines from new file,0.149,git/commit,21,3.839
git/commit createCommit partials can commit second hunk from modified file,0.155,git/commit,21,3.839
git/commit createCommit partials can commit single delete from modified file,0.139,git/commit,21,3.839
git/commit createCommit partials can commit multiple hunks from modified file,0.164,git/commit,21,3.839
git/commit createCommit partials can commit some lines from deleted file,0.141,git/commit,21,3.839
git/commit createCommit partials can commit renames with modifications,0.16,git/commit,21,3.839
git/commit createCommit partials can commit renames with partially selected modifications,0.194,git/commit,21,3.839
git/commit createCommit with a merge conflict creates a merge commit,0.227,git/commit,21,3.839
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.209,git/commit,21,3.839
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.293,git/commit,21,3.839
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.282,git/commit,21,3.839
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.349,git/commit,21,3.839
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.345,git/commit,21,3.839
git/commit createMergeCommit with no changes throws an error,0.078,git/commit,21,3.839
git/commit index corner cases can commit when staged new file is then deleted,0.131,git/commit,21,3.839
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.148,git/commit,21,3.839
git/commit index corner cases file is deleted in index,0.147,git/commit,21,3.839
git/rebase can parse progress returns a value indicating conflicts were encountered,0.425,git/rebase,7,3.815
git/rebase can parse progress status detects REBASE_HEAD,0.448,git/rebase,7,3.815
git/rebase can parse progress is a detached HEAD state,0.42,git/rebase,7,3.815
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.792,git/rebase,7,3.815
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.811,git/rebase,7,3.815
git/rebase can parse progress for long rebase is a detached HEAD state,0.866,git/rebase,7,3.815
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.163,git/stash,14,2.534
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.248,git/stash,14,2.534
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.216,git/stash,14,2.534
GitStore loadCommitBatch includes HEAD when loading commits,0.344,GitStore,11,2.428
GitStore can discard changes from a repository,0.178,GitStore,11,2.428
GitStore can discard a renamed file,0.162,GitStore,11,2.428
GitStore undo first commit reports the repository is unborn,0.187,GitStore,11,2.428
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.428
GitStore undo first commit clears the undo commit dialog,0.198,GitStore,11,2.428
GitStore undo first commit has no staged files,0.191,GitStore,11,2.428
GitStore repository with HEAD file can discard modified change cleanly,0.111,GitStore,11,2.428
git/status getStatus with conflicted repo parses conflicted files with markers,0.29,git/status,12,1.937
git/status getStatus with conflicted repo parses conflicted files without markers,0.289,git/status,12,1.937
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.468,git/status,12,1.937
git/status getStatus with conflicted repo parses resolved files,0.281,git/status,12,1.937
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.101,git/status,12,1.937
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.176,git/status,12,1.937
git/status getStatus with unconflicted repo parses changed files,0.042,git/status,12,1.937
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.038,git/status,12,1.937
git/status getStatus with unconflicted repo reflects renames,0.077,git/status,12,1.937
git/status getStatus with unconflicted repo reflects copies,0.079,git/status,12,1.937
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.937
BranchPruner does nothing on non GitHub repositories,0.201,BranchPruner,6,1.424
BranchPruner prunes for GitHub repository,0.229,BranchPruner,6,1.424
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.183,BranchPruner,6,1.424
BranchPruner does not prune if there is no default branch,0.191,BranchPruner,6,1.424
BranchPruner does not prune reserved branches,0.231,BranchPruner,6,1.424
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,1.62
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.037,git/diff,19,1.62
git/diff getBlobImage retrieves valid image for modified file,0.116,git/diff,19,1.62
git/diff getBlobImage retrieves valid images for deleted file,0.074,git/diff,19,1.62
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.62
git/diff imageDiff changes for text are not set,0.078,git/diff,19,1.62
git/diff getWorkingDirectoryDiff counts lines for new file,0.069,git/diff,19,1.62
git/diff getWorkingDirectoryDiff counts lines for modified file,0.07,git/diff,19,1.62
git/diff getWorkingDirectoryDiff counts lines for staged file,0.067,git/diff,19,1.62
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.097,git/diff,19,1.62
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.137,git/diff,19,1.62
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.133,git/diff,19,1.62
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.11,git/diff,19,1.62
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.115,git/diff,19,1.62
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.62
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.62
git/diff getBinaryPaths in repo with text only files returns an empty array,0.061,git/diff,19,1.62
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.072,git/diff,19,1.62
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.083,git/diff,19,1.62
git/reflog getRecentBranches returns the recently checked out branches,0.134,git/reflog,6,0.944
git/reflog getRecentBranches works after renaming a branch,0.177,git/reflog,6,0.944
git/reflog getRecentBranches returns a limited number of branches,0.227,git/reflog,6,0.944
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.136,git/reflog,6,0.944
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.168,git/reflog,6,0.944
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.944
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.311,formatPatch,5,0.961
git/checkout can checkout a valid branch name in an existing repository,0.107,git/checkout,6,0.88
git/checkout can checkout a branch when it exists on multiple remotes,0.116,git/checkout,6,0.88
git/checkout will fail when an existing branch matches the remote branch,0.105,git/checkout,6,0.88
git/checkout with submodules cleans up an submodule that no longer exists,0.261,git/checkout,6,0.88
git/checkout with submodules updates a changed submodule reference,0.212,git/checkout,6,0.88
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.614
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.09,gitignore,9,0.614
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.614
gitignore appendIgnoreRule appends one rule,0.105,gitignore,9,0.614
gitignore appendIgnoreRule appends multiple rules,0.101,gitignore,9,0.614
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.612
git/submodule listSubmodules returns the expected tag,0.149,git/submodule,3,0.612
git/submodule resetSubmodulePaths update submodule to original commit,0.319,git/submodule,3,0.612
git/rev-parse isGitRepository should return true for a repository,0.048,git/rev-parse,10,0.626
git/rev-parse isGitRepository should return false for a directory,0.047,git/rev-parse,10,0.626
git/rev-parse isBareRepository returns false for default initialized repository,0.047,git/rev-parse,10,0.626
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.626
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.626
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.626
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.056,git/rev-parse,10,0.626
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.044,git/rev-parse,10,0.626
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.04,git/rev-parse,10,0.626
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.173,git/rev-parse,10,0.626
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.62
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.62
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.62
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.62
git/branch tip returns non-origin remote,0.076,git/branch,10,0.62
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,10,0.62
git/branch getBranchesPointedAt in a local repo finds one branch name,0.052,git/branch,10,0.62
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.62
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.62
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.62
git/merge merge and is successful returns true,0.037,git/merge,7,0.574
git/merge merge and is a noop returns false,0.051,git/merge,7,0.574
git/merge getMergeBase returns the common ancestor of two branches,0.068,git/merge,7,0.574
git/log getCommits loads history,0.154,git/log,7,0.66
git/log getCommits handles repository with HEAD file on disk,0.095,git/log,7,0.66
git/log getCommits handles repository with signed commit and log.showSignature set,0.092,git/log,7,0.66
git/log getChangedFiles loads the files changed in the commit,0.048,git/log,7,0.66
git/log getChangedFiles detects renames,0.083,git/log,7,0.66
git/log getChangedFiles detect copies,0.096,git/log,7,0.66
git/log getChangedFiles handles commit when HEAD exists on disk,0.046,git/log,7,0.66
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.515
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.515
git/reset reset can hard reset a repository,0.066,git/reset,2,0.112
git/remote getRemotes should return both remotes,0.048,git/remote,9,0.409
git/remote findDefaultRemote returns origin when multiple remotes found,0.05,git/remote,9,0.409
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.409
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.037,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.29
git/config config looks up config values,0.046,git/config,4,0.274
git/config config returns null for undefined values,0.044,git/config,4,0.274
git/config global config getGlobalConfigPath gets the config path,0.055,git/config,4,0.274
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,4,0.274
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.23
git/core error handling throws for errors that were not expected,0.049,git/core,4,0.23
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.23
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.23
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.197
git/for-each-ref getBranches should return empty list for empty repo,0.057,git/for-each-ref,3,0.197
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.044,git/for-each-ref,3,0.197
AppStore can select a repository,0.13,AppStore,5,0.188
validatedRepositoryPath returns the path to the repository,0.32,validatedRepositoryPath,2,0.381
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.395,git/rebase,21,8.529
git/rebase detect conflicts status detects REBASE_HEAD,0.284,git/rebase,21,8.529
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.529
git/rebase detect conflicts is a detached HEAD state,0.303,git/rebase,21,8.529
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.313,git/rebase,21,8.529
git/rebase abort after conflicts found no longer has working directory changes,0.302,git/rebase,21,8.529
git/rebase abort after conflicts found returns to the feature branch,0.309,git/rebase,21,8.529
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.362,git/rebase,21,8.529
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.379,git/rebase,21,8.529
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.386,git/rebase,21,8.529
git/rebase continue after resolving conflicts returns success,0.445,git/rebase,21,8.529
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.412,git/rebase,21,8.529
git/rebase continue after resolving conflicts no longer has working directory changes,0.446,git/rebase,21,8.529
git/rebase continue after resolving conflicts returns to the feature branch,0.434,git/rebase,21,8.529
git/rebase continue after resolving conflicts branch is now a different ref,0.454,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files returns success,0.414,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.448,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.427,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.439,git/rebase,21,8.529
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.451,git/rebase,21,8.529
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.396,git/rebase,21,8.529
git/commit createCommit normal commits the given files,0.111,git/commit,21,3.798
git/commit createCommit normal commit does not strip commentary by default,0.089,git/commit,21,3.798
git/commit createCommit normal can commit for empty repository,0.113,git/commit,21,3.798
git/commit createCommit normal can commit renames,0.133,git/commit,21,3.798
git/commit createCommit partials can commit some lines from new file,0.142,git/commit,21,3.798
git/commit createCommit partials can commit second hunk from modified file,0.151,git/commit,21,3.798
git/commit createCommit partials can commit single delete from modified file,0.142,git/commit,21,3.798
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,3.798
git/commit createCommit partials can commit some lines from deleted file,0.145,git/commit,21,3.798
git/commit createCommit partials can commit renames with modifications,0.149,git/commit,21,3.798
git/commit createCommit partials can commit renames with partially selected modifications,0.183,git/commit,21,3.798
git/commit createCommit with a merge conflict creates a merge commit,0.221,git/commit,21,3.798
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.199,git/commit,21,3.798
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.292,git/commit,21,3.798
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.293,git/commit,21,3.798
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.35,git/commit,21,3.798
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.36,git/commit,21,3.798
git/commit createMergeCommit with no changes throws an error,0.078,git/commit,21,3.798
git/commit index corner cases can commit when staged new file is then deleted,0.128,git/commit,21,3.798
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.146,git/commit,21,3.798
git/commit index corner cases file is deleted in index,0.145,git/commit,21,3.798
git/rebase can parse progress returns a value indicating conflicts were encountered,0.44,git/rebase,7,3.821
git/rebase can parse progress status detects REBASE_HEAD,0.424,git/rebase,7,3.821
git/rebase can parse progress is a detached HEAD state,0.404,git/rebase,7,3.821
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.801,git/rebase,7,3.821
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.865,git/rebase,7,3.821
git/rebase can parse progress for long rebase is a detached HEAD state,0.838,git/rebase,7,3.821
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.162,git/stash,14,2.605
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.289,git/stash,14,2.605
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.209,git/stash,14,2.605
GitStore loadCommitBatch includes HEAD when loading commits,0.311,GitStore,11,2.36
GitStore can discard changes from a repository,0.178,GitStore,11,2.36
GitStore can discard a renamed file,0.149,GitStore,11,2.36
GitStore undo first commit reports the repository is unborn,0.179,GitStore,11,2.36
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.36
GitStore undo first commit clears the undo commit dialog,0.21,GitStore,11,2.36
GitStore undo first commit has no staged files,0.193,GitStore,11,2.36
GitStore repository with HEAD file can discard modified change cleanly,0.107,GitStore,11,2.36
git/status getStatus with conflicted repo parses conflicted files with markers,0.29,git/status,12,2.025
git/status getStatus with conflicted repo parses conflicted files without markers,0.287,git/status,12,2.025
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.511,git/status,12,2.025
git/status getStatus with conflicted repo parses resolved files,0.314,git/status,12,2.025
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.097,git/status,12,2.025
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.117,git/status,12,2.025
git/status getStatus with unconflicted repo parses changed files,0.046,git/status,12,2.025
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,2.025
git/status getStatus with unconflicted repo reflects renames,0.142,git/status,12,2.025
git/status getStatus with unconflicted repo reflects copies,0.083,git/status,12,2.025
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,2.025
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.514
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.514
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.514
git/diff getBlobImage retrieves valid images for deleted file,0.052,git/diff,19,1.514
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.514
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.514
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.514
git/diff getWorkingDirectoryDiff counts lines for modified file,0.07,git/diff,19,1.514
git/diff getWorkingDirectoryDiff counts lines for staged file,0.112,git/diff,19,1.514
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.115,git/diff,19,1.514
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.124,git/diff,19,1.514
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.124,git/diff,19,1.514
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.102,git/diff,19,1.514
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.101,git/diff,19,1.514
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.514
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.514
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.514
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.081,git/diff,19,1.514
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.081,git/diff,19,1.514
BranchPruner does nothing on non GitHub repositories,0.18,BranchPruner,6,1.42
BranchPruner prunes for GitHub repository,0.229,BranchPruner,6,1.42
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.175,BranchPruner,6,1.42
BranchPruner does not prune if there is no default branch,0.191,BranchPruner,6,1.42
BranchPruner does not prune reserved branches,0.245,BranchPruner,6,1.42
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.294,formatPatch,5,0.927
git/reflog getRecentBranches returns the recently checked out branches,0.135,git/reflog,6,0.942
git/reflog getRecentBranches works after renaming a branch,0.181,git/reflog,6,0.942
git/reflog getRecentBranches returns a limited number of branches,0.226,git/reflog,6,0.942
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.131,git/reflog,6,0.942
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.169,git/reflog,6,0.942
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.942
git/checkout can checkout a valid branch name in an existing repository,0.114,git/checkout,6,0.845
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.845
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.845
git/checkout with submodules cleans up an submodule that no longer exists,0.242,git/checkout,6,0.845
git/checkout with submodules updates a changed submodule reference,0.204,git/checkout,6,0.845
git/log getCommits loads history,0.053,git/log,7,0.479
git/log getCommits handles repository with HEAD file on disk,0.074,git/log,7,0.479
git/log getCommits handles repository with signed commit and log.showSignature set,0.083,git/log,7,0.479
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.479
git/log getChangedFiles detects renames,0.071,git/log,7,0.479
git/log getChangedFiles detect copies,0.077,git/log,7,0.479
git/log getChangedFiles handles commit when HEAD exists on disk,0.04,git/log,7,0.479
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.594
git/rev-parse isGitRepository should return false for a directory,0.036,git/rev-parse,10,0.594
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.594
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.594
git/rev-parse isBareRepository returns false for empty directory,0.039,git/rev-parse,10,0.594
git/rev-parse isBareRepository throws error for missing directory,0.036,git/rev-parse,10,0.594
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.048,git/rev-parse,10,0.594
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.038,git/rev-parse,10,0.594
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.036,git/rev-parse,10,0.594
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.188,git/rev-parse,10,0.594
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.616
git/branch tip returns correct ref if checkout occurs,0.052,git/branch,10,0.616
git/branch tip returns detached for arbitrary checkout,0.05,git/branch,10,0.616
git/branch tip returns current branch when on a valid HEAD,0.073,git/branch,10,0.616
git/branch tip returns non-origin remote,0.075,git/branch,10,0.616
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.616
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.077,git/branch,10,0.616
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.109,gitignore,9,0.682
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.107,gitignore,9,0.682
gitignore saveGitIgnore applies rule correctly to repository,0.099,gitignore,9,0.682
gitignore appendIgnoreRule appends one rule,0.116,gitignore,9,0.682
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.682
git/submodule listSubmodules returns the submodule entry,0.107,git/submodule,3,0.653
git/submodule listSubmodules returns the expected tag,0.159,git/submodule,3,0.653
git/submodule resetSubmodulePaths update submodule to original commit,0.345,git/submodule,3,0.653
git/merge merge and is successful returns true,0.037,git/merge,7,0.552
git/merge merge and is a noop returns false,0.051,git/merge,7,0.552
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.552
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.496
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.496
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.402
git/remote findDefaultRemote returns origin when multiple remotes found,0.047,git/remote,9,0.402
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.402
validatedRepositoryPath returns the path to the repository,0.04,validatedRepositoryPath,2,0.098
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.024,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile includes empty context lines,0.021,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.282
git/config config looks up config values,0.039,git/config,4,0.267
git/config config returns null for undefined values,0.039,git/config,4,0.267
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.267
git/config global config setGlobalConfigValue will replace all entries for a global value,0.088,git/config,4,0.267
git/core error handling does not throw for errors that were expected,0.04,git/core,4,0.206
git/core error handling throws for errors that were not expected,0.042,git/core,4,0.206
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.206
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.206
git/for-each-ref getBranches fetches branches using for-each-ref,0.069,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for empty repo,0.058,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.201
AppStore can select a repository,0.135,AppStore,5,0.186
git/reset reset can hard reset a repository,0.423,git/reset,2,0.469
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.044
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.374,git/rebase,21,8.475
git/rebase detect conflicts status detects REBASE_HEAD,0.286,git/rebase,21,8.475
git/rebase detect conflicts has conflicted files in working directory,0.273,git/rebase,21,8.475
git/rebase detect conflicts is a detached HEAD state,0.291,git/rebase,21,8.475
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.286,git/rebase,21,8.475
git/rebase abort after conflicts found no longer has working directory changes,0.301,git/rebase,21,8.475
git/rebase abort after conflicts found returns to the feature branch,0.301,git/rebase,21,8.475
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.38,git/rebase,21,8.475
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.374,git/rebase,21,8.475
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.385,git/rebase,21,8.475
git/rebase continue after resolving conflicts returns success,0.438,git/rebase,21,8.475
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.415,git/rebase,21,8.475
git/rebase continue after resolving conflicts no longer has working directory changes,0.454,git/rebase,21,8.475
git/rebase continue after resolving conflicts returns to the feature branch,0.42,git/rebase,21,8.475
git/rebase continue after resolving conflicts branch is now a different ref,0.441,git/rebase,21,8.475
git/rebase continue with additional changes unrelated to conflicted files returns success,0.416,git/rebase,21,8.475
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.454,git/rebase,21,8.475
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.431,git/rebase,21,8.475
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.425,git/rebase,21,8.475
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.466,git/rebase,21,8.475
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.41,git/rebase,21,8.475
git/rebase can parse progress returns a value indicating conflicts were encountered,0.364,git/rebase,7,3.466
git/rebase can parse progress status detects REBASE_HEAD,0.367,git/rebase,7,3.466
git/rebase can parse progress is a detached HEAD state,0.382,git/rebase,7,3.466
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.817,git/rebase,7,3.466
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.747,git/rebase,7,3.466
git/rebase can parse progress for long rebase is a detached HEAD state,0.734,git/rebase,7,3.466
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.218
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.218
git/commit createCommit normal can commit for empty repository,0.124,git/commit,21,4.218
git/commit createCommit normal can commit renames,0.146,git/commit,21,4.218
git/commit createCommit partials can commit some lines from new file,0.157,git/commit,21,4.218
git/commit createCommit partials can commit second hunk from modified file,0.173,git/commit,21,4.218
git/commit createCommit partials can commit single delete from modified file,0.158,git/commit,21,4.218
git/commit createCommit partials can commit multiple hunks from modified file,0.175,git/commit,21,4.218
git/commit createCommit partials can commit some lines from deleted file,0.168,git/commit,21,4.218
git/commit createCommit partials can commit renames with modifications,0.172,git/commit,21,4.218
git/commit createCommit partials can commit renames with partially selected modifications,0.22,git/commit,21,4.218
git/commit createCommit with a merge conflict creates a merge commit,0.264,git/commit,21,4.218
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.232,git/commit,21,4.218
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.323,git/commit,21,4.218
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.322,git/commit,21,4.218
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.375,git/commit,21,4.218
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.381,git/commit,21,4.218
git/commit createMergeCommit with no changes throws an error,0.083,git/commit,21,4.218
git/commit index corner cases can commit when staged new file is then deleted,0.146,git/commit,21,4.218
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.166,git/commit,21,4.218
git/commit index corner cases file is deleted in index,0.165,git/commit,21,4.218
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.174,git/stash,14,2.771
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.283,git/stash,14,2.771
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.243,git/stash,14,2.771
GitStore loadCommitBatch includes HEAD when loading commits,0.313,GitStore,11,2.38
GitStore can discard changes from a repository,0.182,GitStore,11,2.38
GitStore can discard a renamed file,0.151,GitStore,11,2.38
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.38
GitStore undo first commit pre-fills the commit message,0.117,GitStore,11,2.38
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.38
GitStore undo first commit has no staged files,0.194,GitStore,11,2.38
GitStore repository with HEAD file can discard modified change cleanly,0.104,GitStore,11,2.38
git/status getStatus with conflicted repo parses conflicted files with markers,0.336,git/status,12,1.746
git/status getStatus with conflicted repo parses conflicted files without markers,0.231,git/status,12,1.746
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.416,git/status,12,1.746
git/status getStatus with conflicted repo parses resolved files,0.232,git/status,12,1.746
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.089,git/status,12,1.746
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.105,git/status,12,1.746
git/status getStatus with unconflicted repo parses changed files,0.047,git/status,12,1.746
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.04,git/status,12,1.746
git/status getStatus with unconflicted repo reflects renames,0.078,git/status,12,1.746
git/status getStatus with unconflicted repo reflects copies,0.085,git/status,12,1.746
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.037,git/status,12,1.746
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.042,git/diff,19,1.574
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.574
git/diff getBlobImage retrieves valid image for modified file,0.039,git/diff,19,1.574
git/diff getBlobImage retrieves valid images for deleted file,0.054,git/diff,19,1.574
git/diff imageDiff changes for images are set,0.07,git/diff,19,1.574
git/diff imageDiff changes for text are not set,0.155,git/diff,19,1.574
git/diff getWorkingDirectoryDiff counts lines for new file,0.068,git/diff,19,1.574
git/diff getWorkingDirectoryDiff counts lines for modified file,0.072,git/diff,19,1.574
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.574
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.097,git/diff,19,1.574
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.574
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.123,git/diff,19,1.574
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.102,git/diff,19,1.574
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.107,git/diff,19,1.574
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.071,git/diff,19,1.574
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.574
git/diff getBinaryPaths in repo with text only files returns an empty array,0.07,git/diff,19,1.574
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.085,git/diff,19,1.574
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.086,git/diff,19,1.574
BranchPruner does nothing on non GitHub repositories,0.189,BranchPruner,6,1.509
BranchPruner prunes for GitHub repository,0.256,BranchPruner,6,1.509
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.196,BranchPruner,6,1.509
BranchPruner does not prune if there is no default branch,0.198,BranchPruner,6,1.509
BranchPruner does not prune reserved branches,0.26,BranchPruner,6,1.509
git/reflog getRecentBranches returns the recently checked out branches,0.124,git/reflog,6,0.891
git/reflog getRecentBranches works after renaming a branch,0.17,git/reflog,6,0.891
git/reflog getRecentBranches returns a limited number of branches,0.225,git/reflog,6,0.891
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.127,git/reflog,6,0.891
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.154,git/reflog,6,0.891
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.05,git/reflog,6,0.891
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.25,formatPatch,5,0.909
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.819
git/checkout can checkout a branch when it exists on multiple remotes,0.103,git/checkout,6,0.819
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.819
git/checkout with submodules cleans up an submodule that no longer exists,0.232,git/checkout,6,0.819
git/checkout with submodules updates a changed submodule reference,0.206,git/checkout,6,0.819
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.097,gitignore,9,0.6
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.6
gitignore saveGitIgnore applies rule correctly to repository,0.087,gitignore,9,0.6
gitignore appendIgnoreRule appends one rule,0.097,gitignore,9,0.6
gitignore appendIgnoreRule appends multiple rules,0.107,gitignore,9,0.6
git/submodule listSubmodules returns the submodule entry,0.102,git/submodule,3,0.61
git/submodule listSubmodules returns the expected tag,0.155,git/submodule,3,0.61
git/submodule resetSubmodulePaths update submodule to original commit,0.312,git/submodule,3,0.61
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.606
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.606
git/branch tip returns detached for arbitrary checkout,0.043,git/branch,10,0.606
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,10,0.606
git/branch tip returns non-origin remote,0.074,git/branch,10,0.606
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.606
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,10,0.606
git/rev-parse isGitRepository should return true for a repository,0.044,git/rev-parse,10,0.635
git/rev-parse isGitRepository should return false for a directory,0.045,git/rev-parse,10,0.635
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.635
git/rev-parse isBareRepository returns true for initialized bare repository,0.056,git/rev-parse,10,0.635
git/rev-parse isBareRepository returns false for empty directory,0.045,git/rev-parse,10,0.635
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.635
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.635
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.635
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.043,git/rev-parse,10,0.635
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.182,git/rev-parse,10,0.635
git/merge merge and is successful returns true,0.038,git/merge,7,0.579
git/merge merge and is a noop returns false,0.051,git/merge,7,0.579
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.579
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.511
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.511
git/log getCommits loads history,0.059,git/log,7,0.516
git/log getCommits handles repository with HEAD file on disk,0.076,git/log,7,0.516
git/log getCommits handles repository with signed commit and log.showSignature set,0.09,git/log,7,0.516
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.516
git/log getChangedFiles detects renames,0.081,git/log,7,0.516
git/log getChangedFiles detect copies,0.082,git/log,7,0.516
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.516
git/reset reset can hard reset a repository,0.063,git/reset,2,0.111
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.441
git/remote findDefaultRemote returns origin when multiple remotes found,0.057,git/remote,9,0.441
git/remote findDefaultRemote returns something when origin removed,0.06,git/remote,9,0.441
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.026,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.29
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.29
git/config config looks up config values,0.036,git/config,4,0.28
git/config config returns null for undefined values,0.042,git/config,4,0.28
git/config global config getGlobalConfigPath gets the config path,0.06,git/config,4,0.28
git/config global config setGlobalConfigValue will replace all entries for a global value,0.099,git/config,4,0.28
git/core error handling does not throw for errors that were expected,0.041,git/core,4,0.214
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.214
git/core exit code handling does not throw for exit codes that were expected,0.045,git/core,4,0.214
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.214
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.196
git/for-each-ref getBranches should return empty list for empty repo,0.057,git/for-each-ref,3,0.196
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.196
AppStore can select a repository,0.137,AppStore,5,0.19
validatedRepositoryPath returns the path to the repository,0.403,validatedRepositoryPath,2,0.469
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.37,git/rebase,21,8.465
git/rebase detect conflicts status detects REBASE_HEAD,0.28,git/rebase,21,8.465
git/rebase detect conflicts has conflicted files in working directory,0.274,git/rebase,21,8.465
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,8.465
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.301,git/rebase,21,8.465
git/rebase abort after conflicts found no longer has working directory changes,0.303,git/rebase,21,8.465
git/rebase abort after conflicts found returns to the feature branch,0.303,git/rebase,21,8.465
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.378,git/rebase,21,8.465
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.39,git/rebase,21,8.465
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.362,git/rebase,21,8.465
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.465
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.415,git/rebase,21,8.465
git/rebase continue after resolving conflicts no longer has working directory changes,0.438,git/rebase,21,8.465
git/rebase continue after resolving conflicts returns to the feature branch,0.421,git/rebase,21,8.465
git/rebase continue after resolving conflicts branch is now a different ref,0.427,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files returns success,0.417,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.447,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.432,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.437,git/rebase,21,8.465
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.472,git/rebase,21,8.465
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.433,git/rebase,21,8.465
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.92
git/commit createCommit normal commit does not strip commentary by default,0.089,git/commit,21,3.92
git/commit createCommit normal can commit for empty repository,0.114,git/commit,21,3.92
git/commit createCommit normal can commit renames,0.138,git/commit,21,3.92
git/commit createCommit partials can commit some lines from new file,0.145,git/commit,21,3.92
git/commit createCommit partials can commit second hunk from modified file,0.159,git/commit,21,3.92
git/commit createCommit partials can commit single delete from modified file,0.145,git/commit,21,3.92
git/commit createCommit partials can commit multiple hunks from modified file,0.162,git/commit,21,3.92
git/commit createCommit partials can commit some lines from deleted file,0.158,git/commit,21,3.92
git/commit createCommit partials can commit renames with modifications,0.155,git/commit,21,3.92
git/commit createCommit partials can commit renames with partially selected modifications,0.202,git/commit,21,3.92
git/commit createCommit with a merge conflict creates a merge commit,0.227,git/commit,21,3.92
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.207,git/commit,21,3.92
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.306,git/commit,21,3.92
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.29,git/commit,21,3.92
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.361,git/commit,21,3.92
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.361,git/commit,21,3.92
git/commit createMergeCommit with no changes throws an error,0.087,git/commit,21,3.92
git/commit index corner cases can commit when staged new file is then deleted,0.135,git/commit,21,3.92
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.154,git/commit,21,3.92
git/commit index corner cases file is deleted in index,0.155,git/commit,21,3.92
git/rebase can parse progress returns a value indicating conflicts were encountered,0.446,git/rebase,7,3.936
git/rebase can parse progress status detects REBASE_HEAD,0.445,git/rebase,7,3.936
git/rebase can parse progress is a detached HEAD state,0.426,git/rebase,7,3.936
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.853,git/rebase,7,3.936
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.851,git/rebase,7,3.936
git/rebase can parse progress for long rebase is a detached HEAD state,0.864,git/rebase,7,3.936
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.168,git/stash,14,2.552
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.276,git/stash,14,2.552
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.552
GitStore loadCommitBatch includes HEAD when loading commits,0.318,GitStore,11,2.369
GitStore can discard changes from a repository,0.176,GitStore,11,2.369
GitStore can discard a renamed file,0.15,GitStore,11,2.369
GitStore undo first commit reports the repository is unborn,0.186,GitStore,11,2.369
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.369
GitStore undo first commit clears the undo commit dialog,0.208,GitStore,11,2.369
GitStore undo first commit has no staged files,0.192,GitStore,11,2.369
GitStore repository with HEAD file can discard modified change cleanly,0.106,GitStore,11,2.369
git/status getStatus with conflicted repo parses conflicted files with markers,0.279,git/status,12,1.916
git/status getStatus with conflicted repo parses conflicted files without markers,0.283,git/status,12,1.916
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.492,git/status,12,1.916
git/status getStatus with conflicted repo parses resolved files,0.293,git/status,12,1.916
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.107,git/status,12,1.916
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.119,git/status,12,1.916
git/status getStatus with unconflicted repo parses changed files,0.046,git/status,12,1.916
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.04,git/status,12,1.916
git/status getStatus with unconflicted repo reflects renames,0.085,git/status,12,1.916
git/status getStatus with unconflicted repo reflects copies,0.078,git/status,12,1.916
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.038,git/status,12,1.916
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.106,git/diff,19,1.51
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.054,git/diff,19,1.51
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.51
git/diff getBlobImage retrieves valid images for deleted file,0.054,git/diff,19,1.51
git/diff imageDiff changes for images are set,0.065,git/diff,19,1.51
git/diff imageDiff changes for text are not set,0.058,git/diff,19,1.51
git/diff getWorkingDirectoryDiff counts lines for new file,0.056,git/diff,19,1.51
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.51
git/diff getWorkingDirectoryDiff counts lines for staged file,0.064,git/diff,19,1.51
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.092,git/diff,19,1.51
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.12,git/diff,19,1.51
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.124,git/diff,19,1.51
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.104,git/diff,19,1.51
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.107,git/diff,19,1.51
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.071,git/diff,19,1.51
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.51
git/diff getBinaryPaths in repo with text only files returns an empty array,0.064,git/diff,19,1.51
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.51
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.102,git/diff,19,1.51
BranchPruner does nothing on non GitHub repositories,0.286,BranchPruner,6,1.592
BranchPruner prunes for GitHub repository,0.244,BranchPruner,6,1.592
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.202,BranchPruner,6,1.592
BranchPruner does not prune if there is no default branch,0.219,BranchPruner,6,1.592
BranchPruner does not prune reserved branches,0.246,BranchPruner,6,1.592
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.268,formatPatch,5,0.882
git/reflog getRecentBranches returns the recently checked out branches,0.126,git/reflog,6,0.898
git/reflog getRecentBranches works after renaming a branch,0.164,git/reflog,6,0.898
git/reflog getRecentBranches returns a limited number of branches,0.218,git/reflog,6,0.898
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.128,git/reflog,6,0.898
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.163,git/reflog,6,0.898
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.898
git/checkout can checkout a valid branch name in an existing repository,0.102,git/checkout,6,0.842
git/checkout can checkout a branch when it exists on multiple remotes,0.102,git/checkout,6,0.842
git/checkout will fail when an existing branch matches the remote branch,0.1,git/checkout,6,0.842
git/checkout with submodules cleans up an submodule that no longer exists,0.257,git/checkout,6,0.842
git/checkout with submodules updates a changed submodule reference,0.205,git/checkout,6,0.842
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.599
git/rev-parse isGitRepository should return false for a directory,0.037,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns true for initialized bare repository,0.05,git/rev-parse,10,0.599
git/rev-parse isBareRepository returns false for empty directory,0.038,git/rev-parse,10,0.599
git/rev-parse isBareRepository throws error for missing directory,0.037,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.037,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.599
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.183,git/rev-parse,10,0.599
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.554
git/submodule listSubmodules returns the expected tag,0.136,git/submodule,3,0.554
git/submodule resetSubmodulePaths update submodule to original commit,0.279,git/submodule,3,0.554
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.592
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,10,0.592
git/branch tip returns detached for arbitrary checkout,0.042,git/branch,10,0.592
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,10,0.592
git/branch tip returns non-origin remote,0.074,git/branch,10,0.592
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo finds no branch names,0.043,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.592
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.592
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.11,gitignore,9,0.759
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.104,gitignore,9,0.759
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.759
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.759
gitignore appendIgnoreRule appends multiple rules,0.123,gitignore,9,0.759
git/merge merge and is successful returns true,0.032,git/merge,7,0.531
git/merge merge and is a noop returns false,0.046,git/merge,7,0.531
git/merge getMergeBase returns the common ancestor of two branches,0.057,git/merge,7,0.531
git/log getCommits loads history,0.062,git/log,7,0.51
git/log getCommits handles repository with HEAD file on disk,0.068,git/log,7,0.51
git/log getCommits handles repository with signed commit and log.showSignature set,0.086,git/log,7,0.51
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.51
git/log getChangedFiles detects renames,0.077,git/log,7,0.51
git/log getChangedFiles detect copies,0.08,git/log,7,0.51
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.51
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.51
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.51
validatedRepositoryPath returns the path to the repository,0.043,validatedRepositoryPath,2,0.1
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.406
git/remote findDefaultRemote returns origin when multiple remotes found,0.052,git/remote,9,0.406
git/remote findDefaultRemote returns something when origin removed,0.053,git/remote,9,0.406
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.034,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.038,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile includes empty context lines,0.021,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.017,patch formatting,8,0.282
git/config config looks up config values,0.038,git/config,4,0.259
git/config config returns null for undefined values,0.042,git/config,4,0.259
git/config global config getGlobalConfigPath gets the config path,0.053,git/config,4,0.259
git/config global config setGlobalConfigValue will replace all entries for a global value,0.085,git/config,4,0.259
git/core error handling does not throw for errors that were expected,0.04,git/core,4,0.215
git/core error handling throws for errors that were not expected,0.042,git/core,4,0.215
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.215
git/core exit code handling throws for exit codes that were not expected,0.042,git/core,4,0.215
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.2
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.2
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.044,git/for-each-ref,3,0.2
AppStore can select a repository,0.126,AppStore,5,0.178
git/reset reset can hard reset a repository,0.399,git/reset,2,0.444
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.374,git/rebase,21,8.605
git/rebase detect conflicts status detects REBASE_HEAD,0.288,git/rebase,21,8.605
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,8.605
git/rebase detect conflicts is a detached HEAD state,0.297,git/rebase,21,8.605
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.306,git/rebase,21,8.605
git/rebase abort after conflicts found no longer has working directory changes,0.316,git/rebase,21,8.605
git/rebase abort after conflicts found returns to the feature branch,0.3,git/rebase,21,8.605
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.365,git/rebase,21,8.605
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.373,git/rebase,21,8.605
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.356,git/rebase,21,8.605
git/rebase continue after resolving conflicts returns success,0.411,git/rebase,21,8.605
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.432,git/rebase,21,8.605
git/rebase continue after resolving conflicts no longer has working directory changes,0.48,git/rebase,21,8.605
git/rebase continue after resolving conflicts returns to the feature branch,0.425,git/rebase,21,8.605
git/rebase continue after resolving conflicts branch is now a different ref,0.442,git/rebase,21,8.605
git/rebase continue with additional changes unrelated to conflicted files returns success,0.423,git/rebase,21,8.605
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.432,git/rebase,21,8.605
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.437,git/rebase,21,8.605
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.447,git/rebase,21,8.605
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.494,git/rebase,21,8.605
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.476,git/rebase,21,8.605
git/rebase can parse progress returns a value indicating conflicts were encountered,0.385,git/rebase,7,3.468
git/rebase can parse progress status detects REBASE_HEAD,0.39,git/rebase,7,3.468
git/rebase can parse progress is a detached HEAD state,0.4,git/rebase,7,3.468
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.699,git/rebase,7,3.468
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.787,git/rebase,7,3.468
git/rebase can parse progress for long rebase is a detached HEAD state,0.752,git/rebase,7,3.468
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.278
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.278
git/commit createCommit normal can commit for empty repository,0.126,git/commit,21,4.278
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.278
git/commit createCommit partials can commit some lines from new file,0.162,git/commit,21,4.278
git/commit createCommit partials can commit second hunk from modified file,0.175,git/commit,21,4.278
git/commit createCommit partials can commit single delete from modified file,0.158,git/commit,21,4.278
git/commit createCommit partials can commit multiple hunks from modified file,0.175,git/commit,21,4.278
git/commit createCommit partials can commit some lines from deleted file,0.169,git/commit,21,4.278
git/commit createCommit partials can commit renames with modifications,0.179,git/commit,21,4.278
git/commit createCommit partials can commit renames with partially selected modifications,0.209,git/commit,21,4.278
git/commit createCommit with a merge conflict creates a merge commit,0.255,git/commit,21,4.278
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.233,git/commit,21,4.278
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.346,git/commit,21,4.278
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.312,git/commit,21,4.278
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.383,git/commit,21,4.278
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.403,git/commit,21,4.278
git/commit createMergeCommit with no changes throws an error,0.09,git/commit,21,4.278
git/commit index corner cases can commit when staged new file is then deleted,0.148,git/commit,21,4.278
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.166,git/commit,21,4.278
git/commit index corner cases file is deleted in index,0.165,git/commit,21,4.278
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.161,git/stash,14,2.521
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.241,git/stash,14,2.521
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.199,git/stash,14,2.521
GitStore loadCommitBatch includes HEAD when loading commits,0.326,GitStore,11,2.398
GitStore can discard changes from a repository,0.176,GitStore,11,2.398
GitStore can discard a renamed file,0.179,GitStore,11,2.398
GitStore undo first commit reports the repository is unborn,0.179,GitStore,11,2.398
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.398
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.398
GitStore undo first commit has no staged files,0.193,GitStore,11,2.398
GitStore repository with HEAD file can discard modified change cleanly,0.106,GitStore,11,2.398
git/status getStatus with conflicted repo parses conflicted files with markers,0.294,git/status,12,1.973
git/status getStatus with conflicted repo parses conflicted files without markers,0.284,git/status,12,1.973
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.489,git/status,12,1.973
git/status getStatus with conflicted repo parses resolved files,0.301,git/status,12,1.973
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.167,git/status,12,1.973
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.113,git/status,12,1.973
git/status getStatus with unconflicted repo parses changed files,0.043,git/status,12,1.973
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.973
git/status getStatus with unconflicted repo reflects renames,0.078,git/status,12,1.973
git/status getStatus with unconflicted repo reflects copies,0.074,git/status,12,1.973
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.036,git/status,12,1.973
BranchPruner does nothing on non GitHub repositories,0.174,BranchPruner,6,1.364
BranchPruner prunes for GitHub repository,0.224,BranchPruner,6,1.364
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.187,BranchPruner,6,1.364
BranchPruner does not prune if there is no default branch,0.18,BranchPruner,6,1.364
BranchPruner does not prune reserved branches,0.223,BranchPruner,6,1.364
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.649
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.09,git/diff,19,1.649
git/diff getBlobImage retrieves valid image for modified file,0.063,git/diff,19,1.649
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.649
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.649
git/diff imageDiff changes for text are not set,0.077,git/diff,19,1.649
git/diff getWorkingDirectoryDiff counts lines for new file,0.071,git/diff,19,1.649
git/diff getWorkingDirectoryDiff counts lines for modified file,0.069,git/diff,19,1.649
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.649
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.097,git/diff,19,1.649
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.162,git/diff,19,1.649
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.143,git/diff,19,1.649
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.108,git/diff,19,1.649
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.115,git/diff,19,1.649
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.649
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.649
git/diff getBinaryPaths in repo with text only files returns an empty array,0.067,git/diff,19,1.649
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.649
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.093,git/diff,19,1.649
git/reflog getRecentBranches returns the recently checked out branches,0.134,git/reflog,6,0.96
git/reflog getRecentBranches works after renaming a branch,0.169,git/reflog,6,0.96
git/reflog getRecentBranches returns a limited number of branches,0.232,git/reflog,6,0.96
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.152,git/reflog,6,0.96
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.171,git/reflog,6,0.96
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.056,git/reflog,6,0.96
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.284,formatPatch,5,0.946
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.875
git/checkout can checkout a branch when it exists on multiple remotes,0.121,git/checkout,6,0.875
git/checkout will fail when an existing branch matches the remote branch,0.105,git/checkout,6,0.875
git/checkout with submodules cleans up an submodule that no longer exists,0.257,git/checkout,6,0.875
git/checkout with submodules updates a changed submodule reference,0.215,git/checkout,6,0.875
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.103,gitignore,9,0.658
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.102,gitignore,9,0.658
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.658
gitignore appendIgnoreRule appends one rule,0.113,gitignore,9,0.658
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.658
git/rev-parse isGitRepository should return true for a repository,0.036,git/rev-parse,10,0.642
git/rev-parse isGitRepository should return false for a directory,0.043,git/rev-parse,10,0.642
git/rev-parse isBareRepository returns false for default initialized repository,0.055,git/rev-parse,10,0.642
git/rev-parse isBareRepository returns true for initialized bare repository,0.054,git/rev-parse,10,0.642
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.642
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.642
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.642
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.049,git/rev-parse,10,0.642
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.052,git/rev-parse,10,0.642
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.185,git/rev-parse,10,0.642
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.626
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,10,0.626
git/branch tip returns detached for arbitrary checkout,0.049,git/branch,10,0.626
git/branch tip returns current branch when on a valid HEAD,0.072,git/branch,10,0.626
git/branch tip returns non-origin remote,0.076,git/branch,10,0.626
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.081,git/branch,10,0.626
git/branch getBranchesPointedAt in a local repo finds one branch name,0.051,git/branch,10,0.626
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.626
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.626
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.081,git/branch,10,0.626
git/submodule listSubmodules returns the submodule entry,0.11,git/submodule,3,0.659
git/submodule listSubmodules returns the expected tag,0.176,git/submodule,3,0.659
git/submodule resetSubmodulePaths update submodule to original commit,0.329,git/submodule,3,0.659
git/merge merge and is successful returns true,0.037,git/merge,7,0.586
git/merge merge and is a noop returns false,0.049,git/merge,7,0.586
git/merge getMergeBase returns the common ancestor of two branches,0.066,git/merge,7,0.586
git/log getCommits loads history,0.059,git/log,7,0.545
git/log getCommits handles repository with HEAD file on disk,0.082,git/log,7,0.545
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.545
git/log getChangedFiles loads the files changed in the commit,0.048,git/log,7,0.545
git/log getChangedFiles detects renames,0.082,git/log,7,0.545
git/log getChangedFiles detect copies,0.089,git/log,7,0.545
git/log getChangedFiles handles commit when HEAD exists on disk,0.047,git/log,7,0.545
git-lfs isUsingLFS returns false for repository not using LFS,0.05,git-lfs,9,0.547
git-lfs isUsingLFS returns true if LFS is tracking a path,0.075,git-lfs,9,0.547
git/reset reset can hard reset a repository,0.163,git/reset,2,0.207
git/remote getRemotes should return both remotes,0.06,git/remote,9,0.452
git/remote findDefaultRemote returns origin when multiple remotes found,0.051,git/remote,9,0.452
git/remote findDefaultRemote returns something when origin removed,0.06,git/remote,9,0.452
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.043,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.039,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.309
git/config config looks up config values,0.046,git/config,4,0.279
git/config config returns null for undefined values,0.042,git/config,4,0.279
git/config global config getGlobalConfigPath gets the config path,0.063,git/config,4,0.279
git/config global config setGlobalConfigValue will replace all entries for a global value,0.088,git/config,4,0.279
git/core error handling does not throw for errors that were expected,0.04,git/core,4,0.212
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.212
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.212
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.212
git/for-each-ref getBranches fetches branches using for-each-ref,0.068,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.204
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.204
AppStore can select a repository,0.13,AppStore,5,0.184
validatedRepositoryPath returns the path to the repository,0.373,validatedRepositoryPath,2,0.432
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.377,git/rebase,21,8.51
git/rebase detect conflicts status detects REBASE_HEAD,0.301,git/rebase,21,8.51
git/rebase detect conflicts has conflicted files in working directory,0.277,git/rebase,21,8.51
git/rebase detect conflicts is a detached HEAD state,0.306,git/rebase,21,8.51
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.306,git/rebase,21,8.51
git/rebase abort after conflicts found no longer has working directory changes,0.294,git/rebase,21,8.51
git/rebase abort after conflicts found returns to the feature branch,0.303,git/rebase,21,8.51
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.359,git/rebase,21,8.51
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.374,git/rebase,21,8.51
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.363,git/rebase,21,8.51
git/rebase continue after resolving conflicts returns success,0.43,git/rebase,21,8.51
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.415,git/rebase,21,8.51
git/rebase continue after resolving conflicts no longer has working directory changes,0.449,git/rebase,21,8.51
git/rebase continue after resolving conflicts returns to the feature branch,0.414,git/rebase,21,8.51
git/rebase continue after resolving conflicts branch is now a different ref,0.497,git/rebase,21,8.51
git/rebase continue with additional changes unrelated to conflicted files returns success,0.46,git/rebase,21,8.51
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.418,git/rebase,21,8.51
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.432,git/rebase,21,8.51
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.443,git/rebase,21,8.51
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.44,git/rebase,21,8.51
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.394,git/rebase,21,8.51
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.958
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.958
git/commit createCommit normal can commit for empty repository,0.119,git/commit,21,3.958
git/commit createCommit normal can commit renames,0.138,git/commit,21,3.958
git/commit createCommit partials can commit some lines from new file,0.153,git/commit,21,3.958
git/commit createCommit partials can commit second hunk from modified file,0.161,git/commit,21,3.958
git/commit createCommit partials can commit single delete from modified file,0.144,git/commit,21,3.958
git/commit createCommit partials can commit multiple hunks from modified file,0.172,git/commit,21,3.958
git/commit createCommit partials can commit some lines from deleted file,0.154,git/commit,21,3.958
git/commit createCommit partials can commit renames with modifications,0.167,git/commit,21,3.958
git/commit createCommit partials can commit renames with partially selected modifications,0.199,git/commit,21,3.958
git/commit createCommit with a merge conflict creates a merge commit,0.236,git/commit,21,3.958
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.22,git/commit,21,3.958
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.301,git/commit,21,3.958
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.289,git/commit,21,3.958
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.381,git/commit,21,3.958
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.351,git/commit,21,3.958
git/commit createMergeCommit with no changes throws an error,0.075,git/commit,21,3.958
git/commit index corner cases can commit when staged new file is then deleted,0.133,git/commit,21,3.958
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.149,git/commit,21,3.958
git/commit index corner cases file is deleted in index,0.152,git/commit,21,3.958
git/rebase can parse progress returns a value indicating conflicts were encountered,0.431,git/rebase,7,3.871
git/rebase can parse progress status detects REBASE_HEAD,0.459,git/rebase,7,3.871
git/rebase can parse progress is a detached HEAD state,0.451,git/rebase,7,3.871
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.809,git/rebase,7,3.871
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.819,git/rebase,7,3.871
git/rebase can parse progress for long rebase is a detached HEAD state,0.854,git/rebase,7,3.871
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.167,git/stash,14,2.644
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.25,git/stash,14,2.644
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.203,git/stash,14,2.644
GitStore loadCommitBatch includes HEAD when loading commits,0.307,GitStore,11,2.325
GitStore can discard changes from a repository,0.181,GitStore,11,2.325
GitStore can discard a renamed file,0.147,GitStore,11,2.325
GitStore undo first commit reports the repository is unborn,0.176,GitStore,11,2.325
GitStore undo first commit pre-fills the commit message,0.115,GitStore,11,2.325
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.325
GitStore undo first commit has no staged files,0.195,GitStore,11,2.325
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.325
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.896
git/status getStatus with conflicted repo parses conflicted files without markers,0.286,git/status,12,1.896
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.521,git/status,12,1.896
git/status getStatus with conflicted repo parses resolved files,0.257,git/status,12,1.896
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.095,git/status,12,1.896
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.106,git/status,12,1.896
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,1.896
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.045,git/status,12,1.896
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,1.896
git/status getStatus with unconflicted repo reflects copies,0.087,git/status,12,1.896
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.04,git/status,12,1.896
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.564
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.564
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.564
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.564
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.564
git/diff imageDiff changes for text are not set,0.069,git/diff,19,1.564
git/diff getWorkingDirectoryDiff counts lines for new file,0.074,git/diff,19,1.564
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.564
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.564
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.095,git/diff,19,1.564
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.564
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.123,git/diff,19,1.564
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.098,git/diff,19,1.564
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.564
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.068,git/diff,19,1.564
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.049,git/diff,19,1.564
git/diff getBinaryPaths in repo with text only files returns an empty array,0.07,git/diff,19,1.564
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.141,git/diff,19,1.564
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.127,git/diff,19,1.564
BranchPruner does nothing on non GitHub repositories,0.206,BranchPruner,6,1.497
BranchPruner prunes for GitHub repository,0.248,BranchPruner,6,1.497
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.201,BranchPruner,6,1.497
BranchPruner does not prune if there is no default branch,0.202,BranchPruner,6,1.497
BranchPruner does not prune reserved branches,0.248,BranchPruner,6,1.497
git/reflog getRecentBranches returns the recently checked out branches,0.198,git/reflog,6,0.966
git/reflog getRecentBranches works after renaming a branch,0.169,git/reflog,6,0.966
git/reflog getRecentBranches returns a limited number of branches,0.214,git/reflog,6,0.966
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.127,git/reflog,6,0.966
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.16,git/reflog,6,0.966
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.966
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.295,formatPatch,5,0.888
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.854
git/checkout can checkout a branch when it exists on multiple remotes,0.115,git/checkout,6,0.854
git/checkout will fail when an existing branch matches the remote branch,0.099,git/checkout,6,0.854
git/checkout with submodules cleans up an submodule that no longer exists,0.248,git/checkout,6,0.854
git/checkout with submodules updates a changed submodule reference,0.215,git/checkout,6,0.854
git/submodule listSubmodules returns the submodule entry,0.1,git/submodule,3,0.581
git/submodule listSubmodules returns the expected tag,0.149,git/submodule,3,0.581
git/submodule resetSubmodulePaths update submodule to original commit,0.29,git/submodule,3,0.581
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.101,gitignore,9,0.721
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.1,gitignore,9,0.721
gitignore saveGitIgnore applies rule correctly to repository,0.096,gitignore,9,0.721
gitignore appendIgnoreRule appends one rule,0.109,gitignore,9,0.721
gitignore appendIgnoreRule appends multiple rules,0.109,gitignore,9,0.721
git/rev-parse isGitRepository should return true for a repository,0.05,git/rev-parse,10,0.656
git/rev-parse isGitRepository should return false for a directory,0.043,git/rev-parse,10,0.656
git/rev-parse isBareRepository returns false for default initialized repository,0.058,git/rev-parse,10,0.656
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.656
git/rev-parse isBareRepository returns false for empty directory,0.043,git/rev-parse,10,0.656
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.656
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.055,git/rev-parse,10,0.656
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.656
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.656
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.199,git/rev-parse,10,0.656
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.6
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.6
git/branch tip returns detached for arbitrary checkout,0.044,git/branch,10,0.6
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.6
git/branch tip returns non-origin remote,0.082,git/branch,10,0.6
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.6
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.6
git/merge merge and is successful returns true,0.036,git/merge,7,0.526
git/merge merge and is a noop returns false,0.047,git/merge,7,0.526
git/merge getMergeBase returns the common ancestor of two branches,0.06,git/merge,7,0.526
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.487
git-lfs isUsingLFS returns true if LFS is tracking a path,0.062,git-lfs,9,0.487
git/log getCommits loads history,0.053,git/log,7,0.471
git/log getCommits handles repository with HEAD file on disk,0.07,git/log,7,0.471
git/log getCommits handles repository with signed commit and log.showSignature set,0.084,git/log,7,0.471
git/log getChangedFiles loads the files changed in the commit,0.04,git/log,7,0.471
git/log getChangedFiles detects renames,0.075,git/log,7,0.471
git/log getChangedFiles detect copies,0.072,git/log,7,0.471
git/log getChangedFiles handles commit when HEAD exists on disk,0.037,git/log,7,0.471
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.385
git/remote findDefaultRemote returns origin when multiple remotes found,0.047,git/remote,9,0.385
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.385
validatedRepositoryPath returns the path to the repository,0.041,validatedRepositoryPath,2,0.095
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.308
git/config config looks up config values,0.046,git/config,4,0.281
git/config config returns null for undefined values,0.047,git/config,4,0.281
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.281
git/config global config setGlobalConfigValue will replace all entries for a global value,0.089,git/config,4,0.281
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.215
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.215
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.215
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.215
git/reset reset can hard reset a repository,0.068,git/reset,2,0.109
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for empty repo,0.062,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.202
AppStore can select a repository,0.132,AppStore,5,0.187
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.206,git/git-attributes,1,0.234
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.384,git/rebase,21,8.511
git/rebase detect conflicts status detects REBASE_HEAD,0.29,git/rebase,21,8.511
git/rebase detect conflicts has conflicted files in working directory,0.273,git/rebase,21,8.511
git/rebase detect conflicts is a detached HEAD state,0.287,git/rebase,21,8.511
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.307,git/rebase,21,8.511
git/rebase abort after conflicts found no longer has working directory changes,0.307,git/rebase,21,8.511
git/rebase abort after conflicts found returns to the feature branch,0.323,git/rebase,21,8.511
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.369,git/rebase,21,8.511
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.376,git/rebase,21,8.511
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.35,git/rebase,21,8.511
git/rebase continue after resolving conflicts returns success,0.46,git/rebase,21,8.511
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.421,git/rebase,21,8.511
git/rebase continue after resolving conflicts no longer has working directory changes,0.432,git/rebase,21,8.511
git/rebase continue after resolving conflicts returns to the feature branch,0.429,git/rebase,21,8.511
git/rebase continue after resolving conflicts branch is now a different ref,0.441,git/rebase,21,8.511
git/rebase continue with additional changes unrelated to conflicted files returns success,0.426,git/rebase,21,8.511
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.428,git/rebase,21,8.511
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.477,git/rebase,21,8.511
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.428,git/rebase,21,8.511
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.458,git/rebase,21,8.511
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.397,git/rebase,21,8.511
git/commit createCommit normal commits the given files,0.108,git/commit,21,3.83
git/commit createCommit normal commit does not strip commentary by default,0.091,git/commit,21,3.83
git/commit createCommit normal can commit for empty repository,0.117,git/commit,21,3.83
git/commit createCommit normal can commit renames,0.137,git/commit,21,3.83
git/commit createCommit partials can commit some lines from new file,0.146,git/commit,21,3.83
git/commit createCommit partials can commit second hunk from modified file,0.157,git/commit,21,3.83
git/commit createCommit partials can commit single delete from modified file,0.144,git/commit,21,3.83
git/commit createCommit partials can commit multiple hunks from modified file,0.165,git/commit,21,3.83
git/commit createCommit partials can commit some lines from deleted file,0.148,git/commit,21,3.83
git/commit createCommit partials can commit renames with modifications,0.155,git/commit,21,3.83
git/commit createCommit partials can commit renames with partially selected modifications,0.188,git/commit,21,3.83
git/commit createCommit with a merge conflict creates a merge commit,0.225,git/commit,21,3.83
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.203,git/commit,21,3.83
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.29,git/commit,21,3.83
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.28,git/commit,21,3.83
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.362,git/commit,21,3.83
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.348,git/commit,21,3.83
git/commit createMergeCommit with no changes throws an error,0.074,git/commit,21,3.83
git/commit index corner cases can commit when staged new file is then deleted,0.13,git/commit,21,3.83
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.149,git/commit,21,3.83
git/commit index corner cases file is deleted in index,0.149,git/commit,21,3.83
git/rebase can parse progress returns a value indicating conflicts were encountered,0.426,git/rebase,7,3.774
git/rebase can parse progress status detects REBASE_HEAD,0.411,git/rebase,7,3.774
git/rebase can parse progress is a detached HEAD state,0.417,git/rebase,7,3.774
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.799,git/rebase,7,3.774
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.823,git/rebase,7,3.774
git/rebase can parse progress for long rebase is a detached HEAD state,0.848,git/rebase,7,3.774
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.149,git/stash,14,2.503
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.241,git/stash,14,2.503
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.2,git/stash,14,2.503
GitStore loadCommitBatch includes HEAD when loading commits,0.316,GitStore,11,2.317
GitStore can discard changes from a repository,0.171,GitStore,11,2.317
GitStore can discard a renamed file,0.142,GitStore,11,2.317
GitStore undo first commit reports the repository is unborn,0.176,GitStore,11,2.317
GitStore undo first commit pre-fills the commit message,0.117,GitStore,11,2.317
GitStore undo first commit clears the undo commit dialog,0.199,GitStore,11,2.317
GitStore undo first commit has no staged files,0.191,GitStore,11,2.317
GitStore repository with HEAD file can discard modified change cleanly,0.107,GitStore,11,2.317
git/status getStatus with conflicted repo parses conflicted files with markers,0.273,git/status,12,1.854
git/status getStatus with conflicted repo parses conflicted files without markers,0.288,git/status,12,1.854
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.51,git/status,12,1.854
git/status getStatus with conflicted repo parses resolved files,0.237,git/status,12,1.854
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.095,git/status,12,1.854
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.111,git/status,12,1.854
git/status getStatus with unconflicted repo parses changed files,0.046,git/status,12,1.854
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.045,git/status,12,1.854
git/status getStatus with unconflicted repo reflects renames,0.079,git/status,12,1.854
git/status getStatus with unconflicted repo reflects copies,0.082,git/status,12,1.854
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.036,git/status,12,1.854
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.031,git/diff,19,1.55
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.048,git/diff,19,1.55
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.55
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.55
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.55
git/diff imageDiff changes for text are not set,0.063,git/diff,19,1.55
git/diff getWorkingDirectoryDiff counts lines for new file,0.075,git/diff,19,1.55
git/diff getWorkingDirectoryDiff counts lines for modified file,0.153,git/diff,19,1.55
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.55
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.086,git/diff,19,1.55
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.119,git/diff,19,1.55
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.131,git/diff,19,1.55
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.104,git/diff,19,1.55
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.102,git/diff,19,1.55
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.071,git/diff,19,1.55
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.55
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.55
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.08,git/diff,19,1.55
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.092,git/diff,19,1.55
BranchPruner does nothing on non GitHub repositories,0.186,BranchPruner,6,1.488
BranchPruner prunes for GitHub repository,0.242,BranchPruner,6,1.488
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.21,BranchPruner,6,1.488
BranchPruner does not prune if there is no default branch,0.196,BranchPruner,6,1.488
BranchPruner does not prune reserved branches,0.257,BranchPruner,6,1.488
git/reflog getRecentBranches returns the recently checked out branches,0.132,git/reflog,6,0.898
git/reflog getRecentBranches works after renaming a branch,0.166,git/reflog,6,0.898
git/reflog getRecentBranches returns a limited number of branches,0.22,git/reflog,6,0.898
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.128,git/reflog,6,0.898
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.158,git/reflog,6,0.898
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.051,git/reflog,6,0.898
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.276,formatPatch,5,0.861
git/checkout can checkout a valid branch name in an existing repository,0.103,git/checkout,6,0.804
git/checkout can checkout a branch when it exists on multiple remotes,0.103,git/checkout,6,0.804
git/checkout will fail when an existing branch matches the remote branch,0.095,git/checkout,6,0.804
git/checkout with submodules cleans up an submodule that no longer exists,0.233,git/checkout,6,0.804
git/checkout with submodules updates a changed submodule reference,0.201,git/checkout,6,0.804
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.093,gitignore,9,0.593
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.088,gitignore,9,0.593
gitignore saveGitIgnore applies rule correctly to repository,0.082,gitignore,9,0.593
gitignore appendIgnoreRule appends one rule,0.102,gitignore,9,0.593
gitignore appendIgnoreRule appends multiple rules,0.109,gitignore,9,0.593
git/rev-parse isGitRepository should return true for a repository,0.039,git/rev-parse,10,0.607
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.607
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.05,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.163,git/rev-parse,10,0.607
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.616
git/branch tip returns correct ref if checkout occurs,0.053,git/branch,10,0.616
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.616
git/branch tip returns current branch when on a valid HEAD,0.071,git/branch,10,0.616
git/branch tip returns non-origin remote,0.075,git/branch,10,0.616
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.616
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.081,git/branch,10,0.616
git/submodule listSubmodules returns the submodule entry,0.109,git/submodule,3,0.632
git/submodule listSubmodules returns the expected tag,0.157,git/submodule,3,0.632
git/submodule resetSubmodulePaths update submodule to original commit,0.32,git/submodule,3,0.632
git/merge merge and is successful returns true,0.033,git/merge,7,0.574
git/merge merge and is a noop returns false,0.051,git/merge,7,0.574
git/merge getMergeBase returns the common ancestor of two branches,0.068,git/merge,7,0.574
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.524
git-lfs isUsingLFS returns true if LFS is tracking a path,0.07,git-lfs,9,0.524
git/log getCommits loads history,0.058,git/log,7,0.528
git/log getCommits handles repository with HEAD file on disk,0.077,git/log,7,0.528
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.528
git/log getChangedFiles loads the files changed in the commit,0.048,git/log,7,0.528
git/log getChangedFiles detects renames,0.085,git/log,7,0.528
git/log getChangedFiles detect copies,0.083,git/log,7,0.528
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.528
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.416
git/remote findDefaultRemote returns origin when multiple remotes found,0.05,git/remote,9,0.416
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.416
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.026,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.306
git/config config looks up config values,0.044,git/config,4,0.275
git/config config returns null for undefined values,0.043,git/config,4,0.275
git/config global config getGlobalConfigPath gets the config path,0.056,git/config,4,0.275
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,4,0.275
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.049
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.235
git/core error handling throws for errors that were not expected,0.05,git/core,4,0.235
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.235
git/core exit code handling throws for exit codes that were not expected,0.048,git/core,4,0.235
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.207
git/for-each-ref getBranches should return empty list for empty repo,0.063,git/for-each-ref,3,0.207
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.207
AppStore can select a repository,0.138,AppStore,5,0.194
git/reset reset can hard reset a repository,0.437,git/reset,2,0.483
validatedRepositoryPath returns the path to the repository,0.045,validatedRepositoryPath,2,0.108
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.382,git/rebase,21,8.488
git/rebase detect conflicts status detects REBASE_HEAD,0.296,git/rebase,21,8.488
git/rebase detect conflicts has conflicted files in working directory,0.272,git/rebase,21,8.488
git/rebase detect conflicts is a detached HEAD state,0.302,git/rebase,21,8.488
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.301,git/rebase,21,8.488
git/rebase abort after conflicts found no longer has working directory changes,0.307,git/rebase,21,8.488
git/rebase abort after conflicts found returns to the feature branch,0.328,git/rebase,21,8.488
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.351,git/rebase,21,8.488
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.381,git/rebase,21,8.488
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.361,git/rebase,21,8.488
git/rebase continue after resolving conflicts returns success,0.438,git/rebase,21,8.488
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.415,git/rebase,21,8.488
git/rebase continue after resolving conflicts no longer has working directory changes,0.434,git/rebase,21,8.488
git/rebase continue after resolving conflicts returns to the feature branch,0.423,git/rebase,21,8.488
git/rebase continue after resolving conflicts branch is now a different ref,0.457,git/rebase,21,8.488
git/rebase continue with additional changes unrelated to conflicted files returns success,0.409,git/rebase,21,8.488
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.426,git/rebase,21,8.488
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.454,git/rebase,21,8.488
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.488
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.452,git/rebase,21,8.488
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.406,git/rebase,21,8.488
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.87
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,3.87
git/commit createCommit normal can commit for empty repository,0.123,git/commit,21,3.87
git/commit createCommit normal can commit renames,0.137,git/commit,21,3.87
git/commit createCommit partials can commit some lines from new file,0.15,git/commit,21,3.87
git/commit createCommit partials can commit second hunk from modified file,0.159,git/commit,21,3.87
git/commit createCommit partials can commit single delete from modified file,0.144,git/commit,21,3.87
git/commit createCommit partials can commit multiple hunks from modified file,0.167,git/commit,21,3.87
git/commit createCommit partials can commit some lines from deleted file,0.155,git/commit,21,3.87
git/commit createCommit partials can commit renames with modifications,0.161,git/commit,21,3.87
git/commit createCommit partials can commit renames with partially selected modifications,0.194,git/commit,21,3.87
git/commit createCommit with a merge conflict creates a merge commit,0.23,git/commit,21,3.87
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.207,git/commit,21,3.87
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.302,git/commit,21,3.87
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.28,git/commit,21,3.87
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.347,git/commit,21,3.87
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.346,git/commit,21,3.87
git/commit createMergeCommit with no changes throws an error,0.081,git/commit,21,3.87
git/commit index corner cases can commit when staged new file is then deleted,0.129,git/commit,21,3.87
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.149,git/commit,21,3.87
git/commit index corner cases file is deleted in index,0.145,git/commit,21,3.87
git/rebase can parse progress returns a value indicating conflicts were encountered,0.453,git/rebase,7,3.847
git/rebase can parse progress status detects REBASE_HEAD,0.409,git/rebase,7,3.847
git/rebase can parse progress is a detached HEAD state,0.42,git/rebase,7,3.847
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.814,git/rebase,7,3.847
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.827,git/rebase,7,3.847
git/rebase can parse progress for long rebase is a detached HEAD state,0.874,git/rebase,7,3.847
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.159,git/stash,14,2.724
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.295,git/stash,14,2.724
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.197,git/stash,14,2.724
GitStore loadCommitBatch includes HEAD when loading commits,0.303,GitStore,11,2.347
GitStore can discard changes from a repository,0.175,GitStore,11,2.347
GitStore can discard a renamed file,0.156,GitStore,11,2.347
GitStore undo first commit reports the repository is unborn,0.182,GitStore,11,2.347
GitStore undo first commit pre-fills the commit message,0.118,GitStore,11,2.347
GitStore undo first commit clears the undo commit dialog,0.205,GitStore,11,2.347
GitStore undo first commit has no staged files,0.201,GitStore,11,2.347
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.347
git/status getStatus with conflicted repo parses conflicted files with markers,0.289,git/status,12,1.939
git/status getStatus with conflicted repo parses conflicted files without markers,0.293,git/status,12,1.939
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.456,git/status,12,1.939
git/status getStatus with conflicted repo parses resolved files,0.286,git/status,12,1.939
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.101,git/status,12,1.939
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.17,git/status,12,1.939
git/status getStatus with unconflicted repo parses changed files,0.056,git/status,12,1.939
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.04,git/status,12,1.939
git/status getStatus with unconflicted repo reflects renames,0.078,git/status,12,1.939
git/status getStatus with unconflicted repo reflects copies,0.078,git/status,12,1.939
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.043,git/status,12,1.939
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.429
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.039,git/diff,19,1.429
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.429
git/diff getBlobImage retrieves valid images for deleted file,0.048,git/diff,19,1.429
git/diff imageDiff changes for images are set,0.07,git/diff,19,1.429
git/diff imageDiff changes for text are not set,0.073,git/diff,19,1.429
git/diff getWorkingDirectoryDiff counts lines for new file,0.062,git/diff,19,1.429
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.429
git/diff getWorkingDirectoryDiff counts lines for staged file,0.064,git/diff,19,1.429
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.089,git/diff,19,1.429
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.124,git/diff,19,1.429
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.122,git/diff,19,1.429
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.101,git/diff,19,1.429
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.101,git/diff,19,1.429
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.429
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.429
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.429
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.078,git/diff,19,1.429
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.09,git/diff,19,1.429
BranchPruner does nothing on non GitHub repositories,0.28,BranchPruner,6,1.594
BranchPruner prunes for GitHub repository,0.25,BranchPruner,6,1.594
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.2,BranchPruner,6,1.594
BranchPruner does not prune if there is no default branch,0.222,BranchPruner,6,1.594
BranchPruner does not prune reserved branches,0.24,BranchPruner,6,1.594
git/reflog getRecentBranches returns the recently checked out branches,0.131,git/reflog,6,0.909
git/reflog getRecentBranches works after renaming a branch,0.161,git/reflog,6,0.909
git/reflog getRecentBranches returns a limited number of branches,0.223,git/reflog,6,0.909
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.128,git/reflog,6,0.909
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.162,git/reflog,6,0.909
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.056,git/reflog,6,0.909
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.274,formatPatch,5,0.901
git/checkout can checkout a valid branch name in an existing repository,0.106,git/checkout,6,0.825
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.825
git/checkout will fail when an existing branch matches the remote branch,0.104,git/checkout,6,0.825
git/checkout with submodules cleans up an submodule that no longer exists,0.236,git/checkout,6,0.825
git/checkout with submodules updates a changed submodule reference,0.196,git/checkout,6,0.825
git/submodule listSubmodules returns the submodule entry,0.101,git/submodule,3,0.575
git/submodule listSubmodules returns the expected tag,0.145,git/submodule,3,0.575
git/submodule resetSubmodulePaths update submodule to original commit,0.288,git/submodule,3,0.575
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.588
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.588
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.588
git/branch tip returns current branch when on a valid HEAD,0.071,git/branch,10,0.588
git/branch tip returns non-origin remote,0.074,git/branch,10,0.588
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.588
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.588
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.588
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.042,git/branch,10,0.588
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.588
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.758
git/rev-parse isGitRepository should return false for a directory,0.135,git/rev-parse,10,0.758
git/rev-parse isBareRepository returns false for default initialized repository,0.073,git/rev-parse,10,0.758
git/rev-parse isBareRepository returns true for initialized bare repository,0.058,git/rev-parse,10,0.758
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.758
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.758
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.758
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.758
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.044,git/rev-parse,10,0.758
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.197,git/rev-parse,10,0.758
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.109,gitignore,9,0.67
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.103,gitignore,9,0.67
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.67
gitignore appendIgnoreRule appends one rule,0.115,gitignore,9,0.67
gitignore appendIgnoreRule appends multiple rules,0.11,gitignore,9,0.67
git/merge merge and is successful returns true,0.037,git/merge,7,0.541
git/merge merge and is a noop returns false,0.051,git/merge,7,0.541
git/merge getMergeBase returns the common ancestor of two branches,0.06,git/merge,7,0.541
git/log getCommits loads history,0.052,git/log,7,0.472
git/log getCommits handles repository with HEAD file on disk,0.067,git/log,7,0.472
git/log getCommits handles repository with signed commit and log.showSignature set,0.08,git/log,7,0.472
git/log getChangedFiles loads the files changed in the commit,0.04,git/log,7,0.472
git/log getChangedFiles detects renames,0.066,git/log,7,0.472
git/log getChangedFiles detect copies,0.08,git/log,7,0.472
git/log getChangedFiles handles commit when HEAD exists on disk,0.038,git/log,7,0.472
git-lfs isUsingLFS returns false for repository not using LFS,0.041,git-lfs,9,0.467
git-lfs isUsingLFS returns true if LFS is tracking a path,0.064,git-lfs,9,0.467
git/reset reset can hard reset a repository,0.064,git/reset,2,0.104
git/remote getRemotes should return both remotes,0.039,git/remote,9,0.38
git/remote findDefaultRemote returns origin when multiple remotes found,0.045,git/remote,9,0.38
git/remote findDefaultRemote returns something when origin removed,0.051,git/remote,9,0.38
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.285
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.285
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.285
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.038,patch formatting,8,0.285
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.285
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.285
patch formatting formatPatchesForModifiedFile includes empty context lines,0.02,patch formatting,8,0.285
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.285
git/config config looks up config values,0.042,git/config,4,0.261
git/config config returns null for undefined values,0.041,git/config,4,0.261
git/config global config getGlobalConfigPath gets the config path,0.055,git/config,4,0.261
git/config global config setGlobalConfigValue will replace all entries for a global value,0.082,git/config,4,0.261
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.212
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.212
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.212
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.212
git/for-each-ref getBranches fetches branches using for-each-ref,0.064,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.044,git/for-each-ref,3,0.198
AppStore can select a repository,0.129,AppStore,5,0.181
validatedRepositoryPath returns the path to the repository,0.378,validatedRepositoryPath,2,0.44
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.366,git/rebase,21,8.585
git/rebase detect conflicts status detects REBASE_HEAD,0.291,git/rebase,21,8.585
git/rebase detect conflicts has conflicted files in working directory,0.282,git/rebase,21,8.585
git/rebase detect conflicts is a detached HEAD state,0.302,git/rebase,21,8.585
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.32,git/rebase,21,8.585
git/rebase abort after conflicts found no longer has working directory changes,0.338,git/rebase,21,8.585
git/rebase abort after conflicts found returns to the feature branch,0.321,git/rebase,21,8.585
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.367,git/rebase,21,8.585
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.387,git/rebase,21,8.585
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.39,git/rebase,21,8.585
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.585
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.425,git/rebase,21,8.585
git/rebase continue after resolving conflicts no longer has working directory changes,0.43,git/rebase,21,8.585
git/rebase continue after resolving conflicts returns to the feature branch,0.431,git/rebase,21,8.585
git/rebase continue after resolving conflicts branch is now a different ref,0.469,git/rebase,21,8.585
git/rebase continue with additional changes unrelated to conflicted files returns success,0.421,git/rebase,21,8.585
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.436,git/rebase,21,8.585
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.429,git/rebase,21,8.585
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.451,git/rebase,21,8.585
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.448,git/rebase,21,8.585
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.407,git/rebase,21,8.585
git/commit createCommit normal commits the given files,0.106,git/commit,21,3.762
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.762
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.762
git/commit createCommit normal can commit renames,0.143,git/commit,21,3.762
git/commit createCommit partials can commit some lines from new file,0.145,git/commit,21,3.762
git/commit createCommit partials can commit second hunk from modified file,0.155,git/commit,21,3.762
git/commit createCommit partials can commit single delete from modified file,0.138,git/commit,21,3.762
git/commit createCommit partials can commit multiple hunks from modified file,0.161,git/commit,21,3.762
git/commit createCommit partials can commit some lines from deleted file,0.15,git/commit,21,3.762
git/commit createCommit partials can commit renames with modifications,0.153,git/commit,21,3.762
git/commit createCommit partials can commit renames with partially selected modifications,0.189,git/commit,21,3.762
git/commit createCommit with a merge conflict creates a merge commit,0.22,git/commit,21,3.762
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.213,git/commit,21,3.762
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.279,git/commit,21,3.762
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.274,git/commit,21,3.762
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.344,git/commit,21,3.762
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.337,git/commit,21,3.762
git/commit createMergeCommit with no changes throws an error,0.07,git/commit,21,3.762
git/commit index corner cases can commit when staged new file is then deleted,0.126,git/commit,21,3.762
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.147,git/commit,21,3.762
git/commit index corner cases file is deleted in index,0.144,git/commit,21,3.762
git/rebase can parse progress returns a value indicating conflicts were encountered,0.41,git/rebase,7,3.849
git/rebase can parse progress status detects REBASE_HEAD,0.434,git/rebase,7,3.849
git/rebase can parse progress is a detached HEAD state,0.425,git/rebase,7,3.849
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.85,git/rebase,7,3.849
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.841,git/rebase,7,3.849
git/rebase can parse progress for long rebase is a detached HEAD state,0.837,git/rebase,7,3.849
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.157,git/stash,14,2.718
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.336,git/stash,14,2.718
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.218,git/stash,14,2.718
GitStore loadCommitBatch includes HEAD when loading commits,0.359,GitStore,11,2.374
GitStore can discard changes from a repository,0.176,GitStore,11,2.374
GitStore can discard a renamed file,0.142,GitStore,11,2.374
GitStore undo first commit reports the repository is unborn,0.176,GitStore,11,2.374
GitStore undo first commit pre-fills the commit message,0.115,GitStore,11,2.374
GitStore undo first commit clears the undo commit dialog,0.207,GitStore,11,2.374
GitStore undo first commit has no staged files,0.192,GitStore,11,2.374
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.374
git/status getStatus with conflicted repo parses conflicted files with markers,0.275,git/status,12,1.959
git/status getStatus with conflicted repo parses conflicted files without markers,0.297,git/status,12,1.959
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.471,git/status,12,1.959
git/status getStatus with conflicted repo parses resolved files,0.288,git/status,12,1.959
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.155,git/status,12,1.959
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.114,git/status,12,1.959
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,1.959
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.049,git/status,12,1.959
git/status getStatus with unconflicted repo reflects renames,0.086,git/status,12,1.959
git/status getStatus with unconflicted repo reflects copies,0.084,git/status,12,1.959
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,1.959
BranchPruner does nothing on non GitHub repositories,0.19,BranchPruner,6,1.42
BranchPruner prunes for GitHub repository,0.239,BranchPruner,6,1.42
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.196,BranchPruner,6,1.42
BranchPruner does not prune if there is no default branch,0.18,BranchPruner,6,1.42
BranchPruner does not prune reserved branches,0.235,BranchPruner,6,1.42
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.033,git/diff,19,1.625
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.095,git/diff,19,1.625
git/diff getBlobImage retrieves valid image for modified file,0.066,git/diff,19,1.625
git/diff getBlobImage retrieves valid images for deleted file,0.069,git/diff,19,1.625
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.625
git/diff imageDiff changes for text are not set,0.07,git/diff,19,1.625
git/diff getWorkingDirectoryDiff counts lines for new file,0.064,git/diff,19,1.625
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.625
git/diff getWorkingDirectoryDiff counts lines for staged file,0.074,git/diff,19,1.625
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.104,git/diff,19,1.625
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.145,git/diff,19,1.625
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.139,git/diff,19,1.625
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.625
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.111,git/diff,19,1.625
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.625
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.056,git/diff,19,1.625
git/diff getBinaryPaths in repo with text only files returns an empty array,0.067,git/diff,19,1.625
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.074,git/diff,19,1.625
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.089,git/diff,19,1.625
git/reflog getRecentBranches returns the recently checked out branches,0.136,git/reflog,6,0.939
git/reflog getRecentBranches works after renaming a branch,0.173,git/reflog,6,0.939
git/reflog getRecentBranches returns a limited number of branches,0.233,git/reflog,6,0.939
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.136,git/reflog,6,0.939
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.165,git/reflog,6,0.939
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.051,git/reflog,6,0.939
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.307,formatPatch,5,0.947
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.859
git/checkout can checkout a branch when it exists on multiple remotes,0.116,git/checkout,6,0.859
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.859
git/checkout with submodules cleans up an submodule that no longer exists,0.243,git/checkout,6,0.859
git/checkout with submodules updates a changed submodule reference,0.221,git/checkout,6,0.859
git/rev-parse isGitRepository should return true for a repository,0.045,git/rev-parse,10,0.607
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for empty directory,0.039,git/rev-parse,10,0.607
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.049,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.163,git/rev-parse,10,0.607
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.101,gitignore,9,0.646
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.103,gitignore,9,0.646
gitignore saveGitIgnore applies rule correctly to repository,0.094,gitignore,9,0.646
gitignore appendIgnoreRule appends one rule,0.107,gitignore,9,0.646
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.646
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.6
git/branch tip returns correct ref if checkout occurs,0.052,git/branch,10,0.6
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.6
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.6
git/branch tip returns non-origin remote,0.074,git/branch,10,0.6
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.6
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.6
git/submodule listSubmodules returns the submodule entry,0.101,git/submodule,3,0.654
git/submodule listSubmodules returns the expected tag,0.161,git/submodule,3,0.654
git/submodule resetSubmodulePaths update submodule to original commit,0.349,git/submodule,3,0.654
git/merge merge and is successful returns true,0.036,git/merge,7,0.571
git/merge merge and is a noop returns false,0.048,git/merge,7,0.571
git/merge getMergeBase returns the common ancestor of two branches,0.066,git/merge,7,0.571
git/log getCommits loads history,0.057,git/log,7,0.515
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.515
git/log getCommits handles repository with signed commit and log.showSignature set,0.089,git/log,7,0.515
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.515
git/log getChangedFiles detects renames,0.073,git/log,7,0.515
git/log getChangedFiles detect copies,0.084,git/log,7,0.515
git/log getChangedFiles handles commit when HEAD exists on disk,0.045,git/log,7,0.515
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.649
git-lfs isUsingLFS returns true if LFS is tracking a path,0.168,git-lfs,9,0.649
validatedRepositoryPath returns the path to the repository,0.043,validatedRepositoryPath,2,0.102
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.424
git/remote findDefaultRemote returns origin when multiple remotes found,0.052,git/remote,9,0.424
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.424
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.045,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.031,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.027,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.322
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.322
git/config config looks up config values,0.048,git/config,4,0.276
git/config config returns null for undefined values,0.045,git/config,4,0.276
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.276
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,4,0.276
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.22
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.22
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.22
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.22
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.209
git/for-each-ref getBranches should return empty list for empty repo,0.064,git/for-each-ref,3,0.209
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.051,git/for-each-ref,3,0.209
AppStore can select a repository,0.122,AppStore,5,0.178
git/reset reset can hard reset a repository,0.396,git/reset,2,0.44
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.368,git/rebase,21,8.398
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.398
git/rebase detect conflicts has conflicted files in working directory,0.274,git/rebase,21,8.398
git/rebase detect conflicts is a detached HEAD state,0.286,git/rebase,21,8.398
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.3,git/rebase,21,8.398
git/rebase abort after conflicts found no longer has working directory changes,0.304,git/rebase,21,8.398
git/rebase abort after conflicts found returns to the feature branch,0.31,git/rebase,21,8.398
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.379,git/rebase,21,8.398
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.381,git/rebase,21,8.398
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.36,git/rebase,21,8.398
git/rebase continue after resolving conflicts returns success,0.421,git/rebase,21,8.398
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.408,git/rebase,21,8.398
git/rebase continue after resolving conflicts no longer has working directory changes,0.439,git/rebase,21,8.398
git/rebase continue after resolving conflicts returns to the feature branch,0.413,git/rebase,21,8.398
git/rebase continue after resolving conflicts branch is now a different ref,0.422,git/rebase,21,8.398
git/rebase continue with additional changes unrelated to conflicted files returns success,0.414,git/rebase,21,8.398
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.429,git/rebase,21,8.398
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.432,git/rebase,21,8.398
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.398
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.457,git/rebase,21,8.398
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.424,git/rebase,21,8.398
git/rebase can parse progress returns a value indicating conflicts were encountered,0.376,git/rebase,7,3.392
git/rebase can parse progress status detects REBASE_HEAD,0.372,git/rebase,7,3.392
git/rebase can parse progress is a detached HEAD state,0.364,git/rebase,7,3.392
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.746,git/rebase,7,3.392
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.738,git/rebase,7,3.392
git/rebase can parse progress for long rebase is a detached HEAD state,0.731,git/rebase,7,3.392
git/commit createCommit normal commits the given files,0.119,git/commit,21,4.22
git/commit createCommit normal commit does not strip commentary by default,0.1,git/commit,21,4.22
git/commit createCommit normal can commit for empty repository,0.137,git/commit,21,4.22
git/commit createCommit normal can commit renames,0.144,git/commit,21,4.22
git/commit createCommit partials can commit some lines from new file,0.162,git/commit,21,4.22
git/commit createCommit partials can commit second hunk from modified file,0.175,git/commit,21,4.22
git/commit createCommit partials can commit single delete from modified file,0.153,git/commit,21,4.22
git/commit createCommit partials can commit multiple hunks from modified file,0.175,git/commit,21,4.22
git/commit createCommit partials can commit some lines from deleted file,0.157,git/commit,21,4.22
git/commit createCommit partials can commit renames with modifications,0.166,git/commit,21,4.22
git/commit createCommit partials can commit renames with partially selected modifications,0.206,git/commit,21,4.22
git/commit createCommit with a merge conflict creates a merge commit,0.259,git/commit,21,4.22
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.227,git/commit,21,4.22
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.337,git/commit,21,4.22
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.319,git/commit,21,4.22
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.382,git/commit,21,4.22
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.389,git/commit,21,4.22
git/commit createMergeCommit with no changes throws an error,0.089,git/commit,21,4.22
git/commit index corner cases can commit when staged new file is then deleted,0.142,git/commit,21,4.22
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.165,git/commit,21,4.22
git/commit index corner cases file is deleted in index,0.163,git/commit,21,4.22
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.168,git/stash,14,2.599
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.245,git/stash,14,2.599
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.208,git/stash,14,2.599
GitStore loadCommitBatch includes HEAD when loading commits,0.359,GitStore,11,2.425
GitStore can discard changes from a repository,0.178,GitStore,11,2.425
GitStore can discard a renamed file,0.147,GitStore,11,2.425
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.425
GitStore undo first commit pre-fills the commit message,0.131,GitStore,11,2.425
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.425
GitStore undo first commit has no staged files,0.193,GitStore,11,2.425
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.425
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.995
git/status getStatus with conflicted repo parses conflicted files without markers,0.287,git/status,12,1.995
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.497,git/status,12,1.995
git/status getStatus with conflicted repo parses resolved files,0.321,git/status,12,1.995
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.162,git/status,12,1.995
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.115,git/status,12,1.995
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,1.995
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.04,git/status,12,1.995
git/status getStatus with unconflicted repo reflects renames,0.078,git/status,12,1.995
git/status getStatus with unconflicted repo reflects copies,0.082,git/status,12,1.995
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.038,git/status,12,1.995
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.037,git/diff,19,1.485
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.485
git/diff getBlobImage retrieves valid image for modified file,0.043,git/diff,19,1.485
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.485
git/diff imageDiff changes for images are set,0.076,git/diff,19,1.485
git/diff imageDiff changes for text are not set,0.062,git/diff,19,1.485
git/diff getWorkingDirectoryDiff counts lines for new file,0.07,git/diff,19,1.485
git/diff getWorkingDirectoryDiff counts lines for modified file,0.066,git/diff,19,1.485
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.485
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.096,git/diff,19,1.485
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.124,git/diff,19,1.485
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.127,git/diff,19,1.485
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.485
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.106,git/diff,19,1.485
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.485
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.485
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.485
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.083,git/diff,19,1.485
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.086,git/diff,19,1.485
BranchPruner does nothing on non GitHub repositories,0.262,BranchPruner,6,1.473
BranchPruner prunes for GitHub repository,0.242,BranchPruner,6,1.473
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.178,BranchPruner,6,1.473
BranchPruner does not prune if there is no default branch,0.179,BranchPruner,6,1.473
BranchPruner does not prune reserved branches,0.231,BranchPruner,6,1.473
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.266,formatPatch,5,0.868
git/reflog getRecentBranches returns the recently checked out branches,0.129,git/reflog,6,0.901
git/reflog getRecentBranches works after renaming a branch,0.161,git/reflog,6,0.901
git/reflog getRecentBranches returns a limited number of branches,0.221,git/reflog,6,0.901
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.139,git/reflog,6,0.901
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.155,git/reflog,6,0.901
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.05,git/reflog,6,0.901
git/checkout can checkout a valid branch name in an existing repository,0.177,git/checkout,6,0.912
git/checkout can checkout a branch when it exists on multiple remotes,0.118,git/checkout,6,0.912
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.912
git/checkout with submodules cleans up an submodule that no longer exists,0.23,git/checkout,6,0.912
git/checkout with submodules updates a changed submodule reference,0.215,git/checkout,6,0.912
git/submodule listSubmodules returns the submodule entry,0.093,git/submodule,3,0.574
git/submodule listSubmodules returns the expected tag,0.148,git/submodule,3,0.574
git/submodule resetSubmodulePaths update submodule to original commit,0.288,git/submodule,3,0.574
git-lfs isUsingLFS returns false for repository not using LFS,0.049,git-lfs,9,0.44
git-lfs isUsingLFS returns true if LFS is tracking a path,0.061,git-lfs,9,0.44
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.097,gitignore,9,0.614
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.093,gitignore,9,0.614
gitignore saveGitIgnore applies rule correctly to repository,0.089,gitignore,9,0.614
gitignore appendIgnoreRule appends one rule,0.105,gitignore,9,0.614
gitignore appendIgnoreRule appends multiple rules,0.108,gitignore,9,0.614
git/rev-parse isGitRepository should return true for a repository,0.039,git/rev-parse,10,0.632
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns false for default initialized repository,0.058,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns false for empty directory,0.045,git/rev-parse,10,0.632
git/rev-parse isBareRepository throws error for missing directory,0.039,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.064,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.049,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.168,git/rev-parse,10,0.632
git/branch tip returns unborn for new repository,0.034,git/branch,10,0.6
git/branch tip returns correct ref if checkout occurs,0.049,git/branch,10,0.6
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.6
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.6
git/branch tip returns non-origin remote,0.074,git/branch,10,0.6
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo finds one branch name,0.051,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.6
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.6
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.6
git/merge merge and is successful returns true,0.034,git/merge,7,0.563
git/merge merge and is a noop returns false,0.049,git/merge,7,0.563
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.563
git/log getCommits loads history,0.063,git/log,7,0.522
git/log getCommits handles repository with HEAD file on disk,0.076,git/log,7,0.522
git/log getCommits handles repository with signed commit and log.showSignature set,0.095,git/log,7,0.522
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.522
git/log getChangedFiles detects renames,0.076,git/log,7,0.522
git/log getChangedFiles detect copies,0.078,git/log,7,0.522
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.522
git/reset reset can hard reset a repository,0.063,git/reset,2,0.105
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.412
git/remote findDefaultRemote returns origin when multiple remotes found,0.055,git/remote,9,0.412
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.412
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.039,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.025,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile includes empty context lines,0.021,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.287
git/config config looks up config values,0.043,git/config,4,0.268
git/config config returns null for undefined values,0.043,git/config,4,0.268
git/config global config getGlobalConfigPath gets the config path,0.053,git/config,4,0.268
git/config global config setGlobalConfigValue will replace all entries for a global value,0.085,git/config,4,0.268
git/core error handling does not throw for errors that were expected,0.036,git/core,4,0.203
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.203
git/core exit code handling does not throw for exit codes that were expected,0.038,git/core,4,0.203
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.203
git/for-each-ref getBranches fetches branches using for-each-ref,0.062,git/for-each-ref,3,0.192
git/for-each-ref getBranches should return empty list for empty repo,0.056,git/for-each-ref,3,0.192
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.192
AppStore can select a repository,0.131,AppStore,5,0.183
validatedRepositoryPath returns the path to the repository,0.395,validatedRepositoryPath,2,0.454
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.046
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.367,git/rebase,21,8.47
git/rebase detect conflicts status detects REBASE_HEAD,0.281,git/rebase,21,8.47
git/rebase detect conflicts has conflicted files in working directory,0.271,git/rebase,21,8.47
git/rebase detect conflicts is a detached HEAD state,0.286,git/rebase,21,8.47
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.304,git/rebase,21,8.47
git/rebase abort after conflicts found no longer has working directory changes,0.304,git/rebase,21,8.47
git/rebase abort after conflicts found returns to the feature branch,0.32,git/rebase,21,8.47
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.393,git/rebase,21,8.47
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.386,git/rebase,21,8.47
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.352,git/rebase,21,8.47
git/rebase continue after resolving conflicts returns success,0.424,git/rebase,21,8.47
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.414,git/rebase,21,8.47
git/rebase continue after resolving conflicts no longer has working directory changes,0.465,git/rebase,21,8.47
git/rebase continue after resolving conflicts returns to the feature branch,0.413,git/rebase,21,8.47
git/rebase continue after resolving conflicts branch is now a different ref,0.445,git/rebase,21,8.47
git/rebase continue with additional changes unrelated to conflicted files returns success,0.43,git/rebase,21,8.47
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.43,git/rebase,21,8.47
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.43,git/rebase,21,8.47
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.432,git/rebase,21,8.47
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.466,git/rebase,21,8.47
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.403,git/rebase,21,8.47
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.799
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.799
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.799
git/commit createCommit normal can commit renames,0.133,git/commit,21,3.799
git/commit createCommit partials can commit some lines from new file,0.146,git/commit,21,3.799
git/commit createCommit partials can commit second hunk from modified file,0.162,git/commit,21,3.799
git/commit createCommit partials can commit single delete from modified file,0.134,git/commit,21,3.799
git/commit createCommit partials can commit multiple hunks from modified file,0.15,git/commit,21,3.799
git/commit createCommit partials can commit some lines from deleted file,0.146,git/commit,21,3.799
git/commit createCommit partials can commit renames with modifications,0.149,git/commit,21,3.799
git/commit createCommit partials can commit renames with partially selected modifications,0.185,git/commit,21,3.799
git/commit createCommit with a merge conflict creates a merge commit,0.219,git/commit,21,3.799
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.203,git/commit,21,3.799
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.298,git/commit,21,3.799
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.289,git/commit,21,3.799
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.346,git/commit,21,3.799
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.357,git/commit,21,3.799
git/commit createMergeCommit with no changes throws an error,0.076,git/commit,21,3.799
git/commit index corner cases can commit when staged new file is then deleted,0.13,git/commit,21,3.799
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.147,git/commit,21,3.799
git/commit index corner cases file is deleted in index,0.153,git/commit,21,3.799
git/rebase can parse progress returns a value indicating conflicts were encountered,0.42,git/rebase,7,3.866
git/rebase can parse progress status detects REBASE_HEAD,0.414,git/rebase,7,3.866
git/rebase can parse progress is a detached HEAD state,0.414,git/rebase,7,3.866
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.873,git/rebase,7,3.866
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.826,git/rebase,7,3.866
git/rebase can parse progress for long rebase is a detached HEAD state,0.868,git/rebase,7,3.866
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.156,git/stash,14,2.492
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.237,git/stash,14,2.492
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.222,git/stash,14,2.492
GitStore loadCommitBatch includes HEAD when loading commits,0.302,GitStore,11,2.347
GitStore can discard changes from a repository,0.172,GitStore,11,2.347
GitStore can discard a renamed file,0.142,GitStore,11,2.347
GitStore undo first commit reports the repository is unborn,0.176,GitStore,11,2.347
GitStore undo first commit pre-fills the commit message,0.128,GitStore,11,2.347
GitStore undo first commit clears the undo commit dialog,0.199,GitStore,11,2.347
GitStore undo first commit has no staged files,0.19,GitStore,11,2.347
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.347
git/status getStatus with conflicted repo parses conflicted files with markers,0.28,git/status,12,1.897
git/status getStatus with conflicted repo parses conflicted files without markers,0.296,git/status,12,1.897
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.465,git/status,12,1.897
git/status getStatus with conflicted repo parses resolved files,0.281,git/status,12,1.897
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.099,git/status,12,1.897
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.128,git/status,12,1.897
git/status getStatus with unconflicted repo parses changed files,0.05,git/status,12,1.897
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.041,git/status,12,1.897
git/status getStatus with unconflicted repo reflects renames,0.086,git/status,12,1.897
git/status getStatus with unconflicted repo reflects copies,0.08,git/status,12,1.897
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.04,git/status,12,1.897
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.104,git/diff,19,1.565
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.064,git/diff,19,1.565
git/diff getBlobImage retrieves valid image for modified file,0.039,git/diff,19,1.565
git/diff getBlobImage retrieves valid images for deleted file,0.052,git/diff,19,1.565
git/diff imageDiff changes for images are set,0.071,git/diff,19,1.565
git/diff imageDiff changes for text are not set,0.064,git/diff,19,1.565
git/diff getWorkingDirectoryDiff counts lines for new file,0.073,git/diff,19,1.565
git/diff getWorkingDirectoryDiff counts lines for modified file,0.058,git/diff,19,1.565
git/diff getWorkingDirectoryDiff counts lines for staged file,0.066,git/diff,19,1.565
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.097,git/diff,19,1.565
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.124,git/diff,19,1.565
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.125,git/diff,19,1.565
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.565
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.106,git/diff,19,1.565
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.565
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.565
git/diff getBinaryPaths in repo with text only files returns an empty array,0.068,git/diff,19,1.565
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.565
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.1,git/diff,19,1.565
BranchPruner does nothing on non GitHub repositories,0.283,BranchPruner,6,1.622
BranchPruner prunes for GitHub repository,0.262,BranchPruner,6,1.622
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.203,BranchPruner,6,1.622
BranchPruner does not prune if there is no default branch,0.204,BranchPruner,6,1.622
BranchPruner does not prune reserved branches,0.261,BranchPruner,6,1.622
git/checkout can checkout a valid branch name in an existing repository,0.101,git/checkout,6,0.808
git/checkout can checkout a branch when it exists on multiple remotes,0.104,git/checkout,6,0.808
git/checkout will fail when an existing branch matches the remote branch,0.097,git/checkout,6,0.808
git/checkout with submodules cleans up an submodule that no longer exists,0.239,git/checkout,6,0.808
git/checkout with submodules updates a changed submodule reference,0.192,git/checkout,6,0.808
git/reflog getRecentBranches returns the recently checked out branches,0.129,git/reflog,6,0.891
git/reflog getRecentBranches works after renaming a branch,0.158,git/reflog,6,0.891
git/reflog getRecentBranches returns a limited number of branches,0.218,git/reflog,6,0.891
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.13,git/reflog,6,0.891
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.159,git/reflog,6,0.891
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.891
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.284,formatPatch,5,0.887
git/rev-parse isGitRepository should return true for a repository,0.038,git/rev-parse,10,0.551
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.551
git/rev-parse isBareRepository returns false for default initialized repository,0.048,git/rev-parse,10,0.551
git/rev-parse isBareRepository returns true for initialized bare repository,0.047,git/rev-parse,10,0.551
git/rev-parse isBareRepository returns false for empty directory,0.034,git/rev-parse,10,0.551
git/rev-parse isBareRepository throws error for missing directory,0.035,git/rev-parse,10,0.551
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.044,git/rev-parse,10,0.551
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.037,git/rev-parse,10,0.551
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.044,git/rev-parse,10,0.551
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.151,git/rev-parse,10,0.551
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.089,gitignore,9,0.581
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.091,gitignore,9,0.581
gitignore saveGitIgnore applies rule correctly to repository,0.085,gitignore,9,0.581
gitignore appendIgnoreRule appends one rule,0.096,gitignore,9,0.581
gitignore appendIgnoreRule appends multiple rules,0.1,gitignore,9,0.581
git/branch tip returns unborn for new repository,0.035,git/branch,10,0.579
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,10,0.579
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.579
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.579
git/branch tip returns non-origin remote,0.07,git/branch,10,0.579
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.072,git/branch,10,0.579
git/branch getBranchesPointedAt in a local repo finds one branch name,0.045,git/branch,10,0.579
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.579
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.579
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.073,git/branch,10,0.579
git/submodule listSubmodules returns the submodule entry,0.093,git/submodule,3,0.618
git/submodule listSubmodules returns the expected tag,0.141,git/submodule,3,0.618
git/submodule resetSubmodulePaths update submodule to original commit,0.338,git/submodule,3,0.618
git/merge merge and is successful returns true,0.033,git/merge,7,0.553
git/merge merge and is a noop returns false,0.048,git/merge,7,0.553
git/merge getMergeBase returns the common ancestor of two branches,0.065,git/merge,7,0.553
git/log getCommits loads history,0.056,git/log,7,0.519
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.519
git/log getCommits handles repository with signed commit and log.showSignature set,0.09,git/log,7,0.519
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.519
git/log getChangedFiles detects renames,0.082,git/log,7,0.519
git/log getChangedFiles detect copies,0.078,git/log,7,0.519
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.519
validatedRepositoryPath returns the path to the repository,0.044,validatedRepositoryPath,2,0.097
git-lfs isUsingLFS returns false for repository not using LFS,0.05,git-lfs,9,0.525
git-lfs isUsingLFS returns true if LFS is tracking a path,0.071,git-lfs,9,0.525
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.426
git/remote findDefaultRemote returns origin when multiple remotes found,0.046,git/remote,9,0.426
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.426
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.044,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.043,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.31
git/config config looks up config values,0.041,git/config,4,0.285
git/config config returns null for undefined values,0.05,git/config,4,0.285
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.285
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,4,0.285
git/core error handling does not throw for errors that were expected,0.048,git/core,4,0.215
git/core error handling throws for errors that were not expected,0.04,git/core,4,0.215
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.215
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.215
git/for-each-ref getBranches fetches branches using for-each-ref,0.07,git/for-each-ref,3,0.215
git/for-each-ref getBranches should return empty list for empty repo,0.068,git/for-each-ref,3,0.215
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.049,git/for-each-ref,3,0.215
AppStore can select a repository,0.131,AppStore,5,0.186
git/reset reset can hard reset a repository,0.421,git/reset,2,0.467
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.379,git/rebase,21,8.41
git/rebase detect conflicts status detects REBASE_HEAD,0.277,git/rebase,21,8.41
git/rebase detect conflicts has conflicted files in working directory,0.276,git/rebase,21,8.41
git/rebase detect conflicts is a detached HEAD state,0.282,git/rebase,21,8.41
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.303,git/rebase,21,8.41
git/rebase abort after conflicts found no longer has working directory changes,0.297,git/rebase,21,8.41
git/rebase abort after conflicts found returns to the feature branch,0.301,git/rebase,21,8.41
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.373,git/rebase,21,8.41
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.378,git/rebase,21,8.41
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.371,git/rebase,21,8.41
git/rebase continue after resolving conflicts returns success,0.422,git/rebase,21,8.41
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.42,git/rebase,21,8.41
git/rebase continue after resolving conflicts no longer has working directory changes,0.445,git/rebase,21,8.41
git/rebase continue after resolving conflicts returns to the feature branch,0.402,git/rebase,21,8.41
git/rebase continue after resolving conflicts branch is now a different ref,0.423,git/rebase,21,8.41
git/rebase continue with additional changes unrelated to conflicted files returns success,0.418,git/rebase,21,8.41
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.466,git/rebase,21,8.41
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.433,git/rebase,21,8.41
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.442,git/rebase,21,8.41
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.442,git/rebase,21,8.41
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.405,git/rebase,21,8.41
git/rebase can parse progress returns a value indicating conflicts were encountered,0.382,git/rebase,7,3.408
git/rebase can parse progress status detects REBASE_HEAD,0.407,git/rebase,7,3.408
git/rebase can parse progress is a detached HEAD state,0.394,git/rebase,7,3.408
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.695,git/rebase,7,3.408
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.748,git/rebase,7,3.408
git/rebase can parse progress for long rebase is a detached HEAD state,0.728,git/rebase,7,3.408
git/commit createCommit normal commits the given files,0.119,git/commit,21,4.158
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.158
git/commit createCommit normal can commit for empty repository,0.124,git/commit,21,4.158
git/commit createCommit normal can commit renames,0.147,git/commit,21,4.158
git/commit createCommit partials can commit some lines from new file,0.158,git/commit,21,4.158
git/commit createCommit partials can commit second hunk from modified file,0.173,git/commit,21,4.158
git/commit createCommit partials can commit single delete from modified file,0.156,git/commit,21,4.158
git/commit createCommit partials can commit multiple hunks from modified file,0.176,git/commit,21,4.158
git/commit createCommit partials can commit some lines from deleted file,0.157,git/commit,21,4.158
git/commit createCommit partials can commit renames with modifications,0.162,git/commit,21,4.158
git/commit createCommit partials can commit renames with partially selected modifications,0.202,git/commit,21,4.158
git/commit createCommit with a merge conflict creates a merge commit,0.252,git/commit,21,4.158
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.226,git/commit,21,4.158
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.315,git/commit,21,4.158
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.322,git/commit,21,4.158
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.377,git/commit,21,4.158
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.38,git/commit,21,4.158
git/commit createMergeCommit with no changes throws an error,0.084,git/commit,21,4.158
git/commit index corner cases can commit when staged new file is then deleted,0.148,git/commit,21,4.158
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.163,git/commit,21,4.158
git/commit index corner cases file is deleted in index,0.164,git/commit,21,4.158
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.158,git/stash,14,2.752
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.311,git/stash,14,2.752
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.205,git/stash,14,2.752
GitStore loadCommitBatch includes HEAD when loading commits,0.319,GitStore,11,2.368
GitStore can discard changes from a repository,0.172,GitStore,11,2.368
GitStore can discard a renamed file,0.191,GitStore,11,2.368
GitStore undo first commit reports the repository is unborn,0.179,GitStore,11,2.368
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.368
GitStore undo first commit clears the undo commit dialog,0.198,GitStore,11,2.368
GitStore undo first commit has no staged files,0.19,GitStore,11,2.368
GitStore repository with HEAD file can discard modified change cleanly,0.103,GitStore,11,2.368
git/status getStatus with conflicted repo parses conflicted files with markers,0.332,git/status,12,1.729
git/status getStatus with conflicted repo parses conflicted files without markers,0.232,git/status,12,1.729
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.393,git/status,12,1.729
git/status getStatus with conflicted repo parses resolved files,0.234,git/status,12,1.729
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.09,git/status,12,1.729
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.112,git/status,12,1.729
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,1.729
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.045,git/status,12,1.729
git/status getStatus with unconflicted repo reflects renames,0.081,git/status,12,1.729
git/status getStatus with unconflicted repo reflects copies,0.076,git/status,12,1.729
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.036,git/status,12,1.729
BranchPruner does nothing on non GitHub repositories,0.185,BranchPruner,6,1.368
BranchPruner prunes for GitHub repository,0.229,BranchPruner,6,1.368
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.197,BranchPruner,6,1.368
BranchPruner does not prune if there is no default branch,0.164,BranchPruner,6,1.368
BranchPruner does not prune reserved branches,0.217,BranchPruner,6,1.368
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.104,git/diff,19,1.614
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.065,git/diff,19,1.614
git/diff getBlobImage retrieves valid image for modified file,0.045,git/diff,19,1.614
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.614
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.614
git/diff imageDiff changes for text are not set,0.08,git/diff,19,1.614
git/diff getWorkingDirectoryDiff counts lines for new file,0.065,git/diff,19,1.614
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.614
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.614
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.101,git/diff,19,1.614
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.124,git/diff,19,1.614
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.126,git/diff,19,1.614
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.102,git/diff,19,1.614
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.118,git/diff,19,1.614
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.087,git/diff,19,1.614
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.614
git/diff getBinaryPaths in repo with text only files returns an empty array,0.067,git/diff,19,1.614
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.081,git/diff,19,1.614
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.097,git/diff,19,1.614
git/reflog getRecentBranches returns the recently checked out branches,0.134,git/reflog,6,0.918
git/reflog getRecentBranches works after renaming a branch,0.161,git/reflog,6,0.918
git/reflog getRecentBranches returns a limited number of branches,0.221,git/reflog,6,0.918
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.139,git/reflog,6,0.918
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.161,git/reflog,6,0.918
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.918
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.277,formatPatch,5,0.956
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.803
git/checkout can checkout a branch when it exists on multiple remotes,0.105,git/checkout,6,0.803
git/checkout will fail when an existing branch matches the remote branch,0.093,git/checkout,6,0.803
git/checkout with submodules cleans up an submodule that no longer exists,0.223,git/checkout,6,0.803
git/checkout with submodules updates a changed submodule reference,0.197,git/checkout,6,0.803
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.536
git/submodule listSubmodules returns the expected tag,0.134,git/submodule,3,0.536
git/submodule resetSubmodulePaths update submodule to original commit,0.26,git/submodule,3,0.536
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.092,gitignore,9,0.577
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.088,gitignore,9,0.577
gitignore saveGitIgnore applies rule correctly to repository,0.084,gitignore,9,0.577
gitignore appendIgnoreRule appends one rule,0.099,gitignore,9,0.577
gitignore appendIgnoreRule appends multiple rules,0.096,gitignore,9,0.577
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.597
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,10,0.597
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.597
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.597
git/branch tip returns non-origin remote,0.079,git/branch,10,0.597
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.087,git/branch,10,0.597
git/branch getBranchesPointedAt in a local repo finds one branch name,0.042,git/branch,10,0.597
git/branch getBranchesPointedAt in a local repo finds no branch names,0.04,git/branch,10,0.597
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.597
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.597
git/merge merge and is successful returns true,0.034,git/merge,7,0.508
git/merge merge and is a noop returns false,0.05,git/merge,7,0.508
git/merge getMergeBase returns the common ancestor of two branches,0.058,git/merge,7,0.508
git/rev-parse isGitRepository should return true for a repository,0.044,git/rev-parse,10,0.633
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.633
git/rev-parse isBareRepository returns false for default initialized repository,0.049,git/rev-parse,10,0.633
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.633
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.633
git/rev-parse isBareRepository throws error for missing directory,0.039,git/rev-parse,10,0.633
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.633
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.633
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.038,git/rev-parse,10,0.633
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.207,git/rev-parse,10,0.633
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.493
git-lfs isUsingLFS returns true if LFS is tracking a path,0.072,git-lfs,9,0.493
git/log getCommits loads history,0.06,git/log,7,0.519
git/log getCommits handles repository with HEAD file on disk,0.077,git/log,7,0.519
git/log getCommits handles repository with signed commit and log.showSignature set,0.09,git/log,7,0.519
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.519
git/log getChangedFiles detects renames,0.081,git/log,7,0.519
git/log getChangedFiles detect copies,0.078,git/log,7,0.519
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.519
git/reset reset can hard reset a repository,0.061,git/reset,2,0.107
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.429
git/remote findDefaultRemote returns origin when multiple remotes found,0.058,git/remote,9,0.429
git/remote findDefaultRemote returns something when origin removed,0.055,git/remote,9,0.429
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.043,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.039,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile includes empty context lines,0.021,patch formatting,8,0.305
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.305
git/config config looks up config values,0.041,git/config,4,0.273
git/config config returns null for undefined values,0.045,git/config,4,0.273
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.273
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,4,0.273
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for empty repo,0.057,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.198
git/core error handling does not throw for errors that were expected,0.041,git/core,4,0.208
git/core error handling throws for errors that were not expected,0.041,git/core,4,0.208
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.208
git/core exit code handling throws for exit codes that were not expected,0.039,git/core,4,0.208
AppStore can select a repository,0.136,AppStore,5,0.19
validatedRepositoryPath returns the path to the repository,0.388,validatedRepositoryPath,2,0.449
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.048
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.377,git/rebase,21,8.524
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.524
git/rebase detect conflicts has conflicted files in working directory,0.268,git/rebase,21,8.524
git/rebase detect conflicts is a detached HEAD state,0.294,git/rebase,21,8.524
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.301,git/rebase,21,8.524
git/rebase abort after conflicts found no longer has working directory changes,0.296,git/rebase,21,8.524
git/rebase abort after conflicts found returns to the feature branch,0.307,git/rebase,21,8.524
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.38,git/rebase,21,8.524
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.409,git/rebase,21,8.524
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.374,git/rebase,21,8.524
git/rebase continue after resolving conflicts returns success,0.42,git/rebase,21,8.524
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.414,git/rebase,21,8.524
git/rebase continue after resolving conflicts no longer has working directory changes,0.448,git/rebase,21,8.524
git/rebase continue after resolving conflicts returns to the feature branch,0.443,git/rebase,21,8.524
git/rebase continue after resolving conflicts branch is now a different ref,0.456,git/rebase,21,8.524
git/rebase continue with additional changes unrelated to conflicted files returns success,0.408,git/rebase,21,8.524
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.435,git/rebase,21,8.524
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.427,git/rebase,21,8.524
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.441,git/rebase,21,8.524
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.458,git/rebase,21,8.524
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.434,git/rebase,21,8.524
git/commit createCommit normal commits the given files,0.113,git/commit,21,3.89
git/commit createCommit normal commit does not strip commentary by default,0.09,git/commit,21,3.89
git/commit createCommit normal can commit for empty repository,0.123,git/commit,21,3.89
git/commit createCommit normal can commit renames,0.135,git/commit,21,3.89
git/commit createCommit partials can commit some lines from new file,0.147,git/commit,21,3.89
git/commit createCommit partials can commit second hunk from modified file,0.158,git/commit,21,3.89
git/commit createCommit partials can commit single delete from modified file,0.142,git/commit,21,3.89
git/commit createCommit partials can commit multiple hunks from modified file,0.164,git/commit,21,3.89
git/commit createCommit partials can commit some lines from deleted file,0.154,git/commit,21,3.89
git/commit createCommit partials can commit renames with modifications,0.156,git/commit,21,3.89
git/commit createCommit partials can commit renames with partially selected modifications,0.193,git/commit,21,3.89
git/commit createCommit with a merge conflict creates a merge commit,0.228,git/commit,21,3.89
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.207,git/commit,21,3.89
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.32,git/commit,21,3.89
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.288,git/commit,21,3.89
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.343,git/commit,21,3.89
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.347,git/commit,21,3.89
git/commit createMergeCommit with no changes throws an error,0.091,git/commit,21,3.89
git/commit index corner cases can commit when staged new file is then deleted,0.132,git/commit,21,3.89
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.147,git/commit,21,3.89
git/commit index corner cases file is deleted in index,0.148,git/commit,21,3.89
git/rebase can parse progress returns a value indicating conflicts were encountered,0.44,git/rebase,7,3.861
git/rebase can parse progress status detects REBASE_HEAD,0.419,git/rebase,7,3.861
git/rebase can parse progress is a detached HEAD state,0.455,git/rebase,7,3.861
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.786,git/rebase,7,3.861
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.867,git/rebase,7,3.861
git/rebase can parse progress for long rebase is a detached HEAD state,0.845,git/rebase,7,3.861
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.168,git/stash,14,2.797
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.262,git/stash,14,2.797
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.227,git/stash,14,2.797
GitStore loadCommitBatch includes HEAD when loading commits,0.302,GitStore,11,2.321
GitStore can discard changes from a repository,0.177,GitStore,11,2.321
GitStore can discard a renamed file,0.143,GitStore,11,2.321
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.321
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.321
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.321
GitStore undo first commit has no staged files,0.191,GitStore,11,2.321
GitStore repository with HEAD file can discard modified change cleanly,0.111,GitStore,11,2.321
git/status getStatus with conflicted repo parses conflicted files with markers,0.282,git/status,12,1.846
git/status getStatus with conflicted repo parses conflicted files without markers,0.309,git/status,12,1.846
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.434,git/status,12,1.846
git/status getStatus with conflicted repo parses resolved files,0.266,git/status,12,1.846
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.092,git/status,12,1.846
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.107,git/status,12,1.846
git/status getStatus with unconflicted repo parses changed files,0.053,git/status,12,1.846
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.042,git/status,12,1.846
git/status getStatus with unconflicted repo reflects renames,0.08,git/status,12,1.846
git/status getStatus with unconflicted repo reflects copies,0.086,git/status,12,1.846
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.043,git/status,12,1.846
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.485
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.037,git/diff,19,1.485
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.485
git/diff getBlobImage retrieves valid images for deleted file,0.049,git/diff,19,1.485
git/diff imageDiff changes for images are set,0.066,git/diff,19,1.485
git/diff imageDiff changes for text are not set,0.066,git/diff,19,1.485
git/diff getWorkingDirectoryDiff counts lines for new file,0.077,git/diff,19,1.485
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.485
git/diff getWorkingDirectoryDiff counts lines for staged file,0.066,git/diff,19,1.485
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.096,git/diff,19,1.485
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.127,git/diff,19,1.485
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.132,git/diff,19,1.485
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.485
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.108,git/diff,19,1.485
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.485
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.485
git/diff getBinaryPaths in repo with text only files returns an empty array,0.068,git/diff,19,1.485
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.081,git/diff,19,1.485
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.096,git/diff,19,1.485
BranchPruner does nothing on non GitHub repositories,0.292,BranchPruner,6,1.601
BranchPruner prunes for GitHub repository,0.242,BranchPruner,6,1.601
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.207,BranchPruner,6,1.601
BranchPruner does not prune if there is no default branch,0.222,BranchPruner,6,1.601
BranchPruner does not prune reserved branches,0.249,BranchPruner,6,1.601
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.312,formatPatch,5,0.905
git/reflog getRecentBranches returns the recently checked out branches,0.129,git/reflog,6,0.924
git/reflog getRecentBranches works after renaming a branch,0.17,git/reflog,6,0.924
git/reflog getRecentBranches returns a limited number of branches,0.22,git/reflog,6,0.924
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.133,git/reflog,6,0.924
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.168,git/reflog,6,0.924
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.059,git/reflog,6,0.924
git/checkout can checkout a valid branch name in an existing repository,0.179,git/checkout,6,0.906
git/checkout can checkout a branch when it exists on multiple remotes,0.123,git/checkout,6,0.906
git/checkout will fail when an existing branch matches the remote branch,0.099,git/checkout,6,0.906
git/checkout with submodules cleans up an submodule that no longer exists,0.239,git/checkout,6,0.906
git/checkout with submodules updates a changed submodule reference,0.193,git/checkout,6,0.906
git/rev-parse isGitRepository should return true for a repository,0.035,git/rev-parse,10,0.61
git/rev-parse isGitRepository should return false for a directory,0.036,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for empty directory,0.051,git/rev-parse,10,0.61
git/rev-parse isBareRepository throws error for missing directory,0.04,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.056,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.046,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.162,git/rev-parse,10,0.61
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.584
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,10,0.584
git/branch tip returns detached for arbitrary checkout,0.048,git/branch,10,0.584
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.584
git/branch tip returns non-origin remote,0.069,git/branch,10,0.584
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.072,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds one branch name,0.046,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.584
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.584
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.092,gitignore,9,0.615
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.094,gitignore,9,0.615
gitignore saveGitIgnore applies rule correctly to repository,0.092,gitignore,9,0.615
gitignore appendIgnoreRule appends one rule,0.103,gitignore,9,0.615
gitignore appendIgnoreRule appends multiple rules,0.109,gitignore,9,0.615
git/submodule listSubmodules returns the submodule entry,0.096,git/submodule,3,0.581
git/submodule listSubmodules returns the expected tag,0.142,git/submodule,3,0.581
git/submodule resetSubmodulePaths update submodule to original commit,0.299,git/submodule,3,0.581
git/log getCommits loads history,0.056,git/log,7,0.48
git/log getCommits handles repository with HEAD file on disk,0.073,git/log,7,0.48
git/log getCommits handles repository with signed commit and log.showSignature set,0.09,git/log,7,0.48
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.48
git/log getChangedFiles detects renames,0.069,git/log,7,0.48
git/log getChangedFiles detect copies,0.071,git/log,7,0.48
git/log getChangedFiles handles commit when HEAD exists on disk,0.036,git/log,7,0.48
git/merge merge and is successful returns true,0.034,git/merge,7,0.56
git/merge merge and is a noop returns false,0.05,git/merge,7,0.56
git/merge getMergeBase returns the common ancestor of two branches,0.06,git/merge,7,0.56
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.504
git-lfs isUsingLFS returns true if LFS is tracking a path,0.068,git-lfs,9,0.504
validatedRepositoryPath returns the path to the repository,0.038,validatedRepositoryPath,2,0.095
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.413
git/remote findDefaultRemote returns origin when multiple remotes found,0.047,git/remote,9,0.413
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.413
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.309
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.309
git/config config looks up config values,0.045,git/config,4,0.27
git/config config returns null for undefined values,0.043,git/config,4,0.27
git/config global config getGlobalConfigPath gets the config path,0.053,git/config,4,0.27
git/config global config setGlobalConfigValue will replace all entries for a global value,0.086,git/config,4,0.27
git/core error handling does not throw for errors that were expected,0.039,git/core,4,0.198
git/core error handling throws for errors that were not expected,0.042,git/core,4,0.198
git/core exit code handling does not throw for exit codes that were expected,0.039,git/core,4,0.198
git/core exit code handling throws for exit codes that were not expected,0.039,git/core,4,0.198
git/for-each-ref getBranches fetches branches using for-each-ref,0.061,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for empty repo,0.063,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.045,git/for-each-ref,3,0.203
AppStore can select a repository,0.129,AppStore,5,0.178
git/reset reset can hard reset a repository,0.411,git/reset,2,0.456
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.357,git/rebase,21,8.476
git/rebase detect conflicts status detects REBASE_HEAD,0.281,git/rebase,21,8.476
git/rebase detect conflicts has conflicted files in working directory,0.277,git/rebase,21,8.476
git/rebase detect conflicts is a detached HEAD state,0.297,git/rebase,21,8.476
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.296,git/rebase,21,8.476
git/rebase abort after conflicts found no longer has working directory changes,0.304,git/rebase,21,8.476
git/rebase abort after conflicts found returns to the feature branch,0.321,git/rebase,21,8.476
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.366,git/rebase,21,8.476
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.383,git/rebase,21,8.476
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.376,git/rebase,21,8.476
git/rebase continue after resolving conflicts returns success,0.417,git/rebase,21,8.476
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.423,git/rebase,21,8.476
git/rebase continue after resolving conflicts no longer has working directory changes,0.449,git/rebase,21,8.476
git/rebase continue after resolving conflicts returns to the feature branch,0.431,git/rebase,21,8.476
git/rebase continue after resolving conflicts branch is now a different ref,0.432,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files returns success,0.422,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.454,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.423,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.442,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.474,git/rebase,21,8.476
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.396,git/rebase,21,8.476
git/commit createCommit normal commits the given files,0.106,git/commit,21,3.94
git/commit createCommit normal commit does not strip commentary by default,0.09,git/commit,21,3.94
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.94
git/commit createCommit normal can commit renames,0.136,git/commit,21,3.94
git/commit createCommit partials can commit some lines from new file,0.146,git/commit,21,3.94
git/commit createCommit partials can commit second hunk from modified file,0.156,git/commit,21,3.94
git/commit createCommit partials can commit single delete from modified file,0.146,git/commit,21,3.94
git/commit createCommit partials can commit multiple hunks from modified file,0.171,git/commit,21,3.94
git/commit createCommit partials can commit some lines from deleted file,0.157,git/commit,21,3.94
git/commit createCommit partials can commit renames with modifications,0.157,git/commit,21,3.94
git/commit createCommit partials can commit renames with partially selected modifications,0.2,git/commit,21,3.94
git/commit createCommit with a merge conflict creates a merge commit,0.23,git/commit,21,3.94
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.222,git/commit,21,3.94
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.309,git/commit,21,3.94
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.288,git/commit,21,3.94
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.353,git/commit,21,3.94
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.359,git/commit,21,3.94
git/commit createMergeCommit with no changes throws an error,0.088,git/commit,21,3.94
git/commit index corner cases can commit when staged new file is then deleted,0.136,git/commit,21,3.94
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.157,git/commit,21,3.94
git/commit index corner cases file is deleted in index,0.157,git/commit,21,3.94
git/rebase can parse progress returns a value indicating conflicts were encountered,0.453,git/rebase,7,3.914
git/rebase can parse progress status detects REBASE_HEAD,0.428,git/rebase,7,3.914
git/rebase can parse progress is a detached HEAD state,0.439,git/rebase,7,3.914
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.838,git/rebase,7,3.914
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.834,git/rebase,7,3.914
git/rebase can parse progress for long rebase is a detached HEAD state,0.869,git/rebase,7,3.914
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.636
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.263,git/stash,14,2.636
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.636
GitStore loadCommitBatch includes HEAD when loading commits,0.36,GitStore,11,2.424
GitStore can discard changes from a repository,0.175,GitStore,11,2.424
GitStore can discard a renamed file,0.149,GitStore,11,2.424
GitStore undo first commit reports the repository is unborn,0.191,GitStore,11,2.424
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.424
GitStore undo first commit clears the undo commit dialog,0.205,GitStore,11,2.424
GitStore undo first commit has no staged files,0.192,GitStore,11,2.424
GitStore repository with HEAD file can discard modified change cleanly,0.112,GitStore,11,2.424
git/status getStatus with conflicted repo parses conflicted files with markers,0.277,git/status,12,1.839
git/status getStatus with conflicted repo parses conflicted files without markers,0.333,git/status,12,1.839
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.45,git/status,12,1.839
git/status getStatus with conflicted repo parses resolved files,0.263,git/status,12,1.839
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.09,git/status,12,1.839
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.101,git/status,12,1.839
git/status getStatus with unconflicted repo parses changed files,0.043,git/status,12,1.839
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.04,git/status,12,1.839
git/status getStatus with unconflicted repo reflects renames,0.078,git/status,12,1.839
git/status getStatus with unconflicted repo reflects copies,0.077,git/status,12,1.839
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.036,git/status,12,1.839
BranchPruner does nothing on non GitHub repositories,0.205,BranchPruner,6,1.437
BranchPruner prunes for GitHub repository,0.229,BranchPruner,6,1.437
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.194,BranchPruner,6,1.437
BranchPruner does not prune if there is no default branch,0.181,BranchPruner,6,1.437
BranchPruner does not prune reserved branches,0.25,BranchPruner,6,1.437
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.598
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.113,git/diff,19,1.598
git/diff getBlobImage retrieves valid image for modified file,0.06,git/diff,19,1.598
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.598
git/diff imageDiff changes for images are set,0.078,git/diff,19,1.598
git/diff imageDiff changes for text are not set,0.069,git/diff,19,1.598
git/diff getWorkingDirectoryDiff counts lines for new file,0.067,git/diff,19,1.598
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.598
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.598
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.103,git/diff,19,1.598
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.134,git/diff,19,1.598
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.138,git/diff,19,1.598
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.115,git/diff,19,1.598
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.114,git/diff,19,1.598
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.598
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.598
git/diff getBinaryPaths in repo with text only files returns an empty array,0.06,git/diff,19,1.598
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.07,git/diff,19,1.598
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.085,git/diff,19,1.598
git/reflog getRecentBranches returns the recently checked out branches,0.135,git/reflog,6,0.958
git/reflog getRecentBranches works after renaming a branch,0.172,git/reflog,6,0.958
git/reflog getRecentBranches returns a limited number of branches,0.236,git/reflog,6,0.958
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.135,git/reflog,6,0.958
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.178,git/reflog,6,0.958
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.958
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.877
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.877
git/checkout will fail when an existing branch matches the remote branch,0.107,git/checkout,6,0.877
git/checkout with submodules cleans up an submodule that no longer exists,0.271,git/checkout,6,0.877
git/checkout with submodules updates a changed submodule reference,0.204,git/checkout,6,0.877
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.265,formatPatch,5,0.943
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.1,gitignore,9,0.632
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.632
gitignore saveGitIgnore applies rule correctly to repository,0.094,gitignore,9,0.632
gitignore appendIgnoreRule appends one rule,0.106,gitignore,9,0.632
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.632
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.659
git/rev-parse isGitRepository should return false for a directory,0.042,git/rev-parse,10,0.659
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.659
git/rev-parse isBareRepository returns true for initialized bare repository,0.058,git/rev-parse,10,0.659
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.659
git/rev-parse isBareRepository throws error for missing directory,0.043,git/rev-parse,10,0.659
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.055,git/rev-parse,10,0.659
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.659
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.048,git/rev-parse,10,0.659
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.201,git/rev-parse,10,0.659
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.616
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,10,0.616
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.616
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.616
git/branch tip returns non-origin remote,0.086,git/branch,10,0.616
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.616
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.616
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.079,git/branch,10,0.616
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.608
git/submodule listSubmodules returns the expected tag,0.154,git/submodule,3,0.608
git/submodule resetSubmodulePaths update submodule to original commit,0.31,git/submodule,3,0.608
git/merge merge and is successful returns true,0.036,git/merge,7,0.582
git/merge merge and is a noop returns false,0.053,git/merge,7,0.582
git/merge getMergeBase returns the common ancestor of two branches,0.067,git/merge,7,0.582
git-lfs isUsingLFS returns false for repository not using LFS,0.14,git-lfs,9,0.617
git-lfs isUsingLFS returns true if LFS is tracking a path,0.084,git-lfs,9,0.617
git/log getCommits loads history,0.063,git/log,7,0.537
git/log getCommits handles repository with HEAD file on disk,0.073,git/log,7,0.537
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.537
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.537
git/log getChangedFiles detects renames,0.087,git/log,7,0.537
git/log getChangedFiles detect copies,0.08,git/log,7,0.537
git/log getChangedFiles handles commit when HEAD exists on disk,0.045,git/log,7,0.537
git/reset reset can hard reset a repository,0.069,git/reset,2,0.109
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.412
git/remote findDefaultRemote returns origin when multiple remotes found,0.051,git/remote,9,0.412
git/remote findDefaultRemote returns something when origin removed,0.059,git/remote,9,0.412
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.307
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.307
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.307
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.045,patch formatting,8,0.307
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.307
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.307
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.307
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.307
git/config config looks up config values,0.044,git/config,4,0.275
git/config config returns null for undefined values,0.043,git/config,4,0.275
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.275
git/config global config setGlobalConfigValue will replace all entries for a global value,0.088,git/config,4,0.275
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.208
git/for-each-ref getBranches should return empty list for empty repo,0.067,git/for-each-ref,3,0.208
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.208
git/core error handling does not throw for errors that were expected,0.043,git/core,4,0.222
git/core error handling throws for errors that were not expected,0.048,git/core,4,0.222
git/core exit code handling does not throw for exit codes that were expected,0.045,git/core,4,0.222
git/core exit code handling throws for exit codes that were not expected,0.046,git/core,4,0.222
AppStore can select a repository,0.124,AppStore,5,0.177
validatedRepositoryPath returns the path to the repository,0.321,validatedRepositoryPath,2,0.381
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.37,git/rebase,21,8.597
git/rebase detect conflicts status detects REBASE_HEAD,0.279,git/rebase,21,8.597
git/rebase detect conflicts has conflicted files in working directory,0.274,git/rebase,21,8.597
git/rebase detect conflicts is a detached HEAD state,0.29,git/rebase,21,8.597
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.311,git/rebase,21,8.597
git/rebase abort after conflicts found no longer has working directory changes,0.319,git/rebase,21,8.597
git/rebase abort after conflicts found returns to the feature branch,0.324,git/rebase,21,8.597
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.39,git/rebase,21,8.597
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.387,git/rebase,21,8.597
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.369,git/rebase,21,8.597
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.597
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.435,git/rebase,21,8.597
git/rebase continue after resolving conflicts no longer has working directory changes,0.428,git/rebase,21,8.597
git/rebase continue after resolving conflicts returns to the feature branch,0.423,git/rebase,21,8.597
git/rebase continue after resolving conflicts branch is now a different ref,0.465,git/rebase,21,8.597
git/rebase continue with additional changes unrelated to conflicted files returns success,0.448,git/rebase,21,8.597
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.437,git/rebase,21,8.597
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.438,git/rebase,21,8.597
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.463,git/rebase,21,8.597
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.452,git/rebase,21,8.597
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.41,git/rebase,21,8.597
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.864
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,3.864
git/commit createCommit normal can commit for empty repository,0.122,git/commit,21,3.864
git/commit createCommit normal can commit renames,0.14,git/commit,21,3.864
git/commit createCommit partials can commit some lines from new file,0.145,git/commit,21,3.864
git/commit createCommit partials can commit second hunk from modified file,0.154,git/commit,21,3.864
git/commit createCommit partials can commit single delete from modified file,0.139,git/commit,21,3.864
git/commit createCommit partials can commit multiple hunks from modified file,0.159,git/commit,21,3.864
git/commit createCommit partials can commit some lines from deleted file,0.147,git/commit,21,3.864
git/commit createCommit partials can commit renames with modifications,0.156,git/commit,21,3.864
git/commit createCommit partials can commit renames with partially selected modifications,0.194,git/commit,21,3.864
git/commit createCommit with a merge conflict creates a merge commit,0.229,git/commit,21,3.864
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.209,git/commit,21,3.864
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.297,git/commit,21,3.864
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.295,git/commit,21,3.864
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.351,git/commit,21,3.864
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.353,git/commit,21,3.864
git/commit createMergeCommit with no changes throws an error,0.08,git/commit,21,3.864
git/commit index corner cases can commit when staged new file is then deleted,0.132,git/commit,21,3.864
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.15,git/commit,21,3.864
git/commit index corner cases file is deleted in index,0.149,git/commit,21,3.864
git/rebase can parse progress returns a value indicating conflicts were encountered,0.43,git/rebase,7,3.897
git/rebase can parse progress status detects REBASE_HEAD,0.428,git/rebase,7,3.897
git/rebase can parse progress is a detached HEAD state,0.444,git/rebase,7,3.897
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.827,git/rebase,7,3.897
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.864,git/rebase,7,3.897
git/rebase can parse progress for long rebase is a detached HEAD state,0.853,git/rebase,7,3.897
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.158,git/stash,14,2.754
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.288,git/stash,14,2.754
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.263,git/stash,14,2.754
GitStore loadCommitBatch includes HEAD when loading commits,0.358,GitStore,11,2.388
GitStore can discard changes from a repository,0.174,GitStore,11,2.388
GitStore can discard a renamed file,0.145,GitStore,11,2.388
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.388
GitStore undo first commit pre-fills the commit message,0.117,GitStore,11,2.388
GitStore undo first commit clears the undo commit dialog,0.202,GitStore,11,2.388
GitStore undo first commit has no staged files,0.202,GitStore,11,2.388
GitStore repository with HEAD file can discard modified change cleanly,0.111,GitStore,11,2.388
git/status getStatus with conflicted repo parses conflicted files with markers,0.29,git/status,12,1.958
git/status getStatus with conflicted repo parses conflicted files without markers,0.282,git/status,12,1.958
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.491,git/status,12,1.958
git/status getStatus with conflicted repo parses resolved files,0.283,git/status,12,1.958
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.098,git/status,12,1.958
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.17,git/status,12,1.958
git/status getStatus with unconflicted repo parses changed files,0.06,git/status,12,1.958
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.038,git/status,12,1.958
git/status getStatus with unconflicted repo reflects renames,0.076,git/status,12,1.958
git/status getStatus with unconflicted repo reflects copies,0.076,git/status,12,1.958
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,1.958
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.444
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.444
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.444
git/diff getBlobImage retrieves valid images for deleted file,0.056,git/diff,19,1.444
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.444
git/diff imageDiff changes for text are not set,0.067,git/diff,19,1.444
git/diff getWorkingDirectoryDiff counts lines for new file,0.057,git/diff,19,1.444
git/diff getWorkingDirectoryDiff counts lines for modified file,0.054,git/diff,19,1.444
git/diff getWorkingDirectoryDiff counts lines for staged file,0.055,git/diff,19,1.444
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.091,git/diff,19,1.444
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.122,git/diff,19,1.444
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.123,git/diff,19,1.444
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.444
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.105,git/diff,19,1.444
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.072,git/diff,19,1.444
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.059,git/diff,19,1.444
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.444
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.444
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.093,git/diff,19,1.444
BranchPruner does nothing on non GitHub repositories,0.283,BranchPruner,6,1.592
BranchPruner prunes for GitHub repository,0.254,BranchPruner,6,1.592
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.19,BranchPruner,6,1.592
BranchPruner does not prune if there is no default branch,0.194,BranchPruner,6,1.592
BranchPruner does not prune reserved branches,0.253,BranchPruner,6,1.592
git/reflog getRecentBranches returns the recently checked out branches,0.13,git/reflog,6,0.895
git/reflog getRecentBranches works after renaming a branch,0.157,git/reflog,6,0.895
git/reflog getRecentBranches returns a limited number of branches,0.212,git/reflog,6,0.895
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.128,git/reflog,6,0.895
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.164,git/reflog,6,0.895
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.059,git/reflog,6,0.895
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.262,formatPatch,5,0.839
git/checkout can checkout a valid branch name in an existing repository,0.116,git/checkout,6,0.832
git/checkout can checkout a branch when it exists on multiple remotes,0.105,git/checkout,6,0.832
git/checkout will fail when an existing branch matches the remote branch,0.1,git/checkout,6,0.832
git/checkout with submodules cleans up an submodule that no longer exists,0.247,git/checkout,6,0.832
git/checkout with submodules updates a changed submodule reference,0.194,git/checkout,6,0.832
git/rev-parse isGitRepository should return true for a repository,0.034,git/rev-parse,10,0.573
git/rev-parse isGitRepository should return false for a directory,0.037,git/rev-parse,10,0.573
git/rev-parse isBareRepository returns false for default initialized repository,0.051,git/rev-parse,10,0.573
git/rev-parse isBareRepository returns true for initialized bare repository,0.048,git/rev-parse,10,0.573
git/rev-parse isBareRepository returns false for empty directory,0.036,git/rev-parse,10,0.573
git/rev-parse isBareRepository throws error for missing directory,0.036,git/rev-parse,10,0.573
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.046,git/rev-parse,10,0.573
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.037,git/rev-parse,10,0.573
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.046,git/rev-parse,10,0.573
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.169,git/rev-parse,10,0.573
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.096,gitignore,9,0.604
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.092,gitignore,9,0.604
gitignore saveGitIgnore applies rule correctly to repository,0.085,gitignore,9,0.604
gitignore appendIgnoreRule appends one rule,0.101,gitignore,9,0.604
gitignore appendIgnoreRule appends multiple rules,0.11,gitignore,9,0.604
git-lfs isUsingLFS returns false for repository not using LFS,0.045,git-lfs,9,0.45
git-lfs isUsingLFS returns true if LFS is tracking a path,0.062,git-lfs,9,0.45
git/branch tip returns unborn for new repository,0.032,git/branch,10,0.593
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.593
git/branch tip returns detached for arbitrary checkout,0.042,git/branch,10,0.593
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.593
git/branch tip returns non-origin remote,0.074,git/branch,10,0.593
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.593
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.593
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.593
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.593
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,10,0.593
git/submodule listSubmodules returns the submodule entry,0.097,git/submodule,3,0.611
git/submodule listSubmodules returns the expected tag,0.142,git/submodule,3,0.611
git/submodule resetSubmodulePaths update submodule to original commit,0.331,git/submodule,3,0.611
git/merge merge and is successful returns true,0.033,git/merge,7,0.556
git/merge merge and is a noop returns false,0.052,git/merge,7,0.556
git/merge getMergeBase returns the common ancestor of two branches,0.06,git/merge,7,0.556
git/log getCommits loads history,0.057,git/log,7,0.5
git/log getCommits handles repository with HEAD file on disk,0.072,git/log,7,0.5
git/log getCommits handles repository with signed commit and log.showSignature set,0.082,git/log,7,0.5
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.5
git/log getChangedFiles detects renames,0.08,git/log,7,0.5
git/log getChangedFiles detect copies,0.078,git/log,7,0.5
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.5
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.414
git/remote findDefaultRemote returns origin when multiple remotes found,0.048,git/remote,9,0.414
git/remote findDefaultRemote returns something when origin removed,0.053,git/remote,9,0.414
validatedRepositoryPath returns the path to the repository,0.035,validatedRepositoryPath,2,0.094
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.047,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.045,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.306
git/config config looks up config values,0.043,git/config,4,0.285
git/config config returns null for undefined values,0.046,git/config,4,0.285
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.285
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,4,0.285
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.226
git/core error handling throws for errors that were not expected,0.049,git/core,4,0.226
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.226
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.226
git/for-each-ref getBranches fetches branches using for-each-ref,0.062,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.043,git/for-each-ref,3,0.198
AppStore can select a repository,0.136,AppStore,5,0.19
git/reset reset can hard reset a repository,0.43,git/reset,2,0.477
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.371,git/rebase,21,8.367
git/rebase detect conflicts status detects REBASE_HEAD,0.285,git/rebase,21,8.367
git/rebase detect conflicts has conflicted files in working directory,0.273,git/rebase,21,8.367
git/rebase detect conflicts is a detached HEAD state,0.286,git/rebase,21,8.367
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.289,git/rebase,21,8.367
git/rebase abort after conflicts found no longer has working directory changes,0.295,git/rebase,21,8.367
git/rebase abort after conflicts found returns to the feature branch,0.322,git/rebase,21,8.367
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.362,git/rebase,21,8.367
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.37,git/rebase,21,8.367
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.357,git/rebase,21,8.367
git/rebase continue after resolving conflicts returns success,0.407,git/rebase,21,8.367
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.439,git/rebase,21,8.367
git/rebase continue after resolving conflicts no longer has working directory changes,0.457,git/rebase,21,8.367
git/rebase continue after resolving conflicts returns to the feature branch,0.412,git/rebase,21,8.367
git/rebase continue after resolving conflicts branch is now a different ref,0.422,git/rebase,21,8.367
git/rebase continue with additional changes unrelated to conflicted files returns success,0.421,git/rebase,21,8.367
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.423,git/rebase,21,8.367
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.413,git/rebase,21,8.367
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.367
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.451,git/rebase,21,8.367
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.422,git/rebase,21,8.367
git/rebase can parse progress returns a value indicating conflicts were encountered,0.395,git/rebase,7,3.463
git/rebase can parse progress status detects REBASE_HEAD,0.369,git/rebase,7,3.463
git/rebase can parse progress is a detached HEAD state,0.375,git/rebase,7,3.463
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.741,git/rebase,7,3.463
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.786,git/rebase,7,3.463
git/rebase can parse progress for long rebase is a detached HEAD state,0.74,git/rebase,7,3.463
git/commit createCommit normal commits the given files,0.116,git/commit,21,4.087
git/commit createCommit normal commit does not strip commentary by default,0.095,git/commit,21,4.087
git/commit createCommit normal can commit for empty repository,0.125,git/commit,21,4.087
git/commit createCommit normal can commit renames,0.146,git/commit,21,4.087
git/commit createCommit partials can commit some lines from new file,0.162,git/commit,21,4.087
git/commit createCommit partials can commit second hunk from modified file,0.165,git/commit,21,4.087
git/commit createCommit partials can commit single delete from modified file,0.149,git/commit,21,4.087
git/commit createCommit partials can commit multiple hunks from modified file,0.167,git/commit,21,4.087
git/commit createCommit partials can commit some lines from deleted file,0.162,git/commit,21,4.087
git/commit createCommit partials can commit renames with modifications,0.162,git/commit,21,4.087
git/commit createCommit partials can commit renames with partially selected modifications,0.205,git/commit,21,4.087
git/commit createCommit with a merge conflict creates a merge commit,0.246,git/commit,21,4.087
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.224,git/commit,21,4.087
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.325,git/commit,21,4.087
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.319,git/commit,21,4.087
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.368,git/commit,21,4.087
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.372,git/commit,21,4.087
git/commit createMergeCommit with no changes throws an error,0.074,git/commit,21,4.087
git/commit index corner cases can commit when staged new file is then deleted,0.139,git/commit,21,4.087
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,4.087
git/commit index corner cases file is deleted in index,0.156,git/commit,21,4.087
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.182,git/stash,14,2.733
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.245,git/stash,14,2.733
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.227,git/stash,14,2.733
GitStore loadCommitBatch includes HEAD when loading commits,0.324,GitStore,11,2.41
GitStore can discard changes from a repository,0.206,GitStore,11,2.41
GitStore can discard a renamed file,0.15,GitStore,11,2.41
GitStore undo first commit reports the repository is unborn,0.179,GitStore,11,2.41
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.41
GitStore undo first commit clears the undo commit dialog,0.202,GitStore,11,2.41
GitStore undo first commit has no staged files,0.192,GitStore,11,2.41
GitStore repository with HEAD file can discard modified change cleanly,0.106,GitStore,11,2.41
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.942
git/status getStatus with conflicted repo parses conflicted files without markers,0.275,git/status,12,1.942
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.481,git/status,12,1.942
git/status getStatus with conflicted repo parses resolved files,0.286,git/status,12,1.942
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.159,git/status,12,1.942
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.125,git/status,12,1.942
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.942
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.041,git/status,12,1.942
git/status getStatus with unconflicted repo reflects renames,0.079,git/status,12,1.942
git/status getStatus with unconflicted repo reflects copies,0.078,git/status,12,1.942
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.942
BranchPruner does nothing on non GitHub repositories,0.183,BranchPruner,6,1.392
BranchPruner prunes for GitHub repository,0.248,BranchPruner,6,1.392
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.18,BranchPruner,6,1.392
BranchPruner does not prune if there is no default branch,0.172,BranchPruner,6,1.392
BranchPruner does not prune reserved branches,0.233,BranchPruner,6,1.392
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.042,git/diff,19,1.589
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.039,git/diff,19,1.589
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.589
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.589
git/diff imageDiff changes for images are set,0.147,git/diff,19,1.589
git/diff imageDiff changes for text are not set,0.076,git/diff,19,1.589
git/diff getWorkingDirectoryDiff counts lines for new file,0.077,git/diff,19,1.589
git/diff getWorkingDirectoryDiff counts lines for modified file,0.068,git/diff,19,1.589
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.589
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.097,git/diff,19,1.589
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.128,git/diff,19,1.589
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.128,git/diff,19,1.589
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.589
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.105,git/diff,19,1.589
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.589
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.589
git/diff getBinaryPaths in repo with text only files returns an empty array,0.068,git/diff,19,1.589
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.589
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.095,git/diff,19,1.589
git/reflog getRecentBranches returns the recently checked out branches,0.13,git/reflog,6,0.953
git/reflog getRecentBranches works after renaming a branch,0.179,git/reflog,6,0.953
git/reflog getRecentBranches returns a limited number of branches,0.229,git/reflog,6,0.953
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.136,git/reflog,6,0.953
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.177,git/reflog,6,0.953
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.953
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.29,formatPatch,5,0.933
git/checkout can checkout a valid branch name in an existing repository,0.108,git/checkout,6,0.846
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.846
git/checkout will fail when an existing branch matches the remote branch,0.103,git/checkout,6,0.846
git/checkout with submodules cleans up an submodule that no longer exists,0.244,git/checkout,6,0.846
git/checkout with submodules updates a changed submodule reference,0.211,git/checkout,6,0.846
git/submodule listSubmodules returns the submodule entry,0.1,git/submodule,3,0.585
git/submodule listSubmodules returns the expected tag,0.142,git/submodule,3,0.585
git/submodule resetSubmodulePaths update submodule to original commit,0.299,git/submodule,3,0.585
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.102,gitignore,9,0.623
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.102,gitignore,9,0.623
gitignore saveGitIgnore applies rule correctly to repository,0.089,gitignore,9,0.623
gitignore appendIgnoreRule appends one rule,0.104,gitignore,9,0.623
gitignore appendIgnoreRule appends multiple rules,0.102,gitignore,9,0.623
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.594
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,10,0.594
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.594
git/branch tip returns current branch when on a valid HEAD,0.074,git/branch,10,0.594
git/branch tip returns non-origin remote,0.074,git/branch,10,0.594
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,10,0.594
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.594
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.594
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.594
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.594
git/rev-parse isGitRepository should return true for a repository,0.042,git/rev-parse,10,0.631
git/rev-parse isGitRepository should return false for a directory,0.044,git/rev-parse,10,0.631
git/rev-parse isBareRepository returns false for default initialized repository,0.049,git/rev-parse,10,0.631
git/rev-parse isBareRepository returns true for initialized bare repository,0.058,git/rev-parse,10,0.631
git/rev-parse isBareRepository returns false for empty directory,0.045,git/rev-parse,10,0.631
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.631
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.055,git/rev-parse,10,0.631
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.631
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.631
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.178,git/rev-parse,10,0.631
git/merge merge and is successful returns true,0.037,git/merge,7,0.562
git/merge merge and is a noop returns false,0.052,git/merge,7,0.562
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.562
git/log getCommits loads history,0.055,git/log,7,0.506
git/log getCommits handles repository with HEAD file on disk,0.075,git/log,7,0.506
git/log getCommits handles repository with signed commit and log.showSignature set,0.088,git/log,7,0.506
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.506
git/log getChangedFiles detects renames,0.076,git/log,7,0.506
git/log getChangedFiles detect copies,0.079,git/log,7,0.506
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.506
git/reset reset can hard reset a repository,0.062,git/reset,2,0.105
git-lfs isUsingLFS returns false for repository not using LFS,0.047,git-lfs,9,0.536
git-lfs isUsingLFS returns true if LFS is tracking a path,0.07,git-lfs,9,0.536
git/remote getRemotes should return both remotes,0.049,git/remote,9,0.429
git/remote findDefaultRemote returns origin when multiple remotes found,0.057,git/remote,9,0.429
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.429
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.303
git/config config looks up config values,0.042,git/config,4,0.283
git/config config returns null for undefined values,0.044,git/config,4,0.283
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.283
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,4,0.283
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.218
git/core error handling throws for errors that were not expected,0.041,git/core,4,0.218
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.218
git/core exit code handling throws for exit codes that were not expected,0.047,git/core,4,0.218
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.207
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.207
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.207
AppStore can select a repository,0.138,AppStore,5,0.191
validatedRepositoryPath returns the path to the repository,0.404,validatedRepositoryPath,2,0.46
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.046
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.374,git/rebase,21,8.464
git/rebase detect conflicts status detects REBASE_HEAD,0.297,git/rebase,21,8.464
git/rebase detect conflicts has conflicted files in working directory,0.269,git/rebase,21,8.464
git/rebase detect conflicts is a detached HEAD state,0.288,git/rebase,21,8.464
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.293,git/rebase,21,8.464
git/rebase abort after conflicts found no longer has working directory changes,0.299,git/rebase,21,8.464
git/rebase abort after conflicts found returns to the feature branch,0.303,git/rebase,21,8.464
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.374,git/rebase,21,8.464
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.388,git/rebase,21,8.464
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.357,git/rebase,21,8.464
git/rebase continue after resolving conflicts returns success,0.426,git/rebase,21,8.464
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.421,git/rebase,21,8.464
git/rebase continue after resolving conflicts no longer has working directory changes,0.444,git/rebase,21,8.464
git/rebase continue after resolving conflicts returns to the feature branch,0.429,git/rebase,21,8.464
git/rebase continue after resolving conflicts branch is now a different ref,0.455,git/rebase,21,8.464
git/rebase continue with additional changes unrelated to conflicted files returns success,0.416,git/rebase,21,8.464
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.425,git/rebase,21,8.464
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.432,git/rebase,21,8.464
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.459,git/rebase,21,8.464
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.465,git/rebase,21,8.464
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.411,git/rebase,21,8.464
git/commit createCommit normal commits the given files,0.111,git/commit,21,3.832
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.832
git/commit createCommit normal can commit for empty repository,0.117,git/commit,21,3.832
git/commit createCommit normal can commit renames,0.135,git/commit,21,3.832
git/commit createCommit partials can commit some lines from new file,0.15,git/commit,21,3.832
git/commit createCommit partials can commit second hunk from modified file,0.154,git/commit,21,3.832
git/commit createCommit partials can commit single delete from modified file,0.14,git/commit,21,3.832
git/commit createCommit partials can commit multiple hunks from modified file,0.156,git/commit,21,3.832
git/commit createCommit partials can commit some lines from deleted file,0.15,git/commit,21,3.832
git/commit createCommit partials can commit renames with modifications,0.152,git/commit,21,3.832
git/commit createCommit partials can commit renames with partially selected modifications,0.194,git/commit,21,3.832
git/commit createCommit with a merge conflict creates a merge commit,0.226,git/commit,21,3.832
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.202,git/commit,21,3.832
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.298,git/commit,21,3.832
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.286,git/commit,21,3.832
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.345,git/commit,21,3.832
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.349,git/commit,21,3.832
git/commit createMergeCommit with no changes throws an error,0.084,git/commit,21,3.832
git/commit index corner cases can commit when staged new file is then deleted,0.135,git/commit,21,3.832
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.149,git/commit,21,3.832
git/commit index corner cases file is deleted in index,0.151,git/commit,21,3.832
git/rebase can parse progress returns a value indicating conflicts were encountered,0.42,git/rebase,7,3.777
git/rebase can parse progress status detects REBASE_HEAD,0.429,git/rebase,7,3.777
git/rebase can parse progress is a detached HEAD state,0.418,git/rebase,7,3.777
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.801,git/rebase,7,3.777
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.832,git/rebase,7,3.777
git/rebase can parse progress for long rebase is a detached HEAD state,0.829,git/rebase,7,3.777
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.166,git/stash,14,2.516
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.231,git/stash,14,2.516
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.205,git/stash,14,2.516
GitStore loadCommitBatch includes HEAD when loading commits,0.344,GitStore,11,2.408
GitStore can discard changes from a repository,0.177,GitStore,11,2.408
GitStore can discard a renamed file,0.147,GitStore,11,2.408
GitStore undo first commit reports the repository is unborn,0.188,GitStore,11,2.408
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.408
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.408
GitStore undo first commit has no staged files,0.192,GitStore,11,2.408
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.408
git/status getStatus with conflicted repo parses conflicted files with markers,0.281,git/status,12,1.891
git/status getStatus with conflicted repo parses conflicted files without markers,0.294,git/status,12,1.891
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.532,git/status,12,1.891
git/status getStatus with conflicted repo parses resolved files,0.25,git/status,12,1.891
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.093,git/status,12,1.891
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.106,git/status,12,1.891
git/status getStatus with unconflicted repo parses changed files,0.044,git/status,12,1.891
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.051,git/status,12,1.891
git/status getStatus with unconflicted repo reflects renames,0.076,git/status,12,1.891
git/status getStatus with unconflicted repo reflects copies,0.076,git/status,12,1.891
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.039,git/status,12,1.891
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.512
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.512
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.512
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.512
git/diff imageDiff changes for images are set,0.073,git/diff,19,1.512
git/diff imageDiff changes for text are not set,0.148,git/diff,19,1.512
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.512
git/diff getWorkingDirectoryDiff counts lines for modified file,0.067,git/diff,19,1.512
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.512
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.086,git/diff,19,1.512
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.116,git/diff,19,1.512
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.126,git/diff,19,1.512
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.104,git/diff,19,1.512
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.103,git/diff,19,1.512
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.512
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.512
git/diff getBinaryPaths in repo with text only files returns an empty array,0.066,git/diff,19,1.512
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.072,git/diff,19,1.512
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.087,git/diff,19,1.512
BranchPruner does nothing on non GitHub repositories,0.186,BranchPruner,6,1.474
BranchPruner prunes for GitHub repository,0.257,BranchPruner,6,1.474
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.193,BranchPruner,6,1.474
BranchPruner does not prune if there is no default branch,0.192,BranchPruner,6,1.474
BranchPruner does not prune reserved branches,0.253,BranchPruner,6,1.474
git/reflog getRecentBranches returns the recently checked out branches,0.123,git/reflog,6,0.895
git/reflog getRecentBranches works after renaming a branch,0.164,git/reflog,6,0.895
git/reflog getRecentBranches returns a limited number of branches,0.226,git/reflog,6,0.895
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.128,git/reflog,6,0.895
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.155,git/reflog,6,0.895
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.052,git/reflog,6,0.895
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.256,formatPatch,5,0.88
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.842
git/checkout can checkout a branch when it exists on multiple remotes,0.114,git/checkout,6,0.842
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.842
git/checkout with submodules cleans up an submodule that no longer exists,0.253,git/checkout,6,0.842
git/checkout with submodules updates a changed submodule reference,0.205,git/checkout,6,0.842
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.61
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for default initialized repository,0.051,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns true for initialized bare repository,0.052,git/rev-parse,10,0.61
git/rev-parse isBareRepository returns false for empty directory,0.04,git/rev-parse,10,0.61
git/rev-parse isBareRepository throws error for missing directory,0.039,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.045,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.047,git/rev-parse,10,0.61
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.17,git/rev-parse,10,0.61
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.098,gitignore,9,0.668
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.103,gitignore,9,0.668
gitignore saveGitIgnore applies rule correctly to repository,0.1,gitignore,9,0.668
gitignore appendIgnoreRule appends one rule,0.114,gitignore,9,0.668
gitignore appendIgnoreRule appends multiple rules,0.12,gitignore,9,0.668
git/branch tip returns unborn for new repository,0.034,git/branch,10,0.592
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,10,0.592
git/branch tip returns detached for arbitrary checkout,0.043,git/branch,10,0.592
git/branch tip returns current branch when on a valid HEAD,0.066,git/branch,10,0.592
git/branch tip returns non-origin remote,0.073,git/branch,10,0.592
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.592
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.592
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.076,git/branch,10,0.592
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.629
git/submodule listSubmodules returns the expected tag,0.145,git/submodule,3,0.629
git/submodule resetSubmodulePaths update submodule to original commit,0.342,git/submodule,3,0.629
git/merge merge and is successful returns true,0.036,git/merge,7,0.551
git/merge merge and is a noop returns false,0.046,git/merge,7,0.551
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.551
git-lfs isUsingLFS returns false for repository not using LFS,0.045,git-lfs,9,0.503
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.503
git/log getCommits loads history,0.062,git/log,7,0.528
git/log getCommits handles repository with HEAD file on disk,0.079,git/log,7,0.528
git/log getCommits handles repository with signed commit and log.showSignature set,0.093,git/log,7,0.528
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.528
git/log getChangedFiles detects renames,0.087,git/log,7,0.528
git/log getChangedFiles detect copies,0.081,git/log,7,0.528
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.528
validatedRepositoryPath returns the path to the repository,0.035,validatedRepositoryPath,2,0.09
git/remote getRemotes should return both remotes,0.04,git/remote,9,0.422
git/remote findDefaultRemote returns origin when multiple remotes found,0.053,git/remote,9,0.422
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.422
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.294
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.294
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.294
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.039,patch formatting,8,0.294
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.294
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.294
patch formatting formatPatchesForModifiedFile includes empty context lines,0.02,patch formatting,8,0.294
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.294
git/config config looks up config values,0.042,git/config,4,0.283
git/config config returns null for undefined values,0.044,git/config,4,0.283
git/config global config getGlobalConfigPath gets the config path,0.061,git/config,4,0.283
git/config global config setGlobalConfigValue will replace all entries for a global value,0.096,git/config,4,0.283
git/core error handling does not throw for errors that were expected,0.046,git/core,4,0.227
git/core error handling throws for errors that were not expected,0.049,git/core,4,0.227
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.227
git/core exit code handling throws for exit codes that were not expected,0.047,git/core,4,0.227
git/for-each-ref getBranches fetches branches using for-each-ref,0.064,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for empty repo,0.065,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.203
AppStore can select a repository,0.134,AppStore,5,0.183
git/reset reset can hard reset a repository,0.437,git/reset,2,0.48
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.019,git/git-attributes,1,0.046
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.369,git/rebase,21,8.436
git/rebase detect conflicts status detects REBASE_HEAD,0.292,git/rebase,21,8.436
git/rebase detect conflicts has conflicted files in working directory,0.273,git/rebase,21,8.436
git/rebase detect conflicts is a detached HEAD state,0.296,git/rebase,21,8.436
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.302,git/rebase,21,8.436
git/rebase abort after conflicts found no longer has working directory changes,0.292,git/rebase,21,8.436
git/rebase abort after conflicts found returns to the feature branch,0.305,git/rebase,21,8.436
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.37,git/rebase,21,8.436
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.376,git/rebase,21,8.436
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.362,git/rebase,21,8.436
git/rebase continue after resolving conflicts returns success,0.429,git/rebase,21,8.436
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.414,git/rebase,21,8.436
git/rebase continue after resolving conflicts no longer has working directory changes,0.433,git/rebase,21,8.436
git/rebase continue after resolving conflicts returns to the feature branch,0.408,git/rebase,21,8.436
git/rebase continue after resolving conflicts branch is now a different ref,0.458,git/rebase,21,8.436
git/rebase continue with additional changes unrelated to conflicted files returns success,0.422,git/rebase,21,8.436
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.436,git/rebase,21,8.436
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.449,git/rebase,21,8.436
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.443,git/rebase,21,8.436
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.463,git/rebase,21,8.436
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.396,git/rebase,21,8.436
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.88
git/commit createCommit normal commit does not strip commentary by default,0.092,git/commit,21,3.88
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.88
git/commit createCommit normal can commit renames,0.142,git/commit,21,3.88
git/commit createCommit partials can commit some lines from new file,0.152,git/commit,21,3.88
git/commit createCommit partials can commit second hunk from modified file,0.159,git/commit,21,3.88
git/commit createCommit partials can commit single delete from modified file,0.144,git/commit,21,3.88
git/commit createCommit partials can commit multiple hunks from modified file,0.163,git/commit,21,3.88
git/commit createCommit partials can commit some lines from deleted file,0.159,git/commit,21,3.88
git/commit createCommit partials can commit renames with modifications,0.153,git/commit,21,3.88
git/commit createCommit partials can commit renames with partially selected modifications,0.201,git/commit,21,3.88
git/commit createCommit with a merge conflict creates a merge commit,0.227,git/commit,21,3.88
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.211,git/commit,21,3.88
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.297,git/commit,21,3.88
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.28,git/commit,21,3.88
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.346,git/commit,21,3.88
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.351,git/commit,21,3.88
git/commit createMergeCommit with no changes throws an error,0.075,git/commit,21,3.88
git/commit index corner cases can commit when staged new file is then deleted,0.133,git/commit,21,3.88
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.153,git/commit,21,3.88
git/commit index corner cases file is deleted in index,0.15,git/commit,21,3.88
git/rebase can parse progress returns a value indicating conflicts were encountered,0.434,git/rebase,7,3.948
git/rebase can parse progress status detects REBASE_HEAD,0.453,git/rebase,7,3.948
git/rebase can parse progress is a detached HEAD state,0.454,git/rebase,7,3.948
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.857,git/rebase,7,3.948
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.864,git/rebase,7,3.948
git/rebase can parse progress for long rebase is a detached HEAD state,0.838,git/rebase,7,3.948
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.174,git/stash,14,2.513
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.237,git/stash,14,2.513
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.213,git/stash,14,2.513
GitStore loadCommitBatch includes HEAD when loading commits,0.321,GitStore,11,2.404
GitStore can discard changes from a repository,0.176,GitStore,11,2.404
GitStore can discard a renamed file,0.145,GitStore,11,2.404
GitStore undo first commit reports the repository is unborn,0.18,GitStore,11,2.404
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.404
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.404
GitStore undo first commit has no staged files,0.195,GitStore,11,2.404
GitStore repository with HEAD file can discard modified change cleanly,0.106,GitStore,11,2.404
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.958
git/status getStatus with conflicted repo parses conflicted files without markers,0.286,git/status,12,1.958
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.506,git/status,12,1.958
git/status getStatus with conflicted repo parses resolved files,0.285,git/status,12,1.958
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.113,git/status,12,1.958
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.121,git/status,12,1.958
git/status getStatus with unconflicted repo parses changed files,0.05,git/status,12,1.958
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.958
git/status getStatus with unconflicted repo reflects renames,0.091,git/status,12,1.958
git/status getStatus with unconflicted repo reflects copies,0.089,git/status,12,1.958
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.958
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.11,git/diff,19,1.521
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.065,git/diff,19,1.521
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.521
git/diff getBlobImage retrieves valid images for deleted file,0.052,git/diff,19,1.521
git/diff imageDiff changes for images are set,0.077,git/diff,19,1.521
git/diff imageDiff changes for text are not set,0.064,git/diff,19,1.521
git/diff getWorkingDirectoryDiff counts lines for new file,0.083,git/diff,19,1.521
git/diff getWorkingDirectoryDiff counts lines for modified file,0.058,git/diff,19,1.521
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.521
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.082,git/diff,19,1.521
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.115,git/diff,19,1.521
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.12,git/diff,19,1.521
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.098,git/diff,19,1.521
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.099,git/diff,19,1.521
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.066,git/diff,19,1.521
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.048,git/diff,19,1.521
git/diff getBinaryPaths in repo with text only files returns an empty array,0.066,git/diff,19,1.521
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.081,git/diff,19,1.521
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.521
BranchPruner does nothing on non GitHub repositories,0.271,BranchPruner,6,1.496
BranchPruner prunes for GitHub repository,0.239,BranchPruner,6,1.496
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.179,BranchPruner,6,1.496
BranchPruner does not prune if there is no default branch,0.197,BranchPruner,6,1.496
BranchPruner does not prune reserved branches,0.226,BranchPruner,6,1.496
git/reflog getRecentBranches returns the recently checked out branches,0.123,git/reflog,6,0.868
git/reflog getRecentBranches works after renaming a branch,0.161,git/reflog,6,0.868
git/reflog getRecentBranches returns a limited number of branches,0.208,git/reflog,6,0.868
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.122,git/reflog,6,0.868
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.155,git/reflog,6,0.868
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.05,git/reflog,6,0.868
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.246,formatPatch,5,0.854
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.828
git/checkout can checkout a branch when it exists on multiple remotes,0.104,git/checkout,6,0.828
git/checkout will fail when an existing branch matches the remote branch,0.1,git/checkout,6,0.828
git/checkout with submodules cleans up an submodule that no longer exists,0.244,git/checkout,6,0.828
git/checkout with submodules updates a changed submodule reference,0.2,git/checkout,6,0.828
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.093,gitignore,9,0.603
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.09,gitignore,9,0.603
gitignore saveGitIgnore applies rule correctly to repository,0.086,gitignore,9,0.603
gitignore appendIgnoreRule appends one rule,0.106,gitignore,9,0.603
gitignore appendIgnoreRule appends multiple rules,0.104,gitignore,9,0.603
git/submodule listSubmodules returns the submodule entry,0.1,git/submodule,3,0.597
git/submodule listSubmodules returns the expected tag,0.156,git/submodule,3,0.597
git/submodule resetSubmodulePaths update submodule to original commit,0.299,git/submodule,3,0.597
git/rev-parse isGitRepository should return true for a repository,0.049,git/rev-parse,10,0.632
git/rev-parse isGitRepository should return false for a directory,0.043,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns true for initialized bare repository,0.053,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.632
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.039,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.19,git/rev-parse,10,0.632
git/branch tip returns unborn for new repository,0.12,git/branch,10,0.727
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.727
git/branch tip returns detached for arbitrary checkout,0.056,git/branch,10,0.727
git/branch tip returns current branch when on a valid HEAD,0.079,git/branch,10,0.727
git/branch tip returns non-origin remote,0.077,git/branch,10,0.727
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.086,git/branch,10,0.727
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.727
git/branch getBranchesPointedAt in a local repo finds no branch names,0.045,git/branch,10,0.727
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.044,git/branch,10,0.727
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.079,git/branch,10,0.727
git/merge merge and is successful returns true,0.042,git/merge,7,0.572
git/merge merge and is a noop returns false,0.051,git/merge,7,0.572
git/merge getMergeBase returns the common ancestor of two branches,0.066,git/merge,7,0.572
git/log getCommits loads history,0.056,git/log,7,0.503
git/log getCommits handles repository with HEAD file on disk,0.082,git/log,7,0.503
git/log getCommits handles repository with signed commit and log.showSignature set,0.087,git/log,7,0.503
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.503
git/log getChangedFiles detects renames,0.075,git/log,7,0.503
git/log getChangedFiles detect copies,0.08,git/log,7,0.503
git/log getChangedFiles handles commit when HEAD exists on disk,0.038,git/log,7,0.503
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.497
git-lfs isUsingLFS returns true if LFS is tracking a path,0.062,git-lfs,9,0.497
git/reset reset can hard reset a repository,0.063,git/reset,2,0.107
git/remote getRemotes should return both remotes,0.044,git/remote,9,0.401
git/remote findDefaultRemote returns origin when multiple remotes found,0.05,git/remote,9,0.401
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.401
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.046,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.031,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.31
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.31
git/config config looks up config values,0.043,git/config,4,0.264
git/config config returns null for undefined values,0.042,git/config,4,0.264
git/config global config getGlobalConfigPath gets the config path,0.052,git/config,4,0.264
git/config global config setGlobalConfigValue will replace all entries for a global value,0.083,git/config,4,0.264
git/core error handling does not throw for errors that were expected,0.039,git/core,4,0.212
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.212
git/core exit code handling does not throw for exit codes that were expected,0.041,git/core,4,0.212
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.212
git/for-each-ref getBranches fetches branches using for-each-ref,0.058,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for empty repo,0.062,git/for-each-ref,3,0.202
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.202
AppStore can select a repository,0.128,AppStore,5,0.181
validatedRepositoryPath returns the path to the repository,0.375,validatedRepositoryPath,2,0.43
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.044
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.373,git/rebase,21,8.577
git/rebase detect conflicts status detects REBASE_HEAD,0.297,git/rebase,21,8.577
git/rebase detect conflicts has conflicted files in working directory,0.274,git/rebase,21,8.577
git/rebase detect conflicts is a detached HEAD state,0.29,git/rebase,21,8.577
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.315,git/rebase,21,8.577
git/rebase abort after conflicts found no longer has working directory changes,0.381,git/rebase,21,8.577
git/rebase abort after conflicts found returns to the feature branch,0.333,git/rebase,21,8.577
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.374,git/rebase,21,8.577
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.38,git/rebase,21,8.577
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.373,git/rebase,21,8.577
git/rebase continue after resolving conflicts returns success,0.446,git/rebase,21,8.577
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.413,git/rebase,21,8.577
git/rebase continue after resolving conflicts no longer has working directory changes,0.421,git/rebase,21,8.577
git/rebase continue after resolving conflicts returns to the feature branch,0.422,git/rebase,21,8.577
git/rebase continue after resolving conflicts branch is now a different ref,0.444,git/rebase,21,8.577
git/rebase continue with additional changes unrelated to conflicted files returns success,0.415,git/rebase,21,8.577
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.442,git/rebase,21,8.577
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.439,git/rebase,21,8.577
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.437,git/rebase,21,8.577
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.439,git/rebase,21,8.577
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.4,git/rebase,21,8.577
git/rebase can parse progress returns a value indicating conflicts were encountered,0.382,git/rebase,7,3.529
git/rebase can parse progress status detects REBASE_HEAD,0.378,git/rebase,7,3.529
git/rebase can parse progress is a detached HEAD state,0.377,git/rebase,7,3.529
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.801,git/rebase,7,3.529
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.76,git/rebase,7,3.529
git/rebase can parse progress for long rebase is a detached HEAD state,0.776,git/rebase,7,3.529
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.146
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.146
git/commit createCommit normal can commit for empty repository,0.127,git/commit,21,4.146
git/commit createCommit normal can commit renames,0.149,git/commit,21,4.146
git/commit createCommit partials can commit some lines from new file,0.155,git/commit,21,4.146
git/commit createCommit partials can commit second hunk from modified file,0.169,git/commit,21,4.146
git/commit createCommit partials can commit single delete from modified file,0.144,git/commit,21,4.146
git/commit createCommit partials can commit multiple hunks from modified file,0.163,git/commit,21,4.146
git/commit createCommit partials can commit some lines from deleted file,0.158,git/commit,21,4.146
git/commit createCommit partials can commit renames with modifications,0.169,git/commit,21,4.146
git/commit createCommit partials can commit renames with partially selected modifications,0.202,git/commit,21,4.146
git/commit createCommit with a merge conflict creates a merge commit,0.247,git/commit,21,4.146
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.222,git/commit,21,4.146
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.33,git/commit,21,4.146
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.31,git/commit,21,4.146
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.376,git/commit,21,4.146
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.383,git/commit,21,4.146
git/commit createMergeCommit with no changes throws an error,0.087,git/commit,21,4.146
git/commit index corner cases can commit when staged new file is then deleted,0.147,git/commit,21,4.146
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.168,git/commit,21,4.146
git/commit index corner cases file is deleted in index,0.167,git/commit,21,4.146
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.162,git/stash,14,2.643
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.252,git/stash,14,2.643
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.643
GitStore loadCommitBatch includes HEAD when loading commits,0.373,GitStore,11,2.465
GitStore can discard changes from a repository,0.181,GitStore,11,2.465
GitStore can discard a renamed file,0.154,GitStore,11,2.465
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.465
GitStore undo first commit pre-fills the commit message,0.122,GitStore,11,2.465
GitStore undo first commit clears the undo commit dialog,0.212,GitStore,11,2.465
GitStore undo first commit has no staged files,0.217,GitStore,11,2.465
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.465
git/status getStatus with conflicted repo parses conflicted files with markers,0.291,git/status,12,1.965
git/status getStatus with conflicted repo parses conflicted files without markers,0.305,git/status,12,1.965
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.549,git/status,12,1.965
git/status getStatus with conflicted repo parses resolved files,0.266,git/status,12,1.965
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.092,git/status,12,1.965
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.11,git/status,12,1.965
git/status getStatus with unconflicted repo parses changed files,0.046,git/status,12,1.965
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.045,git/status,12,1.965
git/status getStatus with unconflicted repo reflects renames,0.084,git/status,12,1.965
git/status getStatus with unconflicted repo reflects copies,0.086,git/status,12,1.965
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.965
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.032,git/diff,19,1.608
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.049,git/diff,19,1.608
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.608
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.608
git/diff imageDiff changes for images are set,0.07,git/diff,19,1.608
git/diff imageDiff changes for text are not set,0.063,git/diff,19,1.608
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.608
git/diff getWorkingDirectoryDiff counts lines for modified file,0.147,git/diff,19,1.608
git/diff getWorkingDirectoryDiff counts lines for staged file,0.074,git/diff,19,1.608
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.104,git/diff,19,1.608
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.126,git/diff,19,1.608
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.156,git/diff,19,1.608
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.106,git/diff,19,1.608
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.108,git/diff,19,1.608
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.608
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.608
git/diff getBinaryPaths in repo with text only files returns an empty array,0.07,git/diff,19,1.608
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.08,git/diff,19,1.608
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.092,git/diff,19,1.608
BranchPruner does nothing on non GitHub repositories,0.188,BranchPruner,6,1.447
BranchPruner prunes for GitHub repository,0.241,BranchPruner,6,1.447
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.19,BranchPruner,6,1.447
BranchPruner does not prune if there is no default branch,0.191,BranchPruner,6,1.447
BranchPruner does not prune reserved branches,0.237,BranchPruner,6,1.447
git/reflog getRecentBranches returns the recently checked out branches,0.125,git/reflog,6,0.882
git/reflog getRecentBranches works after renaming a branch,0.155,git/reflog,6,0.882
git/reflog getRecentBranches returns a limited number of branches,0.217,git/reflog,6,0.882
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.125,git/reflog,6,0.882
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.157,git/reflog,6,0.882
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.058,git/reflog,6,0.882
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.263,formatPatch,5,0.872
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.869
git/checkout can checkout a branch when it exists on multiple remotes,0.105,git/checkout,6,0.869
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.869
git/checkout with submodules cleans up an submodule that no longer exists,0.269,git/checkout,6,0.869
git/checkout with submodules updates a changed submodule reference,0.218,git/checkout,6,0.869
git/branch tip returns unborn for new repository,0.027,git/branch,10,0.583
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,10,0.583
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.583
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.583
git/branch tip returns non-origin remote,0.074,git/branch,10,0.583
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.072,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo finds no branch names,0.041,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.039,git/branch,10,0.583
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.583
git/rev-parse isGitRepository should return true for a repository,0.046,git/rev-parse,10,0.609
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns true for initialized bare repository,0.054,git/rev-parse,10,0.609
git/rev-parse isBareRepository returns false for empty directory,0.039,git/rev-parse,10,0.609
git/rev-parse isBareRepository throws error for missing directory,0.038,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.054,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.04,git/rev-parse,10,0.609
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.174,git/rev-parse,10,0.609
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.106,gitignore,9,0.686
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.108,gitignore,9,0.686
gitignore saveGitIgnore applies rule correctly to repository,0.101,gitignore,9,0.686
gitignore appendIgnoreRule appends one rule,0.119,gitignore,9,0.686
gitignore appendIgnoreRule appends multiple rules,0.117,gitignore,9,0.686
git/submodule listSubmodules returns the submodule entry,0.102,git/submodule,3,0.626
git/submodule listSubmodules returns the expected tag,0.144,git/submodule,3,0.626
git/submodule resetSubmodulePaths update submodule to original commit,0.337,git/submodule,3,0.626
git/merge merge and is successful returns true,0.04,git/merge,7,0.571
git/merge merge and is a noop returns false,0.051,git/merge,7,0.571
git/merge getMergeBase returns the common ancestor of two branches,0.069,git/merge,7,0.571
git/log getCommits loads history,0.057,git/log,7,0.516
git/log getCommits handles repository with HEAD file on disk,0.079,git/log,7,0.516
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.516
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.516
git/log getChangedFiles detects renames,0.076,git/log,7,0.516
git/log getChangedFiles detect copies,0.082,git/log,7,0.516
git/log getChangedFiles handles commit when HEAD exists on disk,0.041,git/log,7,0.516
git-lfs isUsingLFS returns false for repository not using LFS,0.043,git-lfs,9,0.515
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.515
validatedRepositoryPath returns the path to the repository,0.044,validatedRepositoryPath,2,0.098
git/remote getRemotes should return both remotes,0.047,git/remote,9,0.43
git/remote findDefaultRemote returns origin when multiple remotes found,0.055,git/remote,9,0.43
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.43
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.037,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.038,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.043,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.301
git/config config looks up config values,0.046,git/config,4,0.284
git/config config returns null for undefined values,0.045,git/config,4,0.284
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.284
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,4,0.284
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.214
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.214
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.214
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.214
git/for-each-ref getBranches fetches branches using for-each-ref,0.061,git/for-each-ref,3,0.194
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.194
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.044,git/for-each-ref,3,0.194
AppStore can select a repository,0.137,AppStore,5,0.191
git/reset reset can hard reset a repository,0.424,git/reset,2,0.466
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.366,git/rebase,21,8.592
git/rebase detect conflicts status detects REBASE_HEAD,0.278,git/rebase,21,8.592
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,8.592
git/rebase detect conflicts is a detached HEAD state,0.293,git/rebase,21,8.592
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.302,git/rebase,21,8.592
git/rebase abort after conflicts found no longer has working directory changes,0.314,git/rebase,21,8.592
git/rebase abort after conflicts found returns to the feature branch,0.325,git/rebase,21,8.592
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.386,git/rebase,21,8.592
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.394,git/rebase,21,8.592
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.372,git/rebase,21,8.592
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.592
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.424,git/rebase,21,8.592
git/rebase continue after resolving conflicts no longer has working directory changes,0.448,git/rebase,21,8.592
git/rebase continue after resolving conflicts returns to the feature branch,0.419,git/rebase,21,8.592
git/rebase continue after resolving conflicts branch is now a different ref,0.502,git/rebase,21,8.592
git/rebase continue with additional changes unrelated to conflicted files returns success,0.43,git/rebase,21,8.592
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.448,git/rebase,21,8.592
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.422,git/rebase,21,8.592
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.45,git/rebase,21,8.592
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.449,git/rebase,21,8.592
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.413,git/rebase,21,8.592
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.787
git/commit createCommit normal commit does not strip commentary by default,0.089,git/commit,21,3.787
git/commit createCommit normal can commit for empty repository,0.116,git/commit,21,3.787
git/commit createCommit normal can commit renames,0.137,git/commit,21,3.787
git/commit createCommit partials can commit some lines from new file,0.139,git/commit,21,3.787
git/commit createCommit partials can commit second hunk from modified file,0.147,git/commit,21,3.787
git/commit createCommit partials can commit single delete from modified file,0.139,git/commit,21,3.787
git/commit createCommit partials can commit multiple hunks from modified file,0.152,git/commit,21,3.787
git/commit createCommit partials can commit some lines from deleted file,0.143,git/commit,21,3.787
git/commit createCommit partials can commit renames with modifications,0.149,git/commit,21,3.787
git/commit createCommit partials can commit renames with partially selected modifications,0.183,git/commit,21,3.787
git/commit createCommit with a merge conflict creates a merge commit,0.217,git/commit,21,3.787
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.213,git/commit,21,3.787
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.286,git/commit,21,3.787
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.29,git/commit,21,3.787
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.345,git/commit,21,3.787
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.357,git/commit,21,3.787
git/commit createMergeCommit with no changes throws an error,0.08,git/commit,21,3.787
git/commit index corner cases can commit when staged new file is then deleted,0.131,git/commit,21,3.787
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.151,git/commit,21,3.787
git/commit index corner cases file is deleted in index,0.155,git/commit,21,3.787
git/rebase can parse progress returns a value indicating conflicts were encountered,0.432,git/rebase,7,3.888
git/rebase can parse progress status detects REBASE_HEAD,0.428,git/rebase,7,3.888
git/rebase can parse progress is a detached HEAD state,0.422,git/rebase,7,3.888
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.813,git/rebase,7,3.888
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.836,git/rebase,7,3.888
git/rebase can parse progress for long rebase is a detached HEAD state,0.906,git/rebase,7,3.888
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.176,git/stash,14,2.708
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.265,git/stash,14,2.708
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.708
GitStore loadCommitBatch includes HEAD when loading commits,0.327,GitStore,11,2.383
GitStore can discard changes from a repository,0.208,GitStore,11,2.383
GitStore can discard a renamed file,0.155,GitStore,11,2.383
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.383
GitStore undo first commit pre-fills the commit message,0.118,GitStore,11,2.383
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.383
GitStore undo first commit has no staged files,0.195,GitStore,11,2.383
GitStore repository with HEAD file can discard modified change cleanly,0.107,GitStore,11,2.383
git/status getStatus with conflicted repo parses conflicted files with markers,0.274,git/status,12,2.034
git/status getStatus with conflicted repo parses conflicted files without markers,0.284,git/status,12,2.034
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.504,git/status,12,2.034
git/status getStatus with conflicted repo parses resolved files,0.323,git/status,12,2.034
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.102,git/status,12,2.034
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.125,git/status,12,2.034
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,2.034
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.042,git/status,12,2.034
git/status getStatus with unconflicted repo reflects renames,0.09,git/status,12,2.034
git/status getStatus with unconflicted repo reflects copies,0.137,git/status,12,2.034
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.055,git/status,12,2.034
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.535
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.535
git/diff getBlobImage retrieves valid image for modified file,0.101,git/diff,19,1.535
git/diff getBlobImage retrieves valid images for deleted file,0.063,git/diff,19,1.535
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.535
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for new file,0.066,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.535
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.096,git/diff,19,1.535
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.125,git/diff,19,1.535
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.125,git/diff,19,1.535
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.535
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.535
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.074,git/diff,19,1.535
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.535
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.535
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.085,git/diff,19,1.535
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.087,git/diff,19,1.535
BranchPruner does nothing on non GitHub repositories,0.196,BranchPruner,6,1.472
BranchPruner prunes for GitHub repository,0.25,BranchPruner,6,1.472
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.195,BranchPruner,6,1.472
BranchPruner does not prune if there is no default branch,0.199,BranchPruner,6,1.472
BranchPruner does not prune reserved branches,0.232,BranchPruner,6,1.472
git/reflog getRecentBranches returns the recently checked out branches,0.127,git/reflog,6,0.901
git/reflog getRecentBranches works after renaming a branch,0.162,git/reflog,6,0.901
git/reflog getRecentBranches returns a limited number of branches,0.221,git/reflog,6,0.901
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.128,git/reflog,6,0.901
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.166,git/reflog,6,0.901
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.051,git/reflog,6,0.901
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.241,formatPatch,5,0.895
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.825
git/checkout can checkout a branch when it exists on multiple remotes,0.109,git/checkout,6,0.825
git/checkout will fail when an existing branch matches the remote branch,0.108,git/checkout,6,0.825
git/checkout with submodules cleans up an submodule that no longer exists,0.234,git/checkout,6,0.825
git/checkout with submodules updates a changed submodule reference,0.192,git/checkout,6,0.825
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.103,gitignore,9,0.642
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.098,gitignore,9,0.642
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.642
gitignore appendIgnoreRule appends one rule,0.112,gitignore,9,0.642
gitignore appendIgnoreRule appends multiple rules,0.108,gitignore,9,0.642
git/submodule listSubmodules returns the submodule entry,0.088,git/submodule,3,0.595
git/submodule listSubmodules returns the expected tag,0.14,git/submodule,3,0.595
git/submodule resetSubmodulePaths update submodule to original commit,0.322,git/submodule,3,0.595
git/rev-parse isGitRepository should return true for a repository,0.045,git/rev-parse,10,0.611
git/rev-parse isGitRepository should return false for a directory,0.042,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns true for initialized bare repository,0.055,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.611
git/rev-parse isBareRepository throws error for missing directory,0.035,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.038,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.178,git/rev-parse,10,0.611
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.606
git/branch tip returns correct ref if checkout occurs,0.051,git/branch,10,0.606
git/branch tip returns detached for arbitrary checkout,0.05,git/branch,10,0.606
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.606
git/branch tip returns non-origin remote,0.075,git/branch,10,0.606
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo finds one branch name,0.039,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.606
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.044,git/branch,10,0.606
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.086,git/branch,10,0.606
git/merge merge and is successful returns true,0.037,git/merge,7,0.573
git/merge merge and is a noop returns false,0.05,git/merge,7,0.573
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.573
git/log getCommits loads history,0.054,git/log,7,0.482
git/log getCommits handles repository with HEAD file on disk,0.073,git/log,7,0.482
git/log getCommits handles repository with signed commit and log.showSignature set,0.087,git/log,7,0.482
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.482
git/log getChangedFiles detects renames,0.067,git/log,7,0.482
git/log getChangedFiles detect copies,0.073,git/log,7,0.482
git/log getChangedFiles handles commit when HEAD exists on disk,0.041,git/log,7,0.482
git-lfs isUsingLFS returns false for repository not using LFS,0.045,git-lfs,9,0.539
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.539
git/reset reset can hard reset a repository,0.07,git/reset,2,0.111
git/remote getRemotes should return both remotes,0.045,git/remote,9,0.463
git/remote findDefaultRemote returns origin when multiple remotes found,0.066,git/remote,9,0.463
git/remote findDefaultRemote returns something when origin removed,0.059,git/remote,9,0.463
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.045,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.043,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.02,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile includes empty context lines,0.021,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.308
git/config config looks up config values,0.044,git/config,4,0.29
git/config config returns null for undefined values,0.047,git/config,4,0.29
git/config global config getGlobalConfigPath gets the config path,0.062,git/config,4,0.29
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,4,0.29
git/core error handling does not throw for errors that were expected,0.046,git/core,4,0.221
git/core error handling throws for errors that were not expected,0.048,git/core,4,0.221
git/core exit code handling does not throw for exit codes that were expected,0.042,git/core,4,0.221
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.221
git/for-each-ref getBranches fetches branches using for-each-ref,0.068,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for empty repo,0.063,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.05,git/for-each-ref,3,0.213
AppStore can select a repository,0.141,AppStore,5,0.193
validatedRepositoryPath returns the path to the repository,0.546,validatedRepositoryPath,2,0.604
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.026,git/git-attributes,1,0.059
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.374,git/rebase,21,8.539
git/rebase detect conflicts status detects REBASE_HEAD,0.285,git/rebase,21,8.539
git/rebase detect conflicts has conflicted files in working directory,0.288,git/rebase,21,8.539
git/rebase detect conflicts is a detached HEAD state,0.28,git/rebase,21,8.539
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.3,git/rebase,21,8.539
git/rebase abort after conflicts found no longer has working directory changes,0.321,git/rebase,21,8.539
git/rebase abort after conflicts found returns to the feature branch,0.318,git/rebase,21,8.539
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.382,git/rebase,21,8.539
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.363,git/rebase,21,8.539
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.356,git/rebase,21,8.539
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.539
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.425,git/rebase,21,8.539
git/rebase continue after resolving conflicts no longer has working directory changes,0.448,git/rebase,21,8.539
git/rebase continue after resolving conflicts returns to the feature branch,0.413,git/rebase,21,8.539
git/rebase continue after resolving conflicts branch is now a different ref,0.45,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files returns success,0.423,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.427,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.457,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.488,git/rebase,21,8.539
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.467,git/rebase,21,8.539
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,8.539
git/rebase can parse progress returns a value indicating conflicts were encountered,0.389,git/rebase,7,3.436
git/rebase can parse progress status detects REBASE_HEAD,0.377,git/rebase,7,3.436
git/rebase can parse progress is a detached HEAD state,0.381,git/rebase,7,3.436
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.717,git/rebase,7,3.436
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.78,git/rebase,7,3.436
git/rebase can parse progress for long rebase is a detached HEAD state,0.738,git/rebase,7,3.436
git/commit createCommit normal commits the given files,0.116,git/commit,21,4.173
git/commit createCommit normal commit does not strip commentary by default,0.095,git/commit,21,4.173
git/commit createCommit normal can commit for empty repository,0.125,git/commit,21,4.173
git/commit createCommit normal can commit renames,0.14,git/commit,21,4.173
git/commit createCommit partials can commit some lines from new file,0.167,git/commit,21,4.173
git/commit createCommit partials can commit second hunk from modified file,0.177,git/commit,21,4.173
git/commit createCommit partials can commit single delete from modified file,0.153,git/commit,21,4.173
git/commit createCommit partials can commit multiple hunks from modified file,0.173,git/commit,21,4.173
git/commit createCommit partials can commit some lines from deleted file,0.162,git/commit,21,4.173
git/commit createCommit partials can commit renames with modifications,0.16,git/commit,21,4.173
git/commit createCommit partials can commit renames with partially selected modifications,0.209,git/commit,21,4.173
git/commit createCommit with a merge conflict creates a merge commit,0.246,git/commit,21,4.173
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.241,git/commit,21,4.173
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.331,git/commit,21,4.173
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.323,git/commit,21,4.173
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.368,git/commit,21,4.173
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.381,git/commit,21,4.173
git/commit createMergeCommit with no changes throws an error,0.085,git/commit,21,4.173
git/commit index corner cases can commit when staged new file is then deleted,0.139,git/commit,21,4.173
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.165,git/commit,21,4.173
git/commit index corner cases file is deleted in index,0.162,git/commit,21,4.173
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.159,git/stash,14,2.603
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.266,git/stash,14,2.603
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.193,git/stash,14,2.603
GitStore loadCommitBatch includes HEAD when loading commits,0.367,GitStore,11,2.409
GitStore can discard changes from a repository,0.174,GitStore,11,2.409
GitStore can discard a renamed file,0.152,GitStore,11,2.409
GitStore undo first commit reports the repository is unborn,0.18,GitStore,11,2.409
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.409
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.409
GitStore undo first commit has no staged files,0.191,GitStore,11,2.409
GitStore repository with HEAD file can discard modified change cleanly,0.103,GitStore,11,2.409
git/status getStatus with conflicted repo parses conflicted files with markers,0.299,git/status,12,1.97
git/status getStatus with conflicted repo parses conflicted files without markers,0.287,git/status,12,1.97
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.477,git/status,12,1.97
git/status getStatus with conflicted repo parses resolved files,0.299,git/status,12,1.97
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.155,git/status,12,1.97
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.111,git/status,12,1.97
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,1.97
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.049,git/status,12,1.97
git/status getStatus with unconflicted repo reflects renames,0.08,git/status,12,1.97
git/status getStatus with unconflicted repo reflects copies,0.078,git/status,12,1.97
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.038,git/status,12,1.97
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.033,git/diff,19,1.436
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.436
git/diff getBlobImage retrieves valid image for modified file,0.036,git/diff,19,1.436
git/diff getBlobImage retrieves valid images for deleted file,0.052,git/diff,19,1.436
git/diff imageDiff changes for images are set,0.066,git/diff,19,1.436
git/diff imageDiff changes for text are not set,0.063,git/diff,19,1.436
git/diff getWorkingDirectoryDiff counts lines for new file,0.069,git/diff,19,1.436
git/diff getWorkingDirectoryDiff counts lines for modified file,0.065,git/diff,19,1.436
git/diff getWorkingDirectoryDiff counts lines for staged file,0.067,git/diff,19,1.436
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.097,git/diff,19,1.436
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.436
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.123,git/diff,19,1.436
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.1,git/diff,19,1.436
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.103,git/diff,19,1.436
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.069,git/diff,19,1.436
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.052,git/diff,19,1.436
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.436
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.436
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.087,git/diff,19,1.436
BranchPruner does nothing on non GitHub repositories,0.28,BranchPruner,6,1.606
BranchPruner prunes for GitHub repository,0.257,BranchPruner,6,1.606
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.215,BranchPruner,6,1.606
BranchPruner does not prune if there is no default branch,0.214,BranchPruner,6,1.606
BranchPruner does not prune reserved branches,0.246,BranchPruner,6,1.606
git/reflog getRecentBranches returns the recently checked out branches,0.13,git/reflog,6,0.92
git/reflog getRecentBranches works after renaming a branch,0.168,git/reflog,6,0.92
git/reflog getRecentBranches returns a limited number of branches,0.223,git/reflog,6,0.92
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.133,git/reflog,6,0.92
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.163,git/reflog,6,0.92
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.056,git/reflog,6,0.92
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.279,formatPatch,5,0.906
git/checkout can checkout a valid branch name in an existing repository,0.103,git/checkout,6,0.819
git/checkout can checkout a branch when it exists on multiple remotes,0.106,git/checkout,6,0.819
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.819
git/checkout with submodules cleans up an submodule that no longer exists,0.241,git/checkout,6,0.819
git/checkout with submodules updates a changed submodule reference,0.195,git/checkout,6,0.819
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.099,gitignore,9,0.672
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.098,gitignore,9,0.672
gitignore saveGitIgnore applies rule correctly to repository,0.09,gitignore,9,0.672
gitignore appendIgnoreRule appends one rule,0.099,gitignore,9,0.672
gitignore appendIgnoreRule appends multiple rules,0.098,gitignore,9,0.672
git/rev-parse isGitRepository should return true for a repository,0.039,git/rev-parse,10,0.607
git/rev-parse isGitRepository should return false for a directory,0.036,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns true for initialized bare repository,0.055,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.607
git/rev-parse isBareRepository throws error for missing directory,0.046,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.045,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.161,git/rev-parse,10,0.607
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.584
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,10,0.584
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.584
git/branch tip returns current branch when on a valid HEAD,0.081,git/branch,10,0.584
git/branch tip returns non-origin remote,0.071,git/branch,10,0.584
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.073,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds one branch name,0.042,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.036,git/branch,10,0.584
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.07,git/branch,10,0.584
validatedRepositoryPath returns the path to the repository,0.039,validatedRepositoryPath,2,0.092
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.678
git/submodule listSubmodules returns the expected tag,0.149,git/submodule,3,0.678
git/submodule resetSubmodulePaths update submodule to original commit,0.387,git/submodule,3,0.678
git/merge merge and is successful returns true,0.036,git/merge,7,0.518
git/merge merge and is a noop returns false,0.049,git/merge,7,0.518
git/merge getMergeBase returns the common ancestor of two branches,0.057,git/merge,7,0.518
git-lfs isUsingLFS returns false for repository not using LFS,0.049,git-lfs,9,0.489
git-lfs isUsingLFS returns true if LFS is tracking a path,0.07,git-lfs,9,0.489
git/log getCommits loads history,0.057,git/log,7,0.532
git/log getCommits handles repository with HEAD file on disk,0.08,git/log,7,0.532
git/log getCommits handles repository with signed commit and log.showSignature set,0.092,git/log,7,0.532
git/log getChangedFiles loads the files changed in the commit,0.054,git/log,7,0.532
git/log getChangedFiles detects renames,0.075,git/log,7,0.532
git/log getChangedFiles detect copies,0.079,git/log,7,0.532
git/log getChangedFiles handles commit when HEAD exists on disk,0.051,git/log,7,0.532
git/remote getRemotes should return both remotes,0.042,git/remote,9,0.398
git/remote findDefaultRemote returns origin when multiple remotes found,0.048,git/remote,9,0.398
git/remote findDefaultRemote returns something when origin removed,0.052,git/remote,9,0.398
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.297
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.297
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.297
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.297
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.297
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.297
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.297
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.297
git/config config looks up config values,0.042,git/config,4,0.275
git/config config returns null for undefined values,0.042,git/config,4,0.275
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.275
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,4,0.275
git/core error handling does not throw for errors that were expected,0.154,git/core,4,0.343
git/core error handling throws for errors that were not expected,0.056,git/core,4,0.343
git/core exit code handling does not throw for exit codes that were expected,0.047,git/core,4,0.343
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.343
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.209
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.209
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.209
AppStore can select a repository,0.135,AppStore,5,0.19
git/reset reset can hard reset a repository,0.349,git/reset,2,0.401
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.376,git/rebase,21,8.469
git/rebase detect conflicts status detects REBASE_HEAD,0.298,git/rebase,21,8.469
git/rebase detect conflicts has conflicted files in working directory,0.283,git/rebase,21,8.469
git/rebase detect conflicts is a detached HEAD state,0.293,git/rebase,21,8.469
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.293,git/rebase,21,8.469
git/rebase abort after conflicts found no longer has working directory changes,0.295,git/rebase,21,8.469
git/rebase abort after conflicts found returns to the feature branch,0.309,git/rebase,21,8.469
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.375,git/rebase,21,8.469
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.375,git/rebase,21,8.469
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.36,git/rebase,21,8.469
git/rebase continue after resolving conflicts returns success,0.432,git/rebase,21,8.469
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.415,git/rebase,21,8.469
git/rebase continue after resolving conflicts no longer has working directory changes,0.452,git/rebase,21,8.469
git/rebase continue after resolving conflicts returns to the feature branch,0.415,git/rebase,21,8.469
git/rebase continue after resolving conflicts branch is now a different ref,0.451,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files returns success,0.416,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.432,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.43,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.443,git/rebase,21,8.469
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.455,git/rebase,21,8.469
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.413,git/rebase,21,8.469
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.87
git/commit createCommit normal commit does not strip commentary by default,0.093,git/commit,21,3.87
git/commit createCommit normal can commit for empty repository,0.12,git/commit,21,3.87
git/commit createCommit normal can commit renames,0.142,git/commit,21,3.87
git/commit createCommit partials can commit some lines from new file,0.148,git/commit,21,3.87
git/commit createCommit partials can commit second hunk from modified file,0.155,git/commit,21,3.87
git/commit createCommit partials can commit single delete from modified file,0.14,git/commit,21,3.87
git/commit createCommit partials can commit multiple hunks from modified file,0.157,git/commit,21,3.87
git/commit createCommit partials can commit some lines from deleted file,0.153,git/commit,21,3.87
git/commit createCommit partials can commit renames with modifications,0.148,git/commit,21,3.87
git/commit createCommit partials can commit renames with partially selected modifications,0.189,git/commit,21,3.87
git/commit createCommit with a merge conflict creates a merge commit,0.226,git/commit,21,3.87
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.21,git/commit,21,3.87
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.3,git/commit,21,3.87
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.295,git/commit,21,3.87
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.352,git/commit,21,3.87
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.349,git/commit,21,3.87
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,3.87
git/commit index corner cases can commit when staged new file is then deleted,0.138,git/commit,21,3.87
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.151,git/commit,21,3.87
git/commit index corner cases file is deleted in index,0.15,git/commit,21,3.87
git/rebase can parse progress returns a value indicating conflicts were encountered,0.431,git/rebase,7,3.903
git/rebase can parse progress status detects REBASE_HEAD,0.418,git/rebase,7,3.903
git/rebase can parse progress is a detached HEAD state,0.439,git/rebase,7,3.903
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.869,git/rebase,7,3.903
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.86,git/rebase,7,3.903
git/rebase can parse progress for long rebase is a detached HEAD state,0.837,git/rebase,7,3.903
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.165,git/stash,14,2.674
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.25,git/stash,14,2.674
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.206,git/stash,14,2.674
GitStore loadCommitBatch includes HEAD when loading commits,0.334,GitStore,11,2.406
GitStore can discard changes from a repository,0.177,GitStore,11,2.406
GitStore can discard a renamed file,0.155,GitStore,11,2.406
GitStore undo first commit reports the repository is unborn,0.186,GitStore,11,2.406
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.406
GitStore undo first commit clears the undo commit dialog,0.207,GitStore,11,2.406
GitStore undo first commit has no staged files,0.209,GitStore,11,2.406
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.406
git/status getStatus with conflicted repo parses conflicted files with markers,0.293,git/status,12,1.885
git/status getStatus with conflicted repo parses conflicted files without markers,0.301,git/status,12,1.885
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.525,git/status,12,1.885
git/status getStatus with conflicted repo parses resolved files,0.237,git/status,12,1.885
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.093,git/status,12,1.885
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.105,git/status,12,1.885
git/status getStatus with unconflicted repo parses changed files,0.046,git/status,12,1.885
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.885
git/status getStatus with unconflicted repo reflects renames,0.075,git/status,12,1.885
git/status getStatus with unconflicted repo reflects copies,0.076,git/status,12,1.885
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.038,git/status,12,1.885
BranchPruner does nothing on non GitHub repositories,0.183,BranchPruner,6,1.335
BranchPruner prunes for GitHub repository,0.224,BranchPruner,6,1.335
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.171,BranchPruner,6,1.335
BranchPruner does not prune if there is no default branch,0.168,BranchPruner,6,1.335
BranchPruner does not prune reserved branches,0.222,BranchPruner,6,1.335
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.593
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.123,git/diff,19,1.593
git/diff getBlobImage retrieves valid image for modified file,0.052,git/diff,19,1.593
git/diff getBlobImage retrieves valid images for deleted file,0.057,git/diff,19,1.593
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.593
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for new file,0.063,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for modified file,0.059,git/diff,19,1.593
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.593
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.098,git/diff,19,1.593
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.126,git/diff,19,1.593
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.129,git/diff,19,1.593
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.106,git/diff,19,1.593
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.113,git/diff,19,1.593
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.076,git/diff,19,1.593
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.593
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.593
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.593
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.098,git/diff,19,1.593
git/reflog getRecentBranches returns the recently checked out branches,0.138,git/reflog,6,0.952
git/reflog getRecentBranches works after renaming a branch,0.179,git/reflog,6,0.952
git/reflog getRecentBranches returns a limited number of branches,0.233,git/reflog,6,0.952
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.131,git/reflog,6,0.952
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.167,git/reflog,6,0.952
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.952
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.284,formatPatch,5,0.926
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.88
git/checkout can checkout a branch when it exists on multiple remotes,0.112,git/checkout,6,0.88
git/checkout will fail when an existing branch matches the remote branch,0.109,git/checkout,6,0.88
git/checkout with submodules cleans up an submodule that no longer exists,0.258,git/checkout,6,0.88
git/checkout with submodules updates a changed submodule reference,0.214,git/checkout,6,0.88
git/submodule listSubmodules returns the submodule entry,0.103,git/submodule,3,0.627
git/submodule listSubmodules returns the expected tag,0.153,git/submodule,3,0.627
git/submodule resetSubmodulePaths update submodule to original commit,0.33,git/submodule,3,0.627
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.104,gitignore,9,0.656
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.101,gitignore,9,0.656
gitignore saveGitIgnore applies rule correctly to repository,0.101,gitignore,9,0.656
gitignore appendIgnoreRule appends one rule,0.107,gitignore,9,0.656
gitignore appendIgnoreRule appends multiple rules,0.113,gitignore,9,0.656
git/rev-parse isGitRepository should return true for a repository,0.047,git/rev-parse,10,0.595
git/rev-parse isGitRepository should return false for a directory,0.043,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns true for initialized bare repository,0.05,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.595
git/rev-parse isBareRepository throws error for missing directory,0.035,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.051,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.039,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.037,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.172,git/rev-parse,10,0.595
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.587
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.587
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.587
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.587
git/branch tip returns non-origin remote,0.073,git/branch,10,0.587
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,10,0.587
git/branch getBranchesPointedAt in a local repo finds one branch name,0.042,git/branch,10,0.587
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.587
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.587
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.079,git/branch,10,0.587
git/log getCommits loads history,0.052,git/log,7,0.479
git/log getCommits handles repository with HEAD file on disk,0.07,git/log,7,0.479
git/log getCommits handles repository with signed commit and log.showSignature set,0.082,git/log,7,0.479
git/log getChangedFiles loads the files changed in the commit,0.04,git/log,7,0.479
git/log getChangedFiles detects renames,0.07,git/log,7,0.479
git/log getChangedFiles detect copies,0.072,git/log,7,0.479
git/log getChangedFiles handles commit when HEAD exists on disk,0.046,git/log,7,0.479
git/merge merge and is successful returns true,0.038,git/merge,7,0.697
git/merge merge and is a noop returns false,0.05,git/merge,7,0.697
git/merge getMergeBase returns the common ancestor of two branches,0.067,git/merge,7,0.697
git-lfs isUsingLFS returns false for repository not using LFS,0.057,git-lfs,9,0.532
git-lfs isUsingLFS returns true if LFS is tracking a path,0.071,git-lfs,9,0.532
git/reset reset can hard reset a repository,0.064,git/reset,2,0.11
git/remote getRemotes should return both remotes,0.044,git/remote,9,0.416
git/remote findDefaultRemote returns origin when multiple remotes found,0.048,git/remote,9,0.416
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.416
git/core error handling does not throw for errors that were expected,0.043,git/core,4,0.212
git/core error handling throws for errors that were not expected,0.044,git/core,4,0.212
git/core exit code handling does not throw for exit codes that were expected,0.041,git/core,4,0.212
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.212
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.045,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.037,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.3
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.3
git/config config looks up config values,0.039,git/config,4,0.264
git/config config returns null for undefined values,0.044,git/config,4,0.264
git/config global config getGlobalConfigPath gets the config path,0.055,git/config,4,0.264
git/config global config setGlobalConfigValue will replace all entries for a global value,0.085,git/config,4,0.264
git/for-each-ref getBranches fetches branches using for-each-ref,0.06,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for empty repo,0.062,git/for-each-ref,3,0.201
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.201
AppStore can select a repository,0.127,AppStore,5,0.178
validatedRepositoryPath returns the path to the repository,0.376,validatedRepositoryPath,2,0.435
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.048
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.376,git/rebase,21,8.635
git/rebase detect conflicts status detects REBASE_HEAD,0.287,git/rebase,21,8.635
git/rebase detect conflicts has conflicted files in working directory,0.28,git/rebase,21,8.635
git/rebase detect conflicts is a detached HEAD state,0.292,git/rebase,21,8.635
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.312,git/rebase,21,8.635
git/rebase abort after conflicts found no longer has working directory changes,0.312,git/rebase,21,8.635
git/rebase abort after conflicts found returns to the feature branch,0.304,git/rebase,21,8.635
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.367,git/rebase,21,8.635
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.397,git/rebase,21,8.635
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.393,git/rebase,21,8.635
git/rebase continue after resolving conflicts returns success,0.447,git/rebase,21,8.635
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.432,git/rebase,21,8.635
git/rebase continue after resolving conflicts no longer has working directory changes,0.424,git/rebase,21,8.635
git/rebase continue after resolving conflicts returns to the feature branch,0.465,git/rebase,21,8.635
git/rebase continue after resolving conflicts branch is now a different ref,0.509,git/rebase,21,8.635
git/rebase continue with additional changes unrelated to conflicted files returns success,0.425,git/rebase,21,8.635
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.46,git/rebase,21,8.635
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.439,git/rebase,21,8.635
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.426,git/rebase,21,8.635
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.437,git/rebase,21,8.635
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.396,git/rebase,21,8.635
git/rebase can parse progress returns a value indicating conflicts were encountered,0.385,git/rebase,7,3.44
git/rebase can parse progress status detects REBASE_HEAD,0.375,git/rebase,7,3.44
git/rebase can parse progress is a detached HEAD state,0.378,git/rebase,7,3.44
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.724,git/rebase,7,3.44
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.748,git/rebase,7,3.44
git/rebase can parse progress for long rebase is a detached HEAD state,0.772,git/rebase,7,3.44
git/commit createCommit normal commits the given files,0.117,git/commit,21,4.181
git/commit createCommit normal commit does not strip commentary by default,0.094,git/commit,21,4.181
git/commit createCommit normal can commit for empty repository,0.126,git/commit,21,4.181
git/commit createCommit normal can commit renames,0.147,git/commit,21,4.181
git/commit createCommit partials can commit some lines from new file,0.163,git/commit,21,4.181
git/commit createCommit partials can commit second hunk from modified file,0.174,git/commit,21,4.181
git/commit createCommit partials can commit single delete from modified file,0.155,git/commit,21,4.181
git/commit createCommit partials can commit multiple hunks from modified file,0.169,git/commit,21,4.181
git/commit createCommit partials can commit some lines from deleted file,0.158,git/commit,21,4.181
git/commit createCommit partials can commit renames with modifications,0.171,git/commit,21,4.181
git/commit createCommit partials can commit renames with partially selected modifications,0.213,git/commit,21,4.181
git/commit createCommit with a merge conflict creates a merge commit,0.253,git/commit,21,4.181
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.235,git/commit,21,4.181
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.326,git/commit,21,4.181
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.319,git/commit,21,4.181
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.364,git/commit,21,4.181
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.381,git/commit,21,4.181
git/commit createMergeCommit with no changes throws an error,0.083,git/commit,21,4.181
git/commit index corner cases can commit when staged new file is then deleted,0.141,git/commit,21,4.181
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.165,git/commit,21,4.181
git/commit index corner cases file is deleted in index,0.172,git/commit,21,4.181
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.163,git/stash,14,2.699
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.286,git/stash,14,2.699
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.196,git/stash,14,2.699
GitStore loadCommitBatch includes HEAD when loading commits,0.376,GitStore,11,2.5
GitStore can discard changes from a repository,0.217,GitStore,11,2.5
GitStore can discard a renamed file,0.155,GitStore,11,2.5
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.5
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.5
GitStore undo first commit clears the undo commit dialog,0.217,GitStore,11,2.5
GitStore undo first commit has no staged files,0.208,GitStore,11,2.5
GitStore repository with HEAD file can discard modified change cleanly,0.112,GitStore,11,2.5
git/status getStatus with conflicted repo parses conflicted files with markers,0.286,git/status,12,2.056
git/status getStatus with conflicted repo parses conflicted files without markers,0.292,git/status,12,2.056
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.523,git/status,12,2.056
git/status getStatus with conflicted repo parses resolved files,0.309,git/status,12,2.056
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.154,git/status,12,2.056
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.121,git/status,12,2.056
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,2.056
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,2.056
git/status getStatus with unconflicted repo reflects renames,0.086,git/status,12,2.056
git/status getStatus with unconflicted repo reflects copies,0.09,git/status,12,2.056
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,2.056
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.442
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.042,git/diff,19,1.442
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.442
git/diff getBlobImage retrieves valid images for deleted file,0.054,git/diff,19,1.442
git/diff imageDiff changes for images are set,0.078,git/diff,19,1.442
git/diff imageDiff changes for text are not set,0.061,git/diff,19,1.442
git/diff getWorkingDirectoryDiff counts lines for new file,0.071,git/diff,19,1.442
git/diff getWorkingDirectoryDiff counts lines for modified file,0.059,git/diff,19,1.442
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.442
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.087,git/diff,19,1.442
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.118,git/diff,19,1.442
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.127,git/diff,19,1.442
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.109,git/diff,19,1.442
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.114,git/diff,19,1.442
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.442
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.442
git/diff getBinaryPaths in repo with text only files returns an empty array,0.06,git/diff,19,1.442
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.069,git/diff,19,1.442
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.085,git/diff,19,1.442
BranchPruner does nothing on non GitHub repositories,0.284,BranchPruner,6,1.618
BranchPruner prunes for GitHub repository,0.261,BranchPruner,6,1.618
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.199,BranchPruner,6,1.618
BranchPruner does not prune if there is no default branch,0.204,BranchPruner,6,1.618
BranchPruner does not prune reserved branches,0.257,BranchPruner,6,1.618
git/reflog getRecentBranches returns the recently checked out branches,0.132,git/reflog,6,0.925
git/reflog getRecentBranches works after renaming a branch,0.159,git/reflog,6,0.925
git/reflog getRecentBranches returns a limited number of branches,0.228,git/reflog,6,0.925
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.131,git/reflog,6,0.925
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.166,git/reflog,6,0.925
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.062,git/reflog,6,0.925
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.313,formatPatch,5,0.951
git/checkout can checkout a valid branch name in an existing repository,0.111,git/checkout,6,0.824
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.824
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.824
git/checkout with submodules cleans up an submodule that no longer exists,0.245,git/checkout,6,0.824
git/checkout with submodules updates a changed submodule reference,0.189,git/checkout,6,0.824
git/merge merge and is successful returns true,0.029,git/merge,7,0.474
git/merge merge and is a noop returns false,0.042,git/merge,7,0.474
git/merge getMergeBase returns the common ancestor of two branches,0.056,git/merge,7,0.474
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.101,gitignore,9,0.636
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.097,gitignore,9,0.636
gitignore saveGitIgnore applies rule correctly to repository,0.093,gitignore,9,0.636
gitignore appendIgnoreRule appends one rule,0.11,gitignore,9,0.636
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.636
git/submodule listSubmodules returns the submodule entry,0.095,git/submodule,3,0.69
git/submodule listSubmodules returns the expected tag,0.15,git/submodule,3,0.69
git/submodule resetSubmodulePaths update submodule to original commit,0.395,git/submodule,3,0.69
git/rev-parse isGitRepository should return true for a repository,0.06,git/rev-parse,10,0.643
git/rev-parse isGitRepository should return false for a directory,0.048,git/rev-parse,10,0.643
git/rev-parse isBareRepository returns false for default initialized repository,0.046,git/rev-parse,10,0.643
git/rev-parse isBareRepository returns true for initialized bare repository,0.061,git/rev-parse,10,0.643
git/rev-parse isBareRepository returns false for empty directory,0.049,git/rev-parse,10,0.643
git/rev-parse isBareRepository throws error for missing directory,0.042,git/rev-parse,10,0.643
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.643
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.04,git/rev-parse,10,0.643
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.643
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.171,git/rev-parse,10,0.643
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.632
git/branch tip returns correct ref if checkout occurs,0.054,git/branch,10,0.632
git/branch tip returns detached for arbitrary checkout,0.043,git/branch,10,0.632
git/branch tip returns current branch when on a valid HEAD,0.075,git/branch,10,0.632
git/branch tip returns non-origin remote,0.078,git/branch,10,0.632
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.091,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.632
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.632
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.082,git/branch,10,0.632
git-lfs isUsingLFS returns false for repository not using LFS,0.049,git-lfs,9,0.513
git-lfs isUsingLFS returns true if LFS is tracking a path,0.065,git-lfs,9,0.513
git/log getCommits loads history,0.053,git/log,7,0.505
git/log getCommits handles repository with HEAD file on disk,0.074,git/log,7,0.505
git/log getCommits handles repository with signed commit and log.showSignature set,0.081,git/log,7,0.505
git/log getChangedFiles loads the files changed in the commit,0.041,git/log,7,0.505
git/log getChangedFiles detects renames,0.083,git/log,7,0.505
git/log getChangedFiles detect copies,0.083,git/log,7,0.505
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.505
validatedRepositoryPath returns the path to the repository,0.045,validatedRepositoryPath,2,0.097
git/remote getRemotes should return both remotes,0.043,git/remote,9,0.421
git/remote findDefaultRemote returns origin when multiple remotes found,0.055,git/remote,9,0.421
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.421
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.029,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.308
git/config config looks up config values,0.044,git/config,4,0.279
git/config config returns null for undefined values,0.044,git/config,4,0.279
git/config global config getGlobalConfigPath gets the config path,0.06,git/config,4,0.279
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,4,0.279
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.234
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.234
git/core exit code handling does not throw for exit codes that were expected,0.049,git/core,4,0.234
git/core exit code handling throws for exit codes that were not expected,0.048,git/core,4,0.234
git/for-each-ref getBranches fetches branches using for-each-ref,0.064,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.203
AppStore can select a repository,0.129,AppStore,5,0.183
git/reset reset can hard reset a repository,0.352,git/reset,2,0.4
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.367,git/rebase,21,8.572
git/rebase detect conflicts status detects REBASE_HEAD,0.288,git/rebase,21,8.572
git/rebase detect conflicts has conflicted files in working directory,0.277,git/rebase,21,8.572
git/rebase detect conflicts is a detached HEAD state,0.292,git/rebase,21,8.572
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.31,git/rebase,21,8.572
git/rebase abort after conflicts found no longer has working directory changes,0.308,git/rebase,21,8.572
git/rebase abort after conflicts found returns to the feature branch,0.313,git/rebase,21,8.572
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.383,git/rebase,21,8.572
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.384,git/rebase,21,8.572
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.385,git/rebase,21,8.572
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.572
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.447,git/rebase,21,8.572
git/rebase continue after resolving conflicts no longer has working directory changes,0.438,git/rebase,21,8.572
git/rebase continue after resolving conflicts returns to the feature branch,0.423,git/rebase,21,8.572
git/rebase continue after resolving conflicts branch is now a different ref,0.466,git/rebase,21,8.572
git/rebase continue with additional changes unrelated to conflicted files returns success,0.441,git/rebase,21,8.572
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.424,git/rebase,21,8.572
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.431,git/rebase,21,8.572
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.473,git/rebase,21,8.572
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.451,git/rebase,21,8.572
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.404,git/rebase,21,8.572
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.98
git/commit createCommit normal commit does not strip commentary by default,0.096,git/commit,21,3.98
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.98
git/commit createCommit normal can commit renames,0.137,git/commit,21,3.98
git/commit createCommit partials can commit some lines from new file,0.15,git/commit,21,3.98
git/commit createCommit partials can commit second hunk from modified file,0.167,git/commit,21,3.98
git/commit createCommit partials can commit single delete from modified file,0.146,git/commit,21,3.98
git/commit createCommit partials can commit multiple hunks from modified file,0.164,git/commit,21,3.98
git/commit createCommit partials can commit some lines from deleted file,0.153,git/commit,21,3.98
git/commit createCommit partials can commit renames with modifications,0.158,git/commit,21,3.98
git/commit createCommit partials can commit renames with partially selected modifications,0.197,git/commit,21,3.98
git/commit createCommit with a merge conflict creates a merge commit,0.251,git/commit,21,3.98
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.225,git/commit,21,3.98
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.311,git/commit,21,3.98
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.295,git/commit,21,3.98
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.362,git/commit,21,3.98
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.358,git/commit,21,3.98
git/commit createMergeCommit with no changes throws an error,0.087,git/commit,21,3.98
git/commit index corner cases can commit when staged new file is then deleted,0.137,git/commit,21,3.98
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.149,git/commit,21,3.98
git/commit index corner cases file is deleted in index,0.151,git/commit,21,3.98
git/rebase can parse progress returns a value indicating conflicts were encountered,0.428,git/rebase,7,3.96
git/rebase can parse progress status detects REBASE_HEAD,0.432,git/rebase,7,3.96
git/rebase can parse progress is a detached HEAD state,0.443,git/rebase,7,3.96
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.907,git/rebase,7,3.96
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.817,git/rebase,7,3.96
git/rebase can parse progress for long rebase is a detached HEAD state,0.884,git/rebase,7,3.96
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.17,git/stash,14,2.581
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.252,git/stash,14,2.581
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.202,git/stash,14,2.581
GitStore loadCommitBatch includes HEAD when loading commits,0.344,GitStore,11,2.426
GitStore can discard changes from a repository,0.176,GitStore,11,2.426
GitStore can discard a renamed file,0.146,GitStore,11,2.426
GitStore undo first commit reports the repository is unborn,0.182,GitStore,11,2.426
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.426
GitStore undo first commit clears the undo commit dialog,0.211,GitStore,11,2.426
GitStore undo first commit has no staged files,0.204,GitStore,11,2.426
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.426
git/status getStatus with conflicted repo parses conflicted files with markers,0.317,git/status,12,1.886
git/status getStatus with conflicted repo parses conflicted files without markers,0.249,git/status,12,1.886
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.504,git/status,12,1.886
git/status getStatus with conflicted repo parses resolved files,0.267,git/status,12,1.886
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.092,git/status,12,1.886
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.107,git/status,12,1.886
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,1.886
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.886
git/status getStatus with unconflicted repo reflects renames,0.08,git/status,12,1.886
git/status getStatus with unconflicted repo reflects copies,0.083,git/status,12,1.886
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.043,git/status,12,1.886
BranchPruner does nothing on non GitHub repositories,0.21,BranchPruner,6,1.421
BranchPruner prunes for GitHub repository,0.242,BranchPruner,6,1.421
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.187,BranchPruner,6,1.421
BranchPruner does not prune if there is no default branch,0.182,BranchPruner,6,1.421
BranchPruner does not prune reserved branches,0.232,BranchPruner,6,1.421
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.106,git/diff,19,1.594
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.062,git/diff,19,1.594
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.594
git/diff getBlobImage retrieves valid images for deleted file,0.059,git/diff,19,1.594
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.594
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for new file,0.073,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.594
git/diff getWorkingDirectoryDiff counts lines for staged file,0.056,git/diff,19,1.594
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.095,git/diff,19,1.594
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.125,git/diff,19,1.594
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.13,git/diff,19,1.594
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.119,git/diff,19,1.594
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.117,git/diff,19,1.594
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.074,git/diff,19,1.594
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.594
git/diff getBinaryPaths in repo with text only files returns an empty array,0.067,git/diff,19,1.594
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.594
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.093,git/diff,19,1.594
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.301,formatPatch,5,0.95
git/reflog getRecentBranches returns the recently checked out branches,0.136,git/reflog,6,0.975
git/reflog getRecentBranches works after renaming a branch,0.17,git/reflog,6,0.975
git/reflog getRecentBranches returns a limited number of branches,0.232,git/reflog,6,0.975
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.147,git/reflog,6,0.975
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.185,git/reflog,6,0.975
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.059,git/reflog,6,0.975
git/checkout can checkout a valid branch name in an existing repository,0.114,git/checkout,6,0.886
git/checkout can checkout a branch when it exists on multiple remotes,0.112,git/checkout,6,0.886
git/checkout will fail when an existing branch matches the remote branch,0.104,git/checkout,6,0.886
git/checkout with submodules cleans up an submodule that no longer exists,0.266,git/checkout,6,0.886
git/checkout with submodules updates a changed submodule reference,0.217,git/checkout,6,0.886
git/submodule listSubmodules returns the submodule entry,0.161,git/submodule,3,0.656
git/submodule listSubmodules returns the expected tag,0.158,git/submodule,3,0.656
git/submodule resetSubmodulePaths update submodule to original commit,0.295,git/submodule,3,0.656
git/rev-parse isGitRepository should return true for a repository,0.048,git/rev-parse,10,0.595
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns false for default initialized repository,0.044,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns true for initialized bare repository,0.047,git/rev-parse,10,0.595
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.595
git/rev-parse isBareRepository throws error for missing directory,0.034,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.047,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.044,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.038,git/rev-parse,10,0.595
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.174,git/rev-parse,10,0.595
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.095,gitignore,9,0.618
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.097,gitignore,9,0.618
gitignore saveGitIgnore applies rule correctly to repository,0.093,gitignore,9,0.618
gitignore appendIgnoreRule appends one rule,0.099,gitignore,9,0.618
gitignore appendIgnoreRule appends multiple rules,0.108,gitignore,9,0.618
git/branch tip returns unborn for new repository,0.032,git/branch,10,0.582
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.582
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.582
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.582
git/branch tip returns non-origin remote,0.072,git/branch,10,0.582
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.582
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.582
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.073,git/branch,10,0.582
git-lfs isUsingLFS returns false for repository not using LFS,0.045,git-lfs,9,0.472
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.472
git/log getCommits loads history,0.054,git/log,7,0.491
git/log getCommits handles repository with HEAD file on disk,0.071,git/log,7,0.491
git/log getCommits handles repository with signed commit and log.showSignature set,0.084,git/log,7,0.491
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.491
git/log getChangedFiles detects renames,0.074,git/log,7,0.491
git/log getChangedFiles detect copies,0.076,git/log,7,0.491
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.491
git/merge merge and is successful returns true,0.035,git/merge,7,0.565
git/merge merge and is a noop returns false,0.053,git/merge,7,0.565
git/merge getMergeBase returns the common ancestor of two branches,0.063,git/merge,7,0.565
git/remote getRemotes should return both remotes,0.044,git/remote,9,0.404
git/remote findDefaultRemote returns origin when multiple remotes found,0.049,git/remote,9,0.404
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.404
git/reset reset can hard reset a repository,0.065,git/reset,2,0.109
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile includes empty context lines,0.026,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.306
git/config config looks up config values,0.045,git/config,4,0.274
git/config config returns null for undefined values,0.045,git/config,4,0.274
git/config global config getGlobalConfigPath gets the config path,0.054,git/config,4,0.274
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,4,0.274
git/core error handling does not throw for errors that were expected,0.145,git/core,4,0.364
git/core error handling throws for errors that were not expected,0.081,git/core,4,0.364
git/core exit code handling does not throw for exit codes that were expected,0.05,git/core,4,0.364
git/core exit code handling throws for exit codes that were not expected,0.042,git/core,4,0.364
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.213
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.053,git/for-each-ref,3,0.213
AppStore can select a repository,0.133,AppStore,5,0.191
validatedRepositoryPath returns the path to the repository,0.331,validatedRepositoryPath,2,0.394
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.048
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.415,git/rebase,21,8.628
git/rebase detect conflicts status detects REBASE_HEAD,0.288,git/rebase,21,8.628
git/rebase detect conflicts has conflicted files in working directory,0.281,git/rebase,21,8.628
git/rebase detect conflicts is a detached HEAD state,0.301,git/rebase,21,8.628
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.342,git/rebase,21,8.628
git/rebase abort after conflicts found no longer has working directory changes,0.33,git/rebase,21,8.628
git/rebase abort after conflicts found returns to the feature branch,0.34,git/rebase,21,8.628
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.367,git/rebase,21,8.628
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.369,git/rebase,21,8.628
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.414,git/rebase,21,8.628
git/rebase continue after resolving conflicts returns success,0.417,git/rebase,21,8.628
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.417,git/rebase,21,8.628
git/rebase continue after resolving conflicts no longer has working directory changes,0.429,git/rebase,21,8.628
git/rebase continue after resolving conflicts returns to the feature branch,0.411,git/rebase,21,8.628
git/rebase continue after resolving conflicts branch is now a different ref,0.437,git/rebase,21,8.628
git/rebase continue with additional changes unrelated to conflicted files returns success,0.423,git/rebase,21,8.628
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.474,git/rebase,21,8.628
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.437,git/rebase,21,8.628
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.628
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.446,git/rebase,21,8.628
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.407,git/rebase,21,8.628
git/commit createCommit normal commits the given files,0.11,git/commit,21,3.835
git/commit createCommit normal commit does not strip commentary by default,0.09,git/commit,21,3.835
git/commit createCommit normal can commit for empty repository,0.112,git/commit,21,3.835
git/commit createCommit normal can commit renames,0.135,git/commit,21,3.835
git/commit createCommit partials can commit some lines from new file,0.14,git/commit,21,3.835
git/commit createCommit partials can commit second hunk from modified file,0.148,git/commit,21,3.835
git/commit createCommit partials can commit single delete from modified file,0.142,git/commit,21,3.835
git/commit createCommit partials can commit multiple hunks from modified file,0.161,git/commit,21,3.835
git/commit createCommit partials can commit some lines from deleted file,0.151,git/commit,21,3.835
git/commit createCommit partials can commit renames with modifications,0.155,git/commit,21,3.835
git/commit createCommit partials can commit renames with partially selected modifications,0.193,git/commit,21,3.835
git/commit createCommit with a merge conflict creates a merge commit,0.223,git/commit,21,3.835
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.212,git/commit,21,3.835
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.293,git/commit,21,3.835
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.3,git/commit,21,3.835
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.342,git/commit,21,3.835
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.343,git/commit,21,3.835
git/commit createMergeCommit with no changes throws an error,0.081,git/commit,21,3.835
git/commit index corner cases can commit when staged new file is then deleted,0.136,git/commit,21,3.835
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.152,git/commit,21,3.835
git/commit index corner cases file is deleted in index,0.156,git/commit,21,3.835
git/rebase can parse progress returns a value indicating conflicts were encountered,0.427,git/rebase,7,3.874
git/rebase can parse progress status detects REBASE_HEAD,0.414,git/rebase,7,3.874
git/rebase can parse progress is a detached HEAD state,0.445,git/rebase,7,3.874
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.839,git/rebase,7,3.874
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.855,git/rebase,7,3.874
git/rebase can parse progress for long rebase is a detached HEAD state,0.844,git/rebase,7,3.874
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.161,git/stash,14,2.518
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.248,git/stash,14,2.518
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.204,git/stash,14,2.518
GitStore loadCommitBatch includes HEAD when loading commits,0.33,GitStore,11,2.409
GitStore can discard changes from a repository,0.175,GitStore,11,2.409
GitStore can discard a renamed file,0.152,GitStore,11,2.409
GitStore undo first commit reports the repository is unborn,0.184,GitStore,11,2.409
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.409
GitStore undo first commit clears the undo commit dialog,0.222,GitStore,11,2.409
GitStore undo first commit has no staged files,0.194,GitStore,11,2.409
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.409
git/status getStatus with conflicted repo parses conflicted files with markers,0.289,git/status,12,1.986
git/status getStatus with conflicted repo parses conflicted files without markers,0.287,git/status,12,1.986
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.473,git/status,12,1.986
git/status getStatus with conflicted repo parses resolved files,0.285,git/status,12,1.986
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.112,git/status,12,1.986
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.175,git/status,12,1.986
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,1.986
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.04,git/status,12,1.986
git/status getStatus with unconflicted repo reflects renames,0.078,git/status,12,1.986
git/status getStatus with unconflicted repo reflects copies,0.085,git/status,12,1.986
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.046,git/status,12,1.986
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.419
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.419
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.419
git/diff getBlobImage retrieves valid images for deleted file,0.051,git/diff,19,1.419
git/diff imageDiff changes for images are set,0.069,git/diff,19,1.419
git/diff imageDiff changes for text are not set,0.073,git/diff,19,1.419
git/diff getWorkingDirectoryDiff counts lines for new file,0.065,git/diff,19,1.419
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.419
git/diff getWorkingDirectoryDiff counts lines for staged file,0.061,git/diff,19,1.419
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.079,git/diff,19,1.419
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.113,git/diff,19,1.419
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.116,git/diff,19,1.419
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.093,git/diff,19,1.419
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.1,git/diff,19,1.419
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.066,git/diff,19,1.419
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.058,git/diff,19,1.419
git/diff getBinaryPaths in repo with text only files returns an empty array,0.07,git/diff,19,1.419
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.419
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.097,git/diff,19,1.419
BranchPruner does nothing on non GitHub repositories,0.21,BranchPruner,6,1.593
BranchPruner prunes for GitHub repository,0.334,BranchPruner,6,1.593
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.197,BranchPruner,6,1.593
BranchPruner does not prune if there is no default branch,0.197,BranchPruner,6,1.593
BranchPruner does not prune reserved branches,0.259,BranchPruner,6,1.593
git/reflog getRecentBranches returns the recently checked out branches,0.132,git/reflog,6,0.891
git/reflog getRecentBranches works after renaming a branch,0.167,git/reflog,6,0.891
git/reflog getRecentBranches returns a limited number of branches,0.215,git/reflog,6,0.891
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.126,git/reflog,6,0.891
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.153,git/reflog,6,0.891
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.05,git/reflog,6,0.891
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.279,formatPatch,5,0.869
git/checkout can checkout a valid branch name in an existing repository,0.103,git/checkout,6,0.84
git/checkout can checkout a branch when it exists on multiple remotes,0.108,git/checkout,6,0.84
git/checkout will fail when an existing branch matches the remote branch,0.102,git/checkout,6,0.84
git/checkout with submodules cleans up an submodule that no longer exists,0.241,git/checkout,6,0.84
git/checkout with submodules updates a changed submodule reference,0.212,git/checkout,6,0.84
git/submodule listSubmodules returns the submodule entry,0.101,git/submodule,3,0.589
git/submodule listSubmodules returns the expected tag,0.148,git/submodule,3,0.589
git/submodule resetSubmodulePaths update submodule to original commit,0.297,git/submodule,3,0.589
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.099,gitignore,9,0.615
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.615
gitignore saveGitIgnore applies rule correctly to repository,0.09,gitignore,9,0.615
gitignore appendIgnoreRule appends one rule,0.102,gitignore,9,0.615
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.615
git/rev-parse isGitRepository should return true for a repository,0.044,git/rev-parse,10,0.632
git/rev-parse isGitRepository should return false for a directory,0.044,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns false for default initialized repository,0.048,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns true for initialized bare repository,0.06,git/rev-parse,10,0.632
git/rev-parse isBareRepository returns false for empty directory,0.051,git/rev-parse,10,0.632
git/rev-parse isBareRepository throws error for missing directory,0.043,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.632
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.169,git/rev-parse,10,0.632
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.624
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.624
git/branch tip returns detached for arbitrary checkout,0.049,git/branch,10,0.624
git/branch tip returns current branch when on a valid HEAD,0.071,git/branch,10,0.624
git/branch tip returns non-origin remote,0.075,git/branch,10,0.624
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,10,0.624
git/branch getBranchesPointedAt in a local repo finds one branch name,0.049,git/branch,10,0.624
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.624
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.05,git/branch,10,0.624
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.081,git/branch,10,0.624
git/merge merge and is successful returns true,0.036,git/merge,7,0.552
git/merge merge and is a noop returns false,0.052,git/merge,7,0.552
git/merge getMergeBase returns the common ancestor of two branches,0.064,git/merge,7,0.552
git/log getCommits loads history,0.054,git/log,7,0.52
git/log getCommits handles repository with HEAD file on disk,0.076,git/log,7,0.52
git/log getCommits handles repository with signed commit and log.showSignature set,0.095,git/log,7,0.52
git/log getChangedFiles loads the files changed in the commit,0.042,git/log,7,0.52
git/log getChangedFiles detects renames,0.071,git/log,7,0.52
git/log getChangedFiles detect copies,0.088,git/log,7,0.52
git/log getChangedFiles handles commit when HEAD exists on disk,0.048,git/log,7,0.52
git-lfs isUsingLFS returns false for repository not using LFS,0.052,git-lfs,9,0.517
git-lfs isUsingLFS returns true if LFS is tracking a path,0.071,git-lfs,9,0.517
git/remote getRemotes should return both remotes,0.046,git/remote,9,0.411
git/remote findDefaultRemote returns origin when multiple remotes found,0.055,git/remote,9,0.411
git/remote findDefaultRemote returns something when origin removed,0.054,git/remote,9,0.411
validatedRepositoryPath returns the path to the repository,0.04,validatedRepositoryPath,2,0.098
git/core error handling does not throw for errors that were expected,0.043,git/core,4,0.221
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.221
git/core exit code handling does not throw for exit codes that were expected,0.048,git/core,4,0.221
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.221
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.044,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.026,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.027,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.312
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.312
git/config config looks up config values,0.044,git/config,4,0.282
git/config config returns null for undefined values,0.049,git/config,4,0.282
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.282
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,4,0.282
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for empty repo,0.065,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.049,git/for-each-ref,3,0.211
AppStore can select a repository,0.138,AppStore,5,0.192
git/reset reset can hard reset a repository,0.373,git/reset,2,0.42
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.376,git/rebase,21,8.548
git/rebase detect conflicts status detects REBASE_HEAD,0.29,git/rebase,21,8.548
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.548
git/rebase detect conflicts is a detached HEAD state,0.288,git/rebase,21,8.548
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.32,git/rebase,21,8.548
git/rebase abort after conflicts found no longer has working directory changes,0.313,git/rebase,21,8.548
git/rebase abort after conflicts found returns to the feature branch,0.327,git/rebase,21,8.548
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.372,git/rebase,21,8.548
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.393,git/rebase,21,8.548
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.393,git/rebase,21,8.548
git/rebase continue after resolving conflicts returns success,0.42,git/rebase,21,8.548
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.415,git/rebase,21,8.548
git/rebase continue after resolving conflicts no longer has working directory changes,0.432,git/rebase,21,8.548
git/rebase continue after resolving conflicts returns to the feature branch,0.414,git/rebase,21,8.548
git/rebase continue after resolving conflicts branch is now a different ref,0.467,git/rebase,21,8.548
git/rebase continue with additional changes unrelated to conflicted files returns success,0.434,git/rebase,21,8.548
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.422,git/rebase,21,8.548
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.438,git/rebase,21,8.548
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.441,git/rebase,21,8.548
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.451,git/rebase,21,8.548
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.403,git/rebase,21,8.548
git/rebase can parse progress returns a value indicating conflicts were encountered,0.379,git/rebase,7,3.359
git/rebase can parse progress status detects REBASE_HEAD,0.369,git/rebase,7,3.359
git/rebase can parse progress is a detached HEAD state,0.383,git/rebase,7,3.359
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.697,git/rebase,7,3.359
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.733,git/rebase,7,3.359
git/rebase can parse progress for long rebase is a detached HEAD state,0.74,git/rebase,7,3.359
git/commit createCommit normal commits the given files,0.118,git/commit,21,4.161
git/commit createCommit normal commit does not strip commentary by default,0.094,git/commit,21,4.161
git/commit createCommit normal can commit for empty repository,0.13,git/commit,21,4.161
git/commit createCommit normal can commit renames,0.144,git/commit,21,4.161
git/commit createCommit partials can commit some lines from new file,0.159,git/commit,21,4.161
git/commit createCommit partials can commit second hunk from modified file,0.165,git/commit,21,4.161
git/commit createCommit partials can commit single delete from modified file,0.145,git/commit,21,4.161
git/commit createCommit partials can commit multiple hunks from modified file,0.167,git/commit,21,4.161
git/commit createCommit partials can commit some lines from deleted file,0.157,git/commit,21,4.161
git/commit createCommit partials can commit renames with modifications,0.165,git/commit,21,4.161
git/commit createCommit partials can commit renames with partially selected modifications,0.211,git/commit,21,4.161
git/commit createCommit with a merge conflict creates a merge commit,0.255,git/commit,21,4.161
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.225,git/commit,21,4.161
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.309,git/commit,21,4.161
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.317,git/commit,21,4.161
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.366,git/commit,21,4.161
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.393,git/commit,21,4.161
git/commit createMergeCommit with no changes throws an error,0.097,git/commit,21,4.161
git/commit index corner cases can commit when staged new file is then deleted,0.145,git/commit,21,4.161
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.178,git/commit,21,4.161
git/commit index corner cases file is deleted in index,0.164,git/commit,21,4.161
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.167,git/stash,14,2.687
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.33,git/stash,14,2.687
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.194,git/stash,14,2.687
GitStore loadCommitBatch includes HEAD when loading commits,0.335,GitStore,11,2.369
GitStore can discard changes from a repository,0.171,GitStore,11,2.369
GitStore can discard a renamed file,0.146,GitStore,11,2.369
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.369
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.369
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.369
GitStore undo first commit has no staged files,0.195,GitStore,11,2.369
GitStore repository with HEAD file can discard modified change cleanly,0.107,GitStore,11,2.369
git/status getStatus with conflicted repo parses conflicted files with markers,0.284,git/status,12,1.959
git/status getStatus with conflicted repo parses conflicted files without markers,0.279,git/status,12,1.959
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.504,git/status,12,1.959
git/status getStatus with conflicted repo parses resolved files,0.35,git/status,12,1.959
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.103,git/status,12,1.959
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.105,git/status,12,1.959
git/status getStatus with unconflicted repo parses changed files,0.043,git/status,12,1.959
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.038,git/status,12,1.959
git/status getStatus with unconflicted repo reflects renames,0.075,git/status,12,1.959
git/status getStatus with unconflicted repo reflects copies,0.088,git/status,12,1.959
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.959
BranchPruner does nothing on non GitHub repositories,0.18,BranchPruner,6,1.377
BranchPruner prunes for GitHub repository,0.231,BranchPruner,6,1.377
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.186,BranchPruner,6,1.377
BranchPruner does not prune if there is no default branch,0.173,BranchPruner,6,1.377
BranchPruner does not prune reserved branches,0.231,BranchPruner,6,1.377
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.581
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.096,git/diff,19,1.581
git/diff getBlobImage retrieves valid image for modified file,0.065,git/diff,19,1.581
git/diff getBlobImage retrieves valid images for deleted file,0.072,git/diff,19,1.581
git/diff imageDiff changes for images are set,0.071,git/diff,19,1.581
git/diff imageDiff changes for text are not set,0.068,git/diff,19,1.581
git/diff getWorkingDirectoryDiff counts lines for new file,0.069,git/diff,19,1.581
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.581
git/diff getWorkingDirectoryDiff counts lines for staged file,0.072,git/diff,19,1.581
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.087,git/diff,19,1.581
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.581
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.131,git/diff,19,1.581
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.12,git/diff,19,1.581
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.114,git/diff,19,1.581
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.075,git/diff,19,1.581
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.581
git/diff getBinaryPaths in repo with text only files returns an empty array,0.063,git/diff,19,1.581
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.075,git/diff,19,1.581
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.086,git/diff,19,1.581
git/reflog getRecentBranches returns the recently checked out branches,0.133,git/reflog,6,0.969
git/reflog getRecentBranches works after renaming a branch,0.184,git/reflog,6,0.969
git/reflog getRecentBranches returns a limited number of branches,0.24,git/reflog,6,0.969
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.137,git/reflog,6,0.969
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.176,git/reflog,6,0.969
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.969
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.289,formatPatch,5,0.954
git/checkout can checkout a valid branch name in an existing repository,0.107,git/checkout,6,0.848
git/checkout can checkout a branch when it exists on multiple remotes,0.116,git/checkout,6,0.848
git/checkout will fail when an existing branch matches the remote branch,0.102,git/checkout,6,0.848
git/checkout with submodules cleans up an submodule that no longer exists,0.241,git/checkout,6,0.848
git/checkout with submodules updates a changed submodule reference,0.212,git/checkout,6,0.848
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.612
git/rev-parse isGitRepository should return false for a directory,0.042,git/rev-parse,10,0.612
git/rev-parse isBareRepository returns false for default initialized repository,0.052,git/rev-parse,10,0.612
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.612
git/rev-parse isBareRepository returns false for empty directory,0.04,git/rev-parse,10,0.612
git/rev-parse isBareRepository throws error for missing directory,0.039,git/rev-parse,10,0.612
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.612
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.044,git/rev-parse,10,0.612
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.047,git/rev-parse,10,0.612
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.17,git/rev-parse,10,0.612
git/branch tip returns unborn for new repository,0.034,git/branch,10,0.601
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,10,0.601
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.601
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.601
git/branch tip returns non-origin remote,0.074,git/branch,10,0.601
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.601
git/branch getBranchesPointedAt in a local repo finds one branch name,0.048,git/branch,10,0.601
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.601
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.601
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.08,git/branch,10,0.601
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.105,gitignore,9,0.667
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.105,gitignore,9,0.667
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.667
gitignore appendIgnoreRule appends one rule,0.116,gitignore,9,0.667
gitignore appendIgnoreRule appends multiple rules,0.118,gitignore,9,0.667
git/submodule listSubmodules returns the submodule entry,0.096,git/submodule,3,0.581
git/submodule listSubmodules returns the expected tag,0.149,git/submodule,3,0.581
git/submodule resetSubmodulePaths update submodule to original commit,0.293,git/submodule,3,0.581
git/merge merge and is successful returns true,0.028,git/merge,7,0.554
git/merge merge and is a noop returns false,0.049,git/merge,7,0.554
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.554
git/log getCommits loads history,0.051,git/log,7,0.498
git/log getCommits handles repository with HEAD file on disk,0.075,git/log,7,0.498
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.498
git/log getChangedFiles loads the files changed in the commit,0.045,git/log,7,0.498
git/log getChangedFiles detects renames,0.069,git/log,7,0.498
git/log getChangedFiles detect copies,0.079,git/log,7,0.498
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.498
git-lfs isUsingLFS returns false for repository not using LFS,0.044,git-lfs,9,0.525
git-lfs isUsingLFS returns true if LFS is tracking a path,0.07,git-lfs,9,0.525
git/reset reset can hard reset a repository,0.059,git/reset,2,0.104
git/remote getRemotes should return both remotes,0.039,git/remote,9,0.451
git/remote findDefaultRemote returns origin when multiple remotes found,0.068,git/remote,9,0.451
git/remote findDefaultRemote returns something when origin removed,0.063,git/remote,9,0.451
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.154,patch formatting,8,0.414
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.046,patch formatting,8,0.414
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.035,patch formatting,8,0.414
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.038,patch formatting,8,0.414
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.026,patch formatting,8,0.414
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.414
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.414
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.414
git/config config looks up config values,0.045,git/config,4,0.28
git/config config returns null for undefined values,0.043,git/config,4,0.28
git/config global config getGlobalConfigPath gets the config path,0.056,git/config,4,0.28
git/config global config setGlobalConfigValue will replace all entries for a global value,0.09,git/config,4,0.28
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.225
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.225
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.225
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.225
git/for-each-ref getBranches fetches branches using for-each-ref,0.069,git/for-each-ref,3,0.206
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.206
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.206
AppStore can select a repository,0.125,AppStore,5,0.179
validatedRepositoryPath returns the path to the repository,0.376,validatedRepositoryPath,2,0.436
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.044
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.38,git/rebase,21,8.476
git/rebase detect conflicts status detects REBASE_HEAD,0.287,git/rebase,21,8.476
git/rebase detect conflicts has conflicted files in working directory,0.269,git/rebase,21,8.476
git/rebase detect conflicts is a detached HEAD state,0.288,git/rebase,21,8.476
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.303,git/rebase,21,8.476
git/rebase abort after conflicts found no longer has working directory changes,0.311,git/rebase,21,8.476
git/rebase abort after conflicts found returns to the feature branch,0.303,git/rebase,21,8.476
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.377,git/rebase,21,8.476
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.395,git/rebase,21,8.476
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.37,git/rebase,21,8.476
git/rebase continue after resolving conflicts returns success,0.416,git/rebase,21,8.476
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.416,git/rebase,21,8.476
git/rebase continue after resolving conflicts no longer has working directory changes,0.456,git/rebase,21,8.476
git/rebase continue after resolving conflicts returns to the feature branch,0.418,git/rebase,21,8.476
git/rebase continue after resolving conflicts branch is now a different ref,0.437,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files returns success,0.419,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.433,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.427,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.433,git/rebase,21,8.476
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.473,git/rebase,21,8.476
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.414,git/rebase,21,8.476
git/commit createCommit normal commits the given files,0.109,git/commit,21,3.865
git/commit createCommit normal commit does not strip commentary by default,0.09,git/commit,21,3.865
git/commit createCommit normal can commit for empty repository,0.113,git/commit,21,3.865
git/commit createCommit normal can commit renames,0.135,git/commit,21,3.865
git/commit createCommit partials can commit some lines from new file,0.156,git/commit,21,3.865
git/commit createCommit partials can commit second hunk from modified file,0.157,git/commit,21,3.865
git/commit createCommit partials can commit single delete from modified file,0.14,git/commit,21,3.865
git/commit createCommit partials can commit multiple hunks from modified file,0.166,git/commit,21,3.865
git/commit createCommit partials can commit some lines from deleted file,0.155,git/commit,21,3.865
git/commit createCommit partials can commit renames with modifications,0.157,git/commit,21,3.865
git/commit createCommit partials can commit renames with partially selected modifications,0.192,git/commit,21,3.865
git/commit createCommit with a merge conflict creates a merge commit,0.224,git/commit,21,3.865
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.207,git/commit,21,3.865
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.306,git/commit,21,3.865
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.282,git/commit,21,3.865
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.343,git/commit,21,3.865
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.346,git/commit,21,3.865
git/commit createMergeCommit with no changes throws an error,0.085,git/commit,21,3.865
git/commit index corner cases can commit when staged new file is then deleted,0.136,git/commit,21,3.865
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.16,git/commit,21,3.865
git/commit index corner cases file is deleted in index,0.147,git/commit,21,3.865
git/rebase can parse progress returns a value indicating conflicts were encountered,0.436,git/rebase,7,3.923
git/rebase can parse progress status detects REBASE_HEAD,0.444,git/rebase,7,3.923
git/rebase can parse progress is a detached HEAD state,0.411,git/rebase,7,3.923
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.827,git/rebase,7,3.923
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.906,git/rebase,7,3.923
git/rebase can parse progress for long rebase is a detached HEAD state,0.851,git/rebase,7,3.923
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.166,git/stash,14,2.587
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.289,git/stash,14,2.587
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.235,git/stash,14,2.587
GitStore loadCommitBatch includes HEAD when loading commits,0.324,GitStore,11,2.381
GitStore can discard changes from a repository,0.171,GitStore,11,2.381
GitStore can discard a renamed file,0.15,GitStore,11,2.381
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.381
GitStore undo first commit pre-fills the commit message,0.117,GitStore,11,2.381
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.381
GitStore undo first commit has no staged files,0.195,GitStore,11,2.381
GitStore repository with HEAD file can discard modified change cleanly,0.121,GitStore,11,2.381
git/status getStatus with conflicted repo parses conflicted files with markers,0.285,git/status,12,1.798
git/status getStatus with conflicted repo parses conflicted files without markers,0.314,git/status,12,1.798
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.409,git/status,12,1.798
git/status getStatus with conflicted repo parses resolved files,0.249,git/status,12,1.798
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.098,git/status,12,1.798
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.121,git/status,12,1.798
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,1.798
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.038,git/status,12,1.798
git/status getStatus with unconflicted repo reflects renames,0.075,git/status,12,1.798
git/status getStatus with unconflicted repo reflects copies,0.075,git/status,12,1.798
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.036,git/status,12,1.798
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.03,git/diff,19,1.535
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.041,git/diff,19,1.535
git/diff getBlobImage retrieves valid image for modified file,0.037,git/diff,19,1.535
git/diff getBlobImage retrieves valid images for deleted file,0.051,git/diff,19,1.535
git/diff imageDiff changes for images are set,0.071,git/diff,19,1.535
git/diff imageDiff changes for text are not set,0.067,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for new file,0.068,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for modified file,0.063,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for staged file,0.119,git/diff,19,1.535
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.122,git/diff,19,1.535
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.122,git/diff,19,1.535
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.134,git/diff,19,1.535
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.1,git/diff,19,1.535
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.1,git/diff,19,1.535
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.069,git/diff,19,1.535
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.535
git/diff getBinaryPaths in repo with text only files returns an empty array,0.073,git/diff,19,1.535
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.076,git/diff,19,1.535
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.535
BranchPruner does nothing on non GitHub repositories,0.19,BranchPruner,6,1.478
BranchPruner prunes for GitHub repository,0.243,BranchPruner,6,1.478
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.203,BranchPruner,6,1.478
BranchPruner does not prune if there is no default branch,0.204,BranchPruner,6,1.478
BranchPruner does not prune reserved branches,0.254,BranchPruner,6,1.478
git/reflog getRecentBranches returns the recently checked out branches,0.125,git/reflog,6,0.898
git/reflog getRecentBranches works after renaming a branch,0.159,git/reflog,6,0.898
git/reflog getRecentBranches returns a limited number of branches,0.224,git/reflog,6,0.898
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.126,git/reflog,6,0.898
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.161,git/reflog,6,0.898
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.057,git/reflog,6,0.898
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.284,formatPatch,5,0.884
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.854
git/checkout can checkout a branch when it exists on multiple remotes,0.11,git/checkout,6,0.854
git/checkout will fail when an existing branch matches the remote branch,0.096,git/checkout,6,0.854
git/checkout with submodules cleans up an submodule that no longer exists,0.273,git/checkout,6,0.854
git/checkout with submodules updates a changed submodule reference,0.196,git/checkout,6,0.854
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.098,gitignore,9,0.591
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.591
gitignore saveGitIgnore applies rule correctly to repository,0.085,gitignore,9,0.591
gitignore appendIgnoreRule appends one rule,0.094,gitignore,9,0.591
gitignore appendIgnoreRule appends multiple rules,0.098,gitignore,9,0.591
git/rev-parse isGitRepository should return true for a repository,0.043,git/rev-parse,10,0.602
git/rev-parse isGitRepository should return false for a directory,0.04,git/rev-parse,10,0.602
git/rev-parse isBareRepository returns false for default initialized repository,0.049,git/rev-parse,10,0.602
git/rev-parse isBareRepository returns true for initialized bare repository,0.049,git/rev-parse,10,0.602
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.602
git/rev-parse isBareRepository throws error for missing directory,0.037,git/rev-parse,10,0.602
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.602
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.039,git/rev-parse,10,0.602
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.042,git/rev-parse,10,0.602
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.181,git/rev-parse,10,0.602
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.559
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,10,0.559
git/branch tip returns detached for arbitrary checkout,0.041,git/branch,10,0.559
git/branch tip returns current branch when on a valid HEAD,0.063,git/branch,10,0.559
git/branch tip returns non-origin remote,0.066,git/branch,10,0.559
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.078,git/branch,10,0.559
git/branch getBranchesPointedAt in a local repo finds one branch name,0.042,git/branch,10,0.559
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.559
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.035,git/branch,10,0.559
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.071,git/branch,10,0.559
git/submodule listSubmodules returns the submodule entry,0.098,git/submodule,3,0.599
git/submodule listSubmodules returns the expected tag,0.155,git/submodule,3,0.599
git/submodule resetSubmodulePaths update submodule to original commit,0.302,git/submodule,3,0.599
git/merge merge and is successful returns true,0.031,git/merge,7,0.533
git/merge merge and is a noop returns false,0.044,git/merge,7,0.533
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.533
git-lfs isUsingLFS returns false for repository not using LFS,0.043,git-lfs,9,0.481
git-lfs isUsingLFS returns true if LFS is tracking a path,0.066,git-lfs,9,0.481
git/log getCommits loads history,0.059,git/log,7,0.529
git/log getCommits handles repository with HEAD file on disk,0.079,git/log,7,0.529
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.529
git/log getChangedFiles loads the files changed in the commit,0.047,git/log,7,0.529
git/log getChangedFiles detects renames,0.082,git/log,7,0.529
git/log getChangedFiles detect copies,0.087,git/log,7,0.529
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.529
git/remote getRemotes should return both remotes,0.037,git/remote,9,0.403
git/remote findDefaultRemote returns origin when multiple remotes found,0.048,git/remote,9,0.403
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.403
validatedRepositoryPath returns the path to the repository,0.039,validatedRepositoryPath,2,0.096
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.043,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.046,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.026,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.303
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.303
git/config config looks up config values,0.045,git/config,4,0.279
git/config config returns null for undefined values,0.046,git/config,4,0.279
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.279
git/config global config setGlobalConfigValue will replace all entries for a global value,0.089,git/config,4,0.279
git/core error handling does not throw for errors that were expected,0.045,git/core,4,0.222
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.222
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.222
git/core exit code handling throws for exit codes that were not expected,0.05,git/core,4,0.222
git/for-each-ref getBranches fetches branches using for-each-ref,0.069,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for empty repo,0.063,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.039,git/for-each-ref,3,0.199
AppStore can select a repository,0.132,AppStore,5,0.186
git/reset reset can hard reset a repository,0.428,git/reset,2,0.473
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.043
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.367,git/rebase,21,8.481
git/rebase detect conflicts status detects REBASE_HEAD,0.279,git/rebase,21,8.481
git/rebase detect conflicts has conflicted files in working directory,0.28,git/rebase,21,8.481
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,8.481
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.298,git/rebase,21,8.481
git/rebase abort after conflicts found no longer has working directory changes,0.303,git/rebase,21,8.481
git/rebase abort after conflicts found returns to the feature branch,0.307,git/rebase,21,8.481
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.37,git/rebase,21,8.481
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.405,git/rebase,21,8.481
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.363,git/rebase,21,8.481
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.481
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.422,git/rebase,21,8.481
git/rebase continue after resolving conflicts no longer has working directory changes,0.46,git/rebase,21,8.481
git/rebase continue after resolving conflicts returns to the feature branch,0.421,git/rebase,21,8.481
git/rebase continue after resolving conflicts branch is now a different ref,0.467,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files returns success,0.419,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.434,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.426,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.423,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.474,git/rebase,21,8.481
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,8.481
git/rebase can parse progress returns a value indicating conflicts were encountered,0.386,git/rebase,7,3.464
git/rebase can parse progress status detects REBASE_HEAD,0.399,git/rebase,7,3.464
git/rebase can parse progress is a detached HEAD state,0.374,git/rebase,7,3.464
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.698,git/rebase,7,3.464
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.753,git/rebase,7,3.464
git/rebase can parse progress for long rebase is a detached HEAD state,0.802,git/rebase,7,3.464
git/commit createCommit normal commits the given files,0.116,git/commit,21,4.137
git/commit createCommit normal commit does not strip commentary by default,0.101,git/commit,21,4.137
git/commit createCommit normal can commit for empty repository,0.128,git/commit,21,4.137
git/commit createCommit normal can commit renames,0.143,git/commit,21,4.137
git/commit createCommit partials can commit some lines from new file,0.162,git/commit,21,4.137
git/commit createCommit partials can commit second hunk from modified file,0.166,git/commit,21,4.137
git/commit createCommit partials can commit single delete from modified file,0.152,git/commit,21,4.137
git/commit createCommit partials can commit multiple hunks from modified file,0.168,git/commit,21,4.137
git/commit createCommit partials can commit some lines from deleted file,0.158,git/commit,21,4.137
git/commit createCommit partials can commit renames with modifications,0.164,git/commit,21,4.137
git/commit createCommit partials can commit renames with partially selected modifications,0.212,git/commit,21,4.137
git/commit createCommit with a merge conflict creates a merge commit,0.249,git/commit,21,4.137
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.223,git/commit,21,4.137
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.324,git/commit,21,4.137
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.315,git/commit,21,4.137
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.372,git/commit,21,4.137
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.383,git/commit,21,4.137
git/commit createMergeCommit with no changes throws an error,0.08,git/commit,21,4.137
git/commit index corner cases can commit when staged new file is then deleted,0.142,git/commit,21,4.137
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.162,git/commit,21,4.137
git/commit index corner cases file is deleted in index,0.163,git/commit,21,4.137
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.465
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.242,git/stash,14,2.465
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.192,git/stash,14,2.465
GitStore loadCommitBatch includes HEAD when loading commits,0.371,GitStore,11,2.396
GitStore can discard changes from a repository,0.173,GitStore,11,2.396
GitStore can discard a renamed file,0.144,GitStore,11,2.396
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.396
GitStore undo first commit pre-fills the commit message,0.123,GitStore,11,2.396
GitStore undo first commit clears the undo commit dialog,0.2,GitStore,11,2.396
GitStore undo first commit has no staged files,0.193,GitStore,11,2.396
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.396
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.85
git/status getStatus with conflicted repo parses conflicted files without markers,0.278,git/status,12,1.85
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.523,git/status,12,1.85
git/status getStatus with conflicted repo parses resolved files,0.225,git/status,12,1.85
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.085,git/status,12,1.85
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.104,git/status,12,1.85
git/status getStatus with unconflicted repo parses changed files,0.049,git/status,12,1.85
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.049,git/status,12,1.85
git/status getStatus with unconflicted repo reflects renames,0.087,git/status,12,1.85
git/status getStatus with unconflicted repo reflects copies,0.081,git/status,12,1.85
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.041,git/status,12,1.85
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.034,git/diff,19,1.488
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.045,git/diff,19,1.488
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.488
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.488
git/diff imageDiff changes for images are set,0.073,git/diff,19,1.488
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for new file,0.076,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for modified file,0.065,git/diff,19,1.488
git/diff getWorkingDirectoryDiff counts lines for staged file,0.066,git/diff,19,1.488
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.488
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.127,git/diff,19,1.488
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.124,git/diff,19,1.488
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.488
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.111,git/diff,19,1.488
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.074,git/diff,19,1.488
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.488
git/diff getBinaryPaths in repo with text only files returns an empty array,0.07,git/diff,19,1.488
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.08,git/diff,19,1.488
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.088,git/diff,19,1.488
BranchPruner does nothing on non GitHub repositories,0.274,BranchPruner,6,1.544
BranchPruner prunes for GitHub repository,0.23,BranchPruner,6,1.544
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.182,BranchPruner,6,1.544
BranchPruner does not prune if there is no default branch,0.203,BranchPruner,6,1.544
BranchPruner does not prune reserved branches,0.25,BranchPruner,6,1.544
git/reflog getRecentBranches returns the recently checked out branches,0.129,git/reflog,6,0.879
git/reflog getRecentBranches works after renaming a branch,0.154,git/reflog,6,0.879
git/reflog getRecentBranches returns a limited number of branches,0.211,git/reflog,6,0.879
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.132,git/reflog,6,0.879
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.156,git/reflog,6,0.879
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.05,git/reflog,6,0.879
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.265,formatPatch,5,0.873
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.856
git/checkout can checkout a branch when it exists on multiple remotes,0.107,git/checkout,6,0.856
git/checkout will fail when an existing branch matches the remote branch,0.098,git/checkout,6,0.856
git/checkout with submodules cleans up an submodule that no longer exists,0.254,git/checkout,6,0.856
git/checkout with submodules updates a changed submodule reference,0.221,git/checkout,6,0.856
git/rev-parse isGitRepository should return true for a repository,0.116,git/rev-parse,10,0.67
git/rev-parse isGitRepository should return false for a directory,0.047,git/rev-parse,10,0.67
git/rev-parse isBareRepository returns false for default initialized repository,0.054,git/rev-parse,10,0.67
git/rev-parse isBareRepository returns true for initialized bare repository,0.047,git/rev-parse,10,0.67
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.67
git/rev-parse isBareRepository throws error for missing directory,0.037,git/rev-parse,10,0.67
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.67
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.67
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.05,git/rev-parse,10,0.67
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.155,git/rev-parse,10,0.67
git/submodule listSubmodules returns the submodule entry,0.104,git/submodule,3,0.597
git/submodule listSubmodules returns the expected tag,0.147,git/submodule,3,0.597
git/submodule resetSubmodulePaths update submodule to original commit,0.299,git/submodule,3,0.597
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.088,gitignore,9,0.594
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.092,gitignore,9,0.594
gitignore saveGitIgnore applies rule correctly to repository,0.085,gitignore,9,0.594
gitignore appendIgnoreRule appends one rule,0.098,gitignore,9,0.594
gitignore appendIgnoreRule appends multiple rules,0.106,gitignore,9,0.594
git/branch tip returns unborn for new repository,0.032,git/branch,10,0.584
git/branch tip returns correct ref if checkout occurs,0.044,git/branch,10,0.584
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.584
git/branch tip returns current branch when on a valid HEAD,0.066,git/branch,10,0.584
git/branch tip returns non-origin remote,0.074,git/branch,10,0.584
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.072,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds one branch name,0.044,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.584
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.584
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.077,git/branch,10,0.584
git/merge merge and is successful returns true,0.037,git/merge,7,0.52
git/merge merge and is a noop returns false,0.05,git/merge,7,0.52
git/merge getMergeBase returns the common ancestor of two branches,0.058,git/merge,7,0.52
git/log getCommits loads history,0.059,git/log,7,0.527
git/log getCommits handles repository with HEAD file on disk,0.075,git/log,7,0.527
git/log getCommits handles repository with signed commit and log.showSignature set,0.096,git/log,7,0.527
git/log getChangedFiles loads the files changed in the commit,0.048,git/log,7,0.527
git/log getChangedFiles detects renames,0.078,git/log,7,0.527
git/log getChangedFiles detect copies,0.083,git/log,7,0.527
git/log getChangedFiles handles commit when HEAD exists on disk,0.047,git/log,7,0.527
git-lfs isUsingLFS returns false for repository not using LFS,0.042,git-lfs,9,0.498
git-lfs isUsingLFS returns true if LFS is tracking a path,0.074,git-lfs,9,0.498
git/reset reset can hard reset a repository,0.064,git/reset,2,0.109
git/remote getRemotes should return both remotes,0.042,git/remote,9,0.411
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,9,0.411
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.411
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.136,patch formatting,8,0.418
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.055,patch formatting,8,0.418
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.418
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.418
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.418
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.418
patch formatting formatPatchesForModifiedFile includes empty context lines,0.025,patch formatting,8,0.418
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.418
git/config config looks up config values,0.045,git/config,4,0.283
git/config config returns null for undefined values,0.044,git/config,4,0.283
git/config global config getGlobalConfigPath gets the config path,0.064,git/config,4,0.283
git/config global config setGlobalConfigValue will replace all entries for a global value,0.089,git/config,4,0.283
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.223
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.223
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.223
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.223
git/for-each-ref getBranches fetches branches using for-each-ref,0.065,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for empty repo,0.062,git/for-each-ref,3,0.203
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.203
AppStore can select a repository,0.125,AppStore,5,0.179
validatedRepositoryPath returns the path to the repository,0.37,validatedRepositoryPath,2,0.428
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.045
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.377,git/rebase,21,8.64
git/rebase detect conflicts status detects REBASE_HEAD,0.29,git/rebase,21,8.64
git/rebase detect conflicts has conflicted files in working directory,0.277,git/rebase,21,8.64
git/rebase detect conflicts is a detached HEAD state,0.289,git/rebase,21,8.64
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.334,git/rebase,21,8.64
git/rebase abort after conflicts found no longer has working directory changes,0.328,git/rebase,21,8.64
git/rebase abort after conflicts found returns to the feature branch,0.36,git/rebase,21,8.64
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.399,git/rebase,21,8.64
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.396,git/rebase,21,8.64
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.388,git/rebase,21,8.64
git/rebase continue after resolving conflicts returns success,0.42,git/rebase,21,8.64
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.421,git/rebase,21,8.64
git/rebase continue after resolving conflicts no longer has working directory changes,0.455,git/rebase,21,8.64
git/rebase continue after resolving conflicts returns to the feature branch,0.413,git/rebase,21,8.64
git/rebase continue after resolving conflicts branch is now a different ref,0.436,git/rebase,21,8.64
git/rebase continue with additional changes unrelated to conflicted files returns success,0.419,git/rebase,21,8.64
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.451,git/rebase,21,8.64
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.43,git/rebase,21,8.64
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.438,git/rebase,21,8.64
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.441,git/rebase,21,8.64
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.419,git/rebase,21,8.64
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.866
git/commit createCommit normal commit does not strip commentary by default,0.091,git/commit,21,3.866
git/commit createCommit normal can commit for empty repository,0.117,git/commit,21,3.866
git/commit createCommit normal can commit renames,0.14,git/commit,21,3.866
git/commit createCommit partials can commit some lines from new file,0.158,git/commit,21,3.866
git/commit createCommit partials can commit second hunk from modified file,0.16,git/commit,21,3.866
git/commit createCommit partials can commit single delete from modified file,0.15,git/commit,21,3.866
git/commit createCommit partials can commit multiple hunks from modified file,0.163,git/commit,21,3.866
git/commit createCommit partials can commit some lines from deleted file,0.151,git/commit,21,3.866
git/commit createCommit partials can commit renames with modifications,0.157,git/commit,21,3.866
git/commit createCommit partials can commit renames with partially selected modifications,0.198,git/commit,21,3.866
git/commit createCommit with a merge conflict creates a merge commit,0.232,git/commit,21,3.866
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.214,git/commit,21,3.866
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.289,git/commit,21,3.866
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.279,git/commit,21,3.866
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.347,git/commit,21,3.866
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.335,git/commit,21,3.866
git/commit createMergeCommit with no changes throws an error,0.074,git/commit,21,3.866
git/commit index corner cases can commit when staged new file is then deleted,0.13,git/commit,21,3.866
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.159,git/commit,21,3.866
git/commit index corner cases file is deleted in index,0.151,git/commit,21,3.866
git/rebase can parse progress returns a value indicating conflicts were encountered,0.426,git/rebase,7,3.793
git/rebase can parse progress status detects REBASE_HEAD,0.428,git/rebase,7,3.793
git/rebase can parse progress is a detached HEAD state,0.438,git/rebase,7,3.793
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.793,git/rebase,7,3.793
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.824,git/rebase,7,3.793
git/rebase can parse progress for long rebase is a detached HEAD state,0.833,git/rebase,7,3.793
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.161,git/stash,14,2.455
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.241,git/stash,14,2.455
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.215,git/stash,14,2.455
GitStore loadCommitBatch includes HEAD when loading commits,0.363,GitStore,11,2.394
GitStore can discard changes from a repository,0.172,GitStore,11,2.394
GitStore can discard a renamed file,0.148,GitStore,11,2.394
GitStore undo first commit reports the repository is unborn,0.182,GitStore,11,2.394
GitStore undo first commit pre-fills the commit message,0.117,GitStore,11,2.394
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.394
GitStore undo first commit has no staged files,0.194,GitStore,11,2.394
GitStore repository with HEAD file can discard modified change cleanly,0.113,GitStore,11,2.394
git/status getStatus with conflicted repo parses conflicted files with markers,0.279,git/status,12,1.943
git/status getStatus with conflicted repo parses conflicted files without markers,0.274,git/status,12,1.943
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.47,git/status,12,1.943
git/status getStatus with conflicted repo parses resolved files,0.29,git/status,12,1.943
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.165,git/status,12,1.943
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.116,git/status,12,1.943
git/status getStatus with unconflicted repo parses changed files,0.044,git/status,12,1.943
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.043,git/status,12,1.943
git/status getStatus with unconflicted repo reflects renames,0.081,git/status,12,1.943
git/status getStatus with unconflicted repo reflects copies,0.083,git/status,12,1.943
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.044,git/status,12,1.943
BranchPruner does nothing on non GitHub repositories,0.2,BranchPruner,6,1.372
BranchPruner prunes for GitHub repository,0.244,BranchPruner,6,1.372
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.176,BranchPruner,6,1.372
BranchPruner does not prune if there is no default branch,0.161,BranchPruner,6,1.372
BranchPruner does not prune reserved branches,0.221,BranchPruner,6,1.372
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.097,git/diff,19,1.572
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.051,git/diff,19,1.572
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.572
git/diff getBlobImage retrieves valid images for deleted file,0.052,git/diff,19,1.572
git/diff imageDiff changes for images are set,0.08,git/diff,19,1.572
git/diff imageDiff changes for text are not set,0.059,git/diff,19,1.572
git/diff getWorkingDirectoryDiff counts lines for new file,0.057,git/diff,19,1.572
git/diff getWorkingDirectoryDiff counts lines for modified file,0.065,git/diff,19,1.572
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.572
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.095,git/diff,19,1.572
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.125,git/diff,19,1.572
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.14,git/diff,19,1.572
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.113,git/diff,19,1.572
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.117,git/diff,19,1.572
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.078,git/diff,19,1.572
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.572
git/diff getBinaryPaths in repo with text only files returns an empty array,0.066,git/diff,19,1.572
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.079,git/diff,19,1.572
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.572
git/reflog getRecentBranches returns the recently checked out branches,0.132,git/reflog,6,0.95
git/reflog getRecentBranches works after renaming a branch,0.177,git/reflog,6,0.95
git/reflog getRecentBranches returns a limited number of branches,0.235,git/reflog,6,0.95
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.138,git/reflog,6,0.95
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.166,git/reflog,6,0.95
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.95
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.308,formatPatch,5,0.962
git/checkout can checkout a valid branch name in an existing repository,0.116,git/checkout,6,0.849
git/checkout can checkout a branch when it exists on multiple remotes,0.113,git/checkout,6,0.849
git/checkout will fail when an existing branch matches the remote branch,0.108,git/checkout,6,0.849
git/checkout with submodules cleans up an submodule that no longer exists,0.252,git/checkout,6,0.849
git/checkout with submodules updates a changed submodule reference,0.188,git/checkout,6,0.849
git/rev-parse isGitRepository should return true for a repository,0.037,git/rev-parse,10,0.569
git/rev-parse isGitRepository should return false for a directory,0.037,git/rev-parse,10,0.569
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.569
git/rev-parse isBareRepository returns true for initialized bare repository,0.047,git/rev-parse,10,0.569
git/rev-parse isBareRepository returns false for empty directory,0.04,git/rev-parse,10,0.569
git/rev-parse isBareRepository throws error for missing directory,0.038,git/rev-parse,10,0.569
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.048,git/rev-parse,10,0.569
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.037,git/rev-parse,10,0.569
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.044,git/rev-parse,10,0.569
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.162,git/rev-parse,10,0.569
git/submodule listSubmodules returns the submodule entry,0.164,git/submodule,3,0.648
git/submodule listSubmodules returns the expected tag,0.14,git/submodule,3,0.648
git/submodule resetSubmodulePaths update submodule to original commit,0.303,git/submodule,3,0.648
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.094,gitignore,9,0.608
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.094,gitignore,9,0.608
gitignore saveGitIgnore applies rule correctly to repository,0.088,gitignore,9,0.608
gitignore appendIgnoreRule appends one rule,0.099,gitignore,9,0.608
gitignore appendIgnoreRule appends multiple rules,0.104,gitignore,9,0.608
git/branch tip returns unborn for new repository,0.033,git/branch,10,0.561
git/branch tip returns correct ref if checkout occurs,0.045,git/branch,10,0.561
git/branch tip returns detached for arbitrary checkout,0.043,git/branch,10,0.561
git/branch tip returns current branch when on a valid HEAD,0.064,git/branch,10,0.561
git/branch tip returns non-origin remote,0.068,git/branch,10,0.561
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.071,git/branch,10,0.561
git/branch getBranchesPointedAt in a local repo finds one branch name,0.041,git/branch,10,0.561
git/branch getBranchesPointedAt in a local repo finds no branch names,0.035,git/branch,10,0.561
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.561
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.072,git/branch,10,0.561
git/log getCommits loads history,0.06,git/log,7,0.5
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.5
git/log getCommits handles repository with signed commit and log.showSignature set,0.086,git/log,7,0.5
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.5
git/log getChangedFiles detects renames,0.074,git/log,7,0.5
git/log getChangedFiles detect copies,0.075,git/log,7,0.5
git/log getChangedFiles handles commit when HEAD exists on disk,0.041,git/log,7,0.5
git/merge merge and is successful returns true,0.035,git/merge,7,0.537
git/merge merge and is a noop returns false,0.051,git/merge,7,0.537
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.537
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.492
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.492
validatedRepositoryPath returns the path to the repository,0.043,validatedRepositoryPath,2,0.1
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.035,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.038,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.039,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.021,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile includes empty context lines,0.02,patch formatting,8,0.282
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.018,patch formatting,8,0.282
git/remote getRemotes should return both remotes,0.04,git/remote,9,0.426
git/remote findDefaultRemote returns origin when multiple remotes found,0.058,git/remote,9,0.426
git/remote findDefaultRemote returns something when origin removed,0.065,git/remote,9,0.426
git/config config looks up config values,0.042,git/config,4,0.264
git/config config returns null for undefined values,0.04,git/config,4,0.264
git/config global config getGlobalConfigPath gets the config path,0.051,git/config,4,0.264
git/config global config setGlobalConfigValue will replace all entries for a global value,0.085,git/config,4,0.264
git/core error handling does not throw for errors that were expected,0.037,git/core,4,0.204
git/core error handling throws for errors that were not expected,0.041,git/core,4,0.204
git/core exit code handling does not throw for exit codes that were expected,0.04,git/core,4,0.204
git/core exit code handling throws for exit codes that were not expected,0.043,git/core,4,0.204
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.2
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.2
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.043,git/for-each-ref,3,0.2
AppStore can select a repository,0.127,AppStore,5,0.181
git/reset reset can hard reset a repository,0.408,git/reset,2,0.452
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.021,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.366,git/rebase,21,8.473
git/rebase detect conflicts status detects REBASE_HEAD,0.274,git/rebase,21,8.473
git/rebase detect conflicts has conflicted files in working directory,0.273,git/rebase,21,8.473
git/rebase detect conflicts is a detached HEAD state,0.281,git/rebase,21,8.473
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.307,git/rebase,21,8.473
git/rebase abort after conflicts found no longer has working directory changes,0.299,git/rebase,21,8.473
git/rebase abort after conflicts found returns to the feature branch,0.307,git/rebase,21,8.473
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.387,git/rebase,21,8.473
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.389,git/rebase,21,8.473
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.381,git/rebase,21,8.473
git/rebase continue after resolving conflicts returns success,0.434,git/rebase,21,8.473
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.419,git/rebase,21,8.473
git/rebase continue after resolving conflicts no longer has working directory changes,0.447,git/rebase,21,8.473
git/rebase continue after resolving conflicts returns to the feature branch,0.417,git/rebase,21,8.473
git/rebase continue after resolving conflicts branch is now a different ref,0.449,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files returns success,0.419,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.456,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.423,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.427,git/rebase,21,8.473
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.461,git/rebase,21,8.473
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.404,git/rebase,21,8.473
git/commit createCommit normal commits the given files,0.108,git/commit,21,3.823
git/commit createCommit normal commit does not strip commentary by default,0.091,git/commit,21,3.823
git/commit createCommit normal can commit for empty repository,0.118,git/commit,21,3.823
git/commit createCommit normal can commit renames,0.136,git/commit,21,3.823
git/commit createCommit partials can commit some lines from new file,0.142,git/commit,21,3.823
git/commit createCommit partials can commit second hunk from modified file,0.148,git/commit,21,3.823
git/commit createCommit partials can commit single delete from modified file,0.141,git/commit,21,3.823
git/commit createCommit partials can commit multiple hunks from modified file,0.157,git/commit,21,3.823
git/commit createCommit partials can commit some lines from deleted file,0.156,git/commit,21,3.823
git/commit createCommit partials can commit renames with modifications,0.154,git/commit,21,3.823
git/commit createCommit partials can commit renames with partially selected modifications,0.193,git/commit,21,3.823
git/commit createCommit with a merge conflict creates a merge commit,0.222,git/commit,21,3.823
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.205,git/commit,21,3.823
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.295,git/commit,21,3.823
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.281,git/commit,21,3.823
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.346,git/commit,21,3.823
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.352,git/commit,21,3.823
git/commit createMergeCommit with no changes throws an error,0.082,git/commit,21,3.823
git/commit index corner cases can commit when staged new file is then deleted,0.133,git/commit,21,3.823
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.153,git/commit,21,3.823
git/commit index corner cases file is deleted in index,0.148,git/commit,21,3.823
git/rebase can parse progress returns a value indicating conflicts were encountered,0.425,git/rebase,7,3.874
git/rebase can parse progress status detects REBASE_HEAD,0.412,git/rebase,7,3.874
git/rebase can parse progress is a detached HEAD state,0.437,git/rebase,7,3.874
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.835,git/rebase,7,3.874
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.872,git/rebase,7,3.874
git/rebase can parse progress for long rebase is a detached HEAD state,0.842,git/rebase,7,3.874
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.173,git/stash,14,2.718
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.273,git/stash,14,2.718
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.193,git/stash,14,2.718
GitStore loadCommitBatch includes HEAD when loading commits,0.317,GitStore,11,2.387
GitStore can discard changes from a repository,0.2,GitStore,11,2.387
GitStore can discard a renamed file,0.15,GitStore,11,2.387
GitStore undo first commit reports the repository is unborn,0.177,GitStore,11,2.387
GitStore undo first commit pre-fills the commit message,0.117,GitStore,11,2.387
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.387
GitStore undo first commit has no staged files,0.194,GitStore,11,2.387
GitStore repository with HEAD file can discard modified change cleanly,0.107,GitStore,11,2.387
git/status getStatus with conflicted repo parses conflicted files with markers,0.282,git/status,12,1.959
git/status getStatus with conflicted repo parses conflicted files without markers,0.283,git/status,12,1.959
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.471,git/status,12,1.959
git/status getStatus with conflicted repo parses resolved files,0.277,git/status,12,1.959
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.169,git/status,12,1.959
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.108,git/status,12,1.959
git/status getStatus with unconflicted repo parses changed files,0.062,git/status,12,1.959
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.05,git/status,12,1.959
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,1.959
git/status getStatus with unconflicted repo reflects copies,0.084,git/status,12,1.959
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,1.959
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.48
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.043,git/diff,19,1.48
git/diff getBlobImage retrieves valid image for modified file,0.038,git/diff,19,1.48
git/diff getBlobImage retrieves valid images for deleted file,0.051,git/diff,19,1.48
git/diff imageDiff changes for images are set,0.081,git/diff,19,1.48
git/diff imageDiff changes for text are not set,0.06,git/diff,19,1.48
git/diff getWorkingDirectoryDiff counts lines for new file,0.06,git/diff,19,1.48
git/diff getWorkingDirectoryDiff counts lines for modified file,0.066,git/diff,19,1.48
git/diff getWorkingDirectoryDiff counts lines for staged file,0.063,git/diff,19,1.48
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.48
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.121,git/diff,19,1.48
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.123,git/diff,19,1.48
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.108,git/diff,19,1.48
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.111,git/diff,19,1.48
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.48
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.48
git/diff getBinaryPaths in repo with text only files returns an empty array,0.076,git/diff,19,1.48
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.083,git/diff,19,1.48
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.094,git/diff,19,1.48
BranchPruner does nothing on non GitHub repositories,0.27,BranchPruner,6,1.478
BranchPruner prunes for GitHub repository,0.237,BranchPruner,6,1.478
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.184,BranchPruner,6,1.478
BranchPruner does not prune if there is no default branch,0.179,BranchPruner,6,1.478
BranchPruner does not prune reserved branches,0.231,BranchPruner,6,1.478
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.282,formatPatch,5,0.859
git/reflog getRecentBranches returns the recently checked out branches,0.124,git/reflog,6,0.86
git/reflog getRecentBranches works after renaming a branch,0.158,git/reflog,6,0.86
git/reflog getRecentBranches returns a limited number of branches,0.208,git/reflog,6,0.86
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.123,git/reflog,6,0.86
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.151,git/reflog,6,0.86
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.052,git/reflog,6,0.86
git/checkout can checkout a valid branch name in an existing repository,0.102,git/checkout,6,0.814
git/checkout can checkout a branch when it exists on multiple remotes,0.107,git/checkout,6,0.814
git/checkout will fail when an existing branch matches the remote branch,0.099,git/checkout,6,0.814
git/checkout with submodules cleans up an submodule that no longer exists,0.228,git/checkout,6,0.814
git/checkout with submodules updates a changed submodule reference,0.205,git/checkout,6,0.814
git/submodule listSubmodules returns the submodule entry,0.094,git/submodule,3,0.588
git/submodule listSubmodules returns the expected tag,0.143,git/submodule,3,0.588
git/submodule resetSubmodulePaths update submodule to original commit,0.308,git/submodule,3,0.588
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.097,gitignore,9,0.609
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.091,gitignore,9,0.609
gitignore saveGitIgnore applies rule correctly to repository,0.091,gitignore,9,0.609
gitignore appendIgnoreRule appends one rule,0.104,gitignore,9,0.609
gitignore appendIgnoreRule appends multiple rules,0.104,gitignore,9,0.609
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.607
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for default initialized repository,0.045,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.607
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.607
git/rev-parse isBareRepository throws error for missing directory,0.039,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.041,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.038,git/rev-parse,10,0.607
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.192,git/rev-parse,10,0.607
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.58
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,10,0.58
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.58
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.58
git/branch tip returns non-origin remote,0.073,git/branch,10,0.58
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.073,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo finds one branch name,0.041,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.58
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.075,git/branch,10,0.58
git/merge merge and is successful returns true,0.033,git/merge,7,0.548
git/merge merge and is a noop returns false,0.055,git/merge,7,0.548
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.548
git/log getCommits loads history,0.057,git/log,7,0.517
git/log getCommits handles repository with HEAD file on disk,0.078,git/log,7,0.517
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.517
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.517
git/log getChangedFiles detects renames,0.073,git/log,7,0.517
git/log getChangedFiles detect copies,0.085,git/log,7,0.517
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.517
git-lfs isUsingLFS returns false for repository not using LFS,0.048,git-lfs,9,0.505
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.505
git/reset reset can hard reset a repository,0.063,git/reset,2,0.109
git/remote getRemotes should return both remotes,0.04,git/remote,9,0.413
git/remote findDefaultRemote returns origin when multiple remotes found,0.045,git/remote,9,0.413
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.413
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.039,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.044,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.043,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.308
git/config config looks up config values,0.044,git/config,4,0.278
git/config config returns null for undefined values,0.044,git/config,4,0.278
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.278
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,4,0.278
git/core error handling does not throw for errors that were expected,0.047,git/core,4,0.219
git/core error handling throws for errors that were not expected,0.043,git/core,4,0.219
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.219
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.219
git/for-each-ref getBranches fetches branches using for-each-ref,0.066,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for empty repo,0.065,git/for-each-ref,3,0.211
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.211
AppStore can select a repository,0.132,AppStore,5,0.185
validatedRepositoryPath returns the path to the repository,0.399,validatedRepositoryPath,2,0.462
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.049
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.384,git/rebase,21,8.447
git/rebase detect conflicts status detects REBASE_HEAD,0.285,git/rebase,21,8.447
git/rebase detect conflicts has conflicted files in working directory,0.269,git/rebase,21,8.447
git/rebase detect conflicts is a detached HEAD state,0.287,git/rebase,21,8.447
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.298,git/rebase,21,8.447
git/rebase abort after conflicts found no longer has working directory changes,0.307,git/rebase,21,8.447
git/rebase abort after conflicts found returns to the feature branch,0.3,git/rebase,21,8.447
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.369,git/rebase,21,8.447
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.377,git/rebase,21,8.447
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.374,git/rebase,21,8.447
git/rebase continue after resolving conflicts returns success,0.415,git/rebase,21,8.447
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.416,git/rebase,21,8.447
git/rebase continue after resolving conflicts no longer has working directory changes,0.45,git/rebase,21,8.447
git/rebase continue after resolving conflicts returns to the feature branch,0.425,git/rebase,21,8.447
git/rebase continue after resolving conflicts branch is now a different ref,0.438,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files returns success,0.418,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.451,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.427,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.443,git/rebase,21,8.447
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.46,git/rebase,21,8.447
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.399,git/rebase,21,8.447
git/rebase can parse progress returns a value indicating conflicts were encountered,0.37,git/rebase,7,3.413
git/rebase can parse progress status detects REBASE_HEAD,0.367,git/rebase,7,3.413
git/rebase can parse progress is a detached HEAD state,0.389,git/rebase,7,3.413
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.732,git/rebase,7,3.413
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.763,git/rebase,7,3.413
git/rebase can parse progress for long rebase is a detached HEAD state,0.733,git/rebase,7,3.413
git/commit createCommit normal commits the given files,0.119,git/commit,21,4.183
git/commit createCommit normal commit does not strip commentary by default,0.103,git/commit,21,4.183
git/commit createCommit normal can commit for empty repository,0.131,git/commit,21,4.183
git/commit createCommit normal can commit renames,0.151,git/commit,21,4.183
git/commit createCommit partials can commit some lines from new file,0.152,git/commit,21,4.183
git/commit createCommit partials can commit second hunk from modified file,0.167,git/commit,21,4.183
git/commit createCommit partials can commit single delete from modified file,0.158,git/commit,21,4.183
git/commit createCommit partials can commit multiple hunks from modified file,0.173,git/commit,21,4.183
git/commit createCommit partials can commit some lines from deleted file,0.162,git/commit,21,4.183
git/commit createCommit partials can commit renames with modifications,0.168,git/commit,21,4.183
git/commit createCommit partials can commit renames with partially selected modifications,0.212,git/commit,21,4.183
git/commit createCommit with a merge conflict creates a merge commit,0.253,git/commit,21,4.183
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.231,git/commit,21,4.183
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.327,git/commit,21,4.183
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.322,git/commit,21,4.183
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.371,git/commit,21,4.183
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.372,git/commit,21,4.183
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,4.183
git/commit index corner cases can commit when staged new file is then deleted,0.145,git/commit,21,4.183
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.162,git/commit,21,4.183
git/commit index corner cases file is deleted in index,0.163,git/commit,21,4.183
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.168,git/stash,14,2.723
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.266,git/stash,14,2.723
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.214,git/stash,14,2.723
GitStore loadCommitBatch includes HEAD when loading commits,0.386,GitStore,11,2.481
GitStore can discard changes from a repository,0.212,GitStore,11,2.481
GitStore can discard a renamed file,0.151,GitStore,11,2.481
GitStore undo first commit reports the repository is unborn,0.185,GitStore,11,2.481
GitStore undo first commit pre-fills the commit message,0.125,GitStore,11,2.481
GitStore undo first commit clears the undo commit dialog,0.205,GitStore,11,2.481
GitStore undo first commit has no staged files,0.197,GitStore,11,2.481
GitStore repository with HEAD file can discard modified change cleanly,0.108,GitStore,11,2.481
git/status getStatus with conflicted repo parses conflicted files with markers,0.285,git/status,12,1.99
git/status getStatus with conflicted repo parses conflicted files without markers,0.281,git/status,12,1.99
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.472,git/status,12,1.99
git/status getStatus with conflicted repo parses resolved files,0.295,git/status,12,1.99
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.103,git/status,12,1.99
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.175,git/status,12,1.99
git/status getStatus with unconflicted repo parses changed files,0.063,git/status,12,1.99
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.046,git/status,12,1.99
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,1.99
git/status getStatus with unconflicted repo reflects copies,0.091,git/status,12,1.99
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.046,git/status,12,1.99
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.036,git/diff,19,1.444
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.444
git/diff getBlobImage retrieves valid image for modified file,0.046,git/diff,19,1.444
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.444
git/diff imageDiff changes for images are set,0.073,git/diff,19,1.444
git/diff imageDiff changes for text are not set,0.063,git/diff,19,1.444
git/diff getWorkingDirectoryDiff counts lines for new file,0.07,git/diff,19,1.444
git/diff getWorkingDirectoryDiff counts lines for modified file,0.057,git/diff,19,1.444
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.444
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.081,git/diff,19,1.444
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.114,git/diff,19,1.444
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.118,git/diff,19,1.444
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.099,git/diff,19,1.444
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.107,git/diff,19,1.444
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.071,git/diff,19,1.444
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.055,git/diff,19,1.444
git/diff getBinaryPaths in repo with text only files returns an empty array,0.07,git/diff,19,1.444
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.444
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.097,git/diff,19,1.444
BranchPruner does nothing on non GitHub repositories,0.289,BranchPruner,6,1.585
BranchPruner prunes for GitHub repository,0.253,BranchPruner,6,1.585
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.212,BranchPruner,6,1.585
BranchPruner does not prune if there is no default branch,0.205,BranchPruner,6,1.585
BranchPruner does not prune reserved branches,0.239,BranchPruner,6,1.585
git/reflog getRecentBranches returns the recently checked out branches,0.127,git/reflog,6,0.871
git/reflog getRecentBranches works after renaming a branch,0.155,git/reflog,6,0.871
git/reflog getRecentBranches returns a limited number of branches,0.207,git/reflog,6,0.871
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.124,git/reflog,6,0.871
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.159,git/reflog,6,0.871
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.871
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.345,formatPatch,5,1.021
git/checkout can checkout a valid branch name in an existing repository,0.109,git/checkout,6,0.891
git/checkout can checkout a branch when it exists on multiple remotes,0.11,git/checkout,6,0.891
git/checkout will fail when an existing branch matches the remote branch,0.1,git/checkout,6,0.891
git/checkout with submodules cleans up an submodule that no longer exists,0.277,git/checkout,6,0.891
git/checkout with submodules updates a changed submodule reference,0.218,git/checkout,6,0.891
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.093,gitignore,9,0.573
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.088,gitignore,9,0.573
gitignore saveGitIgnore applies rule correctly to repository,0.081,gitignore,9,0.573
gitignore appendIgnoreRule appends one rule,0.098,gitignore,9,0.573
gitignore appendIgnoreRule appends multiple rules,0.094,gitignore,9,0.573
git/rev-parse isGitRepository should return true for a repository,0.04,git/rev-parse,10,0.591
git/rev-parse isGitRepository should return false for a directory,0.037,git/rev-parse,10,0.591
git/rev-parse isBareRepository returns false for default initialized repository,0.051,git/rev-parse,10,0.591
git/rev-parse isBareRepository returns true for initialized bare repository,0.049,git/rev-parse,10,0.591
git/rev-parse isBareRepository returns false for empty directory,0.04,git/rev-parse,10,0.591
git/rev-parse isBareRepository throws error for missing directory,0.038,git/rev-parse,10,0.591
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.055,git/rev-parse,10,0.591
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.042,git/rev-parse,10,0.591
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.047,git/rev-parse,10,0.591
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.158,git/rev-parse,10,0.591
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.596
git/submodule listSubmodules returns the expected tag,0.135,git/submodule,3,0.596
git/submodule resetSubmodulePaths update submodule to original commit,0.32,git/submodule,3,0.596
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.583
git/branch tip returns correct ref if checkout occurs,0.048,git/branch,10,0.583
git/branch tip returns detached for arbitrary checkout,0.042,git/branch,10,0.583
git/branch tip returns current branch when on a valid HEAD,0.067,git/branch,10,0.583
git/branch tip returns non-origin remote,0.08,git/branch,10,0.583
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.074,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.583
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.04,git/branch,10,0.583
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.073,git/branch,10,0.583
git/merge merge and is successful returns true,0.03,git/merge,7,0.501
git/merge merge and is a noop returns false,0.048,git/merge,7,0.501
git/merge getMergeBase returns the common ancestor of two branches,0.058,git/merge,7,0.501
git/log getCommits loads history,0.133,git/log,7,0.582
git/log getCommits handles repository with HEAD file on disk,0.084,git/log,7,0.582
git/log getCommits handles repository with signed commit and log.showSignature set,0.093,git/log,7,0.582
git/log getChangedFiles loads the files changed in the commit,0.043,git/log,7,0.582
git/log getChangedFiles detects renames,0.068,git/log,7,0.582
git/log getChangedFiles detect copies,0.077,git/log,7,0.582
git/log getChangedFiles handles commit when HEAD exists on disk,0.039,git/log,7,0.582
git-lfs isUsingLFS returns false for repository not using LFS,0.043,git-lfs,9,0.477
git-lfs isUsingLFS returns true if LFS is tracking a path,0.067,git-lfs,9,0.477
validatedRepositoryPath returns the path to the repository,0.04,validatedRepositoryPath,2,0.097
git/remote getRemotes should return both remotes,0.044,git/remote,9,0.397
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,9,0.397
git/remote findDefaultRemote returns something when origin removed,0.052,git/remote,9,0.397
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.039,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.03,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.025,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.023,patch formatting,8,0.306
git/config config looks up config values,0.045,git/config,4,0.274
git/config config returns null for undefined values,0.045,git/config,4,0.274
git/config global config getGlobalConfigPath gets the config path,0.057,git/config,4,0.274
git/config global config setGlobalConfigValue will replace all entries for a global value,0.087,git/config,4,0.274
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.218
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.218
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.218
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.218
git/for-each-ref getBranches fetches branches using for-each-ref,0.062,git/for-each-ref,3,0.195
git/for-each-ref getBranches should return empty list for empty repo,0.059,git/for-each-ref,3,0.195
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.043,git/for-each-ref,3,0.195
AppStore can select a repository,0.123,AppStore,5,0.176
git/reset reset can hard reset a repository,0.398,git/reset,2,0.443
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.047
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.378,git/rebase,21,8.458
git/rebase detect conflicts status detects REBASE_HEAD,0.286,git/rebase,21,8.458
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,8.458
git/rebase detect conflicts is a detached HEAD state,0.287,git/rebase,21,8.458
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.305,git/rebase,21,8.458
git/rebase abort after conflicts found no longer has working directory changes,0.298,git/rebase,21,8.458
git/rebase abort after conflicts found returns to the feature branch,0.305,git/rebase,21,8.458
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.371,git/rebase,21,8.458
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.385,git/rebase,21,8.458
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.363,git/rebase,21,8.458
git/rebase continue after resolving conflicts returns success,0.419,git/rebase,21,8.458
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.408,git/rebase,21,8.458
git/rebase continue after resolving conflicts no longer has working directory changes,0.455,git/rebase,21,8.458
git/rebase continue after resolving conflicts returns to the feature branch,0.419,git/rebase,21,8.458
git/rebase continue after resolving conflicts branch is now a different ref,0.449,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files returns success,0.426,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.429,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.431,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.458
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.468,git/rebase,21,8.458
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.402,git/rebase,21,8.458
git/commit createCommit normal commits the given files,0.108,git/commit,21,3.787
git/commit createCommit normal commit does not strip commentary by default,0.089,git/commit,21,3.787
git/commit createCommit normal can commit for empty repository,0.114,git/commit,21,3.787
git/commit createCommit normal can commit renames,0.128,git/commit,21,3.787
git/commit createCommit partials can commit some lines from new file,0.148,git/commit,21,3.787
git/commit createCommit partials can commit second hunk from modified file,0.158,git/commit,21,3.787
git/commit createCommit partials can commit single delete from modified file,0.139,git/commit,21,3.787
git/commit createCommit partials can commit multiple hunks from modified file,0.156,git/commit,21,3.787
git/commit createCommit partials can commit some lines from deleted file,0.144,git/commit,21,3.787
git/commit createCommit partials can commit renames with modifications,0.145,git/commit,21,3.787
git/commit createCommit partials can commit renames with partially selected modifications,0.182,git/commit,21,3.787
git/commit createCommit with a merge conflict creates a merge commit,0.215,git/commit,21,3.787
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.203,git/commit,21,3.787
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.299,git/commit,21,3.787
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.278,git/commit,21,3.787
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.344,git/commit,21,3.787
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.353,git/commit,21,3.787
git/commit createMergeCommit with no changes throws an error,0.086,git/commit,21,3.787
git/commit index corner cases can commit when staged new file is then deleted,0.135,git/commit,21,3.787
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.147,git/commit,21,3.787
git/commit index corner cases file is deleted in index,0.154,git/commit,21,3.787
git/rebase can parse progress returns a value indicating conflicts were encountered,0.429,git/rebase,7,3.815
git/rebase can parse progress status detects REBASE_HEAD,0.423,git/rebase,7,3.815
git/rebase can parse progress is a detached HEAD state,0.422,git/rebase,7,3.815
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.819,git/rebase,7,3.815
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.827,git/rebase,7,3.815
git/rebase can parse progress for long rebase is a detached HEAD state,0.845,git/rebase,7,3.815
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.172,git/stash,14,2.66
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.276,git/stash,14,2.66
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.218,git/stash,14,2.66
GitStore loadCommitBatch includes HEAD when loading commits,0.314,GitStore,11,2.401
GitStore can discard changes from a repository,0.177,GitStore,11,2.401
GitStore can discard a renamed file,0.154,GitStore,11,2.401
GitStore undo first commit reports the repository is unborn,0.194,GitStore,11,2.401
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.401
GitStore undo first commit clears the undo commit dialog,0.199,GitStore,11,2.401
GitStore undo first commit has no staged files,0.192,GitStore,11,2.401
GitStore repository with HEAD file can discard modified change cleanly,0.11,GitStore,11,2.401
git/status getStatus with conflicted repo parses conflicted files with markers,0.278,git/status,12,1.736
git/status getStatus with conflicted repo parses conflicted files without markers,0.311,git/status,12,1.736
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.398,git/status,12,1.736
git/status getStatus with conflicted repo parses resolved files,0.225,git/status,12,1.736
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.093,git/status,12,1.736
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.107,git/status,12,1.736
git/status getStatus with unconflicted repo parses changed files,0.044,git/status,12,1.736
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.038,git/status,12,1.736
git/status getStatus with unconflicted repo reflects renames,0.075,git/status,12,1.736
git/status getStatus with unconflicted repo reflects copies,0.08,git/status,12,1.736
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.037,git/status,12,1.736
BranchPruner does nothing on non GitHub repositories,0.178,BranchPruner,6,1.3
BranchPruner prunes for GitHub repository,0.212,BranchPruner,6,1.3
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.174,BranchPruner,6,1.3
BranchPruner does not prune if there is no default branch,0.165,BranchPruner,6,1.3
BranchPruner does not prune reserved branches,0.212,BranchPruner,6,1.3
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.102,git/diff,19,1.504
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.058,git/diff,19,1.504
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.504
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.504
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.504
git/diff imageDiff changes for text are not set,0.058,git/diff,19,1.504
git/diff getWorkingDirectoryDiff counts lines for new file,0.057,git/diff,19,1.504
git/diff getWorkingDirectoryDiff counts lines for modified file,0.054,git/diff,19,1.504
git/diff getWorkingDirectoryDiff counts lines for staged file,0.058,git/diff,19,1.504
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.504
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.504
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.121,git/diff,19,1.504
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.1,git/diff,19,1.504
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.104,git/diff,19,1.504
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.071,git/diff,19,1.504
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.056,git/diff,19,1.504
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.504
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.078,git/diff,19,1.504
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.086,git/diff,19,1.504
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.27,formatPatch,5,0.871
git/checkout can checkout a valid branch name in an existing repository,0.108,git/checkout,6,0.792
git/checkout can checkout a branch when it exists on multiple remotes,0.106,git/checkout,6,0.792
git/checkout will fail when an existing branch matches the remote branch,0.093,git/checkout,6,0.792
git/checkout with submodules cleans up an submodule that no longer exists,0.229,git/checkout,6,0.792
git/checkout with submodules updates a changed submodule reference,0.185,git/checkout,6,0.792
git/reflog getRecentBranches returns the recently checked out branches,0.135,git/reflog,6,0.939
git/reflog getRecentBranches works after renaming a branch,0.172,git/reflog,6,0.939
git/reflog getRecentBranches returns a limited number of branches,0.229,git/reflog,6,0.939
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.136,git/reflog,6,0.939
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.169,git/reflog,6,0.939
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.054,git/reflog,6,0.939
git/submodule listSubmodules returns the submodule entry,0.181,git/submodule,3,0.714
git/submodule listSubmodules returns the expected tag,0.174,git/submodule,3,0.714
git/submodule resetSubmodulePaths update submodule to original commit,0.316,git/submodule,3,0.714
git/rev-parse isGitRepository should return true for a repository,0.048,git/rev-parse,10,0.611
git/rev-parse isGitRepository should return false for a directory,0.042,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for default initialized repository,0.047,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns true for initialized bare repository,0.05,git/rev-parse,10,0.611
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.611
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.048,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.039,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.037,git/rev-parse,10,0.611
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.185,git/rev-parse,10,0.611
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.57
git/branch tip returns correct ref if checkout occurs,0.043,git/branch,10,0.57
git/branch tip returns detached for arbitrary checkout,0.052,git/branch,10,0.57
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.57
git/branch tip returns non-origin remote,0.066,git/branch,10,0.57
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.07,git/branch,10,0.57
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.57
git/branch getBranchesPointedAt in a local repo finds no branch names,0.036,git/branch,10,0.57
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.57
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.073,git/branch,10,0.57
git/log getCommits loads history,0.053,git/log,7,0.474
git/log getCommits handles repository with HEAD file on disk,0.07,git/log,7,0.474
git/log getCommits handles repository with signed commit and log.showSignature set,0.083,git/log,7,0.474
git/log getChangedFiles loads the files changed in the commit,0.041,git/log,7,0.474
git/log getChangedFiles detects renames,0.07,git/log,7,0.474
git/log getChangedFiles detect copies,0.072,git/log,7,0.474
git/log getChangedFiles handles commit when HEAD exists on disk,0.039,git/log,7,0.474
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.106,gitignore,9,0.658
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.103,gitignore,9,0.658
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.658
gitignore appendIgnoreRule appends one rule,0.111,gitignore,9,0.658
gitignore appendIgnoreRule appends multiple rules,0.112,gitignore,9,0.658
git/merge merge and is successful returns true,0.033,git/merge,7,0.542
git/merge merge and is a noop returns false,0.047,git/merge,7,0.542
git/merge getMergeBase returns the common ancestor of two branches,0.07,git/merge,7,0.542
git-lfs isUsingLFS returns false for repository not using LFS,0.04,git-lfs,9,0.473
git-lfs isUsingLFS returns true if LFS is tracking a path,0.062,git-lfs,9,0.473
git/reset reset can hard reset a repository,0.067,git/reset,2,0.107
git/remote getRemotes should return both remotes,0.042,git/remote,9,0.402
git/remote findDefaultRemote returns origin when multiple remotes found,0.049,git/remote,9,0.402
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.402
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.036,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.022,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.296
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.296
git/config config looks up config values,0.04,git/config,4,0.267
git/config config returns null for undefined values,0.045,git/config,4,0.267
git/config global config getGlobalConfigPath gets the config path,0.056,git/config,4,0.267
git/config global config setGlobalConfigValue will replace all entries for a global value,0.085,git/config,4,0.267
git/core error handling does not throw for errors that were expected,0.038,git/core,4,0.207
git/core error handling throws for errors that were not expected,0.041,git/core,4,0.207
git/core exit code handling does not throw for exit codes that were expected,0.043,git/core,4,0.207
git/core exit code handling throws for exit codes that were not expected,0.04,git/core,4,0.207
git/for-each-ref getBranches fetches branches using for-each-ref,0.058,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.198
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.198
AppStore can select a repository,0.131,AppStore,5,0.183
validatedRepositoryPath returns the path to the repository,0.54,validatedRepositoryPath,2,0.596
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.016,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.405,git/rebase,21,8.616
git/rebase detect conflicts status detects REBASE_HEAD,0.286,git/rebase,21,8.616
git/rebase detect conflicts has conflicted files in working directory,0.277,git/rebase,21,8.616
git/rebase detect conflicts is a detached HEAD state,0.307,git/rebase,21,8.616
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.326,git/rebase,21,8.616
git/rebase abort after conflicts found no longer has working directory changes,0.333,git/rebase,21,8.616
git/rebase abort after conflicts found returns to the feature branch,0.312,git/rebase,21,8.616
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.353,git/rebase,21,8.616
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.374,git/rebase,21,8.616
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.375,git/rebase,21,8.616
git/rebase continue after resolving conflicts returns success,0.42,git/rebase,21,8.616
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.418,git/rebase,21,8.616
git/rebase continue after resolving conflicts no longer has working directory changes,0.436,git/rebase,21,8.616
git/rebase continue after resolving conflicts returns to the feature branch,0.452,git/rebase,21,8.616
git/rebase continue after resolving conflicts branch is now a different ref,0.458,git/rebase,21,8.616
git/rebase continue with additional changes unrelated to conflicted files returns success,0.43,git/rebase,21,8.616
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.454,git/rebase,21,8.616
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.439,git/rebase,21,8.616
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.442,git/rebase,21,8.616
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.449,git/rebase,21,8.616
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.423,git/rebase,21,8.616
git/rebase can parse progress returns a value indicating conflicts were encountered,0.376,git/rebase,7,3.406
git/rebase can parse progress status detects REBASE_HEAD,0.381,git/rebase,7,3.406
git/rebase can parse progress is a detached HEAD state,0.389,git/rebase,7,3.406
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.688,git/rebase,7,3.406
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.764,git/rebase,7,3.406
git/rebase can parse progress for long rebase is a detached HEAD state,0.751,git/rebase,7,3.406
git/commit createCommit normal commits the given files,0.12,git/commit,21,4.229
git/commit createCommit normal commit does not strip commentary by default,0.098,git/commit,21,4.229
git/commit createCommit normal can commit for empty repository,0.133,git/commit,21,4.229
git/commit createCommit normal can commit renames,0.148,git/commit,21,4.229
git/commit createCommit partials can commit some lines from new file,0.162,git/commit,21,4.229
git/commit createCommit partials can commit second hunk from modified file,0.169,git/commit,21,4.229
git/commit createCommit partials can commit single delete from modified file,0.155,git/commit,21,4.229
git/commit createCommit partials can commit multiple hunks from modified file,0.172,git/commit,21,4.229
git/commit createCommit partials can commit some lines from deleted file,0.163,git/commit,21,4.229
git/commit createCommit partials can commit renames with modifications,0.173,git/commit,21,4.229
git/commit createCommit partials can commit renames with partially selected modifications,0.212,git/commit,21,4.229
git/commit createCommit with a merge conflict creates a merge commit,0.251,git/commit,21,4.229
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.233,git/commit,21,4.229
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.326,git/commit,21,4.229
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.312,git/commit,21,4.229
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.388,git/commit,21,4.229
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.389,git/commit,21,4.229
git/commit createMergeCommit with no changes throws an error,0.094,git/commit,21,4.229
git/commit index corner cases can commit when staged new file is then deleted,0.144,git/commit,21,4.229
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.169,git/commit,21,4.229
git/commit index corner cases file is deleted in index,0.166,git/commit,21,4.229
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.18,git/stash,14,2.527
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.242,git/stash,14,2.527
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.212,git/stash,14,2.527
GitStore loadCommitBatch includes HEAD when loading commits,0.347,GitStore,11,2.365
GitStore can discard changes from a repository,0.174,GitStore,11,2.365
GitStore can discard a renamed file,0.15,GitStore,11,2.365
GitStore undo first commit reports the repository is unborn,0.179,GitStore,11,2.365
GitStore undo first commit pre-fills the commit message,0.118,GitStore,11,2.365
GitStore undo first commit clears the undo commit dialog,0.206,GitStore,11,2.365
GitStore undo first commit has no staged files,0.191,GitStore,11,2.365
GitStore repository with HEAD file can discard modified change cleanly,0.105,GitStore,11,2.365
git/status getStatus with conflicted repo parses conflicted files with markers,0.284,git/status,12,1.891
git/status getStatus with conflicted repo parses conflicted files without markers,0.282,git/status,12,1.891
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.513,git/status,12,1.891
git/status getStatus with conflicted repo parses resolved files,0.252,git/status,12,1.891
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.088,git/status,12,1.891
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.106,git/status,12,1.891
git/status getStatus with unconflicted repo parses changed files,0.046,git/status,12,1.891
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.052,git/status,12,1.891
git/status getStatus with unconflicted repo reflects renames,0.083,git/status,12,1.891
git/status getStatus with unconflicted repo reflects copies,0.085,git/status,12,1.891
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.049,git/status,12,1.891
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.526
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.526
git/diff getBlobImage retrieves valid image for modified file,0.043,git/diff,19,1.526
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.526
git/diff imageDiff changes for images are set,0.079,git/diff,19,1.526
git/diff imageDiff changes for text are not set,0.128,git/diff,19,1.526
git/diff getWorkingDirectoryDiff counts lines for new file,0.096,git/diff,19,1.526
git/diff getWorkingDirectoryDiff counts lines for modified file,0.06,git/diff,19,1.526
git/diff getWorkingDirectoryDiff counts lines for staged file,0.058,git/diff,19,1.526
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.089,git/diff,19,1.526
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.111,git/diff,19,1.526
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.121,git/diff,19,1.526
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.103,git/diff,19,1.526
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.101,git/diff,19,1.526
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.07,git/diff,19,1.526
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.049,git/diff,19,1.526
git/diff getBinaryPaths in repo with text only files returns an empty array,0.069,git/diff,19,1.526
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.081,git/diff,19,1.526
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.087,git/diff,19,1.526
BranchPruner does nothing on non GitHub repositories,0.192,BranchPruner,6,1.407
BranchPruner prunes for GitHub repository,0.236,BranchPruner,6,1.407
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.177,BranchPruner,6,1.407
BranchPruner does not prune if there is no default branch,0.184,BranchPruner,6,1.407
BranchPruner does not prune reserved branches,0.235,BranchPruner,6,1.407
git/reflog getRecentBranches returns the recently checked out branches,0.138,git/reflog,6,0.876
git/reflog getRecentBranches works after renaming a branch,0.153,git/reflog,6,0.876
git/reflog getRecentBranches returns a limited number of branches,0.21,git/reflog,6,0.876
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.127,git/reflog,6,0.876
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.154,git/reflog,6,0.876
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.052,git/reflog,6,0.876
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.247,formatPatch,5,0.856
git/checkout can checkout a valid branch name in an existing repository,0.107,git/checkout,6,0.873
git/checkout can checkout a branch when it exists on multiple remotes,0.109,git/checkout,6,0.873
git/checkout will fail when an existing branch matches the remote branch,0.102,git/checkout,6,0.873
git/checkout with submodules cleans up an submodule that no longer exists,0.257,git/checkout,6,0.873
git/checkout with submodules updates a changed submodule reference,0.229,git/checkout,6,0.873
git/submodule listSubmodules returns the submodule entry,0.102,git/submodule,3,0.639
git/submodule listSubmodules returns the expected tag,0.148,git/submodule,3,0.639
git/submodule resetSubmodulePaths update submodule to original commit,0.346,git/submodule,3,0.639
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.101,gitignore,9,0.622
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.095,gitignore,9,0.622
gitignore saveGitIgnore applies rule correctly to repository,0.093,gitignore,9,0.622
gitignore appendIgnoreRule appends one rule,0.108,gitignore,9,0.622
gitignore appendIgnoreRule appends multiple rules,0.102,gitignore,9,0.622
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.592
git/rev-parse isGitRepository should return false for a directory,0.039,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns false for default initialized repository,0.047,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns true for initialized bare repository,0.057,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns false for empty directory,0.042,git/rev-parse,10,0.592
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.039,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.036,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.166,git/rev-parse,10,0.592
validatedRepositoryPath returns the path to the repository,0.035,validatedRepositoryPath,2,0.089
git/branch tip returns unborn for new repository,0.031,git/branch,10,0.622
git/branch tip returns correct ref if checkout occurs,0.055,git/branch,10,0.622
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.622
git/branch tip returns current branch when on a valid HEAD,0.07,git/branch,10,0.622
git/branch tip returns non-origin remote,0.075,git/branch,10,0.622
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.08,git/branch,10,0.622
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.622
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.622
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.044,git/branch,10,0.622
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.086,git/branch,10,0.622
git/merge merge and is successful returns true,0.037,git/merge,7,0.591
git/merge merge and is a noop returns false,0.054,git/merge,7,0.591
git/merge getMergeBase returns the common ancestor of two branches,0.067,git/merge,7,0.591
git/log getCommits loads history,0.057,git/log,7,0.515
git/log getCommits handles repository with HEAD file on disk,0.075,git/log,7,0.515
git/log getCommits handles repository with signed commit and log.showSignature set,0.098,git/log,7,0.515
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.515
git/log getChangedFiles detects renames,0.074,git/log,7,0.515
git/log getChangedFiles detect copies,0.079,git/log,7,0.515
git/log getChangedFiles handles commit when HEAD exists on disk,0.043,git/log,7,0.515
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.542
git-lfs isUsingLFS returns true if LFS is tracking a path,0.071,git-lfs,9,0.542
git/remote getRemotes should return both remotes,0.042,git/remote,9,0.431
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,9,0.431
git/remote findDefaultRemote returns something when origin removed,0.055,git/remote,9,0.431
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.042,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.04,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile includes empty context lines,0.021,patch formatting,8,0.299
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.299
git/config config looks up config values,0.043,git/config,4,0.288
git/config config returns null for undefined values,0.049,git/config,4,0.288
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.288
git/config global config setGlobalConfigValue will replace all entries for a global value,0.097,git/config,4,0.288
git/core error handling does not throw for errors that were expected,0.042,git/core,4,0.225
git/core error handling throws for errors that were not expected,0.05,git/core,4,0.225
git/core exit code handling does not throw for exit codes that were expected,0.046,git/core,4,0.225
git/core exit code handling throws for exit codes that were not expected,0.048,git/core,4,0.225
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.212
git/for-each-ref getBranches should return empty list for empty repo,0.065,git/for-each-ref,3,0.212
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.049,git/for-each-ref,3,0.212
AppStore can select a repository,0.136,AppStore,5,0.187
git/reset reset can hard reset a repository,0.428,git/reset,2,0.474
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.018,git/git-attributes,1,0.05
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.377,git/rebase,21,8.49
git/rebase detect conflicts status detects REBASE_HEAD,0.285,git/rebase,21,8.49
git/rebase detect conflicts has conflicted files in working directory,0.268,git/rebase,21,8.49
git/rebase detect conflicts is a detached HEAD state,0.292,git/rebase,21,8.49
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.297,git/rebase,21,8.49
git/rebase abort after conflicts found no longer has working directory changes,0.327,git/rebase,21,8.49
git/rebase abort after conflicts found returns to the feature branch,0.302,git/rebase,21,8.49
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.37,git/rebase,21,8.49
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.379,git/rebase,21,8.49
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.384,git/rebase,21,8.49
git/rebase continue after resolving conflicts returns success,0.415,git/rebase,21,8.49
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.417,git/rebase,21,8.49
git/rebase continue after resolving conflicts no longer has working directory changes,0.459,git/rebase,21,8.49
git/rebase continue after resolving conflicts returns to the feature branch,0.436,git/rebase,21,8.49
git/rebase continue after resolving conflicts branch is now a different ref,0.459,git/rebase,21,8.49
git/rebase continue with additional changes unrelated to conflicted files returns success,0.412,git/rebase,21,8.49
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.419,git/rebase,21,8.49
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.429,git/rebase,21,8.49
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.433,git/rebase,21,8.49
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.459,git/rebase,21,8.49
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.418,git/rebase,21,8.49
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.806
git/commit createCommit normal commit does not strip commentary by default,0.089,git/commit,21,3.806
git/commit createCommit normal can commit for empty repository,0.112,git/commit,21,3.806
git/commit createCommit normal can commit renames,0.132,git/commit,21,3.806
git/commit createCommit partials can commit some lines from new file,0.138,git/commit,21,3.806
git/commit createCommit partials can commit second hunk from modified file,0.146,git/commit,21,3.806
git/commit createCommit partials can commit single delete from modified file,0.138,git/commit,21,3.806
git/commit createCommit partials can commit multiple hunks from modified file,0.169,git/commit,21,3.806
git/commit createCommit partials can commit some lines from deleted file,0.147,git/commit,21,3.806
git/commit createCommit partials can commit renames with modifications,0.166,git/commit,21,3.806
git/commit createCommit partials can commit renames with partially selected modifications,0.187,git/commit,21,3.806
git/commit createCommit with a merge conflict creates a merge commit,0.223,git/commit,21,3.806
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.209,git/commit,21,3.806
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.296,git/commit,21,3.806
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.287,git/commit,21,3.806
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.341,git/commit,21,3.806
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.351,git/commit,21,3.806
git/commit createMergeCommit with no changes throws an error,0.078,git/commit,21,3.806
git/commit index corner cases can commit when staged new file is then deleted,0.129,git/commit,21,3.806
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.148,git/commit,21,3.806
git/commit index corner cases file is deleted in index,0.15,git/commit,21,3.806
git/rebase can parse progress returns a value indicating conflicts were encountered,0.473,git/rebase,7,3.837
git/rebase can parse progress status detects REBASE_HEAD,0.414,git/rebase,7,3.837
git/rebase can parse progress is a detached HEAD state,0.405,git/rebase,7,3.837
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.825,git/rebase,7,3.837
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.826,git/rebase,7,3.837
git/rebase can parse progress for long rebase is a detached HEAD state,0.845,git/rebase,7,3.837
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.154,git/stash,14,2.483
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.259,git/stash,14,2.483
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.205,git/stash,14,2.483
GitStore loadCommitBatch includes HEAD when loading commits,0.357,GitStore,11,2.429
GitStore can discard changes from a repository,0.176,GitStore,11,2.429
GitStore can discard a renamed file,0.155,GitStore,11,2.429
GitStore undo first commit reports the repository is unborn,0.189,GitStore,11,2.429
GitStore undo first commit pre-fills the commit message,0.124,GitStore,11,2.429
GitStore undo first commit clears the undo commit dialog,0.204,GitStore,11,2.429
GitStore undo first commit has no staged files,0.202,GitStore,11,2.429
GitStore repository with HEAD file can discard modified change cleanly,0.11,GitStore,11,2.429
git/status getStatus with conflicted repo parses conflicted files with markers,0.282,git/status,12,1.968
git/status getStatus with conflicted repo parses conflicted files without markers,0.285,git/status,12,1.968
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.457,git/status,12,1.968
git/status getStatus with conflicted repo parses resolved files,0.278,git/status,12,1.968
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.104,git/status,12,1.968
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.121,git/status,12,1.968
git/status getStatus with unconflicted repo parses changed files,0.048,git/status,12,1.968
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.107,git/status,12,1.968
git/status getStatus with unconflicted repo reflects renames,0.095,git/status,12,1.968
git/status getStatus with unconflicted repo reflects copies,0.09,git/status,12,1.968
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.05,git/status,12,1.968
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.045,git/diff,19,1.474
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.474
git/diff getBlobImage retrieves valid image for modified file,0.041,git/diff,19,1.474
git/diff getBlobImage retrieves valid images for deleted file,0.051,git/diff,19,1.474
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.474
git/diff imageDiff changes for text are not set,0.062,git/diff,19,1.474
git/diff getWorkingDirectoryDiff counts lines for new file,0.06,git/diff,19,1.474
git/diff getWorkingDirectoryDiff counts lines for modified file,0.054,git/diff,19,1.474
git/diff getWorkingDirectoryDiff counts lines for staged file,0.057,git/diff,19,1.474
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.081,git/diff,19,1.474
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.114,git/diff,19,1.474
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.116,git/diff,19,1.474
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.092,git/diff,19,1.474
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.099,git/diff,19,1.474
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.122,git/diff,19,1.474
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.064,git/diff,19,1.474
git/diff getBinaryPaths in repo with text only files returns an empty array,0.071,git/diff,19,1.474
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.089,git/diff,19,1.474
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.095,git/diff,19,1.474
BranchPruner does nothing on non GitHub repositories,0.213,BranchPruner,6,1.601
BranchPruner prunes for GitHub repository,0.25,BranchPruner,6,1.601
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.199,BranchPruner,6,1.601
BranchPruner does not prune if there is no default branch,0.203,BranchPruner,6,1.601
BranchPruner does not prune reserved branches,0.329,BranchPruner,6,1.601
git/reflog getRecentBranches returns the recently checked out branches,0.128,git/reflog,6,0.895
git/reflog getRecentBranches works after renaming a branch,0.161,git/reflog,6,0.895
git/reflog getRecentBranches returns a limited number of branches,0.21,git/reflog,6,0.895
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.123,git/reflog,6,0.895
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.158,git/reflog,6,0.895
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.068,git/reflog,6,0.895
git/checkout can checkout a valid branch name in an existing repository,0.105,git/checkout,6,0.855
git/checkout can checkout a branch when it exists on multiple remotes,0.107,git/checkout,6,0.855
git/checkout will fail when an existing branch matches the remote branch,0.108,git/checkout,6,0.855
git/checkout with submodules cleans up an submodule that no longer exists,0.252,git/checkout,6,0.855
git/checkout with submodules updates a changed submodule reference,0.207,git/checkout,6,0.855
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.285,formatPatch,5,0.986
git/submodule listSubmodules returns the submodule entry,0.096,git/submodule,3,0.574
git/submodule listSubmodules returns the expected tag,0.142,git/submodule,3,0.574
git/submodule resetSubmodulePaths update submodule to original commit,0.293,git/submodule,3,0.574
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.58
git/branch tip returns correct ref if checkout occurs,0.042,git/branch,10,0.58
git/branch tip returns detached for arbitrary checkout,0.043,git/branch,10,0.58
git/branch tip returns current branch when on a valid HEAD,0.078,git/branch,10,0.58
git/branch tip returns non-origin remote,0.07,git/branch,10,0.58
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.07,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo finds one branch name,0.046,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.58
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.58
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.073,git/branch,10,0.58
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.097,gitignore,9,0.634
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.103,gitignore,9,0.634
gitignore saveGitIgnore applies rule correctly to repository,0.096,gitignore,9,0.634
gitignore appendIgnoreRule appends one rule,0.106,gitignore,9,0.634
gitignore appendIgnoreRule appends multiple rules,0.105,gitignore,9,0.634
git/rev-parse isGitRepository should return true for a repository,0.041,git/rev-parse,10,0.652
git/rev-parse isGitRepository should return false for a directory,0.042,git/rev-parse,10,0.652
git/rev-parse isBareRepository returns false for default initialized repository,0.053,git/rev-parse,10,0.652
git/rev-parse isBareRepository returns true for initialized bare repository,0.054,git/rev-parse,10,0.652
git/rev-parse isBareRepository returns false for empty directory,0.045,git/rev-parse,10,0.652
git/rev-parse isBareRepository throws error for missing directory,0.041,git/rev-parse,10,0.652
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.053,git/rev-parse,10,0.652
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.043,git/rev-parse,10,0.652
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.044,git/rev-parse,10,0.652
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.202,git/rev-parse,10,0.652
git/merge merge and is successful returns true,0.042,git/merge,7,0.551
git/merge merge and is a noop returns false,0.05,git/merge,7,0.551
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.551
git-lfs isUsingLFS returns false for repository not using LFS,0.049,git-lfs,9,0.489
git-lfs isUsingLFS returns true if LFS is tracking a path,0.069,git-lfs,9,0.489
git/log getCommits loads history,0.058,git/log,7,0.529
git/log getCommits handles repository with HEAD file on disk,0.08,git/log,7,0.529
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.529
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.529
git/log getChangedFiles detects renames,0.086,git/log,7,0.529
git/log getChangedFiles detect copies,0.08,git/log,7,0.529
git/log getChangedFiles handles commit when HEAD exists on disk,0.042,git/log,7,0.529
git/reset reset can hard reset a repository,0.168,git/reset,2,0.207
git/remote getRemotes should return both remotes,0.051,git/remote,9,0.436
git/remote findDefaultRemote returns origin when multiple remotes found,0.058,git/remote,9,0.436
git/remote findDefaultRemote returns something when origin removed,0.064,git/remote,9,0.436
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.046,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.043,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.032,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.315
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.022,patch formatting,8,0.315
git/config config looks up config values,0.045,git/config,4,0.285
git/config config returns null for undefined values,0.043,git/config,4,0.285
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.285
git/config global config setGlobalConfigValue will replace all entries for a global value,0.095,git/config,4,0.285
git/core error handling does not throw for errors that were expected,0.046,git/core,4,0.236
git/core error handling throws for errors that were not expected,0.049,git/core,4,0.236
git/core exit code handling does not throw for exit codes that were expected,0.045,git/core,4,0.236
git/core exit code handling throws for exit codes that were not expected,0.052,git/core,4,0.236
git/for-each-ref getBranches fetches branches using for-each-ref,0.063,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.199
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.044,git/for-each-ref,3,0.199
AppStore can select a repository,0.129,AppStore,5,0.181
validatedRepositoryPath returns the path to the repository,0.323,validatedRepositoryPath,2,0.384
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.017,git/git-attributes,1,0.051
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.364,git/rebase,21,8.481
git/rebase detect conflicts status detects REBASE_HEAD,0.286,git/rebase,21,8.481
git/rebase detect conflicts has conflicted files in working directory,0.279,git/rebase,21,8.481
git/rebase detect conflicts is a detached HEAD state,0.291,git/rebase,21,8.481
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.295,git/rebase,21,8.481
git/rebase abort after conflicts found no longer has working directory changes,0.299,git/rebase,21,8.481
git/rebase abort after conflicts found returns to the feature branch,0.315,git/rebase,21,8.481
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.385,git/rebase,21,8.481
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.389,git/rebase,21,8.481
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.385,git/rebase,21,8.481
git/rebase continue after resolving conflicts returns success,0.418,git/rebase,21,8.481
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.424,git/rebase,21,8.481
git/rebase continue after resolving conflicts no longer has working directory changes,0.438,git/rebase,21,8.481
git/rebase continue after resolving conflicts returns to the feature branch,0.416,git/rebase,21,8.481
git/rebase continue after resolving conflicts branch is now a different ref,0.441,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files returns success,0.41,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.463,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.436,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.443,git/rebase,21,8.481
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.447,git/rebase,21,8.481
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.404,git/rebase,21,8.481
git/rebase can parse progress returns a value indicating conflicts were encountered,0.37,git/rebase,7,3.402
git/rebase can parse progress status detects REBASE_HEAD,0.369,git/rebase,7,3.402
git/rebase can parse progress is a detached HEAD state,0.394,git/rebase,7,3.402
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.708,git/rebase,7,3.402
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.778,git/rebase,7,3.402
git/rebase can parse progress for long rebase is a detached HEAD state,0.728,git/rebase,7,3.402
git/commit createCommit normal commits the given files,0.119,git/commit,21,4.206
git/commit createCommit normal commit does not strip commentary by default,0.099,git/commit,21,4.206
git/commit createCommit normal can commit for empty repository,0.128,git/commit,21,4.206
git/commit createCommit normal can commit renames,0.154,git/commit,21,4.206
git/commit createCommit partials can commit some lines from new file,0.159,git/commit,21,4.206
git/commit createCommit partials can commit second hunk from modified file,0.171,git/commit,21,4.206
git/commit createCommit partials can commit single delete from modified file,0.152,git/commit,21,4.206
git/commit createCommit partials can commit multiple hunks from modified file,0.181,git/commit,21,4.206
git/commit createCommit partials can commit some lines from deleted file,0.167,git/commit,21,4.206
git/commit createCommit partials can commit renames with modifications,0.177,git/commit,21,4.206
git/commit createCommit partials can commit renames with partially selected modifications,0.214,git/commit,21,4.206
git/commit createCommit with a merge conflict creates a merge commit,0.252,git/commit,21,4.206
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.227,git/commit,21,4.206
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.336,git/commit,21,4.206
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.322,git/commit,21,4.206
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.372,git/commit,21,4.206
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.382,git/commit,21,4.206
git/commit createMergeCommit with no changes throws an error,0.079,git/commit,21,4.206
git/commit index corner cases can commit when staged new file is then deleted,0.141,git/commit,21,4.206
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.161,git/commit,21,4.206
git/commit index corner cases file is deleted in index,0.16,git/commit,21,4.206
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.493
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.25,git/stash,14,2.493
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.203,git/stash,14,2.493
GitStore loadCommitBatch includes HEAD when loading commits,0.326,GitStore,11,2.383
GitStore can discard changes from a repository,0.175,GitStore,11,2.383
GitStore can discard a renamed file,0.144,GitStore,11,2.383
GitStore undo first commit reports the repository is unborn,0.182,GitStore,11,2.383
GitStore undo first commit pre-fills the commit message,0.127,GitStore,11,2.383
GitStore undo first commit clears the undo commit dialog,0.219,GitStore,11,2.383
GitStore undo first commit has no staged files,0.195,GitStore,11,2.383
GitStore repository with HEAD file can discard modified change cleanly,0.109,GitStore,11,2.383
git/status getStatus with conflicted repo parses conflicted files with markers,0.28,git/status,12,1.888
git/status getStatus with conflicted repo parses conflicted files without markers,0.283,git/status,12,1.888
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.544,git/status,12,1.888
git/status getStatus with conflicted repo parses resolved files,0.25,git/status,12,1.888
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.091,git/status,12,1.888
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.109,git/status,12,1.888
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,1.888
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.039,git/status,12,1.888
git/status getStatus with unconflicted repo reflects renames,0.076,git/status,12,1.888
git/status getStatus with unconflicted repo reflects copies,0.084,git/status,12,1.888
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.036,git/status,12,1.888
BranchPruner does nothing on non GitHub repositories,0.173,BranchPruner,6,1.337
BranchPruner prunes for GitHub repository,0.228,BranchPruner,6,1.337
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.172,BranchPruner,6,1.337
BranchPruner does not prune if there is no default branch,0.171,BranchPruner,6,1.337
BranchPruner does not prune reserved branches,0.222,BranchPruner,6,1.337
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.03,git/diff,19,1.571
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.116,git/diff,19,1.571
git/diff getBlobImage retrieves valid image for modified file,0.06,git/diff,19,1.571
git/diff getBlobImage retrieves valid images for deleted file,0.056,git/diff,19,1.571
git/diff imageDiff changes for images are set,0.072,git/diff,19,1.571
git/diff imageDiff changes for text are not set,0.074,git/diff,19,1.571
git/diff getWorkingDirectoryDiff counts lines for new file,0.07,git/diff,19,1.571
git/diff getWorkingDirectoryDiff counts lines for modified file,0.066,git/diff,19,1.571
git/diff getWorkingDirectoryDiff counts lines for staged file,0.066,git/diff,19,1.571
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.101,git/diff,19,1.571
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.124,git/diff,19,1.571
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.124,git/diff,19,1.571
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.101,git/diff,19,1.571
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.106,git/diff,19,1.571
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.071,git/diff,19,1.571
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.056,git/diff,19,1.571
git/diff getBinaryPaths in repo with text only files returns an empty array,0.067,git/diff,19,1.571
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.571
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.087,git/diff,19,1.571
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.258,formatPatch,5,0.868
git/reflog getRecentBranches returns the recently checked out branches,0.148,git/reflog,6,0.97
git/reflog getRecentBranches works after renaming a branch,0.166,git/reflog,6,0.97
git/reflog getRecentBranches returns a limited number of branches,0.24,git/reflog,6,0.97
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.141,git/reflog,6,0.97
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.177,git/reflog,6,0.97
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.052,git/reflog,6,0.97
git/checkout can checkout a valid branch name in an existing repository,0.108,git/checkout,6,0.858
git/checkout can checkout a branch when it exists on multiple remotes,0.105,git/checkout,6,0.858
git/checkout will fail when an existing branch matches the remote branch,0.103,git/checkout,6,0.858
git/checkout with submodules cleans up an submodule that no longer exists,0.244,git/checkout,6,0.858
git/checkout with submodules updates a changed submodule reference,0.224,git/checkout,6,0.858
git/rev-parse isGitRepository should return true for a repository,0.038,git/rev-parse,10,0.576
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns false for default initialized repository,0.05,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns true for initialized bare repository,0.048,git/rev-parse,10,0.576
git/rev-parse isBareRepository returns false for empty directory,0.038,git/rev-parse,10,0.576
git/rev-parse isBareRepository throws error for missing directory,0.037,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.048,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.038,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.045,git/rev-parse,10,0.576
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.161,git/rev-parse,10,0.576
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.103,gitignore,9,0.64
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.102,gitignore,9,0.64
gitignore saveGitIgnore applies rule correctly to repository,0.089,gitignore,9,0.64
gitignore appendIgnoreRule appends one rule,0.108,gitignore,9,0.64
gitignore appendIgnoreRule appends multiple rules,0.112,gitignore,9,0.64
git/branch tip returns unborn for new repository,0.03,git/branch,10,0.613
git/branch tip returns correct ref if checkout occurs,0.05,git/branch,10,0.613
git/branch tip returns detached for arbitrary checkout,0.046,git/branch,10,0.613
git/branch tip returns current branch when on a valid HEAD,0.068,git/branch,10,0.613
git/branch tip returns non-origin remote,0.08,git/branch,10,0.613
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.076,git/branch,10,0.613
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.613
git/branch getBranchesPointedAt in a local repo finds no branch names,0.042,git/branch,10,0.613
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.613
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.081,git/branch,10,0.613
git/submodule listSubmodules returns the submodule entry,0.099,git/submodule,3,0.688
git/submodule listSubmodules returns the expected tag,0.163,git/submodule,3,0.688
git/submodule resetSubmodulePaths update submodule to original commit,0.384,git/submodule,3,0.688
git/merge merge and is successful returns true,0.032,git/merge,7,0.565
git/merge merge and is a noop returns false,0.051,git/merge,7,0.565
git/merge getMergeBase returns the common ancestor of two branches,0.061,git/merge,7,0.565
git/log getCommits loads history,0.052,git/log,7,0.505
git/log getCommits handles repository with HEAD file on disk,0.069,git/log,7,0.505
git/log getCommits handles repository with signed commit and log.showSignature set,0.091,git/log,7,0.505
git/log getChangedFiles loads the files changed in the commit,0.051,git/log,7,0.505
git/log getChangedFiles detects renames,0.07,git/log,7,0.505
git/log getChangedFiles detect copies,0.083,git/log,7,0.505
git/log getChangedFiles handles commit when HEAD exists on disk,0.046,git/log,7,0.505
git-lfs isUsingLFS returns false for repository not using LFS,0.042,git-lfs,9,0.536
git-lfs isUsingLFS returns true if LFS is tracking a path,0.072,git-lfs,9,0.536
git/remote getRemotes should return both remotes,0.042,git/remote,9,0.553
git/remote findDefaultRemote returns origin when multiple remotes found,0.063,git/remote,9,0.553
git/remote findDefaultRemote returns something when origin removed,0.072,git/remote,9,0.553
validatedRepositoryPath returns the path to the repository,0.055,validatedRepositoryPath,2,0.114
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.041,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.042,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.041,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.026,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.029,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.306
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.02,patch formatting,8,0.306
git/config config looks up config values,0.04,git/config,4,0.282
git/config config returns null for undefined values,0.047,git/config,4,0.282
git/config global config getGlobalConfigPath gets the config path,0.063,git/config,4,0.282
git/config global config setGlobalConfigValue will replace all entries for a global value,0.093,git/config,4,0.282
git/core error handling does not throw for errors that were expected,0.057,git/core,4,0.242
git/core error handling throws for errors that were not expected,0.047,git/core,4,0.242
git/core exit code handling does not throw for exit codes that were expected,0.045,git/core,4,0.242
git/core exit code handling throws for exit codes that were not expected,0.049,git/core,4,0.242
git/reset reset can hard reset a repository,0.07,git/reset,2,0.113
git/for-each-ref getBranches fetches branches using for-each-ref,0.068,git/for-each-ref,3,0.2
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.2
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.043,git/for-each-ref,3,0.2
AppStore can select a repository,0.11,AppStore,5,0.166
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.119,git/git-attributes,1,0.153
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.388,git/rebase,21,8.67
git/rebase detect conflicts status detects REBASE_HEAD,0.287,git/rebase,21,8.67
git/rebase detect conflicts has conflicted files in working directory,0.274,git/rebase,21,8.67
git/rebase detect conflicts is a detached HEAD state,0.288,git/rebase,21,8.67
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.324,git/rebase,21,8.67
git/rebase abort after conflicts found no longer has working directory changes,0.322,git/rebase,21,8.67
git/rebase abort after conflicts found returns to the feature branch,0.314,git/rebase,21,8.67
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.368,git/rebase,21,8.67
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.413,git/rebase,21,8.67
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.388,git/rebase,21,8.67
git/rebase continue after resolving conflicts returns success,0.454,git/rebase,21,8.67
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.415,git/rebase,21,8.67
git/rebase continue after resolving conflicts no longer has working directory changes,0.473,git/rebase,21,8.67
git/rebase continue after resolving conflicts returns to the feature branch,0.419,git/rebase,21,8.67
git/rebase continue after resolving conflicts branch is now a different ref,0.454,git/rebase,21,8.67
git/rebase continue with additional changes unrelated to conflicted files returns success,0.435,git/rebase,21,8.67
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.453,git/rebase,21,8.67
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.445,git/rebase,21,8.67
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.434,git/rebase,21,8.67
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.446,git/rebase,21,8.67
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.419,git/rebase,21,8.67
git/commit createCommit normal commits the given files,0.107,git/commit,21,3.876
git/commit createCommit normal commit does not strip commentary by default,0.087,git/commit,21,3.876
git/commit createCommit normal can commit for empty repository,0.116,git/commit,21,3.876
git/commit createCommit normal can commit renames,0.136,git/commit,21,3.876
git/commit createCommit partials can commit some lines from new file,0.151,git/commit,21,3.876
git/commit createCommit partials can commit second hunk from modified file,0.154,git/commit,21,3.876
git/commit createCommit partials can commit single delete from modified file,0.142,git/commit,21,3.876
git/commit createCommit partials can commit multiple hunks from modified file,0.166,git/commit,21,3.876
git/commit createCommit partials can commit some lines from deleted file,0.147,git/commit,21,3.876
git/commit createCommit partials can commit renames with modifications,0.149,git/commit,21,3.876
git/commit createCommit partials can commit renames with partially selected modifications,0.191,git/commit,21,3.876
git/commit createCommit with a merge conflict creates a merge commit,0.227,git/commit,21,3.876
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.216,git/commit,21,3.876
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.299,git/commit,21,3.876
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.287,git/commit,21,3.876
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.357,git/commit,21,3.876
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.353,git/commit,21,3.876
git/commit createMergeCommit with no changes throws an error,0.08,git/commit,21,3.876
git/commit index corner cases can commit when staged new file is then deleted,0.133,git/commit,21,3.876
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.156,git/commit,21,3.876
git/commit index corner cases file is deleted in index,0.158,git/commit,21,3.876
git/rebase can parse progress returns a value indicating conflicts were encountered,0.439,git/rebase,7,3.987
git/rebase can parse progress status detects REBASE_HEAD,0.433,git/rebase,7,3.987
git/rebase can parse progress is a detached HEAD state,0.434,git/rebase,7,3.987
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.87,git/rebase,7,3.987
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.917,git/rebase,7,3.987
git/rebase can parse progress for long rebase is a detached HEAD state,0.844,git/rebase,7,3.987
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.169,git/stash,14,2.63
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.261,git/stash,14,2.63
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.209,git/stash,14,2.63
GitStore loadCommitBatch includes HEAD when loading commits,0.321,GitStore,11,2.392
GitStore can discard changes from a repository,0.18,GitStore,11,2.392
GitStore can discard a renamed file,0.153,GitStore,11,2.392
GitStore undo first commit reports the repository is unborn,0.182,GitStore,11,2.392
GitStore undo first commit pre-fills the commit message,0.12,GitStore,11,2.392
GitStore undo first commit clears the undo commit dialog,0.203,GitStore,11,2.392
GitStore undo first commit has no staged files,0.2,GitStore,11,2.392
GitStore repository with HEAD file can discard modified change cleanly,0.116,GitStore,11,2.392
git/status getStatus with conflicted repo parses conflicted files with markers,0.292,git/status,12,1.837
git/status getStatus with conflicted repo parses conflicted files without markers,0.344,git/status,12,1.837
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.436,git/status,12,1.837
git/status getStatus with conflicted repo parses resolved files,0.242,git/status,12,1.837
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.088,git/status,12,1.837
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.102,git/status,12,1.837
git/status getStatus with unconflicted repo parses changed files,0.047,git/status,12,1.837
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.048,git/status,12,1.837
git/status getStatus with unconflicted repo reflects renames,0.075,git/status,12,1.837
git/status getStatus with unconflicted repo reflects copies,0.074,git/status,12,1.837
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.038,git/status,12,1.837
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.029,git/diff,19,1.535
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.04,git/diff,19,1.535
git/diff getBlobImage retrieves valid image for modified file,0.04,git/diff,19,1.535
git/diff getBlobImage retrieves valid images for deleted file,0.053,git/diff,19,1.535
git/diff imageDiff changes for images are set,0.074,git/diff,19,1.535
git/diff imageDiff changes for text are not set,0.145,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for new file,0.072,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for modified file,0.058,git/diff,19,1.535
git/diff getWorkingDirectoryDiff counts lines for staged file,0.059,git/diff,19,1.535
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.086,git/diff,19,1.535
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.121,git/diff,19,1.535
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.142,git/diff,19,1.535
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.097,git/diff,19,1.535
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.098,git/diff,19,1.535
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.068,git/diff,19,1.535
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.053,git/diff,19,1.535
git/diff getBinaryPaths in repo with text only files returns an empty array,0.074,git/diff,19,1.535
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.084,git/diff,19,1.535
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.095,git/diff,19,1.535
BranchPruner does nothing on non GitHub repositories,0.184,BranchPruner,6,1.484
BranchPruner prunes for GitHub repository,0.26,BranchPruner,6,1.484
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.194,BranchPruner,6,1.484
BranchPruner does not prune if there is no default branch,0.191,BranchPruner,6,1.484
BranchPruner does not prune reserved branches,0.244,BranchPruner,6,1.484
git/reflog getRecentBranches returns the recently checked out branches,0.13,git/reflog,6,0.883
git/reflog getRecentBranches works after renaming a branch,0.158,git/reflog,6,0.883
git/reflog getRecentBranches returns a limited number of branches,0.211,git/reflog,6,0.883
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.129,git/reflog,6,0.883
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.159,git/reflog,6,0.883
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.055,git/reflog,6,0.883
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.239,formatPatch,5,0.858
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.821
git/checkout can checkout a branch when it exists on multiple remotes,0.11,git/checkout,6,0.821
git/checkout will fail when an existing branch matches the remote branch,0.101,git/checkout,6,0.821
git/checkout with submodules cleans up an submodule that no longer exists,0.234,git/checkout,6,0.821
git/checkout with submodules updates a changed submodule reference,0.201,git/checkout,6,0.821
git/submodule listSubmodules returns the submodule entry,0.104,git/submodule,3,0.574
git/submodule listSubmodules returns the expected tag,0.145,git/submodule,3,0.574
git/submodule resetSubmodulePaths update submodule to original commit,0.282,git/submodule,3,0.574
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.1,gitignore,9,0.638
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.094,gitignore,9,0.638
gitignore saveGitIgnore applies rule correctly to repository,0.09,gitignore,9,0.638
gitignore appendIgnoreRule appends one rule,0.114,gitignore,9,0.638
gitignore appendIgnoreRule appends multiple rules,0.115,gitignore,9,0.638
git/branch tip returns unborn for new repository,0.029,git/branch,10,0.587
git/branch tip returns correct ref if checkout occurs,0.046,git/branch,10,0.587
git/branch tip returns detached for arbitrary checkout,0.047,git/branch,10,0.587
git/branch tip returns current branch when on a valid HEAD,0.075,git/branch,10,0.587
git/branch tip returns non-origin remote,0.077,git/branch,10,0.587
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.077,git/branch,10,0.587
git/branch getBranchesPointedAt in a local repo finds one branch name,0.038,git/branch,10,0.587
git/branch getBranchesPointedAt in a local repo finds no branch names,0.037,git/branch,10,0.587
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.037,git/branch,10,0.587
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.074,git/branch,10,0.587
git/rev-parse isGitRepository should return true for a repository,0.038,git/rev-parse,10,0.592
git/rev-parse isGitRepository should return false for a directory,0.038,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns false for default initialized repository,0.051,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.592
git/rev-parse isBareRepository returns false for empty directory,0.044,git/rev-parse,10,0.592
git/rev-parse isBareRepository throws error for missing directory,0.036,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.052,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.038,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.592
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.173,git/rev-parse,10,0.592
git/merge merge and is successful returns true,0.037,git/merge,7,0.56
git/merge merge and is a noop returns false,0.047,git/merge,7,0.56
git/merge getMergeBase returns the common ancestor of two branches,0.062,git/merge,7,0.56
git/remote getRemotes should return both remotes,0.044,git/remote,9,0.407
git/remote findDefaultRemote returns origin when multiple remotes found,0.05,git/remote,9,0.407
git/remote findDefaultRemote returns something when origin removed,0.057,git/remote,9,0.407
git-lfs isUsingLFS returns false for repository not using LFS,0.043,git-lfs,9,0.507
git-lfs isUsingLFS returns true if LFS is tracking a path,0.064,git-lfs,9,0.507
git/log getCommits loads history,0.062,git/log,7,0.525
git/log getCommits handles repository with HEAD file on disk,0.076,git/log,7,0.525
git/log getCommits handles repository with signed commit and log.showSignature set,0.094,git/log,7,0.525
git/log getChangedFiles loads the files changed in the commit,0.046,git/log,7,0.525
git/log getChangedFiles detects renames,0.08,git/log,7,0.525
git/log getChangedFiles detect copies,0.082,git/log,7,0.525
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.525
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.038,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.038,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.042,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.035,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.024,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile includes empty context lines,0.024,patch formatting,8,0.308
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.308
git/config config looks up config values,0.04,git/config,4,0.277
git/config config returns null for undefined values,0.046,git/config,4,0.277
git/config global config getGlobalConfigPath gets the config path,0.058,git/config,4,0.277
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,4,0.277
git/core error handling does not throw for errors that were expected,0.048,git/core,4,0.223
git/core error handling throws for errors that were not expected,0.045,git/core,4,0.223
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.223
git/core exit code handling throws for exit codes that were not expected,0.041,git/core,4,0.223
git/for-each-ref getBranches fetches branches using for-each-ref,0.058,git/for-each-ref,3,0.194
git/for-each-ref getBranches should return empty list for empty repo,0.058,git/for-each-ref,3,0.194
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.047,git/for-each-ref,3,0.194
AppStore can select a repository,0.133,AppStore,5,0.185
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.213,git/git-attributes,1,0.241
validatedRepositoryPath returns the path to the repository,0.197,validatedRepositoryPath,2,0.257
git/reset reset can hard reset a repository,0.069,git/reset,2,0.114
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.363,git/rebase,21,8.551
git/rebase detect conflicts status detects REBASE_HEAD,0.282,git/rebase,21,8.551
git/rebase detect conflicts has conflicted files in working directory,0.275,git/rebase,21,8.551
git/rebase detect conflicts is a detached HEAD state,0.294,git/rebase,21,8.551
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.301,git/rebase,21,8.551
git/rebase abort after conflicts found no longer has working directory changes,0.303,git/rebase,21,8.551
git/rebase abort after conflicts found returns to the feature branch,0.305,git/rebase,21,8.551
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.387,git/rebase,21,8.551
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.412,git/rebase,21,8.551
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.367,git/rebase,21,8.551
git/rebase continue after resolving conflicts returns success,0.425,git/rebase,21,8.551
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.42,git/rebase,21,8.551
git/rebase continue after resolving conflicts no longer has working directory changes,0.467,git/rebase,21,8.551
git/rebase continue after resolving conflicts returns to the feature branch,0.431,git/rebase,21,8.551
git/rebase continue after resolving conflicts branch is now a different ref,0.447,git/rebase,21,8.551
git/rebase continue with additional changes unrelated to conflicted files returns success,0.463,git/rebase,21,8.551
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.434,git/rebase,21,8.551
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.439,git/rebase,21,8.551
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.436,git/rebase,21,8.551
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.443,git/rebase,21,8.551
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.398,git/rebase,21,8.551
git/rebase can parse progress returns a value indicating conflicts were encountered,0.391,git/rebase,7,3.463
git/rebase can parse progress status detects REBASE_HEAD,0.374,git/rebase,7,3.463
git/rebase can parse progress is a detached HEAD state,0.386,git/rebase,7,3.463
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.696,git/rebase,7,3.463
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.785,git/rebase,7,3.463
git/rebase can parse progress for long rebase is a detached HEAD state,0.776,git/rebase,7,3.463
git/commit createCommit normal commits the given files,0.119,git/commit,21,4.299
git/commit createCommit normal commit does not strip commentary by default,0.101,git/commit,21,4.299
git/commit createCommit normal can commit for empty repository,0.133,git/commit,21,4.299
git/commit createCommit normal can commit renames,0.153,git/commit,21,4.299
git/commit createCommit partials can commit some lines from new file,0.168,git/commit,21,4.299
git/commit createCommit partials can commit second hunk from modified file,0.173,git/commit,21,4.299
git/commit createCommit partials can commit single delete from modified file,0.155,git/commit,21,4.299
git/commit createCommit partials can commit multiple hunks from modified file,0.176,git/commit,21,4.299
git/commit createCommit partials can commit some lines from deleted file,0.166,git/commit,21,4.299
git/commit createCommit partials can commit renames with modifications,0.181,git/commit,21,4.299
git/commit createCommit partials can commit renames with partially selected modifications,0.215,git/commit,21,4.299
git/commit createCommit with a merge conflict creates a merge commit,0.265,git/commit,21,4.299
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.232,git/commit,21,4.299
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.336,git/commit,21,4.299
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.318,git/commit,21,4.299
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.387,git/commit,21,4.299
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.401,git/commit,21,4.299
git/commit createMergeCommit with no changes throws an error,0.084,git/commit,21,4.299
git/commit index corner cases can commit when staged new file is then deleted,0.142,git/commit,21,4.299
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.163,git/commit,21,4.299
git/commit index corner cases file is deleted in index,0.174,git/commit,21,4.299
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.192,git/stash,14,2.611
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.259,git/stash,14,2.611
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.22,git/stash,14,2.611
GitStore loadCommitBatch includes HEAD when loading commits,0.321,GitStore,11,2.432
GitStore can discard changes from a repository,0.215,GitStore,11,2.432
GitStore can discard a renamed file,0.151,GitStore,11,2.432
GitStore undo first commit reports the repository is unborn,0.181,GitStore,11,2.432
GitStore undo first commit pre-fills the commit message,0.119,GitStore,11,2.432
GitStore undo first commit clears the undo commit dialog,0.201,GitStore,11,2.432
GitStore undo first commit has no staged files,0.192,GitStore,11,2.432
GitStore repository with HEAD file can discard modified change cleanly,0.142,GitStore,11,2.432
git/status getStatus with conflicted repo parses conflicted files with markers,0.281,git/status,12,1.974
git/status getStatus with conflicted repo parses conflicted files without markers,0.287,git/status,12,1.974
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.486,git/status,12,1.974
git/status getStatus with conflicted repo parses resolved files,0.283,git/status,12,1.974
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.161,git/status,12,1.974
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.131,git/status,12,1.974
git/status getStatus with unconflicted repo parses changed files,0.045,git/status,12,1.974
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.039,git/status,12,1.974
git/status getStatus with unconflicted repo reflects renames,0.085,git/status,12,1.974
git/status getStatus with unconflicted repo reflects copies,0.081,git/status,12,1.974
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.043,git/status,12,1.974
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.033,git/diff,19,1.486
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.046,git/diff,19,1.486
git/diff getBlobImage retrieves valid image for modified file,0.042,git/diff,19,1.486
git/diff getBlobImage retrieves valid images for deleted file,0.054,git/diff,19,1.486
git/diff imageDiff changes for images are set,0.075,git/diff,19,1.486
git/diff imageDiff changes for text are not set,0.065,git/diff,19,1.486
git/diff getWorkingDirectoryDiff counts lines for new file,0.064,git/diff,19,1.486
git/diff getWorkingDirectoryDiff counts lines for modified file,0.064,git/diff,19,1.486
git/diff getWorkingDirectoryDiff counts lines for staged file,0.065,git/diff,19,1.486
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.094,git/diff,19,1.486
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.123,git/diff,19,1.486
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.128,git/diff,19,1.486
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.107,git/diff,19,1.486
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.113,git/diff,19,1.486
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.486
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.051,git/diff,19,1.486
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.486
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.082,git/diff,19,1.486
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.095,git/diff,19,1.486
BranchPruner does nothing on non GitHub repositories,0.265,BranchPruner,6,1.496
BranchPruner prunes for GitHub repository,0.257,BranchPruner,6,1.496
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.177,BranchPruner,6,1.496
BranchPruner does not prune if there is no default branch,0.176,BranchPruner,6,1.496
BranchPruner does not prune reserved branches,0.231,BranchPruner,6,1.496
git/reflog getRecentBranches returns the recently checked out branches,0.125,git/reflog,6,0.89
git/reflog getRecentBranches works after renaming a branch,0.158,git/reflog,6,0.89
git/reflog getRecentBranches returns a limited number of branches,0.226,git/reflog,6,0.89
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.128,git/reflog,6,0.89
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.155,git/reflog,6,0.89
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.89
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.283,formatPatch,5,0.886
git/checkout can checkout a valid branch name in an existing repository,0.178,git/checkout,6,0.923
git/checkout can checkout a branch when it exists on multiple remotes,0.124,git/checkout,6,0.923
git/checkout will fail when an existing branch matches the remote branch,0.108,git/checkout,6,0.923
git/checkout with submodules cleans up an submodule that no longer exists,0.243,git/checkout,6,0.923
git/checkout with submodules updates a changed submodule reference,0.195,git/checkout,6,0.923
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.092,gitignore,9,0.579
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.087,gitignore,9,0.579
gitignore saveGitIgnore applies rule correctly to repository,0.087,gitignore,9,0.579
gitignore appendIgnoreRule appends one rule,0.095,gitignore,9,0.579
gitignore appendIgnoreRule appends multiple rules,0.095,gitignore,9,0.579
git/rev-parse isGitRepository should return true for a repository,0.038,git/rev-parse,10,0.59
git/rev-parse isGitRepository should return false for a directory,0.048,git/rev-parse,10,0.59
git/rev-parse isBareRepository returns false for default initialized repository,0.051,git/rev-parse,10,0.59
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.59
git/rev-parse isBareRepository returns false for empty directory,0.04,git/rev-parse,10,0.59
git/rev-parse isBareRepository throws error for missing directory,0.037,git/rev-parse,10,0.59
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.05,git/rev-parse,10,0.59
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.04,git/rev-parse,10,0.59
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.043,git/rev-parse,10,0.59
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.16,git/rev-parse,10,0.59
git/branch tip returns unborn for new repository,0.028,git/branch,10,0.566
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,10,0.566
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.566
git/branch tip returns current branch when on a valid HEAD,0.064,git/branch,10,0.566
git/branch tip returns non-origin remote,0.07,git/branch,10,0.566
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.069,git/branch,10,0.566
git/branch getBranchesPointedAt in a local repo finds one branch name,0.043,git/branch,10,0.566
git/branch getBranchesPointedAt in a local repo finds no branch names,0.038,git/branch,10,0.566
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.038,git/branch,10,0.566
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.073,git/branch,10,0.566
git/submodule listSubmodules returns the submodule entry,0.096,git/submodule,3,0.627
git/submodule listSubmodules returns the expected tag,0.155,git/submodule,3,0.627
git/submodule resetSubmodulePaths update submodule to original commit,0.333,git/submodule,3,0.627
git/merge merge and is successful returns true,0.029,git/merge,7,0.522
git/merge merge and is a noop returns false,0.046,git/merge,7,0.522
git/merge getMergeBase returns the common ancestor of two branches,0.056,git/merge,7,0.522
git/log getCommits loads history,0.049,git/log,7,0.48
git/log getCommits handles repository with HEAD file on disk,0.068,git/log,7,0.48
git/log getCommits handles repository with signed commit and log.showSignature set,0.083,git/log,7,0.48
git/log getChangedFiles loads the files changed in the commit,0.041,git/log,7,0.48
git/log getChangedFiles detects renames,0.067,git/log,7,0.48
git/log getChangedFiles detect copies,0.087,git/log,7,0.48
git/log getChangedFiles handles commit when HEAD exists on disk,0.044,git/log,7,0.48
git-lfs isUsingLFS returns false for repository not using LFS,0.046,git-lfs,9,0.494
git-lfs isUsingLFS returns true if LFS is tracking a path,0.065,git-lfs,9,0.494
git/remote getRemotes should return both remotes,0.048,git/remote,9,0.403
git/remote findDefaultRemote returns origin when multiple remotes found,0.051,git/remote,9,0.403
git/remote findDefaultRemote returns something when origin removed,0.056,git/remote,9,0.403
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.036,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.035,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.039,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.04,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.027,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile includes empty context lines,0.023,patch formatting,8,0.287
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.019,patch formatting,8,0.287
git/config config looks up config values,0.039,git/config,4,0.274
git/config config returns null for undefined values,0.043,git/config,4,0.274
git/config global config getGlobalConfigPath gets the config path,0.061,git/config,4,0.274
git/config global config setGlobalConfigValue will replace all entries for a global value,0.091,git/config,4,0.274
validatedRepositoryPath returns the path to the repository,0.043,validatedRepositoryPath,2,0.101
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.015,git/git-attributes,1,0.043
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.222
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.222
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.222
git/core exit code handling throws for exit codes that were not expected,0.045,git/core,4,0.222
git/for-each-ref getBranches fetches branches using for-each-ref,0.069,git/for-each-ref,3,0.206
git/for-each-ref getBranches should return empty list for empty repo,0.061,git/for-each-ref,3,0.206
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.048,git/for-each-ref,3,0.206
AppStore can select a repository,0.132,AppStore,5,0.184
git/reset reset can hard reset a repository,0.416,git/reset,2,0.461
git/rebase detect conflicts returns a value indicating conflicts were encountered,0.39,git/rebase,21,8.823
git/rebase detect conflicts status detects REBASE_HEAD,0.293,git/rebase,21,8.823
git/rebase detect conflicts has conflicted files in working directory,0.299,git/rebase,21,8.823
git/rebase detect conflicts is a detached HEAD state,0.312,git/rebase,21,8.823
git/rebase abort after conflicts found REBASE_HEAD is no longer found,0.349,git/rebase,21,8.823
git/rebase abort after conflicts found no longer has working directory changes,0.35,git/rebase,21,8.823
git/rebase abort after conflicts found returns to the feature branch,0.352,git/rebase,21,8.823
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete,0.388,git/rebase,21,8.823
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found,0.401,git/rebase,21,8.823
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory,0.369,git/rebase,21,8.823
git/rebase continue after resolving conflicts returns success,0.425,git/rebase,21,8.823
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found,0.426,git/rebase,21,8.823
git/rebase continue after resolving conflicts no longer has working directory changes,0.435,git/rebase,21,8.823
git/rebase continue after resolving conflicts returns to the feature branch,0.425,git/rebase,21,8.823
git/rebase continue after resolving conflicts branch is now a different ref,0.471,git/rebase,21,8.823
git/rebase continue with additional changes unrelated to conflicted files returns success,0.442,git/rebase,21,8.823
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase,0.456,git/rebase,21,8.823
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents,0.454,git/rebase,21,8.823
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch,0.469,git/rebase,21,8.823
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref,0.445,git/rebase,21,8.823
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing,0.404,git/rebase,21,8.823
git/commit createCommit normal commits the given files,0.108,git/commit,21,3.88
git/commit createCommit normal commit does not strip commentary by default,0.088,git/commit,21,3.88
git/commit createCommit normal can commit for empty repository,0.116,git/commit,21,3.88
git/commit createCommit normal can commit renames,0.141,git/commit,21,3.88
git/commit createCommit partials can commit some lines from new file,0.141,git/commit,21,3.88
git/commit createCommit partials can commit second hunk from modified file,0.164,git/commit,21,3.88
git/commit createCommit partials can commit single delete from modified file,0.15,git/commit,21,3.88
git/commit createCommit partials can commit multiple hunks from modified file,0.153,git/commit,21,3.88
git/commit createCommit partials can commit some lines from deleted file,0.147,git/commit,21,3.88
git/commit createCommit partials can commit renames with modifications,0.166,git/commit,21,3.88
git/commit createCommit partials can commit renames with partially selected modifications,0.193,git/commit,21,3.88
git/commit createCommit with a merge conflict creates a merge commit,0.234,git/commit,21,3.88
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit,0.21,git/commit,21,3.88
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits,0.292,git/commit,21,3.88
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits,0.28,git/commit,21,3.88
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits,0.355,git/commit,21,3.88
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits,0.354,git/commit,21,3.88
git/commit createMergeCommit with no changes throws an error,0.08,git/commit,21,3.88
git/commit index corner cases can commit when staged new file is then deleted,0.133,git/commit,21,3.88
git/commit index corner cases can commit when a delete is staged and the untracked file exists,0.154,git/commit,21,3.88
git/commit index corner cases file is deleted in index,0.162,git/commit,21,3.88
git/rebase can parse progress returns a value indicating conflicts were encountered,0.443,git/rebase,7,4.036
git/rebase can parse progress status detects REBASE_HEAD,0.447,git/rebase,7,4.036
git/rebase can parse progress is a detached HEAD state,0.427,git/rebase,7,4.036
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered,0.968,git/rebase,7,4.036
git/rebase can parse progress for long rebase status detects REBASE_HEAD,0.838,git/rebase,7,4.036
git/rebase can parse progress for long rebase is a detached HEAD state,0.864,git/rebase,7,4.036
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory,0.164,git/stash,14,2.56
git/stash popStashEntry without any conflicts restores changes back to the working directory,0.243,git/stash,14,2.56
git/stash popStashEntry when there are unresolvable conflicts throws an error,0.192,git/stash,14,2.56
GitStore loadCommitBatch includes HEAD when loading commits,0.34,GitStore,11,2.483
GitStore can discard changes from a repository,0.178,GitStore,11,2.483
GitStore can discard a renamed file,0.145,GitStore,11,2.483
GitStore undo first commit reports the repository is unborn,0.179,GitStore,11,2.483
GitStore undo first commit pre-fills the commit message,0.121,GitStore,11,2.483
GitStore undo first commit clears the undo commit dialog,0.212,GitStore,11,2.483
GitStore undo first commit has no staged files,0.212,GitStore,11,2.483
GitStore repository with HEAD file can discard modified change cleanly,0.111,GitStore,11,2.483
git/status getStatus with conflicted repo parses conflicted files with markers,0.293,git/status,12,2.059
git/status getStatus with conflicted repo parses conflicted files without markers,0.313,git/status,12,2.059
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash,0.52,git/status,12,2.059
git/status getStatus with conflicted repo parses resolved files,0.302,git/status,12,2.059
git/status getStatus with conflicted images repo parses conflicted image file on merge,0.164,git/status,12,2.059
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing,0.114,git/status,12,2.059
git/status getStatus with unconflicted repo parses changed files,0.046,git/status,12,2.059
git/status getStatus with unconflicted repo returns an empty array when there are no changes,0.051,git/status,12,2.059
git/status getStatus with unconflicted repo reflects renames,0.082,git/status,12,2.059
git/status getStatus with unconflicted repo reflects copies,0.08,git/status,12,2.059
git/status getStatus with unconflicted repo returns null for directory without a .git directory,0.042,git/status,12,2.059
BranchPruner does nothing on non GitHub repositories,0.185,BranchPruner,6,1.427
BranchPruner prunes for GitHub repository,0.234,BranchPruner,6,1.427
BranchPruner does not prune if the last prune date is less than 24 hours ago,0.204,BranchPruner,6,1.427
BranchPruner does not prune if there is no default branch,0.174,BranchPruner,6,1.427
BranchPruner does not prune reserved branches,0.242,BranchPruner,6,1.427
git/diff getWorkingDirectoryImage retrieves valid image for new file,0.035,git/diff,19,1.612
git/diff getWorkingDirectoryImage retrieves valid images for modified file,0.044,git/diff,19,1.612
git/diff getBlobImage retrieves valid image for modified file,0.043,git/diff,19,1.612
git/diff getBlobImage retrieves valid images for deleted file,0.055,git/diff,19,1.612
git/diff imageDiff changes for images are set,0.152,git/diff,19,1.612
git/diff imageDiff changes for text are not set,0.081,git/diff,19,1.612
git/diff getWorkingDirectoryDiff counts lines for new file,0.079,git/diff,19,1.612
git/diff getWorkingDirectoryDiff counts lines for modified file,0.068,git/diff,19,1.612
git/diff getWorkingDirectoryDiff counts lines for staged file,0.068,git/diff,19,1.612
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file,0.097,git/diff,19,1.612
git/diff getWorkingDirectoryDiff is empty for a renamed file,0.127,git/diff,19,1.612
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file,0.131,git/diff,19,1.612
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state,0.123,git/diff,19,1.612
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF,0.109,git/diff,19,1.612
git/diff getWorkingDirectoryDiff/unicode displays unicode characters,0.073,git/diff,19,1.612
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist,0.05,git/diff,19,1.612
git/diff getBinaryPaths in repo with text only files returns an empty array,0.065,git/diff,19,1.612
git/diff getBinaryPaths in repo with image changes returns all changed image files,0.077,git/diff,19,1.612
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files,0.091,git/diff,19,1.612
git/checkout can checkout a valid branch name in an existing repository,0.104,git/checkout,6,0.816
git/checkout can checkout a branch when it exists on multiple remotes,0.103,git/checkout,6,0.816
git/checkout will fail when an existing branch matches the remote branch,0.094,git/checkout,6,0.816
git/checkout with submodules cleans up an submodule that no longer exists,0.25,git/checkout,6,0.816
git/checkout with submodules updates a changed submodule reference,0.191,git/checkout,6,0.816
git/reflog getRecentBranches returns the recently checked out branches,0.127,git/reflog,6,0.928
git/reflog getRecentBranches works after renaming a branch,0.174,git/reflog,6,0.928
git/reflog getRecentBranches returns a limited number of branches,0.225,git/reflog,6,0.928
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date,0.14,git/reflog,6,0.928
git/reflog getBranchCheckouts returns all branches checked out after a specific date,0.163,git/reflog,6,0.928
git/reflog getBranchCheckouts returns empty when current branch is orphaned,0.053,git/reflog,6,0.928
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD,0.286,formatPatch,5,0.897
git/submodule listSubmodules returns the submodule entry,0.094,git/submodule,3,0.633
git/submodule listSubmodules returns the expected tag,0.146,git/submodule,3,0.633
git/submodule resetSubmodulePaths update submodule to original commit,0.351,git/submodule,3,0.633
git/rev-parse isGitRepository should return true for a repository,0.046,git/rev-parse,10,0.587
git/rev-parse isGitRepository should return false for a directory,0.041,git/rev-parse,10,0.587
git/rev-parse isBareRepository returns false for default initialized repository,0.045,git/rev-parse,10,0.587
git/rev-parse isBareRepository returns true for initialized bare repository,0.051,git/rev-parse,10,0.587
git/rev-parse isBareRepository returns false for empty directory,0.041,git/rev-parse,10,0.587
git/rev-parse isBareRepository throws error for missing directory,0.038,git/rev-parse,10,0.587
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory,0.049,git/rev-parse,10,0.587
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory,0.04,git/rev-parse,10,0.587
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder,0.041,git/rev-parse,10,0.587
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules,0.164,git/rev-parse,10,0.587
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file",0.099,gitignore,9,0.644
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file",0.101,gitignore,9,0.644
gitignore saveGitIgnore applies rule correctly to repository,0.095,gitignore,9,0.644
gitignore appendIgnoreRule appends one rule,0.111,gitignore,9,0.644
gitignore appendIgnoreRule appends multiple rules,0.112,gitignore,9,0.644
git/branch tip returns unborn for new repository,0.035,git/branch,10,0.598
git/branch tip returns correct ref if checkout occurs,0.047,git/branch,10,0.598
git/branch tip returns detached for arbitrary checkout,0.045,git/branch,10,0.598
git/branch tip returns current branch when on a valid HEAD,0.069,git/branch,10,0.598
git/branch tip returns non-origin remote,0.072,git/branch,10,0.598
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix,0.075,git/branch,10,0.598
git/branch getBranchesPointedAt in a local repo finds one branch name,0.047,git/branch,10,0.598
git/branch getBranchesPointedAt in a local repo finds no branch names,0.039,git/branch,10,0.598
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish,0.041,git/branch,10,0.598
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names,0.078,git/branch,10,0.598
git/merge merge and is successful returns true,0.036,git/merge,7,0.549
git/merge merge and is a noop returns false,0.048,git/merge,7,0.549
git/merge getMergeBase returns the common ancestor of two branches,0.058,git/merge,7,0.549
git-lfs isUsingLFS returns false for repository not using LFS,0.051,git-lfs,9,0.497
git-lfs isUsingLFS returns true if LFS is tracking a path,0.065,git-lfs,9,0.497
git/log getCommits loads history,0.051,git/log,7,0.48
git/log getCommits handles repository with HEAD file on disk,0.068,git/log,7,0.48
git/log getCommits handles repository with signed commit and log.showSignature set,0.086,git/log,7,0.48
git/log getChangedFiles loads the files changed in the commit,0.044,git/log,7,0.48
git/log getChangedFiles detects renames,0.072,git/log,7,0.48
git/log getChangedFiles detect copies,0.076,git/log,7,0.48
git/log getChangedFiles handles commit when HEAD exists on disk,0.04,git/log,7,0.48
git/reset reset can hard reset a repository,0.068,git/reset,2,0.11
git/remote getRemotes should return both remotes,0.049,git/remote,9,0.428
git/remote findDefaultRemote returns origin when multiple remotes found,0.056,git/remote,9,0.428
git/remote findDefaultRemote returns something when origin removed,0.058,git/remote,9,0.428
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected,0.04,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected,0.041,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected,0.04,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't,0.041,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context,0.028,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary,0.023,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile includes empty context lines,0.022,patch formatting,8,0.301
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved,0.021,patch formatting,8,0.301
git/config config looks up config values,0.04,git/config,4,0.278
git/config config returns null for undefined values,0.044,git/config,4,0.278
git/config global config getGlobalConfigPath gets the config path,0.059,git/config,4,0.278
git/config global config setGlobalConfigValue will replace all entries for a global value,0.092,git/config,4,0.278
git/core error handling does not throw for errors that were expected,0.044,git/core,4,0.221
git/core error handling throws for errors that were not expected,0.046,git/core,4,0.221
git/core exit code handling does not throw for exit codes that were expected,0.044,git/core,4,0.221
git/core exit code handling throws for exit codes that were not expected,0.044,git/core,4,0.221
git/for-each-ref getBranches fetches branches using for-each-ref,0.067,git/for-each-ref,3,0.205
git/for-each-ref getBranches should return empty list for empty repo,0.06,git/for-each-ref,3,0.205
git/for-each-ref getBranches should return empty list for directory without a .git directory,0.046,git/for-each-ref,3,0.205
AppStore can select a repository,0.136,AppStore,5,0.188
validatedRepositoryPath returns the path to the repository,0.402,validatedRepositoryPath,2,0.46
git/git-attributes writeGitAttributes initializes a .gitattributes file,0.022,git/git-attributes,1,0.05
